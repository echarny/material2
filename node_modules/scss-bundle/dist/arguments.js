"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const Contracts = require("./contracts");
const verbosityValues = [];
for (const key in Contracts.Verbosity) {
    if (Number(key) % 1 !== 0) {
        verbosityValues.push(key);
    }
}
const DEDUPE_KEY = "dedupe";
exports.argv = yargs
    .help("h", "Show help.")
    .alias("h", "help")
    .version()
    .alias("v", "version")
    .config("config")
    .alias("c", "config")
    .options("e", {
    alias: "entry",
    describe: "Entry file.",
    type: "string"
})
    .options("d", {
    alias: "dest",
    describe: "Bundled file destination.",
    type: "string"
})
    .options("p", {
    alias: "project",
    describe: "Project locatation, where `node_modules` are located.",
    type: "string",
    default: "."
})
    .options("verbosity", {
    describe: "Verbosity of output.",
    choices: verbosityValues,
    default: Contracts.Verbosity[Contracts.Verbosity.Verbose]
})
    .options("includePaths", {
    describe: "Include paths for resolving imports.",
    type: "array"
})
    .options("ignoredImports", {
    describe: "Ignore resolving import content by matching a regular expression.",
    type: "array"
})
    .array(DEDUPE_KEY)
    .default(DEDUPE_KEY, [], "[]")
    .usage("Usage: scss-bundle [options]")
    .string(["c", "e", "d"])
    .argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJndW1lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FyZ3VtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErQjtBQUUvQix5Q0FBeUM7QUFFekMsTUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFDO0FBQ3JDLEtBQUssTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRTtJQUNuQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDN0I7Q0FDSjtBQUVELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQztBQUVmLFFBQUEsSUFBSSxHQUFHLEtBQUs7S0FDcEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUM7S0FDdkIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsT0FBTyxFQUFFO0tBQ1QsS0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7S0FDckIsTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUNoQixLQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztLQUNwQixPQUFPLENBQUMsR0FBRyxFQUFFO0lBQ1YsS0FBSyxFQUFFLE9BQU87SUFDZCxRQUFRLEVBQUUsYUFBYTtJQUN2QixJQUFJLEVBQUUsUUFBUTtDQUNqQixDQUFDO0tBQ0QsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUNWLEtBQUssRUFBRSxNQUFNO0lBQ2IsUUFBUSxFQUFFLDJCQUEyQjtJQUNyQyxJQUFJLEVBQUUsUUFBUTtDQUNqQixDQUFDO0tBQ0QsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUNWLEtBQUssRUFBRSxTQUFTO0lBQ2hCLFFBQVEsRUFBRSx1REFBdUQ7SUFDakUsSUFBSSxFQUFFLFFBQVE7SUFDZCxPQUFPLEVBQUUsR0FBRztDQUNmLENBQUM7S0FDRCxPQUFPLENBQUMsV0FBVyxFQUFFO0lBQ2xCLFFBQVEsRUFBRSxzQkFBc0I7SUFDaEMsT0FBTyxFQUFFLGVBQWU7SUFDeEIsT0FBTyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7Q0FDNUQsQ0FBQztLQUNELE9BQU8sQ0FBQyxjQUFjLEVBQUU7SUFDckIsUUFBUSxFQUFFLHNDQUFzQztJQUNoRCxJQUFJLEVBQUUsT0FBTztDQUNoQixDQUFDO0tBQ0QsT0FBTyxDQUFDLGdCQUFnQixFQUFFO0lBQ3ZCLFFBQVEsRUFBRSxtRUFBbUU7SUFDN0UsSUFBSSxFQUFFLE9BQU87Q0FDaEIsQ0FBQztLQUNELEtBQUssQ0FBQyxVQUFVLENBQUM7S0FDakIsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDO0tBQzdCLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQztLQUNyQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZCLElBQWlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB5YXJncyBmcm9tIFwieWFyZ3NcIjtcclxuXHJcbmltcG9ydCAqIGFzIENvbnRyYWN0cyBmcm9tIFwiLi9jb250cmFjdHNcIjtcclxuXHJcbmNvbnN0IHZlcmJvc2l0eVZhbHVlczogc3RyaW5nW10gPSBbXTtcclxuZm9yIChjb25zdCBrZXkgaW4gQ29udHJhY3RzLlZlcmJvc2l0eSkge1xyXG4gICAgaWYgKE51bWJlcihrZXkpICUgMSAhPT0gMCkge1xyXG4gICAgICAgIHZlcmJvc2l0eVZhbHVlcy5wdXNoKGtleSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IERFRFVQRV9LRVkgPSBcImRlZHVwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFyZ3YgPSB5YXJnc1xyXG4gICAgLmhlbHAoXCJoXCIsIFwiU2hvdyBoZWxwLlwiKVxyXG4gICAgLmFsaWFzKFwiaFwiLCBcImhlbHBcIilcclxuICAgIC52ZXJzaW9uKClcclxuICAgIC5hbGlhcyhcInZcIiwgXCJ2ZXJzaW9uXCIpXHJcbiAgICAuY29uZmlnKFwiY29uZmlnXCIpXHJcbiAgICAuYWxpYXMoXCJjXCIsIFwiY29uZmlnXCIpXHJcbiAgICAub3B0aW9ucyhcImVcIiwge1xyXG4gICAgICAgIGFsaWFzOiBcImVudHJ5XCIsXHJcbiAgICAgICAgZGVzY3JpYmU6IFwiRW50cnkgZmlsZS5cIixcclxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICB9KVxyXG4gICAgLm9wdGlvbnMoXCJkXCIsIHtcclxuICAgICAgICBhbGlhczogXCJkZXN0XCIsXHJcbiAgICAgICAgZGVzY3JpYmU6IFwiQnVuZGxlZCBmaWxlIGRlc3RpbmF0aW9uLlwiLFxyXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgIH0pXHJcbiAgICAub3B0aW9ucyhcInBcIiwge1xyXG4gICAgICAgIGFsaWFzOiBcInByb2plY3RcIixcclxuICAgICAgICBkZXNjcmliZTogXCJQcm9qZWN0IGxvY2F0YXRpb24sIHdoZXJlIGBub2RlX21vZHVsZXNgIGFyZSBsb2NhdGVkLlwiLFxyXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgZGVmYXVsdDogXCIuXCJcclxuICAgIH0pXHJcbiAgICAub3B0aW9ucyhcInZlcmJvc2l0eVwiLCB7XHJcbiAgICAgICAgZGVzY3JpYmU6IFwiVmVyYm9zaXR5IG9mIG91dHB1dC5cIixcclxuICAgICAgICBjaG9pY2VzOiB2ZXJib3NpdHlWYWx1ZXMsXHJcbiAgICAgICAgZGVmYXVsdDogQ29udHJhY3RzLlZlcmJvc2l0eVtDb250cmFjdHMuVmVyYm9zaXR5LlZlcmJvc2VdXHJcbiAgICB9KVxyXG4gICAgLm9wdGlvbnMoXCJpbmNsdWRlUGF0aHNcIiwge1xyXG4gICAgICAgIGRlc2NyaWJlOiBcIkluY2x1ZGUgcGF0aHMgZm9yIHJlc29sdmluZyBpbXBvcnRzLlwiLFxyXG4gICAgICAgIHR5cGU6IFwiYXJyYXlcIlxyXG4gICAgfSlcclxuICAgIC5vcHRpb25zKFwiaWdub3JlZEltcG9ydHNcIiwge1xyXG4gICAgICAgIGRlc2NyaWJlOiBcIklnbm9yZSByZXNvbHZpbmcgaW1wb3J0IGNvbnRlbnQgYnkgbWF0Y2hpbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXCIsXHJcbiAgICAgICAgdHlwZTogXCJhcnJheVwiXHJcbiAgICB9KVxyXG4gICAgLmFycmF5KERFRFVQRV9LRVkpXHJcbiAgICAuZGVmYXVsdChERURVUEVfS0VZLCBbXSwgXCJbXVwiKVxyXG4gICAgLnVzYWdlKFwiVXNhZ2U6IHNjc3MtYnVuZGxlIFtvcHRpb25zXVwiKVxyXG4gICAgLnN0cmluZyhbXCJjXCIsIFwiZVwiLCBcImRcIl0pXHJcbiAgICAuYXJndiBhcyBDb250cmFjdHMuQXJndW1lbnRzVmFsdWVzO1xyXG4iXX0=