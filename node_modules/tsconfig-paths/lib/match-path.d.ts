export declare type MatchPath = (absoluteSourceFileName: string, requestedModule: string, readPackageJson?: (packageJsonPath: string) => any, fileExists?: (name: string) => boolean, extensions?: ReadonlyArray<string>) => string | undefined;
/**
 * Creates a function that can resolve paths according to tsconfig paths property.
 * @param tsConfigPath The paths where tsconfig.json is located.
 * @param baseUrl The baseUrl specified in tsconfig.
 * @param paths The paths specified in tsconfig.
 */
export declare function createMatchPath(absoluteBaseUrl: string, paths: {
    [key: string]: Array<string>;
}): MatchPath;
/**
 * Finds a path from tsconfig that matches a module load request.
 * @param absolutePathMappings The paths to try as specified in tsconfig but resolved to absolute form.
 * @param absoluteSourceFileName Absolute path to the file that requested the module.
 * @param requestedModule The required module name.
 * @param readPackageJson Function that returns parsed package.json if exists or undefined(useful for testing).
 * @param fileExists Function that checks for existance of a file (useful for testing).
 * @param extensions File extensions to probe for (useful for testing).
 * @returns the found path, or undefined if no path was found.
 */
export declare function matchFromAbsolutePaths(absolutePathMappings: {
    [key: string]: Array<string>;
}, absoluteSourceFileName: string, requestedModule: string, readPackageJson?: (packageJsonPath: string) => any, fileExists?: Function, extensions?: Array<string>): string | undefined;
