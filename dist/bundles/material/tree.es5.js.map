{"version":3,"file":"tree.es5.js","sources":["../../../src/lib/tree/data-source/nested-data-source.ts","../../../src/lib/tree/data-source/flat-data-source.ts","../../../src/lib/tree/tree-module.ts","../../../src/lib/tree/toggle.ts","../../../src/lib/tree/tree.ts","../../../src/lib/tree/padding.ts","../../../src/lib/tree/node.ts","../../../src/lib/tree/outlet.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n */\r\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\r\n  _data = new BehaviorSubject<T[]>([]);\r\n\r\n  /**\r\n   * Data for the nested tree\r\n   */\r\n  get data() { return this._data.value; }\r\n  set data(value: T[]) { this._data.next(value); }\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\r\n    return merge(...[collectionViewer.viewChange, this._data])\r\n      .pipe(map(() => {\r\n        return this.data;\r\n      }));\r\n  }\r\n\r\n  disconnect() {\r\n    // no op\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\r\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\r\nimport {map, take} from 'rxjs/operators';\r\n\r\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n */\r\nexport class MatTreeFlattener<T, F> {\r\n\r\n  constructor(public transformFunction: (node: T, level: number) => F,\r\n              public getLevel: (node: F) => number,\r\n              public isExpandable: (node: F) => boolean,\r\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\r\n\r\n  _flattenNode(node: T, level: number,\r\n               resultNodes: F[], parentMap: boolean[]): F[] {\r\n    const flatNode = this.transformFunction(node, level);\r\n    resultNodes.push(flatNode);\r\n\r\n    if (this.isExpandable(flatNode)) {\r\n      const childrenNodes = this.getChildren(node);\r\n      if (Array.isArray(childrenNodes)) {\r\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\r\n      } else {\r\n        childrenNodes.pipe(take(1)).subscribe(children => {\r\n          this._flattenChildren(children, level, resultNodes, parentMap);\r\n        });\r\n      }\r\n    }\r\n    return resultNodes;\r\n  }\r\n\r\n  _flattenChildren(children: T[], level: number,\r\n                   resultNodes: F[], parentMap: boolean[]): void {\r\n    children.forEach((child, index) => {\r\n      let childParentMap: boolean[] = parentMap.slice();\r\n      childParentMap.push(index != children.length - 1);\r\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Flatten a list of node type T to flattened version of node F.\r\n   * Please note that type T may be nested, and the length of `structuredData` may be different\r\n   * from that of returned list `F[]`.\r\n   */\r\n  flattenNodes(structuredData: T[]): F[] {\r\n    let resultNodes: F[] = [];\r\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\r\n    return resultNodes;\r\n  }\r\n\r\n  /**\r\n   * Expand flattened node with current expansion status.\r\n   * The returned list may have different length.\r\n   */\r\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\r\n    let results: F[] = [];\r\n    let currentExpand: boolean[] = [];\r\n    currentExpand[0] = true;\r\n\r\n    nodes.forEach(node => {\r\n      let expand = true;\r\n      for (let i = 0; i <= this.getLevel(node); i++) {\r\n        expand = expand && currentExpand[i];\r\n      }\r\n      if (expand) {\r\n        results.push(node);\r\n      }\r\n      if (this.isExpandable(node)) {\r\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\r\n      }\r\n    });\r\n    return results;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n */\r\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\r\n  _flattenedData = new BehaviorSubject<F[]>([]);\r\n\r\n  _expandedData = new BehaviorSubject<F[]>([]);\r\n\r\n  _data: BehaviorSubject<T[]>;\r\n  get data() { return this._data.value; }\r\n  set data(value: T[]) {\r\n    this._data.next(value);\r\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\r\n    this.treeControl.dataNodes = this._flattenedData.value;\r\n  }\r\n\r\n  constructor(private treeControl: FlatTreeControl<F>,\r\n              private treeFlattener: MatTreeFlattener<T, F>,\r\n              initialData: T[] = []) {\r\n    super();\r\n    this._data = new BehaviorSubject<T[]>(initialData);\r\n  }\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\r\n    const changes = [\r\n      collectionViewer.viewChange,\r\n      this.treeControl.expansionModel.onChange!,\r\n      this._flattenedData\r\n    ];\r\n    return merge(...changes).pipe(map(() => {\r\n      this._expandedData.next(\r\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\r\n      return this._expandedData.value;\r\n    }));\r\n  }\r\n\r\n  disconnect() {\r\n    // no op\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\r\nimport {MatTree} from './tree';\r\nimport {MatTreeNodeToggle} from './toggle';\r\nimport {MatTreeNodeOutlet} from './outlet';\r\nimport {MatTreeNodePadding} from './padding';\r\n\r\nconst MAT_TREE_DIRECTIVES = [\r\n  MatNestedTreeNode,\r\n  MatTreeNodeDef,\r\n  MatTreeNodePadding,\r\n  MatTreeNodeToggle,\r\n  MatTree,\r\n  MatTreeNode,\r\n  MatTreeNodeOutlet\r\n];\r\n\r\n@NgModule({\r\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\r\n  exports: MAT_TREE_DIRECTIVES,\r\n  declarations: MAT_TREE_DIRECTIVES,\r\n})\r\nexport class MatTreeModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\nimport {CdkTreeNodeToggle, CdkTree, CdkTreeNode} from '@angular/cdk/tree';\r\n\r\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodeToggle]',\r\n  host: {\r\n    '(click)': '_toggle($event)',\r\n  },\r\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\r\n})\r\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\r\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\r\n\r\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\r\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\r\n  // fixed bug.\r\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\r\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\r\n  constructor(_tree: CdkTree<T>, _treeNode: CdkTreeNode<T>) {\r\n    super(_tree, _treeNode);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  IterableDiffers,\r\n} from '@angular/core';\r\nimport {CdkTree} from '@angular/cdk/tree';\r\nimport {MatTreeNodeOutlet} from './outlet';\r\n\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tree',\r\n  exportAs: 'matTree',\r\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\r\n  host: {\r\n    'class': 'mat-tree',\r\n    'role': 'tree',\r\n  },\r\n  styleUrls: ['tree.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [{provide: CdkTree, useExisting: MatTree}]\r\n})\r\nexport class MatTree<T> extends CdkTree<T> {\r\n  // Outlets within the tree's template where the dataNodes will be inserted.\r\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\r\n\r\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\r\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\r\n  // fixed bug.\r\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\r\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\r\n  constructor(_differs: IterableDiffers, _changeDetectorRef: ChangeDetectorRef) {\r\n    super(_differs, _changeDetectorRef);\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {CdkTreeNodePadding, CdkTreeNode, CdkTree} from '@angular/cdk/tree';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {Directive, Input, Optional, Renderer2, ElementRef} from '@angular/core';\r\n\r\n\r\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodePadding]',\r\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\r\n})\r\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\r\n\r\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\r\n  @Input('matTreeNodePadding') level: number;\r\n\r\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\r\n  @Input('matTreeNodePaddingIndent') indent: number;\r\n\r\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\r\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\r\n  // fixed bug.\r\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\r\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\r\n  constructor(_treeNode: CdkTreeNode<T>,\r\n              _tree: CdkTree<T>,\r\n              _renderer: Renderer2,\r\n              _element: ElementRef,\r\n              @Optional() _dir: Directionality) {\r\n      super(_treeNode, _tree, _renderer, _element, _dir);\r\n    }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  CdkNestedTreeNode,\r\n  CdkTree,\r\n  CdkTreeNode,\r\n  CdkTreeNodeDef,\r\n} from '@angular/cdk/tree';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\r\nimport {MatTreeNodeOutlet} from './outlet';\r\n\r\n\r\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\r\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\r\n\r\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n */\r\n@Directive({\r\n  selector: 'mat-tree-node',\r\n  exportAs: 'matTreeNode',\r\n  inputs: ['disabled', 'tabIndex'],\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n    '[attr.role]': 'role',\r\n    'class': 'mat-tree-node'\r\n  },\r\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\r\n})\r\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\r\n    implements CanDisable, HasTabIndex {\r\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              protected _tree: CdkTree<T>,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n    super(_elementRef, _tree);\r\n\r\n    this.tabIndex = Number(tabIndex) || 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodeDef]',\r\n  inputs: [\r\n    'when: matTreeNodeDefWhen'\r\n  ],\r\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\r\n})\r\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\r\n  @Input('matTreeNode') data: T;\r\n\r\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\r\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\r\n  // fixed bug.\r\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\r\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\r\n  constructor(template: TemplateRef<any>) {\r\n    super(template);\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n */\r\n@Directive({\r\n  selector: 'mat-nested-tree-node',\r\n  exportAs: 'matNestedTreeNode',\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.role]': 'role',\r\n    'class': 'mat-nested-tree-node',\r\n  },\r\n  inputs: ['disabled', 'tabIndex'],\r\n  providers: [\r\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\r\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\r\n  ]\r\n})\r\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\r\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\r\n\r\n  @Input('matNestedTreeNode') node: T;\r\n\r\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              protected _tree: CdkTree<T>,\r\n              protected _differs: IterableDiffers,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n    super(_elementRef, _tree, _differs);\r\n\r\n    this.tabIndex = Number(tabIndex) || 0;\r\n  }\r\n\r\n  // This is a workaround for https://github.com/angular/angular/issues/23091\r\n  // In aot mode, the lifecycle hooks from parent class are not called.\r\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\r\n  ngAfterContentInit() {\r\n    super.ngAfterContentInit();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\r\nimport {\r\n  Directive,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\n\r\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodeOutlet]'\r\n})\r\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\r\n  constructor(public viewContainer: ViewContainerRef) {}\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}