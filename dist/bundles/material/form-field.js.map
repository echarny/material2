{"version":3,"file":"form-field.js","sources":["../../../src/lib/form-field/form-field-module.ts","../../../src/lib/form-field/form-field.ts","../../../src/lib/form-field/suffix.ts","../../../src/lib/form-field/prefix.ts","../../../src/lib/form-field/placeholder.ts","../../../src/lib/form-field/label.ts","../../../src/lib/form-field/hint.ts","../../../src/lib/form-field/form-field-errors.ts","../../../src/lib/form-field/form-field-control.ts","../../../src/lib/form-field/form-field-animations.ts","../../../src/lib/form-field/error.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {MatError} from './error';\r\nimport {MatFormField} from './form-field';\r\nimport {MatHint} from './hint';\r\nimport {MatLabel} from './label';\r\nimport {MatPlaceholder} from './placeholder';\r\nimport {MatPrefix} from './prefix';\r\nimport {MatSuffix} from './suffix';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MatError,\r\n    MatFormField,\r\n    MatHint,\r\n    MatLabel,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ObserversModule,\r\n  ],\r\n  exports: [\r\n    MatError,\r\n    MatFormField,\r\n    MatHint,\r\n    MatLabel,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n  ],\r\n})\r\nexport class MatFormFieldModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  Optional,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  FloatLabelType,\r\n  LabelOptions,\r\n  MAT_LABEL_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n} from '@angular/material/core';\r\nimport {EMPTY, fromEvent, merge} from 'rxjs';\r\nimport {startWith, take} from 'rxjs/operators';\r\nimport {MatError} from './error';\r\nimport {matFormFieldAnimations} from './form-field-animations';\r\nimport {MatFormFieldControl} from './form-field-control';\r\nimport {\r\n  getMatFormFieldDuplicatedHintError,\r\n  getMatFormFieldMissingControlError,\r\n  getMatFormFieldPlaceholderConflictError,\r\n} from './form-field-errors';\r\nimport {MatHint} from './hint';\r\nimport {MatLabel} from './label';\r\nimport {MatPlaceholder} from './placeholder';\r\nimport {MatPrefix} from './prefix';\r\nimport {MatSuffix} from './suffix';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\nlet nextUniqueId = 0;\r\nconst floatingLabelScale = 0.75;\r\nconst outlineGapPadding = 5;\r\n\r\n\r\n/**\r\n * Boilerplate for applying mixins to MatFormField.\r\n * @docs-private\r\n */\r\nexport class MatFormFieldBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\n/**\r\n * Base class to which we're applying the form field mixins.\r\n * @docs-private\r\n */\r\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\r\n\r\n/** Possible appearance styles for the form field. */\r\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\r\n\r\n/**\r\n * Represents the default options form the form field that can be configured\r\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\r\n */\r\nexport interface MatFormFieldDefaultOptions {\r\n  appearance?: MatFormFieldAppearance;\r\n}\r\n\r\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all form field within an app.\r\n */\r\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\r\n\r\n\r\n/** Container for form controls that applies Material Design styling and behavior. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-form-field',\r\n  exportAs: 'matFormField',\r\n  templateUrl: 'form-field.html',\r\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\r\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\r\n  // aren't using MatInput.\r\n  styleUrls: [\r\n    'form-field.css',\r\n    'form-field-fill.css',\r\n    'form-field-legacy.css',\r\n    'form-field-outline.css',\r\n    'form-field-standard.css',\r\n    '../input/input.css',\r\n  ],\r\n  animations: [matFormFieldAnimations.transitionMessages],\r\n  host: {\r\n    'class': 'mat-form-field',\r\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\r\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\r\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\r\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\r\n    '[class.mat-form-field-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\r\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\r\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\r\n    '[class.mat-form-field-disabled]': '_control.disabled',\r\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\r\n    '[class.mat-focused]': '_control.focused',\r\n    '[class.mat-accent]': 'color == \"accent\"',\r\n    '[class.mat-warn]': 'color == \"warn\"',\r\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\r\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\r\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\r\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\r\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\r\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\r\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\r\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\r\n  },\r\n  inputs: ['color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\n\r\nexport class MatFormField extends _MatFormFieldMixinBase\r\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\r\n  private _labelOptions: LabelOptions;\r\n\r\n  /** The form-field appearance style. */\r\n  @Input()\r\n  get appearance(): MatFormFieldAppearance {\r\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\r\n  }\r\n  set appearance(value: MatFormFieldAppearance) {\r\n    const oldValue = this._appearance;\r\n    this._appearance = value;\r\n    if (this._appearance === 'outline' && oldValue !== value) {\r\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\r\n      if (this._ngZone) {\r\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\r\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\r\n        });\r\n      } else {\r\n        Promise.resolve().then(() => this.updateOutlineGap());\r\n      }\r\n    }\r\n  }\r\n  _appearance: MatFormFieldAppearance;\r\n\r\n  /** Whether the required marker should be hidden. */\r\n  @Input()\r\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\r\n  set hideRequiredMarker(value: boolean) {\r\n    this._hideRequiredMarker = coerceBooleanProperty(value);\r\n  }\r\n  private _hideRequiredMarker: boolean;\r\n\r\n  /** Override for the logic that disables the label animation in certain cases. */\r\n  private _showAlwaysAnimate = false;\r\n\r\n  /** Whether the floating label should always float or not. */\r\n  get _shouldAlwaysFloat(): boolean {\r\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\r\n  }\r\n\r\n  /** Whether the label can float or not. */\r\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\r\n\r\n  /** State of the mat-hint and mat-error animations. */\r\n  _subscriptAnimationState: string = '';\r\n\r\n  /** Text for the form field hint. */\r\n  @Input()\r\n  get hintLabel(): string { return this._hintLabel; }\r\n  set hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._processHints();\r\n  }\r\n  private _hintLabel = '';\r\n\r\n  // Unique id for the hint label.\r\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\r\n\r\n  // Unique id for the internal form field label.\r\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\r\n\r\n  /**\r\n   * Whether the label should always float, never float or float as the user types.\r\n   *\r\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\r\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\r\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\r\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\r\n   */\r\n  @Input()\r\n  get floatLabel(): FloatLabelType {\r\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\r\n  }\r\n  set floatLabel(value: FloatLabelType) {\r\n    if (value !== this._floatLabel) {\r\n      this._floatLabel = value || this._labelOptions.float || 'auto';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _floatLabel: FloatLabelType;\r\n\r\n  /** Whether the Angular animations are enabled. */\r\n  _animationsEnabled: boolean;\r\n\r\n  /**\r\n   * @deprecated\r\n   * @breaking-change 7.0.0\r\n   */\r\n  @ViewChild('underline') underlineRef: ElementRef;\r\n\r\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef<HTMLElement>;\r\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\r\n  @ViewChild('label') private _label: ElementRef;\r\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\r\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\r\n  @ContentChild(MatLabel) _labelChild: MatLabel;\r\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\r\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\r\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\r\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\r\n\r\n  constructor(\r\n      public _elementRef: ElementRef,\r\n      private _changeDetectorRef: ChangeDetectorRef,\r\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\r\n      @Optional() private _dir: Directionality,\r\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\r\n          MatFormFieldDefaultOptions,\r\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\r\n      private _platform?: Platform,\r\n      private _ngZone?: NgZone,\r\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\r\n    super(_elementRef);\r\n\r\n    this._labelOptions = labelOptions ? labelOptions : {};\r\n    this.floatLabel = this._labelOptions.float || 'auto';\r\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\r\n  }\r\n\r\n  /**\r\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\r\n   * positioned relative to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._connectionContainerRef || this._elementRef;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._validateControlChild();\r\n    if (this._control.controlType) {\r\n      this._elementRef.nativeElement.classList\r\n          .add(`mat-form-field-type-${this._control.controlType}`);\r\n    }\r\n\r\n    // Subscribe to changes in the child control state in order to update the form field UI.\r\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\r\n      this._validatePlaceholders();\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Run change detection if the value, prefix, or suffix changes.\r\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\r\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\r\n        .subscribe(() => this._changeDetectorRef.markForCheck());\r\n\r\n    // Re-validate when the number of hints changes.\r\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._processHints();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Update the aria-described by when the number of errors changes.\r\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    this._validateControlChild();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // Avoid animations on load.\r\n    this._subscriptAnimationState = 'enter';\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\r\n  _shouldForward(prop: string): boolean {\r\n    const ngControl = this._control ? this._control.ngControl : null;\r\n    return ngControl && ngControl[prop];\r\n  }\r\n\r\n  _hasPlaceholder() {\r\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\r\n  }\r\n\r\n  _hasLabel() {\r\n    return !!this._labelChild;\r\n  }\r\n\r\n  _shouldLabelFloat() {\r\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\r\n  }\r\n\r\n  _hideControlPlaceholder() {\r\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\r\n    return this.appearance === 'legacy' && !this._hasLabel() ||\r\n        this._hasLabel() && !this._shouldLabelFloat();\r\n  }\r\n\r\n  _hasFloatingLabel() {\r\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\r\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\r\n  }\r\n\r\n  /** Determines whether to display hints or errors. */\r\n  _getDisplayedMessages(): 'error' | 'hint' {\r\n    return (this._errorChildren && this._errorChildren.length > 0 &&\r\n        this._control.errorState) ? 'error' : 'hint';\r\n  }\r\n\r\n  /** Animates the placeholder up and locks it in position. */\r\n  _animateAndLockLabel(): void {\r\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\r\n      // If animations are disabled, we shouldn't go in here,\r\n      // because the `transitionend` will never fire.\r\n      if (this._animationsEnabled) {\r\n        this._showAlwaysAnimate = true;\r\n\r\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\r\n          this._showAlwaysAnimate = false;\r\n        });\r\n      }\r\n\r\n      this.floatLabel = 'always';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\r\n   * or child element with the `mat-placeholder` directive).\r\n   */\r\n  private _validatePlaceholders() {\r\n    if (this._control.placeholder && this._placeholderChild) {\r\n      throw getMatFormFieldPlaceholderConflictError();\r\n    }\r\n  }\r\n\r\n  /** Does any extra processing that is required when handling the hints. */\r\n  private _processHints() {\r\n    this._validateHints();\r\n    this._syncDescribedByIds();\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\r\n   * attribute being considered as `align=\"start\"`.\r\n   */\r\n  private _validateHints() {\r\n    if (this._hintChildren) {\r\n      let startHint: MatHint;\r\n      let endHint: MatHint;\r\n      this._hintChildren.forEach((hint: MatHint) => {\r\n        if (hint.align === 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw getMatFormFieldDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align === 'end') {\r\n          if (endHint) {\r\n            throw getMatFormFieldDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the list of element IDs that describe the child control. This allows the control to update\r\n   * its `aria-describedby` attribute accordingly.\r\n   */\r\n  private _syncDescribedByIds() {\r\n    if (this._control) {\r\n      let ids: string[] = [];\r\n\r\n      if (this._getDisplayedMessages() === 'hint') {\r\n        const startHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'start') : null;\r\n        const endHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'end') : null;\r\n\r\n        if (startHint) {\r\n          ids.push(startHint.id);\r\n        } else if (this._hintLabel) {\r\n          ids.push(this._hintLabelId);\r\n        }\r\n\r\n        if (endHint) {\r\n          ids.push(endHint.id);\r\n        }\r\n      } else if (this._errorChildren) {\r\n        ids = this._errorChildren.map(error => error.id);\r\n      }\r\n\r\n      this._control.setDescribedByIds(ids);\r\n    }\r\n  }\r\n\r\n  /** Throws an error if the form field's control is missing. */\r\n  protected _validateControlChild() {\r\n    if (!this._control) {\r\n      throw getMatFormFieldMissingControlError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\r\n   * appearance.\r\n   */\r\n  updateOutlineGap() {\r\n    if (this.appearance !== 'outline') {\r\n      return;\r\n    }\r\n\r\n    let startWidth = 0;\r\n    let gapWidth = 0;\r\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\r\n      '.mat-form-field-outline-start');\r\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\r\n        '.mat-form-field-outline-gap');\r\n    if (this._label && this._label.nativeElement.children.length) {\r\n      if (this._platform && !this._platform.isBrowser) {\r\n        // getBoundingClientRect isn't available on the server.\r\n        return;\r\n      }\r\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\r\n        return;\r\n      }\r\n\r\n      const containerStart = this._getStartEnd(\r\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\r\n      const labelStart = this._getStartEnd(\r\n          this._label.nativeElement.children[0].getBoundingClientRect());\r\n      let labelWidth = 0;\r\n      for (const child of this._label.nativeElement.children) {\r\n        labelWidth += child.offsetWidth;\r\n      }\r\n      startWidth = labelStart - containerStart - outlineGapPadding;\r\n      gapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\r\n    }\r\n\r\n    for (let i = 0; i < startEls.length; i++) {\r\n      startEls.item(i).style.width = `${startWidth}px`;\r\n    }\r\n    for (let i = 0; i < gapEls.length; i++) {\r\n      gapEls.item(i).style.width = `${gapWidth}px`;\r\n    }\r\n  }\r\n\r\n  /** Gets the start end of the rect considering the current directionality. */\r\n  private _getStartEnd(rect: ClientRect): number {\r\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Suffix to be placed at the end of the form field. */\r\n@Directive({\r\n  selector: '[matSuffix]',\r\n})\r\nexport class MatSuffix {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Prefix to be placed the the front of the form field. */\r\n@Directive({\r\n  selector: '[matPrefix]',\r\n})\r\nexport class MatPrefix {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/**\r\n * The placeholder text for an `MatFormField`.\r\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\r\n *     placeholder.\r\n * @breaking-change 8.0.0\r\n */\r\n@Directive({\r\n  selector: 'mat-placeholder'\r\n})\r\nexport class MatPlaceholder {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** The floating label for a `mat-form-field`. */\r\n@Directive({\r\n  selector: 'mat-label'\r\n})\r\nexport class MatLabel {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Hint text to be shown underneath the form field control. */\r\n@Directive({\r\n  selector: 'mat-hint',\r\n  host: {\r\n    'class': 'mat-hint',\r\n    '[class.mat-right]': 'align == \"end\"',\r\n    '[attr.id]': 'id',\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n  }\r\n})\r\nexport class MatHint {\r\n  /** Whether to align the hint label at the start or end of the line. */\r\n  @Input() align: 'start' | 'end' = 'start';\r\n\r\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\r\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldPlaceholderConflictError(): Error {\r\n  return Error('Placeholder attribute and child element were both specified.');\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\r\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldMissingControlError(): Error {\r\n  return Error('mat-form-field must contain a MatFormFieldControl.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {NgControl} from '@angular/forms';\r\n\r\n\r\n/** An interface which allows a control to work inside of a `MatFormField`. */\r\nexport abstract class MatFormFieldControl<T> {\r\n  /** The value of the control. */\r\n  value: T | null;\r\n\r\n  /**\r\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\r\n   * needs to run change detection.\r\n   */\r\n  readonly stateChanges: Observable<void>;\r\n\r\n  /** The element ID for this control. */\r\n  readonly id: string;\r\n\r\n  /** The placeholder for this control. */\r\n  readonly placeholder: string;\r\n\r\n  /** Gets the NgControl for this control. */\r\n  readonly ngControl: NgControl | null;\r\n\r\n  /** Whether the control is focused. */\r\n  readonly focused: boolean;\r\n\r\n  /** Whether the control is empty. */\r\n  readonly empty: boolean;\r\n\r\n  /** Whether the `MatFormField` label should try to float. */\r\n  readonly shouldLabelFloat: boolean;\r\n\r\n  /** Whether the control is required. */\r\n  readonly required: boolean;\r\n\r\n  /** Whether the control is disabled. */\r\n  readonly disabled: boolean;\r\n\r\n  /** Whether the control is in an error state. */\r\n  readonly errorState: boolean;\r\n\r\n  /**\r\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\r\n   * based on their control type. The form field will add a class,\r\n   * `mat-form-field-type-{{controlType}}` to its root element.\r\n   */\r\n  readonly controlType?: string;\r\n\r\n  /**\r\n   * Whether the input is currently in an autofilled state. If property is not present on the\r\n   * control it is assumed to be false.\r\n   */\r\n  readonly autofilled?: boolean;\r\n\r\n  /** Sets the list of element IDs that currently describe this control. */\r\n  abstract setDescribedByIds(ids: string[]): void;\r\n\r\n  /** Handles a click on the control's container. */\r\n  abstract onContainerClick(event: MouseEvent): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by the MatFormField. */\r\nexport const matFormFieldAnimations: {\r\n  readonly transitionMessages: AnimationTriggerMetadata\r\n} = {\r\n  /** Animation that transitions the form field's error and hint messages. */\r\n  transitionMessages: trigger('transitionMessages', [\r\n    // TODO(mmalerba): Use angular animations for label animation as well.\r\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\r\n    transition('void => enter', [\r\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\r\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\r\n    ]),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Single error message to be shown underneath the form field. */\r\n@Directive({\r\n  selector: 'mat-error',\r\n  host: {\r\n    'class': 'mat-error',\r\n    'role': 'alert',\r\n    '[attr.id]': 'id',\r\n  }\r\n})\r\nexport class MatError {\r\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\r\n}\r\n"],"names":["nextUniqueId"],"mappings":"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"}