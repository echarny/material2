{"version":3,"file":"progress-bar.es5.js","sources":["../../../src/lib/progress-bar/progress-bar-module.ts","../../../src/lib/progress-bar/progress-bar.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatProgressBar} from './progress-bar';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCommonModule],\r\n  exports: [MatProgressBar, MatCommonModule],\r\n  declarations: [MatProgressBar],\r\n})\r\nexport class MatProgressBarModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Location} from '@angular/common';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\r\n\r\n// Boilerplate for applying mixins to MatProgressBar.\r\n/** @docs-private */\r\nexport class MatProgressBarBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\r\n\r\n/** Counter used to generate unique IDs for progress bars. */\r\nlet progressbarId = 0;\r\n\r\n/**\r\n * `<mat-progress-bar>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-bar',\r\n  exportAs: 'matProgressBar',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'aria-valuemin': '0',\r\n    'aria-valuemax': '100',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n    'class': 'mat-progress-bar',\r\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-bar.html',\r\n  styleUrls: ['progress-bar.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\r\n  constructor(public _elementRef: ElementRef,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\r\n              /**\r\n               * @deprecated `location` parameter to be made required.\r\n               * @breaking-change 8.0.0\r\n               */\r\n              @Optional() location?: Location) {\r\n    super(_elementRef);\r\n\r\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\r\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\r\n    // because named route URLs can contain parentheses (see #12338).\r\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\r\n  }\r\n\r\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\r\n  @Input()\r\n  get value(): number { return this._value; }\r\n  set value(v: number) { this._value = clamp(v || 0); }\r\n  private _value: number = 0;\r\n\r\n  /** Buffer value of the progress bar. Defaults to zero. */\r\n  @Input()\r\n  get bufferValue(): number { return this._bufferValue; }\r\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\r\n  private _bufferValue: number = 0;\r\n\r\n  /**\r\n   * Mode of the progress bar.\r\n   *\r\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\r\n   * 'determinate'.\r\n   * Mirrored to mode attribute.\r\n   */\r\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\r\n\r\n  /** ID of the progress bar. */\r\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\r\n\r\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\r\n  _rectangleFillValue: string;\r\n\r\n  /** Gets the current transform value for the progress bar's primary indicator. */\r\n  _primaryTransform() {\r\n    const scale = this.value / 100;\r\n    return {transform: `scaleX(${scale})`};\r\n  }\r\n\r\n  /**\r\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\r\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\r\n   */\r\n  _bufferTransform() {\r\n    if (this.mode === 'buffer') {\r\n      const scale = this.bufferValue / 100;\r\n      return {transform: `scaleX(${scale})`};\r\n    }\r\n  }\r\n}\r\n\r\n/** Clamps a value to be between two numbers, by default 0 and 100. */\r\nfunction clamp(v: number, min = 0, max = 100) {\r\n  return Math.max(min, Math.min(max, v));\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}