{"version":3,"file":"badge.js","sources":["../../../src/lib/badge/badge-module.ts","../../../src/lib/badge/badge.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MatBadge} from './badge';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    A11yModule,\r\n    MatCommonModule\r\n  ],\r\n  exports: [MatBadge],\r\n  declarations: [MatBadge],\r\n})\r\nexport class MatBadgeModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AriaDescriber} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\r\nimport {ThemePalette} from '@angular/material/core';\r\n\r\n\r\nlet nextId = 0;\r\n\r\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\r\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\r\n\r\n/** Directive to display a text badge. */\r\n@Directive({\r\n  selector: '[matBadge]',\r\n  host: {\r\n    'class': 'mat-badge',\r\n    '[class.mat-badge-overlap]': 'overlap',\r\n    '[class.mat-badge-above]': 'isAbove()',\r\n    '[class.mat-badge-below]': '!isAbove()',\r\n    '[class.mat-badge-before]': '!isAfter()',\r\n    '[class.mat-badge-after]': 'isAfter()',\r\n    '[class.mat-badge-small]': 'size === \"small\"',\r\n    '[class.mat-badge-medium]': 'size === \"medium\"',\r\n    '[class.mat-badge-large]': 'size === \"large\"',\r\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\r\n  },\r\n})\r\nexport class MatBadge implements OnDestroy {\r\n  /** Whether the badge has any content. */\r\n  _hasContent = false;\r\n\r\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\r\n  @Input('matBadgeColor')\r\n  get color(): ThemePalette { return this._color; }\r\n  set color(value: ThemePalette) {\r\n    this._setColor(value);\r\n    this._color = value;\r\n  }\r\n  private _color: ThemePalette = 'primary';\r\n\r\n  /** Whether the badge should overlap its contents or not */\r\n  @Input('matBadgeOverlap')\r\n  get overlap(): boolean { return this._overlap; }\r\n  set overlap(val: boolean) {\r\n    this._overlap = coerceBooleanProperty(val);\r\n  }\r\n  private _overlap: boolean = true;\r\n\r\n  /**\r\n   * Position the badge should reside.\r\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\r\n   */\r\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\r\n\r\n  /** The content for the badge */\r\n  @Input('matBadge')\r\n  get content(): string { return this._content; }\r\n  set content(value: string) {\r\n    this._content = value;\r\n    this._hasContent = value != null && `${value}`.trim().length > 0;\r\n    this._updateTextContent();\r\n  }\r\n  private _content: string;\r\n\r\n  /** Message used to describe the decorated element via aria-describedby */\r\n  @Input('matBadgeDescription')\r\n  get description(): string { return this._description; }\r\n  set description(newDescription: string) {\r\n    if (newDescription !== this._description) {\r\n      this._updateHostAriaDescription(newDescription, this._description);\r\n      this._description = newDescription;\r\n    }\r\n  }\r\n  private _description: string;\r\n\r\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\r\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\r\n\r\n  /** Whether the badge is hidden. */\r\n  @Input('matBadgeHidden')\r\n  get hidden(): boolean { return this._hidden; }\r\n  set hidden(val: boolean) {\r\n    this._hidden = coerceBooleanProperty(val);\r\n  }\r\n  private _hidden: boolean;\r\n\r\n  /** Unique id for the badge */\r\n  _id: number = nextId++;\r\n\r\n  private _badgeElement: HTMLElement;\r\n\r\n  constructor(\r\n      @Optional() @Inject(DOCUMENT) private _document: any,\r\n      private _ngZone: NgZone,\r\n      private _elementRef: ElementRef,\r\n      private _ariaDescriber: AriaDescriber) {}\r\n\r\n  /** Whether the badge is above the host or not */\r\n  isAbove(): boolean {\r\n    return this.position.indexOf('below') === -1;\r\n  }\r\n\r\n  /** Whether the badge is after the host or not */\r\n  isAfter(): boolean {\r\n    return this.position.indexOf('before') === -1;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.description && this._badgeElement) {\r\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\r\n    }\r\n  }\r\n\r\n  /** Injects a span element into the DOM with the content. */\r\n  private _updateTextContent(): HTMLSpanElement {\r\n    if (!this._badgeElement) {\r\n      this._badgeElement = this._createBadgeElement();\r\n    } else {\r\n      this._badgeElement.textContent = this.content;\r\n    }\r\n    return this._badgeElement;\r\n  }\r\n\r\n  /** Creates the badge element */\r\n  private _createBadgeElement(): HTMLElement {\r\n    const badgeElement = this._document.createElement('span');\r\n    const activeClass = 'mat-badge-active';\r\n\r\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\r\n    badgeElement.classList.add('mat-badge-content');\r\n    badgeElement.textContent = this.content;\r\n\r\n    if (this.description) {\r\n      badgeElement.setAttribute('aria-label', this.description);\r\n    }\r\n\r\n    this._elementRef.nativeElement.appendChild(badgeElement);\r\n\r\n    // animate in after insertion\r\n    if (typeof requestAnimationFrame === 'function') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => {\r\n          badgeElement.classList.add(activeClass);\r\n        });\r\n      });\r\n    } else {\r\n      badgeElement.classList.add(activeClass);\r\n    }\r\n\r\n    return badgeElement;\r\n  }\r\n\r\n  /** Sets the aria-label property on the element */\r\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\r\n    // ensure content available before setting label\r\n    const content = this._updateTextContent();\r\n\r\n    if (oldDescription) {\r\n      this._ariaDescriber.removeDescription(content, oldDescription);\r\n    }\r\n\r\n    if (newDescription) {\r\n      this._ariaDescriber.describe(content, newDescription);\r\n    }\r\n  }\r\n\r\n  /** Adds css theme class given the color to the component host */\r\n  private _setColor(colorPalette: ThemePalette) {\r\n    if (colorPalette !== this._color) {\r\n      if (this._color) {\r\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\r\n      }\r\n      if (colorPalette) {\r\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"],"names":[],"mappings":"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"}