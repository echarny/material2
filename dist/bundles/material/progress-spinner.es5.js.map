{"version":3,"file":"progress-spinner.es5.js","sources":["../../../src/lib/progress-spinner/progress-spinner-module.ts","../../../src/lib/progress-spinner/progress-spinner.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, CommonModule],\r\n  exports: [\r\n    MatProgressSpinner,\r\n    MatSpinner,\r\n    MatCommonModule\r\n  ],\r\n  declarations: [\r\n    MatProgressSpinner,\r\n    MatSpinner\r\n  ],\r\n})\r\nclass MatProgressSpinnerModule {}\r\n\r\nexport {MatProgressSpinnerModule};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  Inject,\r\n  Input,\r\n  ElementRef,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  InjectionToken,\r\n} from '@angular/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\n\r\n/** Possible mode for a progress spinner. */\r\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n\r\n/**\r\n * Base reference size of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_SIZE = 100;\r\n\r\n/**\r\n * Base reference stroke width of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_STROKE_WIDTH = 10;\r\n\r\n// Boilerplate for applying mixins to MatProgressSpinner.\r\n/** @docs-private */\r\nexport class MatProgressSpinnerBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\r\n\r\n/** Default `mat-progress-spinner` options that can be overridden. */\r\nexport interface MatProgressSpinnerDefaultOptions {\r\n  /** Diameter of the spinner. */\r\n  diameter?: number;\r\n  /** Width of the spinner's stroke. */\r\n  strokeWidth?: number;\r\n  /**\r\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\r\n   * using NoopAnimationsModule.\r\n   */\r\n  _forceAnimations?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\r\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\r\n  return {diameter: BASE_SIZE};\r\n}\r\n\r\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\r\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\r\n// which are enough to see the flicker described in\r\n// https://github.com/angular/material2/issues/8984\r\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\r\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\r\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\r\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\r\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\r\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\r\n\r\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\r\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\r\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\r\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\r\n\r\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\r\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\r\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\r\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\r\n\r\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\r\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\r\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\r\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\r\n  }\r\n`;\r\n\r\n/**\r\n * `<mat-progress-spinner>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-spinner',\r\n  exportAs: 'matProgressSpinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'class': 'mat-progress-spinner',\r\n    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n    '[style.width.px]': 'diameter',\r\n    '[style.height.px]': 'diameter',\r\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\r\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\r\n\r\n  private _value = 0;\r\n  private _strokeWidth: number;\r\n  private _fallbackAnimation = false;\r\n\r\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\r\n  private static diameters = new Set<number>([BASE_SIZE]);\r\n\r\n  /**\r\n   * Used for storing all of the generated keyframe animations.\r\n   * @dynamic\r\n   */\r\n  private static styleTag: HTMLStyleElement|null = null;\r\n\r\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\r\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\r\n      !!this.defaults && !this.defaults._forceAnimations);\r\n\r\n  /** The diameter of the progress spinner (will set width and height of svg). */\r\n  @Input()\r\n  get diameter(): number { return this._diameter; }\r\n  set diameter(size: number) {\r\n    this._diameter = coerceNumberProperty(size);\r\n\r\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\r\n      this._attachStyleNode();\r\n    }\r\n  }\r\n  private _diameter = BASE_SIZE;\r\n\r\n  /** Stroke width of the progress spinner. */\r\n  @Input()\r\n  get strokeWidth(): number {\r\n    return this._strokeWidth || this.diameter / 10;\r\n  }\r\n  set strokeWidth(value: number) {\r\n    this._strokeWidth = coerceNumberProperty(value);\r\n  }\r\n\r\n  /** Mode of the progress circle */\r\n  @Input() mode: ProgressSpinnerMode = 'determinate';\r\n\r\n  /** Value of the progress circle. */\r\n  @Input()\r\n  get value(): number {\r\n    return this.mode === 'determinate' ? this._value : 0;\r\n  }\r\n  set value(newValue: number) {\r\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef,\r\n              platform: Platform,\r\n              @Optional() @Inject(DOCUMENT) private _document: any,\r\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\r\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\r\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\r\n\r\n    super(_elementRef);\r\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\r\n\r\n    if (defaults) {\r\n      if (defaults.diameter) {\r\n        this.diameter = defaults.diameter;\r\n      }\r\n\r\n      if (defaults.strokeWidth) {\r\n        this.strokeWidth = defaults.strokeWidth;\r\n      }\r\n    }\r\n\r\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\r\n    // reliably so we fall back to a non-spec animation.\r\n    const animationClass =\r\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\r\n\r\n    _elementRef.nativeElement.classList.add(animationClass);\r\n  }\r\n\r\n  /** The radius of the spinner, adjusted for stroke width. */\r\n  get _circleRadius() {\r\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\r\n  }\r\n\r\n  /** The view box of the spinner's svg element. */\r\n  get _viewBox() {\r\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\r\n    return `0 0 ${viewBox} ${viewBox}`;\r\n  }\r\n\r\n  /** The stroke circumference of the svg circle. */\r\n  get _strokeCircumference(): number {\r\n    return 2 * Math.PI * this._circleRadius;\r\n  }\r\n\r\n  /** The dash offset of the svg circle. */\r\n  get _strokeDashOffset() {\r\n    if (this.mode === 'determinate') {\r\n      return this._strokeCircumference * (100 - this._value) / 100;\r\n    }\r\n\r\n    // In fallback mode set the circle to 80% and rotate it with CSS.\r\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\r\n      return this._strokeCircumference * 0.2;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stroke width of the circle in percent. */\r\n  get _circleStrokeWidth() {\r\n    return this.strokeWidth / this.diameter * 100;\r\n  }\r\n\r\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\r\n  private _attachStyleNode(): void {\r\n    let styleTag = MatProgressSpinner.styleTag;\r\n\r\n    if (!styleTag) {\r\n      styleTag = this._document.createElement('style');\r\n      this._document.head.appendChild(styleTag);\r\n      MatProgressSpinner.styleTag = styleTag;\r\n    }\r\n\r\n    if (styleTag && styleTag.sheet) {\r\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\r\n    }\r\n\r\n    MatProgressSpinner.diameters.add(this.diameter);\r\n  }\r\n\r\n  /** Generates animation styles adjusted for the spinner's diameter. */\r\n  private _getAnimationText(): string {\r\n    return INDETERMINATE_ANIMATION_TEMPLATE\r\n        // Animation should begin at 5% and end at 80%\r\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\r\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\r\n        .replace(/DIAMETER/g, `${this.diameter}`);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * `<mat-spinner>` component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate `<mat-progress-spinner>` instance.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'mode': 'indeterminate',\r\n    'class': 'mat-spinner mat-progress-spinner',\r\n    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n    '[style.width.px]': 'diameter',\r\n    '[style.height.px]': 'diameter',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatSpinner extends MatProgressSpinner {\r\n  constructor(elementRef: ElementRef, platform: Platform,\r\n              @Optional() @Inject(DOCUMENT) document: any,\r\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\r\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\r\n                  defaults?: MatProgressSpinnerDefaultOptions) {\r\n    super(elementRef, platform, document, animationMode, defaults);\r\n    this.mode = 'indeterminate';\r\n  }\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}