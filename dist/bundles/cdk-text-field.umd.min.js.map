{"version":3,"file":"cdk-text-field.umd.min.js","sources":["../../src/cdk/text-field/autofill.ts","../../src/cdk/text-field/autosize.ts","../../src/cdk/text-field/text-field-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport {EMPTY, Observable, Subject} from 'rxjs';\r\n\r\n\r\n/** An event that is emitted when the autofill state of an input changes. */\r\nexport type AutofillEvent = {\r\n  /** The element whose autofill state changes. */\r\n  target: Element;\r\n  /** Whether the element is currently autofilled. */\r\n  isAutofilled: boolean;\r\n};\r\n\r\n\r\n/** Used to track info about currently monitored elements. */\r\ntype MonitoredElementInfo = {\r\n  subject: Subject<AutofillEvent>;\r\n  unlisten: () => void;\r\n};\r\n\r\n\r\n/** Options to pass to the animationstart listener. */\r\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\r\n\r\n\r\n/**\r\n * An injectable service that can be used to monitor the autofill state of an input.\r\n * Based on the following blog post:\r\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class AutofillMonitor implements OnDestroy {\r\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\r\n\r\n  constructor(private _platform: Platform, private _ngZone: NgZone) {}\r\n\r\n  /**\r\n   * Monitor for changes in the autofill state of the given input element.\r\n   * @param element The element to monitor.\r\n   * @return A stream of autofill state changes.\r\n   */\r\n  monitor(element: Element): Observable<AutofillEvent> {\r\n    if (!this._platform.isBrowser) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const info = this._monitoredElements.get(element);\r\n\r\n    if (info) {\r\n      return info.subject.asObservable();\r\n    }\r\n\r\n    const result = new Subject<AutofillEvent>();\r\n    const cssClass = 'cdk-text-field-autofilled';\r\n    const listener = (event: AnimationEvent) => {\r\n      // Animation events fire on initial element render, we check for the presence of the autofill\r\n      // CSS class to make sure this is a real change in state, not just the initial render before\r\n      // we fire off events.\r\n      if (event.animationName === 'cdk-text-field-autofill-start' &&\r\n          !element.classList.contains(cssClass)) {\r\n        element.classList.add(cssClass);\r\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: true}));\r\n      } else if (event.animationName === 'cdk-text-field-autofill-end' &&\r\n          element.classList.contains(cssClass)) {\r\n        element.classList.remove(cssClass);\r\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: false}));\r\n      }\r\n    };\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      element.addEventListener('animationstart', listener, listenerOptions);\r\n      element.classList.add('cdk-text-field-autofill-monitored');\r\n    });\r\n\r\n    this._monitoredElements.set(element, {\r\n      subject: result,\r\n      unlisten: () => {\r\n        element.removeEventListener('animationstart', listener, listenerOptions);\r\n      }\r\n    });\r\n\r\n    return result.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring the autofill state of the given input element.\r\n   * @param element The element to stop monitoring.\r\n   */\r\n  stopMonitoring(element: Element) {\r\n    const info = this._monitoredElements.get(element);\r\n\r\n    if (info) {\r\n      info.unlisten();\r\n      info.subject.complete();\r\n      element.classList.remove('cdk-text-field-autofill-monitored');\r\n      element.classList.remove('cdk-text-field-autofilled');\r\n      this._monitoredElements.delete(element);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\r\n  }\r\n}\r\n\r\n\r\n/** A directive that can be used to monitor the autofill state of an input. */\r\n@Directive({\r\n  selector: '[cdkAutofill]',\r\n})\r\nexport class CdkAutofill implements OnDestroy, OnInit {\r\n  /** Emits when the autofill state of the element changes. */\r\n  @Output() cdkAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\r\n\r\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\r\n\r\n  ngOnInit() {\r\n    this._autofillMonitor\r\n      .monitor(this._elementRef.nativeElement)\r\n      .subscribe(event => this.cdkAutofill.emit(event));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  AfterViewInit,\r\n  DoCheck,\r\n  OnDestroy,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {auditTime, takeUntil} from 'rxjs/operators';\r\nimport {fromEvent, Subject} from 'rxjs';\r\n\r\n\r\n/** Directive to automatically resize a textarea to fit its content. */\r\n@Directive({\r\n  selector: 'textarea[cdkTextareaAutosize]',\r\n  exportAs: 'cdkTextareaAutosize',\r\n  host: {\r\n    'class': 'cdk-textarea-autosize',\r\n    // Textarea elements that have the directive applied should have a single row by default.\r\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n    'rows': '1',\r\n    '(input)': '_noopInputHandler()',\r\n  },\r\n})\r\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\r\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\r\n  private _previousValue: string;\r\n  private _initialHeight: string | null;\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  private _minRows: number;\r\n  private _maxRows: number;\r\n  private _enabled: boolean = true;\r\n\r\n  private _textareaElement: HTMLTextAreaElement;\r\n\r\n  /** Minimum amount of rows in the textarea. */\r\n  @Input('cdkAutosizeMinRows')\r\n  get minRows(): number { return this._minRows; }\r\n  set minRows(value: number) {\r\n    this._minRows = value;\r\n    this._setMinHeight();\r\n  }\r\n\r\n  /** Maximum amount of rows in the textarea. */\r\n  @Input('cdkAutosizeMaxRows')\r\n  get maxRows(): number { return this._maxRows; }\r\n  set maxRows(value: number) {\r\n    this._maxRows = value;\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  /** Whether autosizing is enabled or not */\r\n  @Input('cdkTextareaAutosize')\r\n  get enabled(): boolean { return this._enabled; }\r\n  set enabled(value: boolean) {\r\n    value = coerceBooleanProperty(value);\r\n\r\n    // Only act if the actual value changed. This specifically helps to not run\r\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\r\n    if (this._enabled !== value) {\r\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\r\n    }\r\n  }\r\n\r\n  /** Cached height of a textarea with a single row. */\r\n  private _cachedLineHeight: number;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _platform: Platform,\r\n    private _ngZone: NgZone) {\r\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n  }\r\n\r\n  /** Sets the minimum height of the textarea as determined by minRows. */\r\n  _setMinHeight(): void {\r\n    const minHeight = this.minRows && this._cachedLineHeight ?\r\n        `${this.minRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (minHeight)  {\r\n      this._setTextareaStyle('minHeight', minHeight);\r\n    }\r\n  }\r\n\r\n  /** Sets the maximum height of the textarea as determined by maxRows. */\r\n  _setMaxHeight(): void {\r\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\r\n        `${this.maxRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (maxHeight) {\r\n      this._setTextareaStyle('maxHeight', maxHeight);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._platform.isBrowser) {\r\n      // Remember the height which we started with in case autosizing is disabled\r\n      this._initialHeight = this._textareaElement.style.height;\r\n\r\n      this.resizeToFitContent();\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        fromEvent(window, 'resize')\r\n          .pipe(auditTime(16), takeUntil(this._destroyed))\r\n          .subscribe(() => this.resizeToFitContent(true));\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Sets a style property on the textarea element. */\r\n  private _setTextareaStyle(property: string, value: string): void {\r\n    this._textareaElement.style[property] = value;\r\n  }\r\n\r\n  /**\r\n   * Cache the height of a single-row textarea if it has not already been cached.\r\n   *\r\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\r\n   * maxRows. For the initial version, we will assume that the height of a single line in the\r\n   * textarea does not ever change.\r\n   */\r\n  private _cacheTextareaLineHeight(): void {\r\n    if (this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    // Use a clone element because we have to override some styles.\r\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\r\n    textareaClone.rows = 1;\r\n\r\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\r\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\r\n    // would affect the height.\r\n    textareaClone.style.position = 'absolute';\r\n    textareaClone.style.visibility = 'hidden';\r\n    textareaClone.style.border = 'none';\r\n    textareaClone.style.padding = '0';\r\n    textareaClone.style.height = '';\r\n    textareaClone.style.minHeight = '';\r\n    textareaClone.style.maxHeight = '';\r\n\r\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\r\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\r\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\r\n    // to hidden. This ensures that there is no invalid calculation of the line height.\r\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\r\n    textareaClone.style.overflow = 'hidden';\r\n\r\n    this._textareaElement.parentNode!.appendChild(textareaClone);\r\n    this._cachedLineHeight = textareaClone.clientHeight;\r\n    this._textareaElement.parentNode!.removeChild(textareaClone);\r\n\r\n    // Min and max heights have to be re-calculated if the cached line height changes\r\n    this._setMinHeight();\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this._platform.isBrowser) {\r\n      this.resizeToFitContent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize the textarea to fit its content.\r\n   * @param force Whether to force a height recalculation. By default the height will be\r\n   *    recalculated only if the value changed since the last call.\r\n   */\r\n  resizeToFitContent(force: boolean = false) {\r\n    // If autosizing is disabled, just skip everything else\r\n    if (!this._enabled) {\r\n      return;\r\n    }\r\n\r\n    this._cacheTextareaLineHeight();\r\n\r\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\r\n    // in checking the height of the textarea.\r\n    if (!this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n    const value = textarea.value;\r\n\r\n    // Only resize of the value changed since these calculations can be expensive.\r\n    if (value === this._previousValue && !force) {\r\n      return;\r\n    }\r\n\r\n    const placeholderText = textarea.placeholder;\r\n\r\n    // Reset the textarea height to auto in order to shrink back to its default size.\r\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\r\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\r\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\r\n    // need to be removed temporarily.\r\n    textarea.classList.add('cdk-textarea-autosize-measuring');\r\n    textarea.placeholder = '';\r\n\r\n    // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\r\n    // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\r\n    const height = textarea.scrollHeight - 4;\r\n\r\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\r\n    textarea.style.height = `${height}px`;\r\n    textarea.classList.remove('cdk-textarea-autosize-measuring');\r\n    textarea.placeholder = placeholderText;\r\n\r\n    // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\r\n    // We need to re-set the selection in order for it to scroll to the proper position.\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => requestAnimationFrame(() => {\r\n        const {selectionStart, selectionEnd} = textarea;\r\n\r\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\r\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\r\n        // between the time we requested the animation frame and when it was executed.\r\n        // Also note that we have to assert that the textarea is focused before we set the\r\n        // selection range. Setting the selection range on a non-focused textarea will cause\r\n        // it to receive focus on IE and Edge.\r\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\r\n          textarea.setSelectionRange(selectionStart, selectionEnd);\r\n        }\r\n      }));\r\n    }\r\n\r\n    this._previousValue = value;\r\n  }\r\n\r\n  /**\r\n   * Resets the textarea to it's original size\r\n   */\r\n  reset() {\r\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\r\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\r\n    if (this._initialHeight === undefined) {\r\n      return;\r\n    }\r\n    this._textareaElement.style.height = this._initialHeight;\r\n  }\r\n\r\n  _noopInputHandler() {\r\n    // no-op handler that ensures we're running change detection on input events.\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkAutofill} from './autofill';\r\nimport {CdkTextareaAutosize} from './autosize';\r\n\r\n\r\n@NgModule({\r\n  declarations: [CdkAutofill, CdkTextareaAutosize],\r\n  imports: [PlatformModule],\r\n  exports: [CdkAutofill, CdkTextareaAutosize],\r\n})\r\nexport class TextFieldModule {}\r\n"],"names":["listenerOptions","supportsPassiveEventListeners","passive","AutofillMonitor","_platform","_ngZone","this","_monitoredElements","Map","prototype","monitor","element","_this","isBrowser","EMPTY","info","get","subject","asObservable","result","Subject","cssClass","listener","event","animationName","classList","contains","remove","run","next","target","isAutofilled","add","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","type","Injectable","args","providedIn","Platform","NgZone","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","EventEmitter","ngOnInit","nativeElement","subscribe","emit","Directive","selector","ElementRef","Output","CdkTextareaAutosize","_destroyed","_enabled","_textareaElement","Object","defineProperty","_minRows","value","_setMinHeight","_maxRows","_setMaxHeight","coerceBooleanProperty","resizeToFitContent","reset","minHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxHeight","maxRows","ngAfterViewInit","_initialHeight","style","height","fromEvent","window","pipe","auditTime","takeUntil","property","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","appendChild","clientHeight","removeChild","ngDoCheck","force","textarea","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","selectionStart","selectionEnd","isStopped","document","activeElement","setSelectionRange","undefined","_noopInputHandler","exportAs","host","class","(input)","Input","enabled","NgModule","declarations","imports","PlatformModule","exports","TextFieldModule"],"mappings":"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"}