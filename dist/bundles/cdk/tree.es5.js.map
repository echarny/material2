{"version":3,"file":"tree.es5.js","sources":["../../../src/cdk/tree/tree-module.ts","../../../src/cdk/tree/toggle.ts","../../../src/cdk/tree/padding.ts","../../../src/cdk/tree/nested-node.ts","../../../src/cdk/tree/tree.ts","../../../src/cdk/tree/tree-errors.ts","../../../src/cdk/tree/outlet.ts","../../../src/cdk/tree/node.ts","../../../src/cdk/tree/control/nested-tree-control.ts","../../../src/cdk/tree/control/flat-tree-control.ts","../../../src/cdk/tree/control/base-tree-control.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {CdkTreeNodePadding} from './padding';\r\nimport {CdkTreeNodeToggle} from './toggle';\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\nimport {CdkTreeNodeDef} from './node';\r\nimport {CdkNestedTreeNode} from './nested-node';\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n  CdkNestedTreeNode,\r\n  CdkTreeNodeDef,\r\n  CdkTreeNodePadding,\r\n  CdkTreeNodeToggle,\r\n  CdkTree,\r\n  CdkTreeNode,\r\n  CdkTreeNodeOutlet,\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: EXPORTED_DECLARATIONS,\r\n  declarations: EXPORTED_DECLARATIONS,\r\n  providers: [FocusMonitor, CdkTreeNodeDef]\r\n})\r\nexport class CdkTreeModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  Input,\r\n} from '@angular/core';\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\n\r\n/**\r\n * Node toggle to expand/collapse the node.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodeToggle]',\r\n  host: {\r\n    '(click)': '_toggle($event)',\r\n  }\r\n})\r\nexport class CdkTreeNodeToggle<T> {\r\n  /** Whether expand/collapse the node recursively. */\r\n  @Input('cdkTreeNodeToggleRecursive')\r\n  get recursive(): boolean { return this._recursive; }\r\n  set recursive(value: boolean) { this._recursive = coerceBooleanProperty(value); }\r\n  protected _recursive = false;\r\n\r\n  constructor(protected _tree: CdkTree<T>,\r\n              protected _treeNode: CdkTreeNode<T>) {}\r\n\r\n  _toggle(event: Event): void {\r\n    this.recursive\r\n      ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\r\n      : this._tree.treeControl.toggle(this._treeNode.data);\r\n\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {Directive, ElementRef, Input, OnDestroy, Optional, Renderer2} from '@angular/core';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\n\r\n/**\r\n * Indent for the children tree dataNodes.\r\n * This directive will add left-padding to the node to show hierarchy.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodePadding]',\r\n})\r\nexport class CdkTreeNodePadding<T> implements OnDestroy {\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\r\n  @Input('cdkTreeNodePadding')\r\n  get level(): number { return this._level; }\r\n  set level(value: number) {\r\n    this._level = coerceNumberProperty(value);\r\n    this._setPadding();\r\n  }\r\n  _level: number;\r\n\r\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\r\n  // TODO(tinayuangao): Make indent working with a string with unit, e.g. 10em\r\n  @Input('cdkTreeNodePaddingIndent')\r\n  get indent(): number { return this._indent; }\r\n  set indent(value: number) {\r\n    this._indent = coerceNumberProperty(value);\r\n    this._setPadding();\r\n  }\r\n  _indent: number = 40;\r\n\r\n  constructor(private _treeNode: CdkTreeNode<T>,\r\n              private _tree: CdkTree<T>,\r\n              private _renderer: Renderer2,\r\n              private _element: ElementRef,\r\n              @Optional() private _dir: Directionality) {\r\n    this._setPadding();\r\n    if (this._dir) {\r\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\r\n  _paddingIndent(): string|null {\r\n    const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\r\n      ? this._tree.treeControl.getLevel(this._treeNode.data)\r\n      : null;\r\n    const level = this._level || nodeLevel;\r\n    return level ? `${level * this._indent}px` : null;\r\n  }\r\n\r\n  _setPadding() {\r\n    const padding = this._paddingIndent();\r\n    const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\r\n\r\n    this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AfterContentInit,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  IterableDiffers,\r\n  IterableDiffer,\r\n  OnDestroy,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\r\n\r\n/**\r\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\r\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\r\n * be added in the `cdkTreeNodeOutlet` in tree node template.\r\n * For example:\r\n *   ```html\r\n *   <cdk-mested-tree-node>\r\n *     {{node.name}}\r\n *     <ng-template cdkTreeNodeOutlet></ng-template>\r\n *   </cdk-tree-node>\r\n *   ```\r\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\r\n * like this:\r\n *   ```html\r\n *   <cdk-nested-tree-node>\r\n *     {{node.name}}\r\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\r\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\r\n *   </cdk-tree-node>\r\n *   ```\r\n */\r\n@Directive({\r\n  selector: 'cdk-nested-tree-node',\r\n  exportAs: 'cdkNestedTreeNode',\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.role]': 'role',\r\n    'class': 'cdk-tree-node cdk-nested-tree-node',\r\n  },\r\n  providers: [{provide: CdkTreeNode, useExisting: CdkNestedTreeNode}]\r\n})\r\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<T>;\r\n\r\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\r\n  protected _children: T[];\r\n\r\n  /** The children node placeholder. */\r\n  @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              protected _tree: CdkTree<T>,\r\n              protected _differs: IterableDiffers) {\r\n    super(_elementRef, _tree);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\r\n    if (!this._tree.treeControl.getChildren) {\r\n      throw getTreeControlFunctionsMissingError();\r\n    }\r\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\r\n    if (Array.isArray(childrenNodes)) {\r\n      this.updateChildrenNodes(childrenNodes as T[]);\r\n    } else if (childrenNodes instanceof Observable) {\r\n      childrenNodes.pipe(takeUntil(this._destroyed))\r\n        .subscribe(result => this.updateChildrenNodes(result));\r\n    }\r\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\r\n        .subscribe(() => this.updateChildrenNodes());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._clear();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  /** Add children dataNodes to the NodeOutlet */\r\n  protected updateChildrenNodes(children?: T[]): void {\r\n    if (children) {\r\n      this._children = children;\r\n    }\r\n    if (this.nodeOutlet.length && this._children) {\r\n      const viewContainer = this.nodeOutlet.first.viewContainer;\r\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\r\n    } else {\r\n      // Reset the data differ if there's no children nodes displayed\r\n      this._dataDiffer.diff([]);\r\n    }\r\n  }\r\n\r\n  /** Clear the children dataNodes. */\r\n  protected _clear(): void {\r\n    if (this.nodeOutlet && this.nodeOutlet.first) {\r\n      this.nodeOutlet.first.viewContainer.clear();\r\n      this._dataDiffer.diff([]);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  IterableChangeRecord,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  OnInit,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n  TrackByFunction\r\n} from '@angular/core';\r\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {TreeControl} from './control/tree-control';\r\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {\r\n  getTreeControlFunctionsMissingError,\r\n  getTreeControlMissingError,\r\n  getTreeMissingMatchingNodeDefError,\r\n  getTreeMultipleDefaultNodeDefsError,\r\n  getTreeNoValidDataSourceError\r\n} from './tree-errors';\r\n\r\n/**\r\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\r\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-tree',\r\n  exportAs: 'cdkTree',\r\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\r\n  host: {\r\n    'class': 'cdk-tree',\r\n    'role': 'tree',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CdkTree<T>\r\n    implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<T>;\r\n\r\n  /** Stores the node definition that does not have a when predicate. */\r\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\r\n\r\n  /** Data subscription */\r\n  private _dataSubscription: Subscription | null;\r\n\r\n  /** Level of nodes */\r\n  private _levels: Map<T, number> = new Map<T, number>();\r\n\r\n  /**\r\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\r\n   * stream of view window (what dataNodes are currently on screen).\r\n   * Data source can be an observable of data array, or a dara array to render.\r\n   */\r\n  @Input()\r\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\r\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\r\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\r\n\r\n  /** The tree controller */\r\n  @Input() treeControl: TreeControl<T>;\r\n\r\n  /**\r\n   * Tracking function that will be used to check the differences in data changes. Used similarly\r\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\r\n   * relative to the function to know if a node should be added/removed/moved.\r\n   * Accepts a function that takes two parameters, `index` and `item`.\r\n   */\r\n  @Input() trackBy: TrackByFunction<T>;\r\n\r\n  // Outlets within the tree's template where the dataNodes will be inserted.\r\n  @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\r\n\r\n  /** The tree node template for the tree */\r\n  @ContentChildren(CdkTreeNodeDef) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\r\n\r\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\r\n  //     Remove the MAX_VALUE in viewChange\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   */\r\n  viewChange =\r\n    new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  constructor(private _differs: IterableDiffers,\r\n              private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\r\n    if (!this.treeControl) {\r\n      throw getTreeControlMissingError();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._nodeOutlet.viewContainer.clear();\r\n\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\r\n      (this.dataSource as DataSource<T>).disconnect(this);\r\n    }\r\n\r\n    if (this._dataSubscription) {\r\n      this._dataSubscription.unsubscribe();\r\n      this._dataSubscription = null;\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\r\n    if (defaultNodeDefs.length > 1) {\r\n      throw getTreeMultipleDefaultNodeDefsError();\r\n    }\r\n    this._defaultNodeDef = defaultNodeDefs[0];\r\n\r\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\r\n      this._observeRenderChanges();\r\n    }\r\n  }\r\n\r\n\r\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\r\n  //     and nested trees.\r\n\r\n  /**\r\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n   * render change subscription if one exists. If the data source is null, interpret this by\r\n   * clearing the node outlet. Otherwise start listening for new data.\r\n   */\r\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\r\n      (this.dataSource as DataSource<T>).disconnect(this);\r\n    }\r\n\r\n    if (this._dataSubscription) {\r\n      this._dataSubscription.unsubscribe();\r\n      this._dataSubscription = null;\r\n    }\r\n\r\n    // Remove the all dataNodes if there is now no data source\r\n    if (!dataSource) {\r\n      this._nodeOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._dataSource = dataSource;\r\n    if (this._nodeDefs) {\r\n      this._observeRenderChanges();\r\n    }\r\n  }\r\n\r\n  /** Set up a subscription for the data provided by the data source. */\r\n  private _observeRenderChanges() {\r\n    let dataStream: Observable<T[]> | undefined;\r\n\r\n    // Cannot use `instanceof DataSource` since the data source could be a literal with\r\n    // `connect` function and may not extends DataSource.\r\n    if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\r\n      dataStream = (this._dataSource as DataSource<T>).connect(this);\r\n    } else if (this._dataSource instanceof Observable) {\r\n      dataStream = this._dataSource;\r\n    } else if (Array.isArray(this._dataSource)) {\r\n      dataStream = observableOf(this._dataSource);\r\n    }\r\n\r\n    if (dataStream) {\r\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\r\n        .subscribe(data => this.renderNodeChanges(data));\r\n    } else {\r\n      throw getTreeNoValidDataSourceError();\r\n    }\r\n  }\r\n\r\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\r\n  renderNodeChanges(data: T[], dataDiffer: IterableDiffer<T> = this._dataDiffer,\r\n                    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\r\n                    parentData?: T) {\r\n    const changes = dataDiffer.diff(data);\r\n    if (!changes) { return; }\r\n\r\n    changes.forEachOperation(\r\n      (item: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\r\n        if (item.previousIndex == null) {\r\n          this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\r\n        } else if (currentIndex == null) {\r\n          viewContainer.remove(adjustedPreviousIndex);\r\n          this._levels.delete(item.item);\r\n        } else {\r\n          const view = viewContainer.get(adjustedPreviousIndex);\r\n          viewContainer.move(view!, currentIndex);\r\n        }\r\n      });\r\n\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Finds the matching node definition that should be used for this node data. If there is only\r\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\r\n   * predicate that returns true with the data. If none return true, return the default node\r\n   * definition.\r\n   */\r\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\r\n    if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\r\n\r\n    const nodeDef =\r\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\r\n    if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\r\n\r\n    return nodeDef;\r\n  }\r\n\r\n  /**\r\n   * Create the embedded view for the data node template and place it in the correct index location\r\n   * within the data node view container.\r\n   */\r\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\r\n    const node = this._getNodeDef(nodeData, index);\r\n\r\n    // Node context that will be provided to created embedded view\r\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\r\n\r\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\r\n    // Otherwise, use the level of parent node.\r\n    if (this.treeControl.getLevel) {\r\n      context.level = this.treeControl.getLevel(nodeData);\r\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\r\n      context.level = this._levels.get(parentData)! + 1;\r\n    } else {\r\n      context.level = 0;\r\n    }\r\n    this._levels.set(nodeData, context.level);\r\n\r\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\r\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\r\n    container.createEmbeddedView(node.template, context, index);\r\n\r\n    // Set the data to just created `CdkTreeNode`.\r\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\r\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\r\n    if (CdkTreeNode.mostRecentTreeNode) {\r\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Tree node for CdkTree. It contains the data in the tree node.\r\n */\r\n@Directive({\r\n  selector: 'cdk-tree-node',\r\n  exportAs: 'cdkTreeNode',\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n    '[attr.role]': 'role',\r\n    'class': 'cdk-tree-node',\r\n  },\r\n})\r\nexport class CdkTreeNode<T> implements FocusableOption, OnDestroy {\r\n  /**\r\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\r\n   * in `CdkTree` and set the data to it.\r\n   */\r\n  static mostRecentTreeNode: CdkTreeNode<{}> | null = null;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _destroyed = new Subject<void>();\r\n\r\n  /** The tree node's data. */\r\n  get data(): T { return this._data; }\r\n  set data(value: T) {\r\n    this._data = value;\r\n    this._setRoleFromData();\r\n  }\r\n  protected _data: T;\r\n\r\n  get isExpanded(): boolean {\r\n    return this._tree.treeControl.isExpanded(this._data);\r\n  }\r\n\r\n  get level(): number {\r\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\r\n  }\r\n\r\n  /**\r\n   * The role of the node should be 'group' if it's an internal node,\r\n   * and 'treeitem' if it's a leaf node.\r\n   */\r\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              protected _tree: CdkTree<T>) {\r\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // If this is the last tree node being destroyed,\r\n    // clear out the reference to avoid leaking memory.\r\n    if (CdkTreeNode.mostRecentTreeNode === this) {\r\n      CdkTreeNode.mostRecentTreeNode = null;\r\n    }\r\n\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Focuses the menu item. Implements for FocusableOption. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  protected _setRoleFromData(): void {\r\n    if (this._tree.treeControl.isExpandable) {\r\n      this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\r\n    } else {\r\n      if (!this._tree.treeControl.getChildren) {\r\n        throw getTreeControlFunctionsMissingError();\r\n      }\r\n      const childrenNodes = this._tree.treeControl.getChildren(this._data);\r\n      if (Array.isArray(childrenNodes)) {\r\n        this._setRoleFromChildren(childrenNodes as T[]);\r\n      } else if (childrenNodes instanceof Observable) {\r\n        childrenNodes.pipe(takeUntil(this._destroyed))\r\n            .subscribe(children => this._setRoleFromChildren(children));\r\n      }\r\n    }\r\n  }\r\n\r\n  protected _setRoleFromChildren(children: T[]) {\r\n    this.role = children && children.length ? 'group' : 'treeitem';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an error to be thrown when there is no usable data.\r\n * @docs-private\r\n */\r\nexport function getTreeNoValidDataSourceError() {\r\n  return Error(`A valid data source must be provided.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\r\n * @docs-private\r\n */\r\nexport function getTreeMultipleDefaultNodeDefsError() {\r\n  return Error(`There can only be one default row without a when predicate function.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\r\n * @docs-private\r\n */\r\nexport function getTreeMissingMatchingNodeDefError() {\r\n  return Error(`Could not find a matching node definition for the provided node data.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are tree control.\r\n * @docs-private\r\n */\r\nexport function getTreeControlMissingError() {\r\n  return Error(`Could not find a tree control for the tree.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\r\n * @docs-private\r\n */\r\nexport function getTreeControlFunctionsMissingError() {\r\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  Directive,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\n\r\n/**\r\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodeOutlet]'\r\n})\r\nexport class CdkTreeNodeOutlet {\r\n  constructor(public viewContainer: ViewContainerRef) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n\r\n/** Context provided to the tree node component. */\r\nexport class CdkTreeNodeOutletContext<T> {\r\n  /** Data for the node. */\r\n  $implicit: T;\r\n\r\n  /** Depth of the node. */\r\n  level: number;\r\n\r\n  /** Index location of the node. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total dataNodes. */\r\n  count?: number;\r\n\r\n  constructor(data: T) {\r\n    this.$implicit = data;\r\n  }\r\n}\r\n\r\n/**\r\n * Data node definition for the CdkTree.\r\n * Captures the node's template and a when predicate that describes when this node should be used.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodeDef]',\r\n  inputs: [\r\n    'when: cdkTreeNodeDefWhen'\r\n  ],\r\n})\r\nexport class CdkTreeNodeDef<T> {\r\n  /**\r\n   * Function that should return true if this node template should be used for the provided node\r\n   * data and index. If left undefined, this node will be considered the default node template to\r\n   * use when no other when functions return true for the data.\r\n   * For every node, there must be at least one when function that passes or an undefined to\r\n   * default.\r\n   */\r\n  when: (index: number, nodeData: T) => boolean;\r\n\r\n  /** @docs-private */\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Observable} from 'rxjs';\r\nimport {take} from 'rxjs/operators';\r\nimport {BaseTreeControl} from './base-tree-control';\r\n\r\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\r\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\r\n\r\n  /** Construct with nested tree function getChildren. */\r\n  constructor(public getChildren: (dataNode: T) => (Observable<T[]> | T[])) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Expands all dataNodes in the tree.\r\n   *\r\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\r\n   * data nodes of the tree.\r\n   */\r\n  expandAll(): void {\r\n    this.expansionModel.clear();\r\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) =>\r\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\r\n    this.expansionModel.select(...allNodes);\r\n  }\r\n\r\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\r\n  getDescendants(dataNode: T): T[] {\r\n    const descendants = [];\r\n    this._getDescendants(descendants, dataNode);\r\n    // Remove the node itself\r\n    return descendants.splice(1);\r\n  }\r\n\r\n  /** A helper function to get descendants recursively. */\r\n  protected _getDescendants(descendants: T[], dataNode: T): void {\r\n    descendants.push(dataNode);\r\n    const childrenNodes = this.getChildren(dataNode);\r\n    if (Array.isArray(childrenNodes)) {\r\n      childrenNodes.forEach((child: T) => this._getDescendants(descendants, child));\r\n    } else if (childrenNodes instanceof Observable) {\r\n      childrenNodes.pipe(take(1)).subscribe(children => {\r\n        children.forEach((child: T) => this._getDescendants(descendants, child));\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BaseTreeControl} from './base-tree-control';\r\n\r\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\r\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\r\n\r\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\r\n  constructor(public getLevel: (dataNode: T) => number,\r\n              public isExpandable: (dataNode: T) => boolean) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Gets a list of the data node's subtree of descendent data nodes.\r\n   *\r\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\r\n   * with correct levels.\r\n   */\r\n  getDescendants(dataNode: T): T[] {\r\n    const startIndex = this.dataNodes.indexOf(dataNode);\r\n    const results: T[] = [];\r\n\r\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\r\n    // The level of descendants of a tree node must be greater than the level of the given\r\n    // tree node.\r\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\r\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\r\n    // sibling of an ancestor.\r\n    for (let i = startIndex + 1;\r\n        i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\r\n        i++) {\r\n      results.push(this.dataNodes[i]);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Expands all data nodes in the tree.\r\n   *\r\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\r\n   * data nodes of the tree.\r\n   */\r\n  expandAll(): void {\r\n    this.expansionModel.select(...this.dataNodes);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {Observable} from 'rxjs';\r\nimport {TreeControl} from './tree-control';\r\n\r\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\r\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\r\n\r\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\r\n  abstract getDescendants(dataNode: T): T[];\r\n\r\n  /** Expands all data nodes in the tree. */\r\n  abstract expandAll(): void;\r\n\r\n  /** Saved data node for `expandAll` action. */\r\n  dataNodes: T[];\r\n\r\n  /** A selection model with multi-selection to track expansion status. */\r\n  expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\r\n\r\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\r\n  getLevel: (dataNode: T) => number;\r\n\r\n  /**\r\n   * Whether the data node is expandable. Returns true if expandable.\r\n   * This is for flat tree node.\r\n   */\r\n  isExpandable: (dataNode: T) => boolean;\r\n\r\n  /** Gets a stream that emits whenever the given data node's children change. */\r\n  getChildren: (dataNode: T) => (Observable<T[]> | T[]);\r\n\r\n  /** Toggles one single data node's expanded/collapsed state. */\r\n  toggle(dataNode: T): void {\r\n    this.expansionModel.toggle(dataNode);\r\n  }\r\n\r\n  /** Expands one single data node. */\r\n  expand(dataNode: T): void {\r\n    this.expansionModel.select(dataNode);\r\n  }\r\n\r\n  /** Collapses one single data node. */\r\n  collapse(dataNode: T): void {\r\n    this.expansionModel.deselect(dataNode);\r\n  }\r\n\r\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\r\n  isExpanded(dataNode: T): boolean {\r\n    return this.expansionModel.isSelected(dataNode);\r\n  }\r\n\r\n  /** Toggles a subtree rooted at `node` recursively. */\r\n  toggleDescendants(dataNode: T): void {\r\n    this.expansionModel.isSelected(dataNode)\r\n        ? this.collapseDescendants(dataNode)\r\n        : this.expandDescendants(dataNode);\r\n  }\r\n\r\n  /** Collapse all dataNodes in the tree. */\r\n  collapseAll(): void {\r\n    this.expansionModel.clear();\r\n  }\r\n\r\n  /** Expands a subtree rooted at given data node recursively. */\r\n  expandDescendants(dataNode: T): void {\r\n    let toBeProcessed = [dataNode];\r\n    toBeProcessed.push(...this.getDescendants(dataNode));\r\n    this.expansionModel.select(...toBeProcessed);\r\n  }\r\n\r\n  /** Collapses a subtree rooted at given data node recursively. */\r\n  collapseDescendants(dataNode: T): void {\r\n    let toBeProcessed = [dataNode];\r\n    toBeProcessed.push(...this.getDescendants(dataNode));\r\n    this.expansionModel.deselect(...toBeProcessed);\r\n  }\r\n}\r\n"],"names":["tslib_1.__extends","observableOf"],"mappings":"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"}