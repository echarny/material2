{"version":3,"file":"overlay.es5.js","sources":["../../../src/cdk/overlay/fullscreen-overlay-container.ts","../../../src/cdk/overlay/overlay-module.ts","../../../src/cdk/overlay/overlay-directives.ts","../../../src/cdk/overlay/overlay.ts","../../../src/cdk/overlay/position/overlay-position-builder.ts","../../../src/cdk/overlay/position/global-position-strategy.ts","../../../src/cdk/overlay/position/connected-position-strategy.ts","../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../../src/cdk/overlay/overlay-ref.ts","../../../src/cdk/overlay/overlay-container.ts","../../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../../src/cdk/overlay/position/scroll-clip.ts","../../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../../src/cdk/overlay/scroll/scroll-strategy.ts","../../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../../src/cdk/overlay/position/connected-position.ts","../../../src/cdk/overlay/overlay-config.ts","../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n\r\n/**\r\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\r\n * Fullscreen mode\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\r\n *\r\n * Should be provided in the root component.\r\n */\r\n@Injectable()\r\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\r\n  private _fullScreenEventName: string | undefined;\r\n  private _fullScreenListener: () => void;\r\n\r\n  constructor(@Inject(DOCUMENT) _document: any) {\r\n    super(_document);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n\r\n    if (this._fullScreenEventName && this._fullScreenListener) {\r\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\r\n    }\r\n  }\r\n\r\n  protected _createContainer(): void {\r\n    super._createContainer();\r\n    this._adjustParentForFullscreenChange();\r\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\r\n  }\r\n\r\n  private _adjustParentForFullscreenChange(): void {\r\n    if (!this._containerElement) {\r\n      return;\r\n    }\r\n\r\n    const fullscreenElement = this.getFullscreenElement();\r\n    const parent = fullscreenElement || this._document.body;\r\n    parent.appendChild(this._containerElement);\r\n  }\r\n\r\n  private _addFullscreenChangeListener(fn: () => void) {\r\n    const eventName = this._getEventName();\r\n\r\n    if (eventName) {\r\n      if (this._fullScreenListener) {\r\n        this._document.removeEventListener(eventName, this._fullScreenListener);\r\n      }\r\n\r\n      this._document.addEventListener(eventName, fn);\r\n      this._fullScreenListener = fn;\r\n    }\r\n  }\r\n\r\n  private _getEventName(): string | undefined {\r\n    if (!this._fullScreenEventName) {\r\n      if (this._document.fullscreenEnabled) {\r\n        this._fullScreenEventName = 'fullscreenchange';\r\n      } else if (this._document.webkitFullscreenEnabled) {\r\n        this._fullScreenEventName = 'webkitfullscreenchange';\r\n      } else if ((this._document as any).mozFullScreenEnabled) {\r\n        this._fullScreenEventName = 'mozfullscreenchange';\r\n      } else if ((this._document as any).msFullscreenEnabled) {\r\n        this._fullScreenEventName = 'MSFullscreenChange';\r\n      }\r\n    }\r\n\r\n    return this._fullScreenEventName;\r\n  }\r\n\r\n  /**\r\n   * When the page is put into fullscreen mode, a specific element is specified.\r\n   * Only that element and its children are visible when in fullscreen mode.\r\n   */\r\n  getFullscreenElement(): Element {\r\n    return this._document.fullscreenElement ||\r\n           this._document.webkitFullscreenElement ||\r\n           (this._document as any).mozFullScreenElement ||\r\n           (this._document as any).msFullscreenElement ||\r\n           null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollingModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\r\nimport {NgModule, Provider} from '@angular/core';\r\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\r\nimport {Overlay} from './overlay';\r\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\r\nimport {\r\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n  CdkConnectedOverlay,\r\n  CdkOverlayOrigin,\r\n} from './overlay-directives';\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\n\r\n\r\n@NgModule({\r\n  imports: [BidiModule, PortalModule, ScrollingModule],\r\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\r\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\r\n  providers: [\r\n    Overlay,\r\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n})\r\nexport class OverlayModule {}\r\n\r\n\r\n/**\r\n * @deprecated Use `OverlayModule` instead.\r\n * @breaking-change 7.0.0\r\n */\r\nexport const OVERLAY_PROVIDERS: Provider[] = [\r\n  Overlay,\r\n  OverlayPositionBuilder,\r\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\r\n  VIEWPORT_RULER_PROVIDER,\r\n  OVERLAY_CONTAINER_PROVIDER,\r\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n];\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {Overlay} from './overlay';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\r\nimport {\r\n  ConnectedPosition,\r\n  FlexibleConnectedPositionStrategy,\r\n} from './position/flexible-connected-position-strategy';\r\nimport {\r\n  RepositionScrollStrategy,\r\n  RepositionScrollStrategyConfig,\r\n  ScrollStrategy,\r\n} from './scroll/index';\r\n\r\n\r\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\r\nconst defaultPositionList: ConnectedPosition[] = [\r\n  {\r\n    originX: 'start',\r\n    originY: 'bottom',\r\n    overlayX: 'start',\r\n    overlayY: 'top'\r\n  },\r\n  {\r\n    originX: 'start',\r\n    originY: 'top',\r\n    overlayX: 'start',\r\n    overlayY: 'bottom'\r\n  },\r\n  {\r\n    originX: 'end',\r\n    originY: 'top',\r\n    overlayX: 'end',\r\n    overlayY: 'bottom'\r\n  },\r\n  {\r\n    originX: 'end',\r\n    originY: 'bottom',\r\n    overlayX: 'end',\r\n    overlayY: 'top'\r\n  }\r\n];\r\n\r\n/** Injection token that determines the scroll handling while the connected overlay is open. */\r\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\r\n  () => ScrollStrategy {\r\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\r\n}\r\n\r\n/**\r\n * Directive applied to an element to make it usable as an origin for an Overlay using a\r\n * ConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\r\n  exportAs: 'cdkOverlayOrigin',\r\n})\r\nexport class CdkOverlayOrigin {\r\n  constructor(\r\n      /** Reference to the element on which the directive is applied. */\r\n      public elementRef: ElementRef) { }\r\n}\r\n\r\n\r\n/**\r\n * Directive to facilitate declarative creation of an\r\n * Overlay using a FlexibleConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\r\n  exportAs: 'cdkConnectedOverlay'\r\n})\r\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\r\n  private _overlayRef: OverlayRef;\r\n  private _templatePortal: TemplatePortal;\r\n  private _hasBackdrop = false;\r\n  private _lockPosition = false;\r\n  private _growAfterOpen = false;\r\n  private _flexibleDimensions = false;\r\n  private _push = false;\r\n  private _backdropSubscription = Subscription.EMPTY;\r\n  private _offsetX: number;\r\n  private _offsetY: number;\r\n  private _position: FlexibleConnectedPositionStrategy;\r\n\r\n  /** Origin for the connected overlay. */\r\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\r\n\r\n  /** Registered connected position pairs. */\r\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\r\n\r\n  /** The offset in pixels for the overlay connection point on the x-axis */\r\n  @Input('cdkConnectedOverlayOffsetX')\r\n  get offsetX(): number { return this._offsetX; }\r\n  set offsetX(offsetX: number) {\r\n    this._offsetX = offsetX;\r\n\r\n    if (this._position) {\r\n      this._setPositions(this._position);\r\n    }\r\n  }\r\n\r\n  /** The offset in pixels for the overlay connection point on the y-axis */\r\n  @Input('cdkConnectedOverlayOffsetY')\r\n  get offsetY() { return this._offsetY; }\r\n  set offsetY(offsetY: number) {\r\n    this._offsetY = offsetY;\r\n\r\n    if (this._position) {\r\n      this._setPositions(this._position);\r\n    }\r\n  }\r\n\r\n  /** The width of the overlay panel. */\r\n  @Input('cdkConnectedOverlayWidth') width: number | string;\r\n\r\n  /** The height of the overlay panel. */\r\n  @Input('cdkConnectedOverlayHeight') height: number | string;\r\n\r\n  /** The min width of the overlay panel. */\r\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\r\n\r\n  /** The min height of the overlay panel. */\r\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\r\n\r\n  /** The custom class to be set on the backdrop element. */\r\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\r\n\r\n  /** Margin between the overlay and the viewport edges. */\r\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\r\n\r\n  /** Strategy to be used when handling scroll events while the overlay is open. */\r\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy =\r\n      this._scrollStrategy();\r\n\r\n  /** Whether the overlay is open. */\r\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\r\n\r\n  /** Whether or not the overlay should attach a backdrop. */\r\n  @Input('cdkConnectedOverlayHasBackdrop')\r\n  get hasBackdrop() { return this._hasBackdrop; }\r\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\r\n\r\n  /** Whether or not the overlay should be locked when scrolling. */\r\n  @Input('cdkConnectedOverlayLockPosition')\r\n  get lockPosition() { return this._lockPosition; }\r\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  @Input('cdkConnectedOverlayFlexibleDimensions')\r\n  get flexibleDiemsions() { return this._flexibleDimensions; }\r\n  set flexibleDiemsions(value: boolean) { this._flexibleDimensions = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\r\n  @Input('cdkConnectedOverlayGrowAfterOpen')\r\n  get growAfterOpen() { return this._growAfterOpen; }\r\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n  @Input('cdkConnectedOverlayPush')\r\n  get push() { return this._push; }\r\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\r\n\r\n  /** Event emitted when the backdrop is clicked. */\r\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\r\n\r\n  /** Event emitted when the position has changed. */\r\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\r\n\r\n  /** Event emitted when the overlay has been attached. */\r\n  @Output() attach = new EventEmitter<void>();\r\n\r\n  /** Event emitted when the overlay has been detached. */\r\n  @Output() detach = new EventEmitter<void>();\r\n\r\n  /** Emits when there are keyboard events that are targeted at the overlay. */\r\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\r\n\r\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      templateRef: TemplateRef<any>,\r\n      viewContainerRef: ViewContainerRef,\r\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\r\n      @Optional() private _dir: Directionality) {\r\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\r\n  }\r\n\r\n  /** The associated overlay reference. */\r\n  get overlayRef(): OverlayRef {\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /** The element's layout direction. */\r\n  get dir(): Direction {\r\n    return this._dir ? this._dir.value : 'ltr';\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyOverlay();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (this._position) {\r\n      if (changes['positions']) {\r\n        this._position.withPositions(this.positions);\r\n      }\r\n\r\n      if (changes['lockPosition']) {\r\n        this._position.withLockedPosition(this.lockPosition);\r\n      }\r\n\r\n      if (changes['origin']) {\r\n        this._position.setOrigin(this.origin.elementRef);\r\n\r\n        if (this.open) {\r\n          this._position.apply();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (changes['open']) {\r\n      this.open ? this._attachOverlay() : this._detachOverlay();\r\n    }\r\n  }\r\n\r\n  /** Creates an overlay */\r\n  private _createOverlay() {\r\n    if (!this.positions || !this.positions.length) {\r\n      this.positions = defaultPositionList;\r\n    }\r\n\r\n    this._overlayRef = this._overlay.create(this._buildConfig());\r\n  }\r\n\r\n  /** Builds the overlay config based on the directive's inputs */\r\n  private _buildConfig(): OverlayConfig {\r\n    const positionStrategy = this._position = this._createPositionStrategy();\r\n    const overlayConfig = new OverlayConfig({\r\n      direction: this._dir,\r\n      positionStrategy,\r\n      scrollStrategy: this.scrollStrategy,\r\n      hasBackdrop: this.hasBackdrop\r\n    });\r\n\r\n    if (this.width || this.width === 0) {\r\n      overlayConfig.width = this.width;\r\n    }\r\n\r\n    if (this.height || this.height === 0) {\r\n      overlayConfig.height = this.height;\r\n    }\r\n\r\n    if (this.minWidth || this.minWidth === 0) {\r\n      overlayConfig.minWidth = this.minWidth;\r\n    }\r\n\r\n    if (this.minHeight || this.minHeight === 0) {\r\n      overlayConfig.minHeight = this.minHeight;\r\n    }\r\n\r\n    if (this.backdropClass) {\r\n      overlayConfig.backdropClass = this.backdropClass;\r\n    }\r\n\r\n    return overlayConfig;\r\n  }\r\n\r\n  /** Returns the position strategy of the overlay to be set on the overlay config */\r\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\r\n    const strategy = this._overlay.position()\r\n      .flexibleConnectedTo(this.origin.elementRef)\r\n      .withFlexibleDimensions(this.flexibleDiemsions)\r\n      .withPush(this.push)\r\n      .withGrowAfterOpen(this.growAfterOpen)\r\n      .withViewportMargin(this.viewportMargin)\r\n      .withLockedPosition(this.lockPosition);\r\n\r\n    this._setPositions(strategy);\r\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\r\n\r\n    return strategy;\r\n  }\r\n\r\n  /**\r\n   * Sets the primary and fallback positions of a positions strategy,\r\n   * based on the current directive inputs.\r\n   */\r\n  private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\r\n    const positions: ConnectedPosition[] = this.positions.map(pos => ({\r\n      originX: pos.originX,\r\n      originY: pos.originY,\r\n      overlayX: pos.overlayX,\r\n      overlayY: pos.overlayY,\r\n      offsetX: pos.offsetX || this.offsetX,\r\n      offsetY: pos.offsetY || this.offsetY\r\n    }));\r\n\r\n    positionStrategy.withPositions(positions);\r\n  }\r\n\r\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\r\n  private _attachOverlay() {\r\n    if (!this._overlayRef) {\r\n      this._createOverlay();\r\n\r\n      this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n        this.overlayKeydown.next(event);\r\n\r\n        if (event.keyCode === ESCAPE) {\r\n          this._detachOverlay();\r\n        }\r\n      });\r\n    } else {\r\n      // Update the overlay size, in case the directive's inputs have changed\r\n      this._overlayRef.updateSize({\r\n        width: this.width,\r\n        minWidth: this.minWidth,\r\n        height: this.height,\r\n        minHeight: this.minHeight,\r\n      });\r\n    }\r\n\r\n    if (!this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._templatePortal);\r\n      this.attach.emit();\r\n    }\r\n\r\n    if (this.hasBackdrop) {\r\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\r\n        this.backdropClick.emit(event);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\r\n  private _detachOverlay() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.detach();\r\n      this.detach.emit();\r\n    }\r\n\r\n    this._backdropSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Destroys the overlay created by this directive. */\r\n  private _destroyOverlay() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n    }\r\n\r\n    this._backdropSubscription.unsubscribe();\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private */\r\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DomPortalOutlet} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  Inject,\r\n  Injectable,\r\n  Injector,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\nimport {ScrollStrategyOptions} from './scroll/index';\r\n\r\n\r\n/** Next overlay unique ID. */\r\nlet nextUniqueId = 0;\r\n\r\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\r\n// it needs is different based on where OverlayModule is imported.\r\n\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\r\n */\r\n@Injectable()\r\nexport class Overlay {\r\n  private _appRef: ApplicationRef;\r\n\r\n  constructor(\r\n              /** Scrolling strategies that can be used when creating an overlay. */\r\n              public scrollStrategies: ScrollStrategyOptions,\r\n              private _overlayContainer: OverlayContainer,\r\n              private _componentFactoryResolver: ComponentFactoryResolver,\r\n              private _positionBuilder: OverlayPositionBuilder,\r\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\r\n              private _injector: Injector,\r\n              private _ngZone: NgZone,\r\n              @Inject(DOCUMENT) private _document: any,\r\n              private _directionality: Directionality) { }\r\n\r\n  /**\r\n   * Creates an overlay.\r\n   * @param config Configuration applied to the overlay.\r\n   * @returns Reference to the created overlay.\r\n   */\r\n  create(config?: OverlayConfig): OverlayRef {\r\n    const host = this._createHostElement();\r\n    const pane = this._createPaneElement(host);\r\n    const portalOutlet = this._createPortalOutlet(pane);\r\n    const overlayConfig = new OverlayConfig(config);\r\n\r\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\r\n\r\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\r\n      this._keyboardDispatcher, this._document);\r\n  }\r\n\r\n  /**\r\n   * Gets a position builder that can be used, via fluent API,\r\n   * to construct and configure a position strategy.\r\n   * @returns An overlay position builder.\r\n   */\r\n  position(): OverlayPositionBuilder {\r\n    return this._positionBuilder;\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n   * @returns Newly-created pane element\r\n   */\r\n  private _createPaneElement(host: HTMLElement): HTMLElement {\r\n    const pane = this._document.createElement('div');\r\n\r\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\r\n    pane.classList.add('cdk-overlay-pane');\r\n    host.appendChild(pane);\r\n\r\n    return pane;\r\n  }\r\n\r\n  /**\r\n   * Creates the host element that wraps around an overlay\r\n   * and can be used for advanced positioning.\r\n   * @returns Newly-create host element.\r\n   */\r\n  private _createHostElement(): HTMLElement {\r\n    const host = this._document.createElement('div');\r\n    this._overlayContainer.getContainerElement().appendChild(host);\r\n    return host;\r\n  }\r\n\r\n  /**\r\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\r\n   * @param pane The DOM element to turn into a portal outlet.\r\n   * @returns A portal outlet for the given DOM element.\r\n   */\r\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\r\n    // We have to resolve the ApplicationRef later in order to allow people\r\n    // to use overlay-based providers during app initialization.\r\n    if (!this._appRef) {\r\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\r\n    }\r\n\r\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\r\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\r\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\r\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\r\nimport {GlobalPositionStrategy} from './global-position-strategy';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {OverlayContainer} from '../overlay-container';\r\n\r\n\r\n/** Builder for overlay position strategy. */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayPositionBuilder {\r\n  constructor(\r\n    private _viewportRuler: ViewportRuler,\r\n    @Inject(DOCUMENT) private _document: any,\r\n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\r\n    @Optional() private _platform?: Platform,\r\n    @Optional() private _overlayContainer?: OverlayContainer) { }\r\n\r\n  /**\r\n   * Creates a global position strategy.\r\n   */\r\n  global(): GlobalPositionStrategy {\r\n    return new GlobalPositionStrategy();\r\n  }\r\n\r\n  /**\r\n   * Creates a relative position strategy.\r\n   * @param elementRef\r\n   * @param originPos\r\n   * @param overlayPos\r\n   * @deprecated Use `flexibleConnectedTo` instead.\r\n   * @breaking-change 7.0.0\r\n   */\r\n  connectedTo(\r\n      elementRef: ElementRef,\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\r\n\r\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\r\n        this._document);\r\n  }\r\n\r\n  /**\r\n   * Creates a flexible position strategy.\r\n   * @param elementRef\r\n   */\r\n  flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\r\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\r\n        this._platform, this._overlayContainer);\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * explicit position relative to the browser's viewport. We use flexbox, instead of\r\n * transforms, in order to avoid issues with subpixel rendering which can cause the\r\n * element to become blurry.\r\n */\r\nexport class GlobalPositionStrategy implements PositionStrategy {\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n  private _cssPosition: string = 'static';\r\n  private _topOffset: string = '';\r\n  private _bottomOffset: string = '';\r\n  private _leftOffset: string = '';\r\n  private _rightOffset: string = '';\r\n  private _alignItems: string = '';\r\n  private _justifyContent: string = '';\r\n  private _width: string = '';\r\n  private _height: string = '';\r\n\r\n  attach(overlayRef: OverlayReference): void {\r\n    const config = overlayRef.getConfig();\r\n\r\n    this._overlayRef = overlayRef;\r\n\r\n    if (this._width && !config.width) {\r\n      overlayRef.updateSize({width: this._width});\r\n    }\r\n\r\n    if (this._height && !config.height) {\r\n      overlayRef.updateSize({height: this._height});\r\n    }\r\n\r\n    overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\r\n  }\r\n\r\n  /**\r\n   * Sets the top position of the overlay. Clears any previously set vertical position.\r\n   * @param value New top offset.\r\n   */\r\n  top(value: string = ''): this {\r\n    this._bottomOffset = '';\r\n    this._topOffset = value;\r\n    this._alignItems = 'flex-start';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\r\n   * @param value New left offset.\r\n   */\r\n  left(value: string = ''): this {\r\n    this._rightOffset = '';\r\n    this._leftOffset = value;\r\n    this._justifyContent = 'flex-start';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\r\n   * @param value New bottom offset.\r\n   */\r\n  bottom(value: string = ''): this {\r\n    this._topOffset = '';\r\n    this._bottomOffset = value;\r\n    this._alignItems = 'flex-end';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\r\n   * @param value New right offset.\r\n   */\r\n  right(value: string = ''): this {\r\n    this._leftOffset = '';\r\n    this._rightOffset = value;\r\n    this._justifyContent = 'flex-end';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the overlay width and clears any previously set width.\r\n   * @param value New width for the overlay\r\n   * @deprecated Pass the `width` through the `OverlayConfig`.\r\n   * @breaking-change 7.0.0\r\n   */\r\n  width(value: string = ''): this {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.updateSize({width: value});\r\n    } else {\r\n      this._width = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the overlay height and clears any previously set height.\r\n   * @param value New height for the overlay\r\n   * @deprecated Pass the `height` through the `OverlayConfig`.\r\n   * @breaking-change 7.0.0\r\n   */\r\n  height(value: string = ''): this {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.updateSize({height: value});\r\n    } else {\r\n      this._height = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Centers the overlay horizontally with an optional offset.\r\n   * Clears any previously set horizontal position.\r\n   *\r\n   * @param offset Overlay offset from the horizontal center.\r\n   */\r\n  centerHorizontally(offset: string = ''): this {\r\n    this.left(offset);\r\n    this._justifyContent = 'center';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Centers the overlay vertically with an optional offset.\r\n   * Clears any previously set vertical position.\r\n   *\r\n   * @param offset Overlay offset from the vertical center.\r\n   */\r\n  centerVertically(offset: string = ''): this {\r\n    this.top(offset);\r\n    this._alignItems = 'center';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the position to the element.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    // Since the overlay ref applies the strategy asynchronously, it could\r\n    // have been disposed before it ends up being applied. If that is the\r\n    // case, we shouldn't do anything.\r\n    if (!this._overlayRef.hasAttached()) {\r\n      return;\r\n    }\r\n\r\n    const styles = this._overlayRef.overlayElement.style;\r\n    const parentStyles = this._overlayRef.hostElement.style;\r\n    const config = this._overlayRef.getConfig();\r\n\r\n    styles.position = this._cssPosition;\r\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\r\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\r\n    styles.marginBottom = this._bottomOffset;\r\n    styles.marginRight = this._rightOffset;\r\n\r\n    if (config.width === '100%') {\r\n      parentStyles.justifyContent = 'flex-start';\r\n    } else if (this._justifyContent === 'center') {\r\n        parentStyles.justifyContent = 'center';\r\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\r\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\r\n      // don't want that because our positioning is explicitly `left` and `right`, hence\r\n      // why we do another inversion to ensure that the overlay stays in the same position.\r\n      // TODO: reconsider this if we add `start` and `end` methods.\r\n      if (this._justifyContent === 'flex-start') {\r\n        parentStyles.justifyContent = 'flex-end';\r\n      } else if (this._justifyContent === 'flex-end') {\r\n        parentStyles.justifyContent = 'flex-start';\r\n      }\r\n    } else {\r\n      parentStyles.justifyContent = this._justifyContent;\r\n    }\r\n\r\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\r\n  }\r\n\r\n  /**\r\n   * Noop implemented as a part of the PositionStrategy interface.\r\n   * @docs-private\r\n   */\r\n  dispose(): void { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {ElementRef} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {\r\n  ConnectedOverlayPositionChange,\r\n  ConnectionPositionPair,\r\n  OriginConnectionPosition,\r\n  OverlayConnectionPosition,\r\n} from './connected-position';\r\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\r\nimport {PositionStrategy} from './position-strategy';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative to some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\r\n * @breaking-change 7.0.0\r\n */\r\nexport class ConnectedPositionStrategy implements PositionStrategy {\r\n  /**\r\n   * Reference to the underlying position strategy to which all the API calls are proxied.\r\n   * @docs-private\r\n   */\r\n  _positionStrategy: FlexibleConnectedPositionStrategy;\r\n\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n\r\n  private _direction: Direction | null;\r\n\r\n  /** Whether the we're dealing with an RTL context */\r\n  get _isRtl() {\r\n    return this._overlayRef.getDirection() === 'rtl';\r\n  }\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  _preferredPositions: ConnectionPositionPair[] = [];\r\n\r\n  /** Emits an event when the connection point changes. */\r\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\r\n    return this._positionStrategy.positionChanges;\r\n  }\r\n\r\n  constructor(\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition,\r\n      connectedTo: ElementRef,\r\n      viewportRuler: ViewportRuler,\r\n      document: Document,\r\n      // @breaking-change 7.0.0 `platform` parameter to be made required.\r\n      platform?: Platform) {\r\n\r\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\r\n    // the extra logic, we create an instance of the positioning strategy that has some\r\n    // defaults that make it behave as the old position strategy and to which we'll\r\n    // proxy all of the API calls.\r\n    this._positionStrategy =\r\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\r\n        .withFlexibleDimensions(false)\r\n        .withPush(false)\r\n        .withViewportMargin(0);\r\n\r\n    this.withFallbackPosition(originPos, overlayPos);\r\n  }\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  get positions(): ConnectionPositionPair[] {\r\n    return this._preferredPositions;\r\n  }\r\n\r\n  /** Attach this position strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference): void {\r\n    this._overlayRef = overlayRef;\r\n    this._positionStrategy.attach(overlayRef);\r\n\r\n    if (this._direction) {\r\n      overlayRef.setDirection(this._direction);\r\n      this._direction = null;\r\n    }\r\n  }\r\n\r\n  /** Disposes all resources used by the position strategy. */\r\n  dispose() {\r\n    this._positionStrategy.dispose();\r\n  }\r\n\r\n  /** @docs-private */\r\n  detach() {\r\n    this._positionStrategy.detach();\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the overlay element, using whichever preferred position relative\r\n   * to the origin fits on-screen.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    this._positionStrategy.apply();\r\n  }\r\n\r\n  /**\r\n   * Re-positions the overlay element with the trigger in its last calculated position,\r\n   * even if a position higher in the \"preferred positions\" list would now fit. This\r\n   * allows one to re-align the panel without changing the orientation of the panel.\r\n   */\r\n  recalculateLastPosition(): void {\r\n    this._positionStrategy.reapplyLastPosition();\r\n  }\r\n\r\n  /**\r\n   * Sets the list of Scrollable containers that host the origin element so that\r\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n   * Scrollable must be an ancestor element of the strategy's origin element.\r\n   */\r\n  withScrollableContainers(scrollables: CdkScrollable[]) {\r\n    this._positionStrategy.withScrollableContainers(scrollables);\r\n  }\r\n\r\n  /**\r\n   * Adds a new preferred fallback position.\r\n   * @param originPos\r\n   * @param overlayPos\r\n   */\r\n  withFallbackPosition(\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition,\r\n      offsetX?: number,\r\n      offsetY?: number): this {\r\n\r\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\r\n    this._preferredPositions.push(position);\r\n    this._positionStrategy.withPositions(this._preferredPositions);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the layout direction so the overlay's position can be adjusted to match.\r\n   * @param dir New layout direction.\r\n   */\r\n  withDirection(dir: 'ltr' | 'rtl'): this {\r\n    // Since the direction might be declared before the strategy is attached,\r\n    // we save the value in a temporary property and we'll transfer it to the\r\n    // overlay ref on attachment.\r\n    if (this._overlayRef) {\r\n      this._overlayRef.setDirection(dir);\r\n    } else {\r\n      this._direction = dir;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an offset for the overlay's connection point on the x-axis\r\n   * @param offset New offset in the X axis.\r\n   */\r\n  withOffsetX(offset: number): this {\r\n    this._positionStrategy.withDefaultOffsetX(offset);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an offset for the overlay's connection point on the y-axis\r\n   * @param  offset New offset in the Y axis.\r\n   */\r\n  withOffsetY(offset: number): this {\r\n    this._positionStrategy.withDefaultOffsetY(offset);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the overlay's position should be locked in after it is positioned\r\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n   * when the position is re-applied (e.g. when the user scrolls away).\r\n   * @param isLocked Whether the overlay should locked in.\r\n   */\r\n  withLockedPosition(isLocked: boolean): this {\r\n    this._positionStrategy.withLockedPosition(isLocked);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Overwrites the current set of positions with an array of new ones.\r\n   * @param positions Position pairs to be set on the strategy.\r\n   */\r\n  withPositions(positions: ConnectionPositionPair[]): this {\r\n    this._preferredPositions = positions.slice();\r\n    this._positionStrategy.withPositions(this._preferredPositions);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the origin element, relative to which to position the overlay.\r\n   * @param origin Reference to the new origin element.\r\n   */\r\n  setOrigin(origin: ElementRef): this {\r\n    this._positionStrategy.setOrigin(origin);\r\n    return this;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position-strategy';\r\nimport {ElementRef} from '@angular/core';\r\nimport {ViewportRuler, CdkScrollable} from '@angular/cdk/scrolling';\r\nimport {\r\n  ConnectedOverlayPositionChange,\r\n  ConnectionPositionPair,\r\n  ScrollingVisibility,\r\n  validateHorizontalPosition,\r\n  validateVerticalPosition,\r\n} from './connected-position';\r\nimport {Observable, Subscription, Subject} from 'rxjs';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\r\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {OverlayContainer} from '../overlay-container';\r\n\r\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\r\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n */\r\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n\r\n  /** Whether we're performing the very first positioning of the overlay. */\r\n  private _isInitialRender = true;\r\n\r\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\r\n  private _lastBoundingBoxSize = {width: 0, height: 0};\r\n\r\n  /** Whether the overlay was pushed in a previous positioning. */\r\n  private _isPushed = false;\r\n\r\n  /** Whether the overlay can be pushed on-screen on the initial open. */\r\n  private _canPush = true;\r\n\r\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\r\n  private _growAfterOpen = false;\r\n\r\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  private _hasFlexibleDimensions = true;\r\n\r\n  /** Whether the overlay position is locked. */\r\n  private _positionLocked = false;\r\n\r\n  /** Cached origin dimensions */\r\n  private _originRect: ClientRect;\r\n\r\n  /** Cached overlay dimensions */\r\n  private _overlayRect: ClientRect;\r\n\r\n  /** Cached viewport dimensions */\r\n  private _viewportRect: ClientRect;\r\n\r\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\r\n  private _viewportMargin = 0;\r\n\r\n  /** The Scrollable containers used to check scrollable view properties on position change. */\r\n  private scrollables: CdkScrollable[] = [];\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  _preferredPositions: ConnectionPositionPair[] = [];\r\n\r\n  /** The origin element against which the overlay will be positioned. */\r\n  private _origin: HTMLElement;\r\n\r\n  /** The overlay pane element. */\r\n  private _pane: HTMLElement;\r\n\r\n  /** Whether the strategy has been disposed of already. */\r\n  private _isDisposed: boolean;\r\n\r\n  /**\r\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\r\n   * within the viewport.\r\n   */\r\n  private _boundingBox: HTMLElement | null;\r\n\r\n  /** The last position to have been calculated as the best fit position. */\r\n  private _lastPosition: ConnectedPosition | null;\r\n\r\n  /** Subject that emits whenever the position changes. */\r\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\r\n\r\n  /** Subscription to viewport size changes. */\r\n  private _resizeSubscription = Subscription.EMPTY;\r\n\r\n  /** Default offset for the overlay along the x axis. */\r\n  private _offsetX = 0;\r\n\r\n  /** Default offset for the overlay along the y axis. */\r\n  private _offsetY = 0;\r\n\r\n  /** Selector to be used when finding the elements on which to set the transform origin. */\r\n  private _transformOriginSelector: string;\r\n\r\n  /** Amount of subscribers to the `positionChanges` stream. */\r\n  private _positionChangeSubscriptions = 0;\r\n\r\n  /** Observable sequence of position changes. */\r\n  positionChanges: Observable<ConnectedOverlayPositionChange> = Observable.create(observer => {\r\n    const subscription = this._positionChanges.subscribe(observer);\r\n    this._positionChangeSubscriptions++;\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      this._positionChangeSubscriptions--;\r\n    };\r\n  });\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  get positions() {\r\n    return this._preferredPositions;\r\n  }\r\n\r\n  constructor(\r\n    connectedTo: ElementRef | HTMLElement,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _document: Document,\r\n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\r\n    private _platform?: Platform,\r\n    private _overlayContainer?: OverlayContainer) {\r\n    this.setOrigin(connectedTo);\r\n  }\r\n\r\n  /** Attaches this position strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference): void {\r\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\r\n      throw Error('This position strategy is already attached to an overlay');\r\n    }\r\n\r\n    this._validatePositions();\r\n\r\n    overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\r\n\r\n    this._overlayRef = overlayRef;\r\n    this._boundingBox = overlayRef.hostElement;\r\n    this._pane = overlayRef.overlayElement;\r\n    this._resizeSubscription.unsubscribe();\r\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the overlay element, using whichever preferred position relative\r\n   * to the origin best fits on-screen.\r\n   *\r\n   * The selection of a position goes as follows:\r\n   *  - If any positions fit completely within the viewport as-is,\r\n   *      choose the first position that does so.\r\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\r\n   *      choose the position with the greatest available size modified by the positions' weight.\r\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\r\n   *      on-screen.\r\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\r\n    // @breaking-change 7.0.0 Remove `_platform` null check once it's guaranteed to be defined.\r\n    if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\r\n      return;\r\n    }\r\n\r\n    // If the position has been applied already (e.g. when the overlay was opened) and the\r\n    // consumer opted into locking in the position, re-use the old position, in order to\r\n    // prevent the overlay from jumping around.\r\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\r\n      this.reapplyLastPosition();\r\n      return;\r\n    }\r\n\r\n    this._resetOverlayElementStyles();\r\n    this._resetBoundingBoxStyles();\r\n\r\n    // We need the bounding rects for the origin and the overlay to determine how to position\r\n    // the overlay relative to the origin.\r\n    // We use the viewport rect to determine whether a position would go off-screen.\r\n    this._viewportRect = this._getNarrowedViewportRect();\r\n    this._originRect = this._origin.getBoundingClientRect();\r\n    this._overlayRect = this._pane.getBoundingClientRect();\r\n\r\n    const originRect = this._originRect;\r\n    const overlayRect = this._overlayRect;\r\n    const viewportRect = this._viewportRect;\r\n\r\n    // Positions where the overlay will fit with flexible dimensions.\r\n    const flexibleFits: FlexibleFit[] = [];\r\n\r\n    // Fallback if none of the preferred positions fit within the viewport.\r\n    let fallback: FallbackPosition | undefined;\r\n\r\n    // Go through each of the preferred positions looking for a good fit.\r\n    // If a good fit is found, it will be applied immediately.\r\n    for (let pos of this._preferredPositions) {\r\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\r\n      let originPoint = this._getOriginPoint(originRect, pos);\r\n\r\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\r\n      // overlay in this position. We use the top-left corner for calculations and later translate\r\n      // this into an appropriate (top, left, bottom, right) style.\r\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\r\n\r\n      // Calculate how well the overlay would fit into the viewport with this point.\r\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\r\n\r\n      // If the overlay, without any further work, fits into the viewport, use this position.\r\n      if (overlayFit.isCompletelyWithinViewport) {\r\n        this._isPushed = false;\r\n        this._applyPosition(pos, originPoint);\r\n        return;\r\n      }\r\n\r\n      // If the overlay has flexible dimensions, we can use this position\r\n      // so long as there's enough space for the minimum dimensions.\r\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\r\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\r\n        // if none of the positions fit *without* flexible dimensions.\r\n        flexibleFits.push({\r\n          position: pos,\r\n          origin: originPoint,\r\n          overlayRect,\r\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      // If the current preferred position does not fit on the screen, remember the position\r\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\r\n      // position.\r\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\r\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\r\n      }\r\n    }\r\n\r\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\r\n    // one that has the greatest area available modified by the position's weight\r\n    if (flexibleFits.length) {\r\n      let bestFit: FlexibleFit | null = null;\r\n      let bestScore = -1;\r\n      for (const fit of flexibleFits) {\r\n        const score =\r\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\r\n        if (score > bestScore) {\r\n          bestScore = score;\r\n          bestFit = fit;\r\n        }\r\n      }\r\n\r\n      this._isPushed = false;\r\n      this._applyPosition(bestFit!.position, bestFit!.origin);\r\n      return;\r\n    }\r\n\r\n    // When none of the preferred positions fit within the viewport, take the position\r\n    // that went off-screen the least and attempt to push it on-screen.\r\n    if (this._canPush) {\r\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\r\n      this._isPushed = true;\r\n      this._applyPosition(fallback!.position, fallback!.originPoint);\r\n      return;\r\n    }\r\n\r\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\r\n    // position that went off-screen the least.\r\n    this._applyPosition(fallback!.position, fallback!.originPoint);\r\n  }\r\n\r\n  detach() {\r\n    this._resizeSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Cleanup after the element gets destroyed. */\r\n  dispose() {\r\n    if (!this._isDisposed) {\r\n      this.detach();\r\n      this._boundingBox = null;\r\n      this._positionChanges.complete();\r\n      this._isDisposed = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This re-aligns the overlay element with the trigger in its last calculated position,\r\n   * even if a position higher in the \"preferred positions\" list would now fit. This\r\n   * allows one to re-align the panel without changing the orientation of the panel.\r\n   */\r\n  reapplyLastPosition(): void {\r\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\r\n      this._originRect = this._origin.getBoundingClientRect();\r\n      this._overlayRect = this._pane.getBoundingClientRect();\r\n      this._viewportRect = this._getNarrowedViewportRect();\r\n\r\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\r\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\r\n\r\n      this._applyPosition(lastPosition, originPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the list of Scrollable containers that host the origin element so that\r\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n   * Scrollable must be an ancestor element of the strategy's origin element.\r\n   */\r\n  withScrollableContainers(scrollables: CdkScrollable[]) {\r\n    this.scrollables = scrollables;\r\n  }\r\n\r\n  /**\r\n   * Adds new preferred positions.\r\n   * @param positions List of positions options for this overlay.\r\n   */\r\n  withPositions(positions: ConnectedPosition[]): this {\r\n    this._preferredPositions = positions;\r\n\r\n    // If the last calculated position object isn't part of the positions anymore, clear\r\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\r\n    if (positions.indexOf(this._lastPosition!) === -1) {\r\n      this._lastPosition = null;\r\n    }\r\n\r\n    this._validatePositions();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\r\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\r\n   */\r\n  withViewportMargin(margin: number): this {\r\n    this._viewportMargin = margin;\r\n    return this;\r\n  }\r\n\r\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  withFlexibleDimensions(flexibleDimensions = true): this {\r\n    this._hasFlexibleDimensions = flexibleDimensions;\r\n    return this;\r\n  }\r\n\r\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\r\n  withGrowAfterOpen(growAfterOpen = true): this {\r\n    this._growAfterOpen = growAfterOpen;\r\n    return this;\r\n  }\r\n\r\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n  withPush(canPush = true): this {\r\n    this._canPush = canPush;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the overlay's position should be locked in after it is positioned\r\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n   * when the position is re-applied (e.g. when the user scrolls away).\r\n   * @param isLocked Whether the overlay should locked in.\r\n   */\r\n  withLockedPosition(isLocked = true): this {\r\n    this._positionLocked = isLocked;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the origin element, relative to which to position the overlay.\r\n   * @param origin Reference to the new origin element.\r\n   */\r\n  setOrigin(origin: ElementRef | HTMLElement): this {\r\n    this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the default offset for the overlay's connection point on the x-axis.\r\n   * @param offset New offset in the X axis.\r\n   */\r\n  withDefaultOffsetX(offset: number): this {\r\n    this._offsetX = offset;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the default offset for the overlay's connection point on the y-axis.\r\n   * @param offset New offset in the Y axis.\r\n   */\r\n  withDefaultOffsetY(offset: number): this {\r\n    this._offsetY = offset;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures that the position strategy should set a `transform-origin` on some elements\r\n   * inside the overlay, depending on the current position that is being applied. This is\r\n   * useful for the cases where the origin of an animation can change depending on the\r\n   * alignment of the overlay.\r\n   * @param selector CSS selector that will be used to find the target\r\n   *    elements onto which to set the transform origin.\r\n   */\r\n  withTransformOriginOn(selector: string): this {\r\n    this._transformOriginSelector = selector;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\r\n   */\r\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\r\n    let x: number;\r\n    if (pos.originX == 'center') {\r\n      // Note: when centering we should always use the `left`\r\n      // offset, otherwise the position will be wrong in RTL.\r\n      x = originRect.left + (originRect.width / 2);\r\n    } else {\r\n      const startX = this._isRtl() ? originRect.right : originRect.left;\r\n      const endX = this._isRtl() ? originRect.left : originRect.right;\r\n      x = pos.originX == 'start' ? startX : endX;\r\n    }\r\n\r\n    let y: number;\r\n    if (pos.originY == 'center') {\r\n      y = originRect.top + (originRect.height / 2);\r\n    } else {\r\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\r\n    }\r\n\r\n    return {x, y};\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\r\n   * origin point to which the overlay should be connected.\r\n   */\r\n  private _getOverlayPoint(\r\n      originPoint: Point,\r\n      overlayRect: ClientRect,\r\n      pos: ConnectedPosition): Point {\r\n\r\n    // Calculate the (overlayStartX, overlayStartY), the start of the\r\n    // potential overlay position relative to the origin point.\r\n    let overlayStartX: number;\r\n    if (pos.overlayX == 'center') {\r\n      overlayStartX = -overlayRect.width / 2;\r\n    } else if (pos.overlayX === 'start') {\r\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\r\n    } else {\r\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\r\n    }\r\n\r\n    let overlayStartY: number;\r\n    if (pos.overlayY == 'center') {\r\n      overlayStartY = -overlayRect.height / 2;\r\n    } else {\r\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\r\n    }\r\n\r\n    // The (x, y) coordinates of the overlay.\r\n    return {\r\n      x: originPoint.x + overlayStartX,\r\n      y: originPoint.y + overlayStartY,\r\n    };\r\n  }\r\n\r\n  /** Gets how well an overlay at the given point will fit within the viewport. */\r\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\r\n    position: ConnectedPosition): OverlayFit {\r\n\r\n    let {x, y} = point;\r\n    let offsetX = this._getOffset(position, 'x');\r\n    let offsetY = this._getOffset(position, 'y');\r\n\r\n    // Account for the offsets since they could push the overlay out of the viewport.\r\n    if (offsetX) {\r\n      x += offsetX;\r\n    }\r\n\r\n    if (offsetY) {\r\n      y += offsetY;\r\n    }\r\n\r\n    // How much the overlay would overflow at this position, on each side.\r\n    let leftOverflow = 0 - x;\r\n    let rightOverflow = (x + overlay.width) - viewport.width;\r\n    let topOverflow = 0 - y;\r\n    let bottomOverflow = (y + overlay.height) - viewport.height;\r\n\r\n    // Visible parts of the element on each axis.\r\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\r\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\r\n    let visibleArea = visibleWidth * visibleHeight;\r\n\r\n    return {\r\n      visibleArea,\r\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\r\n      fitsInViewportVertically: visibleHeight === overlay.height,\r\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\r\n   * @param fit How well the overlay fits in the viewport at some position.\r\n   * @param point The (x, y) coordinates of the overlat at some position.\r\n   * @param viewport The geometry of the viewport.\r\n   */\r\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\r\n    if (this._hasFlexibleDimensions) {\r\n      const availableHeight = viewport.bottom - point.y;\r\n      const availableWidth = viewport.right - point.x;\r\n      const minHeight = this._overlayRef.getConfig().minHeight;\r\n      const minWidth = this._overlayRef.getConfig().minWidth;\r\n\r\n      const verticalFit = fit.fitsInViewportVertically ||\r\n          (minHeight != null && minHeight <= availableHeight);\r\n      const horizontalFit = fit.fitsInViewportHorizontally ||\r\n          (minWidth != null && minWidth <= availableWidth);\r\n\r\n      return verticalFit && horizontalFit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\r\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\r\n   * right and bottom).\r\n   *\r\n   * @param start The starting point from which the overlay is pushed.\r\n   * @param overlay The overlay dimensions.\r\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\r\n   *     originPoint.\r\n   */\r\n  private _pushOverlayOnScreen(start: Point, overlay: ClientRect): Point {\r\n    const viewport = this._viewportRect;\r\n\r\n    // Determine how much the overlay goes outside the viewport on each side, which we'll use to\r\n    // decide which direction to push it.\r\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\r\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\r\n    const overflowTop = Math.max(viewport.top - start.y, 0);\r\n    const overflowLeft = Math.max(viewport.left - start.x, 0);\r\n\r\n    // Amount by which to push the overlay in each direction such that it remains on-screen.\r\n    let pushX, pushY = 0;\r\n\r\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\r\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\r\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\r\n    if (overlay.width <= viewport.width) {\r\n      pushX = overflowLeft || -overflowRight;\r\n    } else {\r\n      pushX = viewport.left - start.x;\r\n    }\r\n\r\n    if (overlay.height <= viewport.height) {\r\n      pushY = overflowTop || -overflowBottom;\r\n    } else {\r\n      pushY = viewport.top - start.y;\r\n    }\r\n\r\n    return {\r\n      x: start.x + pushX,\r\n      y: start.y + pushY,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Applies a computed position to the overlay and emits a position change.\r\n   * @param position The position preference\r\n   * @param originPoint The point on the origin element where the overlay is connected.\r\n   */\r\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\r\n    this._setTransformOrigin(position);\r\n    this._setOverlayElementStyles(originPoint, position);\r\n    this._setBoundingBoxStyles(originPoint, position);\r\n\r\n    // Save the last connected position in case the position needs to be re-calculated.\r\n    this._lastPosition = position;\r\n\r\n    // Notify that the position has been changed along with its change properties.\r\n    // We only emit if we've got any subscriptions, because the scroll visibility\r\n    // calculcations can be somewhat expensive.\r\n    if (this._positionChangeSubscriptions > 0) {\r\n      const scrollableViewProperties = this._getScrollVisibility();\r\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\r\n      this._positionChanges.next(changeEvent);\r\n    }\r\n\r\n    this._isInitialRender = false;\r\n  }\r\n\r\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\r\n  private _setTransformOrigin(position: ConnectedPosition) {\r\n    if (!this._transformOriginSelector) {\r\n      return;\r\n    }\r\n\r\n    const elements: NodeListOf<HTMLElement> =\r\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\r\n    let xOrigin: 'left' | 'right' | 'center';\r\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\r\n\r\n    if (position.overlayX === 'center') {\r\n      xOrigin = 'center';\r\n    } else if (this._isRtl()) {\r\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\r\n    } else {\r\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\r\n    }\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the position and size of the overlay's sizing container.\r\n   *\r\n   * This method does no measuring and applies no styles so that we can cheaply compute the\r\n   * bounds for all positions and choose the best fit based on these results.\r\n   */\r\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\r\n    const viewport = this._viewportRect;\r\n    const isRtl = this._isRtl();\r\n    let height, top, bottom;\r\n\r\n    if (position.overlayY === 'top') {\r\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\r\n      top = origin.y;\r\n      height = viewport.bottom - origin.y;\r\n    } else if (position.overlayY === 'bottom') {\r\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\r\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\r\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\r\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\r\n      height = viewport.height - bottom + this._viewportMargin;\r\n    } else {\r\n      // If neither top nor bottom, it means that the overlay\r\n      // is vertically centered on the origin point.\r\n      const smallestDistanceToViewportEdge =\r\n          Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\r\n      const previousHeight = this._lastBoundingBoxSize.height;\r\n\r\n      height = smallestDistanceToViewportEdge * 2;\r\n      top = origin.y - smallestDistanceToViewportEdge;\r\n\r\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\r\n        top = origin.y - (previousHeight / 2);\r\n      }\r\n    }\r\n\r\n    // The overlay is opening 'right-ward' (the content flows to the right).\r\n    const isBoundedByRightViewportEdge =\r\n        (position.overlayX === 'start' && !isRtl) ||\r\n        (position.overlayX === 'end' && isRtl);\r\n\r\n    // The overlay is opening 'left-ward' (the content flows to the left).\r\n    const isBoundedByLeftViewportEdge =\r\n        (position.overlayX === 'end' && !isRtl) ||\r\n        (position.overlayX === 'start' && isRtl);\r\n\r\n    let width, left, right;\r\n\r\n    if (isBoundedByLeftViewportEdge) {\r\n      right = viewport.right - origin.x + this._viewportMargin;\r\n      width = origin.x - viewport.left;\r\n    } else if (isBoundedByRightViewportEdge) {\r\n      left = origin.x;\r\n      width = viewport.right - origin.x;\r\n    } else {\r\n      // If neither start nor end, it means that the overlay\r\n      // is horizontally centered on the origin point.\r\n      const smallestDistanceToViewportEdge =\r\n          Math.min(viewport.right - origin.x, origin.x - viewport.top);\r\n      const previousWidth = this._lastBoundingBoxSize.width;\r\n\r\n      width = smallestDistanceToViewportEdge * 2;\r\n      left = origin.x - smallestDistanceToViewportEdge;\r\n\r\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\r\n        left = origin.x - (previousWidth / 2);\r\n      }\r\n    }\r\n\r\n    return {top, left, bottom, right, width, height};\r\n  }\r\n\r\n  /**\r\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\r\n   * origin's connection point and stetches to the bounds of the viewport.\r\n   *\r\n   * @param origin The point on the origin element where the overlay is connected.\r\n   * @param position The position preference\r\n   */\r\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\r\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\r\n\r\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\r\n    // when applying a new size.\r\n    if (!this._isInitialRender && !this._growAfterOpen) {\r\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\r\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\r\n    }\r\n\r\n    const styles = {} as CSSStyleDeclaration;\r\n\r\n    if (this._hasExactPosition()) {\r\n      styles.top = styles.left = '0';\r\n      styles.bottom = styles.right = '';\r\n      styles.width = styles.height = '100%';\r\n    } else {\r\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\r\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\r\n\r\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\r\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\r\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\r\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\r\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\r\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\r\n\r\n      // Push the pane content towards the proper direction.\r\n      if (position.overlayX === 'center') {\r\n        styles.alignItems = 'center';\r\n      } else {\r\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\r\n      }\r\n\r\n      if (position.overlayY === 'center') {\r\n        styles.justifyContent = 'center';\r\n      } else {\r\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\r\n      }\r\n\r\n      if (maxHeight) {\r\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\r\n      }\r\n\r\n      if (maxWidth) {\r\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\r\n      }\r\n    }\r\n\r\n    this._lastBoundingBoxSize = boundingBoxRect;\r\n\r\n    extendStyles(this._boundingBox!.style, styles);\r\n  }\r\n\r\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\r\n  private _resetBoundingBoxStyles() {\r\n    extendStyles(this._boundingBox!.style, {\r\n      top: '0',\r\n      left: '0',\r\n      right: '0',\r\n      bottom: '0',\r\n      height: '',\r\n      width: '',\r\n      alignItems: '',\r\n      justifyContent: '',\r\n    } as CSSStyleDeclaration);\r\n  }\r\n\r\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\r\n  private _resetOverlayElementStyles() {\r\n    extendStyles(this._pane.style, {\r\n      top: '',\r\n      left: '',\r\n      bottom: '',\r\n      right: '',\r\n      position: '',\r\n    } as CSSStyleDeclaration);\r\n  }\r\n\r\n  /** Sets positioning styles to the overlay element. */\r\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\r\n    const styles = {} as CSSStyleDeclaration;\r\n\r\n    if (this._hasExactPosition()) {\r\n      extendStyles(styles, this._getExactOverlayY(position, originPoint));\r\n      extendStyles(styles, this._getExactOverlayX(position, originPoint));\r\n    } else {\r\n      styles.position = 'static';\r\n    }\r\n\r\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\r\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\r\n    // off the position. We also can't use margins, because they won't have an effect in some\r\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\r\n    // better both with flexible and non-flexible positioning.\r\n    let transformString = '';\r\n    let offsetX = this._getOffset(position, 'x');\r\n    let offsetY = this._getOffset(position, 'y');\r\n\r\n    if (offsetX) {\r\n      transformString += `translateX(${offsetX}px) `;\r\n    }\r\n\r\n    if (offsetY) {\r\n      transformString += `translateY(${offsetY}px)`;\r\n    }\r\n\r\n    styles.transform = transformString.trim();\r\n\r\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\r\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\r\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\r\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\r\n      styles.maxHeight = '';\r\n    }\r\n\r\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\r\n      styles.maxWidth = '';\r\n    }\r\n\r\n    extendStyles(this._pane.style, styles);\r\n  }\r\n\r\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\r\n  private _getExactOverlayY(position: ConnectedPosition, originPoint: Point) {\r\n    // Reset any existing styles. This is necessary in case the\r\n    // preferred position has changed since the last `apply`.\r\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\r\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\r\n\r\n    if (this._isPushed) {\r\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\r\n    }\r\n\r\n    // @breaking-change 7.0.0 Currently the `_overlayContainer` is optional in order to avoid a\r\n    // breaking change. The null check here can be removed once the `_overlayContainer` becomes\r\n    // a required parameter.\r\n    let virtualKeyboardOffset = this._overlayContainer ?\r\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\r\n\r\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\r\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\r\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\r\n    // otherwise our positioning will be thrown off.\r\n    overlayPoint.y -= virtualKeyboardOffset;\r\n\r\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\r\n    // above or below the origin and the direction in which the element will expand.\r\n    if (position.overlayY === 'bottom') {\r\n      // When using `bottom`, we adjust the y position such that it is the distance\r\n      // from the bottom of the viewport rather than the top.\r\n      const documentHeight = this._document.documentElement.clientHeight;\r\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\r\n    } else {\r\n      styles.top = coerceCssPixelValue(overlayPoint.y);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\r\n  private _getExactOverlayX(position: ConnectedPosition, originPoint: Point) {\r\n    // Reset any existing styles. This is necessary in case the preferred position has\r\n    // changed since the last `apply`.\r\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\r\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\r\n\r\n    if (this._isPushed) {\r\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\r\n    }\r\n\r\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\r\n    // or \"after\" the origin, which determines the direction in which the element will expand.\r\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\r\n    // page is in RTL or LTR.\r\n    let horizontalStyleProperty: 'left' | 'right';\r\n\r\n    if (this._isRtl()) {\r\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\r\n    } else {\r\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\r\n    }\r\n\r\n    // When we're setting `right`, we adjust the x position such that it is the distance\r\n    // from the right edge of the viewport rather than the left edge.\r\n    if (horizontalStyleProperty === 'right') {\r\n      const documentWidth = this._document.documentElement.clientWidth;\r\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\r\n    } else {\r\n      styles.left = coerceCssPixelValue(overlayPoint.x);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\r\n   * or completely outside the view of any of the strategy's scrollables.\r\n   */\r\n  private _getScrollVisibility(): ScrollingVisibility {\r\n    // Note: needs fresh rects since the position could've changed.\r\n    const originBounds = this._origin.getBoundingClientRect();\r\n    const overlayBounds =  this._pane.getBoundingClientRect();\r\n\r\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\r\n    // every time, we should be able to use the scrollTop of the containers if the size of those\r\n    // containers hasn't changed.\r\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\r\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\r\n    });\r\n\r\n    return {\r\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\r\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\r\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\r\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\r\n    };\r\n  }\r\n\r\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\r\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\r\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\r\n      return currentValue - Math.max(currentOverflow, 0);\r\n    }, length);\r\n  }\r\n\r\n  /** Narrows the given viewport rect by the current _viewportMargin. */\r\n  private _getNarrowedViewportRect(): ClientRect {\r\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\r\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\r\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\r\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\r\n    // 100% `width` and `height` which don't include the scrollbar either.\r\n    const width = this._document.documentElement.clientWidth;\r\n    const height = this._document.documentElement.clientHeight;\r\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n    return {\r\n      top:    scrollPosition.top + this._viewportMargin,\r\n      left:   scrollPosition.left + this._viewportMargin,\r\n      right:  scrollPosition.left + width - this._viewportMargin,\r\n      bottom: scrollPosition.top + height - this._viewportMargin,\r\n      width:  width  - (2 * this._viewportMargin),\r\n      height: height - (2 * this._viewportMargin),\r\n    };\r\n  }\r\n\r\n  /** Whether the we're dealing with an RTL context */\r\n  private _isRtl() {\r\n    return this._overlayRef.getDirection() === 'rtl';\r\n  }\r\n\r\n  /** Determines whether the overlay uses exact or flexible positioning. */\r\n  private _hasExactPosition() {\r\n    return !this._hasFlexibleDimensions || this._isPushed;\r\n  }\r\n\r\n  /** Retrieves the offset of a position along the x or y axis. */\r\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\r\n    if (axis === 'x') {\r\n      // We don't do something like `position['offset' + axis]` in\r\n      // order to avoid breking minifiers that rename properties.\r\n      return position.offsetX == null ? this._offsetX : position.offsetX;\r\n    }\r\n\r\n    return position.offsetY == null ? this._offsetY : position.offsetY;\r\n  }\r\n\r\n  /** Validates that the current position match the expected values. */\r\n  private _validatePositions(): void {\r\n    if (!this._preferredPositions.length) {\r\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\r\n    }\r\n\r\n    // TODO(crisbeto): remove these once Angular's template type\r\n    // checking is advanced enough to catch these cases.\r\n    this._preferredPositions.forEach(pair => {\r\n      validateHorizontalPosition('originX', pair.originX);\r\n      validateVerticalPosition('originY', pair.originY);\r\n      validateHorizontalPosition('overlayX', pair.overlayX);\r\n      validateVerticalPosition('overlayY', pair.overlayY);\r\n    });\r\n  }\r\n}\r\n\r\n/** A simple (x, y) coordinate. */\r\ninterface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\r\ninterface OverlayFit {\r\n  /** Whether the overlay fits completely in the viewport. */\r\n  isCompletelyWithinViewport: boolean;\r\n\r\n  /** Whether the overlay fits in the viewport on the y-axis. */\r\n  fitsInViewportVertically: boolean;\r\n\r\n  /** Whether the overlay fits in the viewport on the x-axis. */\r\n  fitsInViewportHorizontally: boolean;\r\n\r\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\r\n  visibleArea: number;\r\n}\r\n\r\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\r\ninterface FallbackPosition {\r\n  position: ConnectedPosition;\r\n  originPoint: Point;\r\n  overlayPoint: Point;\r\n  overlayFit: OverlayFit;\r\n  overlayRect: ClientRect;\r\n}\r\n\r\n/** Position and size of the overlay sizing wrapper for a specific position. */\r\ninterface BoundingBoxRect {\r\n  top: number;\r\n  left: number;\r\n  bottom: number;\r\n  right: number;\r\n  height: number;\r\n  width: number;\r\n}\r\n\r\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\r\ninterface FlexibleFit {\r\n  position: ConnectedPosition;\r\n  origin: Point;\r\n  overlayRect: ClientRect;\r\n  boundingBoxRect: BoundingBoxRect;\r\n}\r\n\r\n/** A connected position as specified by the user. */\r\nexport interface ConnectedPosition {\r\n  originX: 'start' | 'center' | 'end';\r\n  originY: 'top' | 'center' | 'bottom';\r\n\r\n  overlayX: 'start' | 'center' | 'end';\r\n  overlayY: 'top' | 'center' | 'bottom';\r\n\r\n  weight?: number;\r\n  offsetX?: number;\r\n  offsetY?: number;\r\n}\r\n\r\n/** Shallow-extends a stylesheet object with another stylesheet object. */\r\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\r\n  for (let key in source) {\r\n    if (source.hasOwnProperty(key)) {\r\n      dest[key] = source[key];\r\n    }\r\n  }\r\n\r\n  return dest;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\r\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\r\nimport {Observable, Subject, merge} from 'rxjs';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\r\nimport {OverlayReference} from './overlay-reference';\r\n\r\n\r\n/** An object where all of its properties cannot be written. */\r\nexport type ImmutableObject<T> = {\r\n  readonly [P in keyof T]: T[P];\r\n};\r\n\r\n/**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nexport class OverlayRef implements PortalOutlet, OverlayReference {\r\n  private _backdropElement: HTMLElement | null = null;\r\n  private _backdropClick: Subject<MouseEvent> = new Subject();\r\n  private _attachments = new Subject<void>();\r\n  private _detachments = new Subject<void>();\r\n\r\n  /**\r\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\r\n   * the `_host` to its original position in the DOM when it gets re-attached.\r\n   */\r\n  private _previousHostParent: HTMLElement;\r\n  private _keydownEventsObservable: Observable<KeyboardEvent> = Observable.create(observer => {\r\n    const subscription = this._keydownEvents.subscribe(observer);\r\n    this._keydownEventSubscriptions++;\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      this._keydownEventSubscriptions--;\r\n    };\r\n  });\r\n\r\n  /** Stream of keydown events dispatched to this overlay. */\r\n  _keydownEvents = new Subject<KeyboardEvent>();\r\n\r\n  /** Amount of subscriptions to the keydown events. */\r\n  _keydownEventSubscriptions = 0;\r\n\r\n  constructor(\r\n      private _portalOutlet: PortalOutlet,\r\n      private _host: HTMLElement,\r\n      private _pane: HTMLElement,\r\n      private _config: ImmutableObject<OverlayConfig>,\r\n      private _ngZone: NgZone,\r\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\r\n      private _document: Document) {\r\n\r\n    if (_config.scrollStrategy) {\r\n      _config.scrollStrategy.attach(this);\r\n    }\r\n  }\r\n\r\n  /** The overlay's HTML element */\r\n  get overlayElement(): HTMLElement {\r\n    return this._pane;\r\n  }\r\n\r\n  /** The overlay's backdrop HTML element. */\r\n  get backdropElement(): HTMLElement | null {\r\n    return this._backdropElement;\r\n  }\r\n\r\n  /**\r\n   * Wrapper around the panel element. Can be used for advanced\r\n   * positioning where a wrapper with specific styling is\r\n   * required around the overlay pane.\r\n   */\r\n  get hostElement(): HTMLElement {\r\n    return this._host;\r\n  }\r\n\r\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\r\n  attach(portal: any): any;\r\n\r\n  /**\r\n   * Attaches content, given via a Portal, to the overlay.\r\n   * If the overlay is configured to have a backdrop, it will be created.\r\n   *\r\n   * @param portal Portal instance to which to attach the overlay.\r\n   * @returns The portal attachment result.\r\n   */\r\n  attach(portal: Portal<any>): any {\r\n    let attachResult = this._portalOutlet.attach(portal);\r\n\r\n    if (this._config.positionStrategy) {\r\n      this._config.positionStrategy.attach(this);\r\n    }\r\n\r\n    // Update the pane element with the given configuration.\r\n    if (!this._host.parentElement && this._previousHostParent) {\r\n      this._previousHostParent.appendChild(this._host);\r\n    }\r\n\r\n    this._updateStackingOrder();\r\n    this._updateElementSize();\r\n    this._updateElementDirection();\r\n\r\n    if (this._config.scrollStrategy) {\r\n      this._config.scrollStrategy.enable();\r\n    }\r\n\r\n    // Update the position once the zone is stable so that the overlay will be fully rendered\r\n    // before attempting to position it, as the position may depend on the size of the rendered\r\n    // content.\r\n    this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        // The overlay could've been detached before the zone has stabilized.\r\n        if (this.hasAttached()) {\r\n          this.updatePosition();\r\n        }\r\n      });\r\n\r\n    // Enable pointer events for the overlay pane element.\r\n    this._togglePointerEvents(true);\r\n\r\n    if (this._config.hasBackdrop) {\r\n      this._attachBackdrop();\r\n    }\r\n\r\n    if (this._config.panelClass) {\r\n      this._toggleClasses(this._pane, this._config.panelClass, true);\r\n    }\r\n\r\n    // Only emit the `attachments` event once all other setup is done.\r\n    this._attachments.next();\r\n\r\n    // Track this overlay by the keyboard dispatcher\r\n    this._keyboardDispatcher.add(this);\r\n\r\n    return attachResult;\r\n  }\r\n\r\n  /**\r\n   * Detaches an overlay from a portal.\r\n   * @returns The portal detachment result.\r\n   */\r\n  detach(): any {\r\n    if (!this.hasAttached()) {\r\n      return;\r\n    }\r\n\r\n    this.detachBackdrop();\r\n\r\n    // When the overlay is detached, the pane element should disable pointer events.\r\n    // This is necessary because otherwise the pane element will cover the page and disable\r\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\r\n    this._togglePointerEvents(false);\r\n\r\n    if (this._config.positionStrategy && this._config.positionStrategy.detach) {\r\n      this._config.positionStrategy.detach();\r\n    }\r\n\r\n    if (this._config.scrollStrategy) {\r\n      this._config.scrollStrategy.disable();\r\n    }\r\n\r\n    if (this._config.panelClass) {\r\n      this._toggleClasses(this._pane, this._config.panelClass, false);\r\n    }\r\n\r\n    const detachmentResult = this._portalOutlet.detach();\r\n\r\n    // Only emit after everything is detached.\r\n    this._detachments.next();\r\n\r\n    // Remove this overlay from keyboard dispatcher tracking.\r\n    this._keyboardDispatcher.remove(this);\r\n\r\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets rendered,\r\n    // even though it's transparent and unclickable. We can't remove the host here immediately,\r\n    // because the overlay pane's content might still be animating. This stream helps us avoid\r\n    // interrupting the animation by waiting for the pane to become empty.\r\n    const subscription = this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(takeUntil(merge(this._attachments, this._detachments)))\r\n      .subscribe(() => {\r\n        // Needs a couple of checks for the pane and host, because\r\n        // they may have been removed by the time the zone stabilizes.\r\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\r\n          if (this._host && this._host.parentElement) {\r\n            this._previousHostParent = this._host.parentElement;\r\n            this._previousHostParent.removeChild(this._host);\r\n          }\r\n\r\n          subscription.unsubscribe();\r\n        }\r\n      });\r\n\r\n    return detachmentResult;\r\n  }\r\n\r\n  /** Cleans up the overlay from the DOM. */\r\n  dispose(): void {\r\n    const isAttached = this.hasAttached();\r\n\r\n    if (this._config.positionStrategy) {\r\n      this._config.positionStrategy.dispose();\r\n    }\r\n\r\n    if (this._config.scrollStrategy) {\r\n      this._config.scrollStrategy.disable();\r\n    }\r\n\r\n    this.detachBackdrop();\r\n    this._keyboardDispatcher.remove(this);\r\n    this._portalOutlet.dispose();\r\n    this._attachments.complete();\r\n    this._backdropClick.complete();\r\n    this._keydownEvents.complete();\r\n\r\n    if (this._host && this._host.parentNode) {\r\n      this._host.parentNode.removeChild(this._host);\r\n      this._host = null!;\r\n    }\r\n\r\n    this._previousHostParent = this._pane = null!;\r\n\r\n    if (isAttached) {\r\n      this._detachments.next();\r\n    }\r\n\r\n    this._detachments.complete();\r\n  }\r\n\r\n  /** Whether the overlay has attached content. */\r\n  hasAttached(): boolean {\r\n    return this._portalOutlet.hasAttached();\r\n  }\r\n\r\n  /** Gets an observable that emits when the backdrop has been clicked. */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._backdropClick.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been attached. */\r\n  attachments(): Observable<void> {\r\n    return this._attachments.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been detached. */\r\n  detachments(): Observable<void> {\r\n    return this._detachments.asObservable();\r\n  }\r\n\r\n  /** Gets an observable of keydown events targeted to this overlay. */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._keydownEventsObservable;\r\n  }\r\n\r\n  /** Gets the the current overlay configuration, which is immutable. */\r\n  getConfig(): OverlayConfig {\r\n    return this._config;\r\n  }\r\n\r\n  /** Updates the position of the overlay based on the position strategy. */\r\n  updatePosition() {\r\n    if (this._config.positionStrategy) {\r\n      this._config.positionStrategy.apply();\r\n    }\r\n  }\r\n\r\n  /** Update the size properties of the overlay. */\r\n  updateSize(sizeConfig: OverlaySizeConfig) {\r\n    this._config = {...this._config, ...sizeConfig};\r\n    this._updateElementSize();\r\n  }\r\n\r\n  /** Sets the LTR/RTL direction for the overlay. */\r\n  setDirection(dir: Direction | Directionality) {\r\n    this._config = {...this._config, direction: dir};\r\n    this._updateElementDirection();\r\n  }\r\n\r\n  /**\r\n   * Returns the layout direction of the overlay panel.\r\n   */\r\n  getDirection(): Direction {\r\n    const direction = this._config.direction;\r\n\r\n    if (!direction) {\r\n      return 'ltr';\r\n    }\r\n\r\n    return typeof direction === 'string' ? direction : direction.value;\r\n  }\r\n\r\n  /** Updates the text direction of the overlay panel. */\r\n  private _updateElementDirection() {\r\n    this._host.setAttribute('dir', this.getDirection());\r\n  }\r\n\r\n  /** Updates the size of the overlay element based on the overlay config. */\r\n  private _updateElementSize() {\r\n    const style = this._pane.style;\r\n\r\n    style.width = coerceCssPixelValue(this._config.width);\r\n    style.height = coerceCssPixelValue(this._config.height);\r\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\r\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\r\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\r\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\r\n  }\r\n\r\n  /** Toggles the pointer events for the overlay pane element. */\r\n  private _togglePointerEvents(enablePointer: boolean) {\r\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\r\n  }\r\n\r\n  /** Attaches a backdrop for this overlay. */\r\n  private _attachBackdrop() {\r\n    const showingClass = 'cdk-overlay-backdrop-showing';\r\n\r\n    this._backdropElement = this._document.createElement('div');\r\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\r\n\r\n    if (this._config.backdropClass) {\r\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\r\n    }\r\n\r\n    // Insert the backdrop before the pane in the DOM order,\r\n    // in order to handle stacked overlays properly.\r\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\r\n\r\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\r\n    // action desired when such a click occurs (usually closing the overlay).\r\n    this._backdropElement.addEventListener('click',\r\n        (event: MouseEvent) => this._backdropClick.next(event));\r\n\r\n    // Add class to fade-in the backdrop after one frame.\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => {\r\n          if (this._backdropElement) {\r\n            this._backdropElement.classList.add(showingClass);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      this._backdropElement.classList.add(showingClass);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the stacking order of the element, moving it to the top if necessary.\r\n   * This is required in cases where one overlay was detached, while another one,\r\n   * that should be behind it, was destroyed. The next time both of them are opened,\r\n   * the stacking will be wrong, because the detached element's pane will still be\r\n   * in its original DOM position.\r\n   */\r\n  private _updateStackingOrder() {\r\n    if (this._host.nextSibling) {\r\n      this._host.parentNode!.appendChild(this._host);\r\n    }\r\n  }\r\n\r\n  /** Detaches the backdrop (if any) associated with the overlay. */\r\n  detachBackdrop(): void {\r\n    let backdropToDetach = this._backdropElement;\r\n\r\n    if (backdropToDetach) {\r\n      let timeoutId: number;\r\n      let finishDetach = () => {\r\n        // It may not be attached to anything in certain cases (e.g. unit tests).\r\n        if (backdropToDetach && backdropToDetach.parentNode) {\r\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\r\n        }\r\n\r\n        // It is possible that a new portal has been attached to this overlay since we started\r\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\r\n        // is still the same instance that we started to remove.\r\n        if (this._backdropElement == backdropToDetach) {\r\n          this._backdropElement = null;\r\n        }\r\n\r\n        clearTimeout(timeoutId);\r\n      };\r\n\r\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\r\n\r\n      if (this._config.backdropClass) {\r\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\r\n      }\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        backdropToDetach!.addEventListener('transitionend', finishDetach);\r\n      });\r\n\r\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\r\n      // In this case we make it unclickable and we try to remove it after a delay.\r\n      backdropToDetach.style.pointerEvents = 'none';\r\n\r\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\r\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\r\n      // either async or fakeAsync.\r\n      timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\r\n    }\r\n  }\r\n\r\n  /** Toggles a single CSS class or an array of classes on an element. */\r\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\r\n    const classList = element.classList;\r\n\r\n    coerceArray(cssClasses).forEach(cssClass => {\r\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\r\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/** Size properties for an overlay. */\r\nexport interface OverlaySizeConfig {\r\n  width?: number | string;\r\n  height?: number | string;\r\n  minWidth?: number | string;\r\n  minHeight?: number | string;\r\n  maxWidth?: number | string;\r\n  maxHeight?: number | string;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\n\r\n\r\n/** Container inside which all overlays will render. */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayContainer implements OnDestroy {\r\n  protected _containerElement: HTMLElement;\r\n\r\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\r\n\r\n  ngOnDestroy() {\r\n    if (this._containerElement && this._containerElement.parentNode) {\r\n      this._containerElement.parentNode.removeChild(this._containerElement);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method returns the overlay container element. It will lazily\r\n   * create the element the first time  it is called to facilitate using\r\n   * the container in non-browser environments.\r\n   * @returns the container element\r\n   */\r\n  getContainerElement(): HTMLElement {\r\n    if (!this._containerElement) { this._createContainer(); }\r\n    return this._containerElement;\r\n  }\r\n\r\n  /**\r\n   * Create the overlay container element, which is simply a div\r\n   * with the 'cdk-overlay-container' class on the document body.\r\n   */\r\n  protected _createContainer(): void {\r\n    const container = this._document.createElement('div');\r\n\r\n    container.classList.add('cdk-overlay-container');\r\n    this._document.body.appendChild(container);\r\n    this._containerElement = container;\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\r\n  _document: any) {\r\n  return parentContainer || new OverlayContainer(_document);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const OVERLAY_CONTAINER_PROVIDER = {\r\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\r\n  provide: OverlayContainer,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), OverlayContainer],\r\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\r\n  ],\r\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {OverlayRef} from '../overlay-ref';\r\n\r\n\r\n/**\r\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\r\n * if any. It maintains a list of attached overlays to determine best suited overlay based\r\n * on event target and order of overlay opens.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayKeyboardDispatcher implements OnDestroy {\r\n\r\n  /** Currently attached overlays in the order they were attached. */\r\n  _attachedOverlays: OverlayRef[] = [];\r\n\r\n  private _document: Document;\r\n  private _isAttached: boolean;\r\n\r\n  constructor(@Inject(DOCUMENT) document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._detach();\r\n  }\r\n\r\n  /** Add a new overlay to the list of attached overlay refs. */\r\n  add(overlayRef: OverlayRef): void {\r\n    // Ensure that we don't get the same overlay multiple times.\r\n    this.remove(overlayRef);\r\n\r\n    // Lazily start dispatcher once first overlay is added\r\n    if (!this._isAttached) {\r\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\r\n      this._isAttached = true;\r\n    }\r\n\r\n    this._attachedOverlays.push(overlayRef);\r\n  }\r\n\r\n  /** Remove an overlay from the list of attached overlay refs. */\r\n  remove(overlayRef: OverlayRef): void {\r\n    const index = this._attachedOverlays.indexOf(overlayRef);\r\n\r\n    if (index > -1) {\r\n      this._attachedOverlays.splice(index, 1);\r\n    }\r\n\r\n    // Remove the global listener once there are no more overlays.\r\n    if (this._attachedOverlays.length === 0) {\r\n      this._detach();\r\n    }\r\n  }\r\n\r\n  /** Detaches the global keyboard event listener. */\r\n  private _detach() {\r\n    if (this._isAttached) {\r\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\r\n      this._isAttached = false;\r\n    }\r\n  }\r\n\r\n  /** Keyboard event listener that will be attached to the body. */\r\n  private _keydownListener = (event: KeyboardEvent) => {\r\n    const overlays = this._attachedOverlays;\r\n\r\n    for (let i = overlays.length - 1; i > -1; i--) {\r\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\r\n      // We want to target the most recent overlay, rather than trying to match where the event came\r\n      // from, because some components might open an overlay, but keep focus on a trigger element\r\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\r\n      // because we don't want overlays that don't handle keyboard events to block the ones below\r\n      // them that do.\r\n      if (overlays[i]._keydownEventSubscriptions > 0) {\r\n        overlays[i]._keydownEvents.next(event);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\r\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\r\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\r\n  // If there is already an OverlayKeyboardDispatcher available, use that.\r\n  // Otherwise, provide a new one.\r\n  provide: OverlayKeyboardDispatcher,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\r\n\r\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\r\n    // of the type expected by Angular\r\n    DOCUMENT as InjectionToken<any>\r\n  ],\r\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable, NgZone} from '@angular/core';\r\nimport {BlockScrollStrategy} from './block-scroll-strategy';\r\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\r\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\r\nimport {\r\n  RepositionScrollStrategy,\r\n  RepositionScrollStrategyConfig,\r\n} from './reposition-scroll-strategy';\r\n\r\n\r\n/**\r\n * Options for how an overlay will handle scrolling.\r\n *\r\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\r\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class ScrollStrategyOptions {\r\n  private _document: Document;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) document: any) {\r\n      this._document = document;\r\n    }\r\n\r\n  /** Do nothing on scroll. */\r\n  noop = () => new NoopScrollStrategy();\r\n\r\n  /**\r\n   * Close the overlay as soon as the user scrolls.\r\n   * @param config Configuration to be used inside the scroll strategy.\r\n   */\r\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\r\n      this._ngZone, this._viewportRuler, config)\r\n\r\n  /** Block scrolling. */\r\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\r\n\r\n  /**\r\n   * Update the overlay's position on scroll.\r\n   * @param config Configuration to be used inside the scroll strategy.\r\n   * Allows debouncing the reposition calls.\r\n   */\r\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\r\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgZone} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\r\n\r\n/**\r\n * Config options for the RepositionScrollStrategy.\r\n */\r\nexport interface RepositionScrollStrategyConfig {\r\n  /** Time in milliseconds to throttle the scroll events. */\r\n  scrollThrottle?: number;\r\n\r\n  /** Whether to close the overlay once the user has scrolled away completely. */\r\n  autoClose?: boolean;\r\n}\r\n\r\n/**\r\n * Strategy that will update the element position as the user is scrolling.\r\n */\r\nexport class RepositionScrollStrategy implements ScrollStrategy {\r\n  private _scrollSubscription: Subscription|null = null;\r\n  private _overlayRef: OverlayReference;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _ngZone: NgZone,\r\n    private _config?: RepositionScrollStrategyConfig) { }\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference) {\r\n    if (this._overlayRef) {\r\n      throw getMatScrollStrategyAlreadyAttachedError();\r\n    }\r\n\r\n    this._overlayRef = overlayRef;\r\n  }\r\n\r\n  /** Enables repositioning of the attached overlay on scroll. */\r\n  enable() {\r\n    if (!this._scrollSubscription) {\r\n      const throttle = this._config ? this._config.scrollThrottle : 0;\r\n\r\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\r\n        this._overlayRef.updatePosition();\r\n\r\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\r\n        if (this._config && this._config.autoClose) {\r\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\r\n          const {width, height} = this._viewportRuler.getViewportSize();\r\n\r\n          // TODO(crisbeto): include all ancestor scroll containers here once\r\n          // we have a way of exposing the trigger element to the scroll strategy.\r\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\r\n\r\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\r\n            this.disable();\r\n            this._ngZone.run(() => this._overlayRef.detach());\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Disables repositioning of the attached overlay on scroll. */\r\n  disable() {\r\n    if (this._scrollSubscription) {\r\n      this._scrollSubscription.unsubscribe();\r\n      this._scrollSubscription = null;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n// TODO(jelbourn): move this to live with the rest of the scrolling code\r\n// TODO(jelbourn): someday replace this with IntersectionObservers\r\n\r\n/**\r\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\r\n * @param element Dimensions of the element (from getBoundingClientRect)\r\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\r\n * @returns Whether the element is scrolled out of view\r\n * @docs-private\r\n */\r\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\r\n  return scrollContainers.some(containerBounds => {\r\n    const outsideAbove = element.bottom < containerBounds.top;\r\n    const outsideBelow = element.top > containerBounds.bottom;\r\n    const outsideLeft = element.right < containerBounds.left;\r\n    const outsideRight = element.left > containerBounds.right;\r\n\r\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Gets whether an element is clipped by any of its scrolling containers.\r\n * @param element Dimensions of the element (from getBoundingClientRect)\r\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\r\n * @returns Whether the element is clipped\r\n * @docs-private\r\n */\r\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\r\n  return scrollContainers.some(scrollContainerRect => {\r\n    const clippedAbove = element.top < scrollContainerRect.top;\r\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\r\n    const clippedLeft = element.left < scrollContainerRect.left;\r\n    const clippedRight = element.right > scrollContainerRect.right;\r\n\r\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\r\n  });\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgZone} from '@angular/core';\r\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {Subscription} from 'rxjs';\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\n\r\n/**\r\n * Config options for the CloseScrollStrategy.\r\n */\r\nexport interface CloseScrollStrategyConfig {\r\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\r\n  threshold?: number;\r\n}\r\n\r\n/**\r\n * Strategy that will close the overlay as soon as the user starts scrolling.\r\n */\r\nexport class CloseScrollStrategy implements ScrollStrategy {\r\n  private _scrollSubscription: Subscription|null = null;\r\n  private _overlayRef: OverlayReference;\r\n  private _initialScrollPosition: number;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _config?: CloseScrollStrategyConfig) {}\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference) {\r\n    if (this._overlayRef) {\r\n      throw getMatScrollStrategyAlreadyAttachedError();\r\n    }\r\n\r\n    this._overlayRef = overlayRef;\r\n  }\r\n\r\n  /** Enables the closing of the attached overlay on scroll. */\r\n  enable() {\r\n    if (this._scrollSubscription) {\r\n      return;\r\n    }\r\n\r\n    const stream = this._scrollDispatcher.scrolled(0);\r\n\r\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\r\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\r\n\r\n      this._scrollSubscription = stream.subscribe(() => {\r\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\r\n\r\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\r\n          this._detach();\r\n        } else {\r\n          this._overlayRef.updatePosition();\r\n        }\r\n      });\r\n    } else {\r\n      this._scrollSubscription = stream.subscribe(this._detach);\r\n    }\r\n  }\r\n\r\n  /** Disables the closing the attached overlay on scroll. */\r\n  disable() {\r\n    if (this._scrollSubscription) {\r\n      this._scrollSubscription.unsubscribe();\r\n      this._scrollSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Detaches the overlay ref and disables the scroll strategy. */\r\n  private _detach = () => {\r\n    this.disable();\r\n\r\n    if (this._overlayRef.hasAttached()) {\r\n      this._ngZone.run(() => this._overlayRef.detach());\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n/**\r\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\r\n */\r\nexport interface ScrollStrategy {\r\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\r\n  enable: () => void;\r\n\r\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\r\n  disable: () => void;\r\n\r\n  /** Attaches this `ScrollStrategy` to an overlay. */\r\n  attach: (overlayRef: OverlayReference) => void;\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\r\n */\r\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\r\n  return Error(`Scroll strategy has already been attached.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollStrategy} from './scroll-strategy';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\r\n\r\n/**\r\n * Strategy that will prevent the user from scrolling while the overlay is visible.\r\n */\r\nexport class BlockScrollStrategy implements ScrollStrategy {\r\n  private _previousHTMLStyles = { top: '', left: '' };\r\n  private _previousScrollPosition: { top: number, left: number };\r\n  private _isEnabled = false;\r\n  private _document: Document;\r\n\r\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach() { }\r\n\r\n  /** Blocks page-level scroll while the attached overlay is open. */\r\n  enable() {\r\n    if (this._canBeEnabled()) {\r\n      const root = this._document.documentElement;\r\n\r\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n      // Cache the previous inline styles in case the user had set them.\r\n      this._previousHTMLStyles.left = root.style.left || '';\r\n      this._previousHTMLStyles.top = root.style.top || '';\r\n\r\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\r\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\r\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\r\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\r\n      root.classList.add('cdk-global-scrollblock');\r\n      this._isEnabled = true;\r\n    }\r\n  }\r\n\r\n  /** Unblocks page-level scroll while the attached overlay is open. */\r\n  disable() {\r\n    if (this._isEnabled) {\r\n      const html = this._document.documentElement;\r\n      const body = this._document.body;\r\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\r\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\r\n\r\n      this._isEnabled = false;\r\n\r\n      html.style.left = this._previousHTMLStyles.left;\r\n      html.style.top = this._previousHTMLStyles.top;\r\n      html.classList.remove('cdk-global-scrollblock');\r\n\r\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\r\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\r\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\r\n\r\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\r\n\r\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior;\r\n      body.style['scrollBehavior'] = previousBodyScrollBehavior;\r\n    }\r\n  }\r\n\r\n  private _canBeEnabled(): boolean {\r\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\r\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\r\n    // scrolling multiple times.\r\n    const html = this._document.documentElement;\r\n\r\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\r\n      return false;\r\n    }\r\n\r\n    const body = this._document.body;\r\n    const viewport = this._viewportRuler.getViewportSize();\r\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\r\nimport {Optional} from '@angular/core';\r\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\r\n\r\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\r\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\r\n\r\n\r\n/** A connection point on the origin element. */\r\nexport interface OriginConnectionPosition {\r\n  originX: HorizontalConnectionPos;\r\n  originY: VerticalConnectionPos;\r\n}\r\n\r\n/** A connection point on the overlay element. */\r\nexport interface OverlayConnectionPosition {\r\n  overlayX: HorizontalConnectionPos;\r\n  overlayY: VerticalConnectionPos;\r\n}\r\n\r\n/** The points of the origin element and the overlay element to connect. */\r\nexport class ConnectionPositionPair {\r\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\r\n  originX: HorizontalConnectionPos;\r\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\r\n  originY: VerticalConnectionPos;\r\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\r\n  overlayX: HorizontalConnectionPos;\r\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\r\n  overlayY: VerticalConnectionPos;\r\n\r\n  constructor(\r\n    origin: OriginConnectionPosition,\r\n    overlay: OverlayConnectionPosition,\r\n    public offsetX?: number,\r\n    public offsetY?: number) {\r\n\r\n    this.originX = origin.originX;\r\n    this.originY = origin.originY;\r\n    this.overlayX = overlay.overlayX;\r\n    this.overlayY = overlay.overlayY;\r\n  }\r\n}\r\n\r\n/**\r\n * Set of properties regarding the position of the origin and overlay relative to the viewport\r\n * with respect to the containing Scrollable elements.\r\n *\r\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\r\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n * The overlay and origin are outside view if there is no overlap between their bounding client\r\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n *       -----------                    -----------\r\n *       | outside |                    | clipped |\r\n *       |  view   |              --------------------------\r\n *       |         |              |     |         |        |\r\n *       ----------               |     -----------        |\r\n *  --------------------------    |                        |\r\n *  |                        |    |      Scrollable        |\r\n *  |                        |    |                        |\r\n *  |                        |     --------------------------\r\n *  |      Scrollable        |\r\n *  |                        |\r\n *  --------------------------\r\n *\r\n *  @docs-private\r\n */\r\nexport class ScrollingVisibility {\r\n  isOriginClipped: boolean;\r\n  isOriginOutsideView: boolean;\r\n  isOverlayClipped: boolean;\r\n  isOverlayOutsideView: boolean;\r\n}\r\n\r\n/** The change event emitted by the strategy when a fallback position is used. */\r\nexport class ConnectedOverlayPositionChange {\r\n  constructor(\r\n      /** The position used as a result of this change. */\r\n      public connectionPair: ConnectionPositionPair,\r\n      /** @docs-private */\r\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\r\n}\r\n\r\n/**\r\n * Validates whether a vertical position property matches the expected values.\r\n * @param property Name of the property being validated.\r\n * @param value Value of the property being validated.\r\n * @docs-private\r\n */\r\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\r\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\r\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\r\n                `Expected \"top\", \"bottom\" or \"center\".`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates whether a horizontal position property matches the expected values.\r\n * @param property Name of the property being validated.\r\n * @param value Value of the property being validated.\r\n * @docs-private\r\n */\r\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\r\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\r\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\r\n                `Expected \"start\", \"end\" or \"center\".`);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position/position-strategy';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ScrollStrategy} from './scroll/scroll-strategy';\r\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\r\n\r\n\r\n/** Initial configuration used when creating an overlay. */\r\nexport class OverlayConfig {\r\n  /** Strategy with which to position the overlay. */\r\n  positionStrategy?: PositionStrategy;\r\n\r\n  /** Strategy to be used when handling scroll events while the overlay is open. */\r\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\r\n\r\n  /** Custom class to add to the overlay pane. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the overlay has a backdrop. */\r\n  hasBackdrop?: boolean = false;\r\n\r\n  /** Custom class to add to the backdrop */\r\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\r\n\r\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  width?: number | string;\r\n\r\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  height?: number | string;\r\n\r\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  minWidth?: number | string;\r\n\r\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  minHeight?: number | string;\r\n\r\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  maxWidth?: number | string;\r\n\r\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  maxHeight?: number | string;\r\n\r\n  /**\r\n   * Direction of the text in the overlay panel. If a `Directionality` instance\r\n   * is passed in, the overlay will handle changes to its value automatically.\r\n   */\r\n  direction?: Direction | Directionality;\r\n\r\n  constructor(config?: OverlayConfig) {\r\n    if (config) {\r\n      Object.keys(config)\r\n        .filter(key => typeof config[key] !== 'undefined')\r\n        .forEach(key => this[key] = config[key]);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollStrategy} from './scroll-strategy';\r\n\r\n/** Scroll strategy that doesn't do anything. */\r\nexport class NoopScrollStrategy implements ScrollStrategy {\r\n  /** Does nothing, as this scroll strategy is a no-op. */\r\n  enable() { }\r\n  /** Does nothing, as this scroll strategy is a no-op. */\r\n  disable() { }\r\n  /** Does nothing, as this scroll strategy is a no-op. */\r\n  attach() { }\r\n}\r\n"],"names":["tslib_1.__extends","tslib_1.__assign"],"mappings":"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"}