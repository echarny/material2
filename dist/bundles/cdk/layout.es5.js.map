{"version":3,"file":"layout.es5.js","sources":["../../../src/cdk/layout/breakpoints.ts","../../../src/cdk/layout/breakpoints-observer.ts","../../../src/cdk/layout/media-matcher.ts","../../../src/cdk/layout/layout-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// PascalCase is being used as Breakpoints is used like an enum.\r\n// tslint:disable-next-line:variable-name\r\nexport const Breakpoints = {\r\n  XSmall: '(max-width: 599px)',\r\n  Small: '(min-width: 600px) and (max-width: 959px)',\r\n  Medium: '(min-width: 960px) and (max-width: 1279px)',\r\n  Large: '(min-width: 1280px) and (max-width: 1919px)',\r\n  XLarge: '(min-width: 1920px)',\r\n\r\n  Handset: '(max-width: 599px) and (orientation: portrait), ' +\r\n           '(max-width: 959px) and (orientation: landscape)',\r\n  Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\r\n          '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\r\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\r\n       '(min-width: 1280px) and (orientation: landscape)',\r\n\r\n  HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\r\n  TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\r\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\r\n\r\n  HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\r\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\r\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\r\nimport {MediaMatcher} from './media-matcher';\r\nimport {combineLatest, fromEventPattern, Observable, Subject} from 'rxjs';\r\nimport {map, startWith, takeUntil} from 'rxjs/operators';\r\nimport {coerceArray} from '@angular/cdk/coercion';\r\n\r\n\r\n/** The current state of a layout breakpoint. */\r\nexport interface BreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /**\r\n   * A key boolean pair for each query provided to the observe method,\r\n   * with its current matched state.\r\n   */\r\n  breakpoints: {\r\n    [key: string]: boolean;\r\n  };\r\n}\r\n\r\n/** The current state of a layout breakpoint. */\r\ninterface InternalBreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /** The media query being to be matched */\r\n  query: string;\r\n}\r\n\r\ninterface Query {\r\n  observable: Observable<InternalBreakpointState>;\r\n  mql: MediaQueryList;\r\n}\r\n\r\n/** Utility for checking the matching state of @media queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class BreakpointObserver implements OnDestroy {\r\n  /**  A map of all media queries currently being listened for. */\r\n  private _queries = new Map<string, Query>();\r\n  /** A subject for all other observables to takeUntil based on. */\r\n  private _destroySubject = new Subject<void>();\r\n\r\n  constructor(private mediaMatcher: MediaMatcher, private zone: NgZone) {}\r\n\r\n  /** Completes the active subject, signalling to all other observables to complete. */\r\n  ngOnDestroy() {\r\n    this._destroySubject.next();\r\n    this._destroySubject.complete();\r\n  }\r\n\r\n  /**\r\n   * Whether one or more media queries match the current viewport size.\r\n   * @param value One or more media queries to check.\r\n   * @returns Whether any of the media queries match.\r\n   */\r\n  isMatched(value: string | string[]): boolean {\r\n    const queries = splitQueries(coerceArray(value));\r\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\r\n  }\r\n\r\n  /**\r\n   * Gets an observable of results for the given queries that will emit new results for any changes\r\n   * in matching of the given queries.\r\n   * @param value One or more media queries to check.\r\n   * @returns A stream of matches for the given queries.\r\n   */\r\n  observe(value: string | string[]): Observable<BreakpointState> {\r\n    const queries = splitQueries(coerceArray(value));\r\n    const observables = queries.map(query => this._registerQuery(query).observable);\r\n\r\n    return combineLatest(observables).pipe(map((breakpointStates: InternalBreakpointState[]) => {\r\n      const response: BreakpointState = {\r\n        matches: false,\r\n        breakpoints: {},\r\n      };\r\n      breakpointStates.forEach((state: InternalBreakpointState) => {\r\n        response.matches = response.matches || state.matches;\r\n        response.breakpoints[state.query] = state.matches;\r\n      });\r\n      return response;\r\n    }));\r\n  }\r\n\r\n  /** Registers a specific query to be listened for. */\r\n  private _registerQuery(query: string): Query {\r\n    // Only set up a new MediaQueryList if it is not already being listened for.\r\n    if (this._queries.has(query)) {\r\n      return this._queries.get(query)!;\r\n    }\r\n\r\n    const mql: MediaQueryList = this.mediaMatcher.matchMedia(query);\r\n    // Create callback for match changes and add it is as a listener.\r\n    const queryObservable = fromEventPattern(\r\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\r\n      // back into the zone because matchMedia is only included in Zone.js by loading the\r\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\r\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\r\n      // patches it.\r\n      (listener: MediaQueryListListener) => {\r\n        mql.addListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\r\n      },\r\n      (listener: MediaQueryListListener) => {\r\n        mql.removeListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\r\n      })\r\n      .pipe(\r\n        takeUntil(this._destroySubject),\r\n        startWith(mql),\r\n        map((nextMql: MediaQueryList) => ({query, matches: nextMql.matches}))\r\n      );\r\n\r\n    // Add the MediaQueryList to the set of queries.\r\n    const output = {observable: queryObservable, mql};\r\n    this._queries.set(query, output);\r\n    return output;\r\n  }\r\n}\r\n\r\n/**\r\n * Split each query string into separate query strings if two queries are provided as comma\r\n * separated.\r\n */\r\nfunction splitQueries(queries: string[]): string[] {\r\n  return queries.map((query: string) => query.split(','))\r\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\r\n                .map(query => query.trim());\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Injectable} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\n\r\n/** Global registry for all dynamically-created, injected media queries. */\r\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\r\n\r\n/** Style tag that holds all of the dynamically-created media queries. */\r\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\r\n\r\n/** A utility for calling matchMedia queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class MediaMatcher {\r\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\r\n  private _matchMedia: (query: string) => MediaQueryList;\r\n\r\n  constructor(private platform: Platform) {\r\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ?\r\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\r\n      // call it from a different scope.\r\n      window.matchMedia.bind(window) :\r\n      noopMatchMedia;\r\n  }\r\n\r\n  /**\r\n   * Evaluates the given media query and returns the native MediaQueryList from which results\r\n   * can be retrieved.\r\n   * Confirms the layout engine will trigger for the selector query provided and returns the\r\n   * MediaQueryList for the query provided.\r\n   */\r\n  matchMedia(query: string): MediaQueryList {\r\n    if (this.platform.WEBKIT) {\r\n      createEmptyStyleRule(query);\r\n    }\r\n    return this._matchMedia(query);\r\n  }\r\n}\r\n\r\n/**\r\n * For Webkit engines that only trigger the MediaQueryListListener when\r\n * there is at least one CSS selector for the respective media query.\r\n */\r\nfunction createEmptyStyleRule(query: string) {\r\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    if (!mediaQueryStyleNode) {\r\n      mediaQueryStyleNode = document.createElement('style');\r\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\r\n      document.head.appendChild(mediaQueryStyleNode);\r\n    }\r\n\r\n    if (mediaQueryStyleNode.sheet) {\r\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\r\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\r\n      mediaQueriesForWebkitCompatibility.add(query);\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n/** No-op matchMedia replacement for non-browser platforms. */\r\nfunction noopMatchMedia(query: string): MediaQueryList {\r\n  return {\r\n    matches: query === 'all' || query === '',\r\n    media: query,\r\n    addListener: () => {},\r\n    removeListener: () => {}\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgModule} from '@angular/core';\r\n\r\n\r\n@NgModule()\r\nexport class LayoutModule {}\r\n"],"names":[],"mappings":"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"}