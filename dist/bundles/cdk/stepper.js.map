{"version":3,"file":"stepper.js","sources":["../../../src/cdk/stepper/stepper-module.ts","../../../src/cdk/stepper/stepper-button.ts","../../../src/cdk/stepper/stepper.ts","../../../src/cdk/stepper/step-label.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkStepper, CdkStep} from './stepper';\r\nimport {CommonModule} from '@angular/common';\r\nimport {CdkStepLabel} from './step-label';\r\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\n\r\n@NgModule({\r\n  imports: [BidiModule, CommonModule],\r\n  exports: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\r\n  declarations: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]\r\n})\r\nexport class CdkStepperModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\nimport {CdkStepper} from './stepper';\r\n\r\n/** Button that moves to the next step in a stepper workflow. */\r\n@Directive({\r\n  selector: 'button[cdkStepperNext]',\r\n  host: {\r\n    '(click)': '_stepper.next()',\r\n    '[type]': 'type',\r\n  }\r\n})\r\nexport class CdkStepperNext {\r\n  /** Type of the next button. Defaults to \"submit\" if not specified. */\r\n  @Input() type: string = 'submit';\r\n\r\n  constructor(public _stepper: CdkStepper) {}\r\n}\r\n\r\n/** Button that moves to the previous step in a stepper workflow. */\r\n@Directive({\r\n  selector: 'button[cdkStepperPrevious]',\r\n  host: {\r\n    '(click)': '_stepper.previous()',\r\n    '[type]': 'type',\r\n  }\r\n})\r\nexport class CdkStepperPrevious {\r\n  /** Type of the previous button. Defaults to \"button\" if not specified. */\r\n  @Input() type: string = 'button';\r\n\r\n  constructor(public _stepper: CdkStepper) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {AbstractControl} from '@angular/forms';\r\nimport {CdkStepLabel} from './step-label';\r\nimport {Observable, Subject, of as obaservableOf} from 'rxjs';\r\nimport {startWith, takeUntil} from 'rxjs/operators';\r\n\r\n/** Used to generate unique ID for each stepper component. */\r\nlet nextId = 0;\r\n\r\n/**\r\n * Position state of the content of each step in stepper that is used for transitioning\r\n * the content into correct position upon step selection change.\r\n */\r\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\r\n\r\n/** Possible orientation of a stepper. */\r\nexport type StepperOrientation = 'horizontal' | 'vertical';\r\n\r\n/** Change event emitted on selection changes. */\r\nexport class StepperSelectionEvent {\r\n  /** Index of the step now selected. */\r\n  selectedIndex: number;\r\n\r\n  /** Index of the step previously selected. */\r\n  previouslySelectedIndex: number;\r\n\r\n  /** The step instance now selected. */\r\n  selectedStep: CdkStep;\r\n\r\n  /** The step instance previously selected. */\r\n  previouslySelectedStep: CdkStep;\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-step',\r\n  exportAs: 'cdkStep',\r\n  template: '<ng-template><ng-content></ng-content></ng-template>',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CdkStep implements OnChanges {\r\n  /** Template for step label if it exists. */\r\n  @ContentChild(CdkStepLabel) stepLabel: CdkStepLabel;\r\n\r\n  /** Template for step content. */\r\n  @ViewChild(TemplateRef) content: TemplateRef<any>;\r\n\r\n  /** The top level abstract control of the step. */\r\n  @Input() stepControl: AbstractControl;\r\n\r\n  /** Whether user has seen the expanded step content or not. */\r\n  interacted = false;\r\n\r\n  /** Plain text label of the step. */\r\n  @Input() label: string;\r\n\r\n  /** Aria label for the tab. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /**\r\n   * Reference to the element that the tab is labelled by.\r\n   * Will be cleared if `aria-label` is set at the same time.\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** Whether the user can return to this step once it has been marked as complted. */\r\n  @Input()\r\n  get editable(): boolean { return this._editable; }\r\n  set editable(value: boolean) {\r\n    this._editable = coerceBooleanProperty(value);\r\n  }\r\n  private _editable = true;\r\n\r\n  /** Whether the completion of step is optional. */\r\n  @Input()\r\n  get optional(): boolean { return this._optional; }\r\n  set optional(value: boolean) {\r\n    this._optional = coerceBooleanProperty(value);\r\n  }\r\n  private _optional = false;\r\n\r\n  /** Whether step is marked as completed. */\r\n  @Input()\r\n  get completed(): boolean {\r\n    return this._customCompleted == null ? this._defaultCompleted : this._customCompleted;\r\n  }\r\n  set completed(value: boolean) {\r\n    this._customCompleted = coerceBooleanProperty(value);\r\n  }\r\n  private _customCompleted: boolean | null = null;\r\n\r\n  private get _defaultCompleted() {\r\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\r\n  }\r\n\r\n  constructor(@Inject(forwardRef(() => CdkStepper)) private _stepper: CdkStepper) { }\r\n\r\n  /** Selects this step component. */\r\n  select(): void {\r\n    this._stepper.selected = this;\r\n  }\r\n\r\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\r\n  reset(): void {\r\n    this.interacted = false;\r\n\r\n    if (this._customCompleted != null) {\r\n      this._customCompleted = false;\r\n    }\r\n\r\n    if (this.stepControl) {\r\n      this.stepControl.reset();\r\n    }\r\n  }\r\n\r\n  ngOnChanges() {\r\n    // Since basically all inputs of the MatStep get proxied through the view down to the\r\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\r\n    this._stepper._stateChanged();\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[cdkStepper]',\r\n  exportAs: 'cdkStepper',\r\n})\r\nexport class CdkStepper implements AfterViewInit, OnDestroy {\r\n  /** Emits when the component is destroyed. */\r\n  protected _destroyed = new Subject<void>();\r\n\r\n  /** Used for managing keyboard focus. */\r\n  private _keyManager: FocusKeyManager<FocusableOption>;\r\n\r\n  /** The list of step components that the stepper is holding. */\r\n  @ContentChildren(CdkStep) _steps: QueryList<CdkStep>;\r\n\r\n  /** The list of step headers of the steps in the stepper. */\r\n  _stepHeader: QueryList<FocusableOption>;\r\n\r\n  /** Whether the validity of previous steps should be checked or not. */\r\n  @Input()\r\n  get linear(): boolean { return this._linear; }\r\n  set linear(value: boolean) { this._linear = coerceBooleanProperty(value); }\r\n  private _linear = false;\r\n\r\n  /** The index of the selected step. */\r\n  @Input()\r\n  get selectedIndex() { return this._selectedIndex; }\r\n  set selectedIndex(index: number) {\r\n    if (this._steps) {\r\n      // Ensure that the index can't be out of bounds.\r\n      if (index < 0 || index > this._steps.length - 1) {\r\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\r\n      }\r\n\r\n      if (this._selectedIndex != index &&\r\n          !this._anyControlsInvalidOrPending(index) &&\r\n          (index >= this._selectedIndex || this._steps.toArray()[index].editable)) {\r\n        this._updateSelectedItemIndex(index);\r\n      }\r\n    } else {\r\n      this._selectedIndex = index;\r\n    }\r\n  }\r\n  private _selectedIndex = 0;\r\n\r\n  /** The step that is selected. */\r\n  @Input()\r\n  get selected(): CdkStep {\r\n    // @breaking-change 7.0.0 Change return type to `CdkStep | undefined`.\r\n    return this._steps ? this._steps.toArray()[this.selectedIndex] : undefined!;\r\n  }\r\n  set selected(step: CdkStep) {\r\n    this.selectedIndex = this._steps ? this._steps.toArray().indexOf(step) : -1;\r\n  }\r\n\r\n  /** Event emitted when the selected step has changed. */\r\n  @Output() selectionChange: EventEmitter<StepperSelectionEvent>\r\n      = new EventEmitter<StepperSelectionEvent>();\r\n\r\n  /** Used to track unique ID for each stepper component. */\r\n  _groupId: number;\r\n\r\n  protected _orientation: StepperOrientation = 'horizontal';\r\n\r\n  constructor(\r\n    @Optional() private _dir: Directionality,\r\n    private _changeDetectorRef: ChangeDetectorRef) {\r\n    this._groupId = nextId++;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._keyManager = new FocusKeyManager(this._stepHeader)\r\n      .withWrap()\r\n      .withVerticalOrientation(this._orientation === 'vertical');\r\n\r\n    (this._dir ? this._dir.change as Observable<Direction> : obaservableOf())\r\n      .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\r\n      .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\r\n\r\n    this._keyManager.updateActiveItemIndex(this._selectedIndex);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Selects and focuses the next step in list. */\r\n  next(): void {\r\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);\r\n  }\r\n\r\n  /** Selects and focuses the previous step in list. */\r\n  previous(): void {\r\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\r\n  }\r\n\r\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\r\n  reset(): void {\r\n    this._updateSelectedItemIndex(0);\r\n    this._steps.forEach(step => step.reset());\r\n    this._stateChanged();\r\n  }\r\n\r\n  /** Returns a unique id for each step label element. */\r\n  _getStepLabelId(i: number): string {\r\n    return `cdk-step-label-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /** Returns unique id for each step content element. */\r\n  _getStepContentId(i: number): string {\r\n    return `cdk-step-content-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /** Marks the component to be change detected. */\r\n  _stateChanged() {\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Returns position state of the step with the given index. */\r\n  _getAnimationDirection(index: number): StepContentPositionState {\r\n    const position = index - this._selectedIndex;\r\n    if (position < 0) {\r\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\r\n    } else if (position > 0) {\r\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\r\n    }\r\n    return 'current';\r\n  }\r\n\r\n  /** Returns the type of icon to be displayed. */\r\n  _getIndicatorType(index: number): 'number' | 'edit' | 'done' {\r\n    const step = this._steps.toArray()[index];\r\n    if (!step.completed || this._selectedIndex == index) {\r\n      return 'number';\r\n    } else {\r\n      return step.editable ? 'edit' : 'done';\r\n    }\r\n  }\r\n\r\n  /** Returns the index of the currently-focused step header. */\r\n  _getFocusIndex() {\r\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\r\n  }\r\n\r\n  private _updateSelectedItemIndex(newIndex: number): void {\r\n    const stepsArray = this._steps.toArray();\r\n    this.selectionChange.emit({\r\n      selectedIndex: newIndex,\r\n      previouslySelectedIndex: this._selectedIndex,\r\n      selectedStep: stepsArray[newIndex],\r\n      previouslySelectedStep: stepsArray[this._selectedIndex],\r\n    });\r\n    this._keyManager.updateActiveItemIndex(newIndex);\r\n    this._selectedIndex = newIndex;\r\n    this._stateChanged();\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    const keyCode = event.keyCode;\r\n\r\n    if (this._keyManager.activeItemIndex != null && (keyCode === SPACE || keyCode === ENTER)) {\r\n      this.selectedIndex = this._keyManager.activeItemIndex;\r\n      event.preventDefault();\r\n    } else if (keyCode === HOME) {\r\n      this._keyManager.setFirstItemActive();\r\n      event.preventDefault();\r\n    } else if (keyCode === END) {\r\n      this._keyManager.setLastItemActive();\r\n      event.preventDefault();\r\n    } else {\r\n      this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  private _anyControlsInvalidOrPending(index: number): boolean {\r\n    const steps = this._steps.toArray();\r\n\r\n    steps[this._selectedIndex].interacted = true;\r\n\r\n    if (this._linear && index >= 0) {\r\n      return steps.slice(0, index).some(step => {\r\n        const control = step.stepControl;\r\n        const isIncomplete = control ?\r\n            (control.invalid || control.pending || !step.interacted) :\r\n            !step.completed;\r\n        return isIncomplete && !step.optional;\r\n      });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private _layoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[cdkStepLabel]',\r\n})\r\nexport class CdkStepLabel {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n"],"names":["obaservableOf"],"mappings":"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"}