{"version":3,"file":"cdk-table.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/table/can-stick.ts","../../src/cdk/table/table-errors.ts","../../src/cdk/table/cell.ts","../../src/cdk/table/row.ts","../../src/cdk/table/sticky-styler.ts","../../src/cdk/table/table.ts","../../src/cdk/table/table-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n/** @docs-private */\r\nexport type Constructor<T> = new(...args: any[]) => T;\r\n\r\n/**\r\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\r\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n * @docs-private\r\n */\r\nexport interface CanStick {\r\n  /** Whether sticky positioning should be applied. */\r\n  sticky: boolean;\r\n\r\n  /** Whether the sticky input has changed since it was last checked. */\r\n  _hasStickyChanged: boolean;\r\n\r\n  /** Whether the sticky value has changed since this was last called. */\r\n  hasStickyChanged(): boolean;\r\n\r\n  /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n  resetStickyChanged(): void;\r\n}\r\n\r\n/**\r\n * Mixin to provide a directive with a function that checks if the sticky input has been\r\n * changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n */\r\nexport function mixinHasStickyInput<T extends Constructor<{}>>(base: T):\r\n    Constructor<CanStick> & T {\r\n  return class extends base {\r\n    /** Whether sticky positioning should be applied. */\r\n    get sticky(): boolean { return this._sticky; }\r\n    set sticky(v: boolean) {\r\n      const prevValue = this._sticky;\r\n      this._sticky = coerceBooleanProperty(v);\r\n      this._hasStickyChanged = prevValue !== this._sticky;\r\n    }\r\n    _sticky: boolean = false;\r\n\r\n    /** Whether the sticky input has changed since it was last checked. */\r\n    _hasStickyChanged: boolean = false;\r\n\r\n    /** Whether the sticky value has changed since this was last called. */\r\n    hasStickyChanged(): boolean {\r\n      const hasStickyChanged = this._hasStickyChanged;\r\n      this._hasStickyChanged = false;\r\n      return hasStickyChanged;\r\n    }\r\n\r\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n    resetStickyChanged() {\r\n      this._hasStickyChanged = false;\r\n    }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an error to be thrown when attempting to find an unexisting column.\r\n * @param id Id whose lookup failed.\r\n * @docs-private\r\n */\r\nexport function getTableUnknownColumnError(id: string) {\r\n  return Error(`Could not find column with id \"${id}\".`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when two column definitions have the same name.\r\n * @docs-private\r\n */\r\nexport function getTableDuplicateColumnNameError(name: string) {\r\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\r\n * @docs-private\r\n */\r\nexport function getTableMultipleDefaultRowDefsError() {\r\n  return Error(`There can only be one default row without a when predicate function.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\r\n * @docs-private\r\n */\r\nexport function getTableMissingMatchingRowDefError(data: any) {\r\n  return Error(`Could not find a matching row definition for the` +\r\n      `provided row data: ${JSON.stringify(data)}`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there is no row definitions present in the content.\r\n * @docs-private\r\n */\r\nexport function getTableMissingRowDefsError() {\r\n  return Error('Missing definitions for header, footer, and row; ' +\r\n      'cannot determine which columns should be rendered.');\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when the data source does not match the compatible types.\r\n * @docs-private\r\n */\r\nexport function getTableUnknownDataSourceError() {\r\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ContentChild, Directive, ElementRef, Input, TemplateRef} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CanStick, mixinHasStickyInput} from './can-stick';\r\n\r\n/** Base interface for a cell definition. Captures a column's cell template definition. */\r\nexport interface CellDef {\r\n  template: TemplateRef<any>;\r\n}\r\n\r\n/**\r\n * Cell definition for a CDK table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkCellDef]'})\r\nexport class CdkCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n\r\n/**\r\n * Header cell definition for a CDK table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkHeaderCellDef]'})\r\nexport class CdkHeaderCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n\r\n/**\r\n * Footer cell definition for a CDK table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkFooterCellDef]'})\r\nexport class CdkFooterCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkColumnDef.\r\n/** @docs-private */\r\nexport class CdkColumnDefBase {}\r\nexport const _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\r\n\r\n/**\r\n * Column definition for the CDK table.\r\n * Defines a set of cells available for a table column.\r\n */\r\n@Directive({\r\n  selector: '[cdkColumnDef]',\r\n  inputs: ['sticky']\r\n})\r\nexport class CdkColumnDef extends _CdkColumnDefBase implements CanStick {\r\n  /** Unique name for this column. */\r\n  @Input('cdkColumnDef')\r\n  get name(): string { return this._name; }\r\n  set name(name: string) {\r\n    // If the directive is set without a name (updated programatically), then this setter will\r\n    // trigger with an empty string and should not overwrite the programatically set value.\r\n    if (!name) { return; }\r\n\r\n    this._name = name;\r\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\r\n  }\r\n  _name: string;\r\n\r\n  /**\r\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\r\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\r\n   * has been changed.\r\n   */\r\n  @Input('stickyEnd')\r\n  get stickyEnd(): boolean { return this._stickyEnd; }\r\n  set stickyEnd(v: boolean) {\r\n    const prevValue = this._stickyEnd;\r\n    this._stickyEnd = coerceBooleanProperty(v);\r\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\r\n  }\r\n  _stickyEnd: boolean = false;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkCellDef) cell: CdkCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkHeaderCellDef) headerCell: CdkHeaderCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkFooterCellDef) footerCell: CdkFooterCellDef;\r\n\r\n  /**\r\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\r\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\r\n   * do not match are replaced by the '-' character.\r\n   */\r\n  cssClassFriendlyName: string;\r\n}\r\n\r\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\r\nexport class BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\r\n    elementRef.nativeElement.classList.add(columnClassName);\r\n  }\r\n}\r\n\r\n/** Header cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\r\n  host: {\r\n    'class': 'cdk-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n})\r\nexport class CdkHeaderCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Footer cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\r\n  host: {\r\n    'class': 'cdk-footer-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkFooterCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-cell, td[cdk-cell]',\r\n  host: {\r\n    'class': 'cdk-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CdkCellDef, CdkColumnDef} from './cell';\r\nimport {CanStick, mixinHasStickyInput} from './can-stick';\r\n\r\n/**\r\n * The row template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n */\r\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\r\n\r\n/**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n */\r\nexport abstract class BaseRowDef implements OnChanges {\r\n  /** The columns to be displayed on this row. */\r\n  columns: Iterable<string>;\r\n\r\n  /** Differ used to check if any changes were made to the columns. */\r\n  protected _columnsDiffer: IterableDiffer<any>;\r\n\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>,\r\n              protected _differs: IterableDiffers) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\r\n    // of the columns property or an empty array if none is provided.\r\n    if (!this._columnsDiffer) {\r\n      const columns = (changes['columns'] && changes['columns'].currentValue) || [];\r\n      this._columnsDiffer = this._differs.find(columns).create();\r\n      this._columnsDiffer.diff(columns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the difference between the current columns and the columns from the last diff, or null\r\n   * if there is no difference.\r\n   */\r\n  getColumnsDiff(): IterableChanges<any> | null {\r\n    return this._columnsDiffer.diff(this.columns);\r\n  }\r\n\r\n  /** Gets this row def's relevant cell template from the provided column def. */\r\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\r\n    if (this instanceof CdkHeaderRowDef) {\r\n      return column.headerCell.template;\r\n    } if (this instanceof CdkFooterRowDef) {\r\n      return column.footerCell.template;\r\n    } else {\r\n      return column.cell.template;\r\n    }\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkHeaderRowDef.\r\n/** @docs-private */\r\nexport class CdkHeaderRowDefBase extends BaseRowDef {}\r\nexport const _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\r\n\r\n/**\r\n * Header row definition for the CDK table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkHeaderRowDef]',\r\n  inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\r\n})\r\nexport class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkFooterRowDef.\r\n/** @docs-private */\r\nexport class CdkFooterRowDefBase extends BaseRowDef {}\r\nexport const _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\r\n\r\n/**\r\n * Footer row definition for the CDK table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkFooterRowDef]',\r\n  inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\r\n})\r\nexport class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n}\r\n\r\n/**\r\n * Data row definition for the CDK table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\n@Directive({\r\n  selector: '[cdkRowDef]',\r\n  inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\r\n})\r\nexport class CdkRowDef<T> extends BaseRowDef {\r\n  /**\r\n   * Function that should return true if this row template should be used for the provided index\r\n   * and row data. If left undefined, this row will be considered the default row template to use\r\n   * when no other when functions return true for the data.\r\n   * For every row, there must be at least one when function that passes or an undefined to default.\r\n   */\r\n  when: (index: number, rowData: T) => boolean;\r\n\r\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\r\n  //   if this template should be used.\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n}\r\n\r\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\r\nexport interface CdkCellOutletRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\r\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\r\n * `renderIndex`.\r\n */\r\nexport interface CdkCellOutletMultiRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  dataIndex?: number;\r\n\r\n  /** Index location of the rendered row that this cell is located within. */\r\n  renderIndex?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Outlet for rendering cells inside of a row or header row.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[cdkCellOutlet]'})\r\nexport class CdkCellOutlet implements OnDestroy {\r\n  /** The ordered list of cells to render within this outlet's view container */\r\n  cells: CdkCellDef[];\r\n\r\n  /** The data context to be provided to each cell */\r\n  context: any;\r\n\r\n  /**\r\n   * Static property containing the latest constructed instance of this class.\r\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\r\n   * createEmbeddedView. After one of these components are created, this property will provide\r\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\r\n   * construct the cells with the provided context.\r\n   */\r\n  static mostRecentCellOutlet: CdkCellOutlet | null = null;\r\n\r\n  constructor(public _viewContainer: ViewContainerRef) {\r\n    CdkCellOutlet.mostRecentCellOutlet = this;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // If this was the last outlet being rendered in the view, remove the reference\r\n    // from the static property after it has been destroyed to avoid leaking memory.\r\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\r\n      CdkCellOutlet.mostRecentCellOutlet = null;\r\n    }\r\n  }\r\n}\r\n\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-header-row, tr[cdk-header-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-header-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkHeaderRow { }\r\n\r\n\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-footer-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkFooterRow { }\r\n\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-row, tr[cdk-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkRow { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Directions that can be used when setting sticky positioning.\r\n * @docs-private\r\n */\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\nexport type StickyDirection = 'top' | 'bottom' | 'left' | 'right';\r\n\r\n/**\r\n * List of all possible directions that can be used for sticky positioning.\r\n * @docs-private\r\n */\r\nexport const STICKY_DIRECTIONS: StickyDirection[] = ['top', 'bottom', 'left', 'right'];\r\n\r\n/**\r\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\r\n * @docs-private\r\n */\r\nexport class StickyStyler {\r\n  /**\r\n   * @param isNativeHtmlTable Whether the sticky logic should be based on a table\r\n   *     that uses the native `<table>` element.\r\n   * @param stickCellCss The CSS class that will be applied to every row/cell that has\r\n   *     sticky positioning applied.\r\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\r\n   *     by reversing left/right positions.\r\n   */\r\n  constructor(private isNativeHtmlTable: boolean,\r\n              private stickCellCss: string,\r\n              public direction: Direction) { }\r\n\r\n  /**\r\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\r\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\r\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\r\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\r\n   */\r\n  clearStickyPositioning(rows: HTMLElement[], stickyDirections: StickyDirection[]) {\r\n    for (const row of rows) {\r\n      // If the row isn't an element (e.g. if it's an `ng-container`),\r\n      // it won't have inline styles or `children` so we skip it.\r\n      if (row.nodeType !== row.ELEMENT_NODE) {\r\n        continue;\r\n      }\r\n\r\n      this._removeStickyStyle(row, stickyDirections);\r\n\r\n      for (let i = 0; i < row.children.length; i++) {\r\n        const cell = row.children[i] as HTMLElement;\r\n        this._removeStickyStyle(cell, stickyDirections);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies sticky left and right positions to the cells of each row according to the sticky\r\n   * states of the rendered column definitions.\r\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\r\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\r\n   *     in this index position should be stuck to the start of the row.\r\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\r\n   *     in this index position should be stuck to the end of the row.\r\n   */\r\n  updateStickyColumns(\r\n      rows: HTMLElement[], stickyStartStates: boolean[], stickyEndStates: boolean[]) {\r\n    const hasStickyColumns =\r\n        stickyStartStates.some(state => state) || stickyEndStates.some(state => state);\r\n    if (!rows.length || !hasStickyColumns) {\r\n      return;\r\n    }\r\n\r\n    const firstRow = rows[0];\r\n    const numCells = firstRow.children.length;\r\n    const cellWidths: number[] = this._getCellWidths(firstRow);\r\n\r\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\r\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\r\n    const isRtl = this.direction === 'rtl';\r\n\r\n    for (const row of rows) {\r\n      for (let i = 0; i < numCells; i++) {\r\n        const cell = row.children[i] as HTMLElement;\r\n        if (stickyStartStates[i]) {\r\n          this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\r\n        }\r\n\r\n        if (stickyEndStates[i]) {\r\n          this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\r\n   * row itself otherwise.\r\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\r\n   *     sticky state and to the provided top or bottom position.\r\n   * @param stickyStates A list of boolean states where each state represents whether the row\r\n   *     should be stuck in the particular top or bottom position.\r\n   * @param position The position direction in which the row should be stuck if that row should be\r\n   *     sticky.\r\n   *\r\n   */\r\n  stickRows(rowsToStick: HTMLElement[], stickyStates: boolean[], position: 'top' | 'bottom') {\r\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\r\n    // position such that the last row stuck will be \"bottom: 0px\" and so on.\r\n    const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\r\n\r\n    let stickyHeight = 0;\r\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n      if (!stickyStates[rowIndex]) {\r\n        continue;\r\n      }\r\n\r\n      const row = rows[rowIndex];\r\n      if (this.isNativeHtmlTable) {\r\n        for (let j = 0; j < row.children.length; j++) {\r\n          const cell = row.children[j] as HTMLElement;\r\n          this._addStickyStyle(cell, position, stickyHeight);\r\n        }\r\n      } else {\r\n        // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\r\n        // If this is applied on a native table, Safari causes the header to fly in wrong direction.\r\n        this._addStickyStyle(row, position, stickyHeight);\r\n      }\r\n\r\n      stickyHeight += row.getBoundingClientRect().height;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\r\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\r\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\r\n   * the tfoot element.\r\n   */\r\n  updateStickyFooterContainer(tableElement: Element, stickyStates: boolean[]) {\r\n    if (!this.isNativeHtmlTable) {\r\n      return;\r\n    }\r\n\r\n    const tfoot = tableElement.querySelector('tfoot')!;\r\n    if (stickyStates.some(state => !state)) {\r\n      this._removeStickyStyle(tfoot, ['bottom']);\r\n    } else {\r\n      this._addStickyStyle(tfoot, 'bottom', 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\r\n   * the zIndex, removing each of the provided sticky directions, and removing the\r\n   * sticky position if there are no more directions.\r\n   */\r\n  _removeStickyStyle(element: HTMLElement, stickyDirections: StickyDirection[]) {\r\n    for (const dir of stickyDirections) {\r\n      element.style[dir] = '';\r\n    }\r\n    element.style.zIndex = this._getCalculatedZIndex(element);\r\n\r\n    // If the element no longer has any more sticky directions, remove sticky positioning and\r\n    // the sticky CSS class.\r\n    const hasDirection = STICKY_DIRECTIONS.some(dir => !!element.style[dir]);\r\n    if (!hasDirection) {\r\n      element.style.position = '';\r\n      element.classList.remove(this.stickCellCss);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\r\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\r\n   * direction and value.\r\n   */\r\n  _addStickyStyle(element: HTMLElement, dir: StickyDirection, dirValue: number) {\r\n    element.classList.add(this.stickCellCss);\r\n    element.style[dir] = `${dirValue}px`;\r\n    element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\r\n    element.style.zIndex = this._getCalculatedZIndex(element);\r\n  }\r\n\r\n  /**\r\n   * Calculate what the z-index should be for the element, depending on what directions (top,\r\n   * bottom, left, right) have been set. It should be true that elements with a top direction\r\n   * should have the highest index since these are elements like a table header. If any of those\r\n   * elements are also sticky in another direction, then they should appear above other elements\r\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\r\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\r\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\r\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\r\n   * elements.\r\n   */\r\n  _getCalculatedZIndex(element: HTMLElement): string {\r\n    const zIndexIncrements = {\r\n      top: 100,\r\n      bottom: 10,\r\n      left: 1,\r\n      right: 1,\r\n    };\r\n\r\n    let zIndex = 0;\r\n    for (const dir of STICKY_DIRECTIONS) {\r\n      if (element.style[dir]) {\r\n        zIndex += zIndexIncrements[dir];\r\n      }\r\n    }\r\n\r\n    return zIndex ? `${zIndex}` : '';\r\n  }\r\n\r\n  /** Gets the widths for each cell in the provided row. */\r\n  _getCellWidths(row: HTMLElement): number[] {\r\n    const cellWidths: number[] = [];\r\n    const firstRowCells = row.children;\r\n    for (let i = 0; i < firstRowCells.length; i++) {\r\n      let cell: HTMLElement = firstRowCells[i] as HTMLElement;\r\n      cellWidths.push(cell.getBoundingClientRect().width);\r\n    }\r\n\r\n    return cellWidths;\r\n  }\r\n\r\n  /**\r\n   * Determines the left and right positions of each sticky column cell, which will be the\r\n   * accumulation of all sticky column cell widths to the left and right, respectively.\r\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n   */\r\n  _getStickyStartColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\r\n    const positions: number[] = [];\r\n    let nextPosition = 0;\r\n\r\n    for (let i = 0; i < widths.length; i++) {\r\n      if (stickyStates[i]) {\r\n        positions[i] = nextPosition;\r\n        nextPosition += widths[i];\r\n      }\r\n    }\r\n\r\n    return positions;\r\n  }\r\n\r\n  /**\r\n   * Determines the left and right positions of each sticky column cell, which will be the\r\n   * accumulation of all sticky column cell widths to the left and right, respectively.\r\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n   */\r\n  _getStickyEndColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\r\n    const positions: number[] = [];\r\n    let nextPosition = 0;\r\n\r\n    for (let i = widths.length; i > 0; i--) {\r\n      if (stickyStates[i]) {\r\n        positions[i] = nextPosition;\r\n        nextPosition += widths[i];\r\n      }\r\n    }\r\n\r\n    return positions;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentChecked,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  isDevMode,\r\n  IterableChangeRecord,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  QueryList,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {CdkColumnDef} from './cell';\r\nimport {\r\n  BaseRowDef,\r\n  CdkCellOutlet,\r\n  CdkCellOutletMultiRowContext,\r\n  CdkCellOutletRowContext,\r\n  CdkFooterRowDef,\r\n  CdkHeaderRowDef,\r\n  CdkRowDef\r\n} from './row';\r\nimport {\r\n  getTableDuplicateColumnNameError,\r\n  getTableMissingMatchingRowDefError,\r\n  getTableMissingRowDefsError,\r\n  getTableMultipleDefaultRowDefsError,\r\n  getTableUnknownColumnError,\r\n  getTableUnknownDataSourceError\r\n} from './table-errors';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {StickyStyler} from './sticky-styler';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\n\r\n/** Interface used to provide an outlet for rows to be inserted into. */\r\nexport interface RowOutlet {\r\n  viewContainer: ViewContainerRef;\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[rowOutlet]'})\r\nexport class DataRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[headerRowOutlet]'})\r\nexport class HeaderRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[footerRowOutlet]'})\r\nexport class FooterRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\r\n}\r\n\r\n/**\r\n * The table template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n * @docs-private\r\n */\r\nexport const CDK_TABLE_TEMPLATE = `\r\n  <ng-container headerRowOutlet></ng-container>\r\n  <ng-container rowOutlet></ng-container>\r\n  <ng-container footerRowOutlet></ng-container>`;\r\n\r\n/**\r\n * Interface used to conveniently type the possible context interfaces for the render row.\r\n * @docs-private\r\n */\r\nexport interface RowContext<T>\r\n    extends CdkCellOutletMultiRowContext<T>, CdkCellOutletRowContext<T> { }\r\n\r\n/**\r\n * Class used to conveniently type the embedded view ref for rows with a context.\r\n * @docs-private\r\n */\r\nabstract class RowViewRef<T> extends EmbeddedViewRef<RowContext<T>> { }\r\n\r\n/**\r\n * Set of properties that represents the identity of a single rendered row.\r\n *\r\n * When the table needs to determine the list of rows to render, it will do so by iterating through\r\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\r\n * is false, there is only one template per data object). For each pair of data object and row\r\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\r\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\r\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\r\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\r\n *\r\n * @docs-private\r\n */\r\nexport interface RenderRow<T> {\r\n  data: T;\r\n  dataIndex: number;\r\n  rowDef: CdkRowDef<T>;\r\n}\r\n\r\n/**\r\n * A data table that can render a header row, data rows, and a footer row.\r\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\r\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\r\n * connect function that will return an Observable stream that emits the data array to render.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-table, table[cdk-table]',\r\n  exportAs: 'cdkTable',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-table',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CdkTable<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\r\n  /** Latest data provided by the data source. */\r\n  protected _data: T[];\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  /** List of the rendered rows as identified by their `RenderRow` object. */\r\n  private _renderRows: RenderRow<T>[];\r\n\r\n  /** Subscription that listens for the data provided by the data source. */\r\n  private _renderChangeSubscription: Subscription | null;\r\n\r\n  /**\r\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\r\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\r\n   * any custom column definitions added to `_customColumnDefs`.\r\n   */\r\n  private _columnDefsByName = new Map<string,  CdkColumnDef>();\r\n\r\n  /**\r\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\r\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\r\n   */\r\n  private _rowDefs: CdkRowDef<T>[];\r\n\r\n  /**\r\n   * Set of all header row definitions that can be used by this table. Populated by the rows\r\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\r\n   * `_customHeaderRowDefs`.\r\n   */\r\n  private _headerRowDefs: CdkHeaderRowDef[];\r\n\r\n  /**\r\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\r\n   * using `ContentChildren` as well as any custom row definitions added to\r\n   * `_customFooterRowDefs`.\r\n   */\r\n  private _footerRowDefs: CdkFooterRowDef[];\r\n\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<RenderRow<T>>;\r\n\r\n  /** Stores the row definition that does not have a when predicate. */\r\n  private _defaultRowDef: CdkRowDef<T> | null;\r\n\r\n  /**\r\n   * Column definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * column definitions as *it's* content child.\r\n   */\r\n  private _customColumnDefs = new Set<CdkColumnDef>();\r\n\r\n  /**\r\n   * Data row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * built-in data rows as *it's* content child.\r\n   */\r\n  private _customRowDefs = new Set<CdkRowDef<T>>();\r\n\r\n  /**\r\n   * Header row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * built-in header rows as *it's* content child.\r\n   */\r\n  private _customHeaderRowDefs = new Set<CdkHeaderRowDef>();\r\n\r\n  /**\r\n   * Footer row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\r\n   * built-in footer row as *it's* content child.\r\n   */\r\n  private _customFooterRowDefs = new Set<CdkFooterRowDef>();\r\n\r\n  /**\r\n   * Whether the header row definition has been changed. Triggers an update to the header row after\r\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n   */\r\n  private _headerRowDefChanged = true;\r\n\r\n  /**\r\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\r\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n   */\r\n  private _footerRowDefChanged = true;\r\n\r\n  /**\r\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\r\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\r\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\r\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\r\n   * and understand which rows are added/moved/removed.\r\n   *\r\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\r\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\r\n   * contains an array of created pairs. The array is necessary to handle cases where the data\r\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\r\n   * stored.\r\n   */\r\n  private _cachedRenderRowsMap = new Map<T, WeakMap<CdkRowDef<T>, RenderRow<T>[]>>();\r\n\r\n  /** Whether the table is applied to a native `<table>`. */\r\n  private _isNativeHtmlTable: boolean;\r\n\r\n  /**\r\n   * Utility class that is responsible for applying the appropriate sticky positioning styles to\r\n   * the table's rows and cells.\r\n   */\r\n  private _stickyStyler: StickyStyler;\r\n\r\n  /**\r\n   * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\r\n   * table subclasses.\r\n   */\r\n  protected stickyCssClass: string = 'cdk-table-sticky';\r\n\r\n  /**\r\n   * Tracking function that will be used to check the differences in data changes. Used similarly\r\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\r\n   * relative to the function to know if a row should be added/removed/moved.\r\n   * Accepts a function that takes two parameters, `index` and `item`.\r\n   */\r\n  @Input()\r\n  get trackBy(): TrackByFunction<T> { return this._trackByFn; }\r\n  set trackBy(fn: TrackByFunction<T>) {\r\n    if (isDevMode() &&\r\n        fn != null && typeof fn !== 'function' &&\r\n        <any>console && <any>console.warn) {\r\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\r\n    }\r\n    this._trackByFn = fn;\r\n  }\r\n  private _trackByFn: TrackByFunction<T>;\r\n\r\n  /**\r\n   * The table's source of data, which can be provided in three ways (in order of complexity):\r\n   *   - Simple data array (each object represents one table row)\r\n   *   - Stream that emits a data array each time the array changes\r\n   *   - `DataSource` object that implements the connect/disconnect interface.\r\n   *\r\n   * If a data array is provided, the table must be notified when the array's objects are\r\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\r\n   * render the diff since the last table render. If the data array reference is changed, the table\r\n   * will automatically trigger an update to the rows.\r\n   *\r\n   * When providing an Observable stream, the table will trigger an update automatically when the\r\n   * stream emits a new array of data.\r\n   *\r\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\r\n   * provided by the connect function and trigger updates when that stream emits new data array\r\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\r\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\r\n   * subscriptions registered during the connect process).\r\n   */\r\n  @Input()\r\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\r\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\r\n  private _dataSource: DataSource<T> | Observable<T[]> | T[] | T[];\r\n\r\n  /**\r\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\r\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\r\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\r\n   * defined in the table, or otherwise the default row which does not have a when predicate.\r\n   */\r\n  @Input()\r\n  get multiTemplateDataRows(): boolean { return this._multiTemplateDataRows; }\r\n  set multiTemplateDataRows(v: boolean) {\r\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\r\n    if (this._rowOutlet.viewContainer.length) {\r\n      this._forceRenderDataRows();\r\n    }\r\n  }\r\n  _multiTemplateDataRows: boolean = false;\r\n\r\n  // TODO(andrewseguin): Remove max value as the end index\r\n  //   and instead calculate the view on init and scroll.\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   */\r\n  viewChange: BehaviorSubject<{start: number, end: number}> =\r\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\r\n  @ViewChild(DataRowOutlet) _rowOutlet: DataRowOutlet;\r\n  @ViewChild(HeaderRowOutlet) _headerRowOutlet: HeaderRowOutlet;\r\n  @ViewChild(FooterRowOutlet) _footerRowOutlet: FooterRowOutlet;\r\n\r\n  /**\r\n   * The column definitions provided by the user that contain what the header, data, and footer\r\n   * cells should render for each column.\r\n   */\r\n  @ContentChildren(CdkColumnDef) _contentColumnDefs: QueryList<CdkColumnDef>;\r\n\r\n  /** Set of data row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkRowDef) _contentRowDefs: QueryList<CdkRowDef<T>>;\r\n\r\n  /** Set of header row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkHeaderRowDef) _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\r\n\r\n  /** Set of footer row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkFooterRowDef) _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\r\n\r\n  constructor(protected readonly _differs: IterableDiffers,\r\n              protected readonly _changeDetectorRef: ChangeDetectorRef,\r\n              protected readonly _elementRef: ElementRef,\r\n              @Attribute('role') role: string,\r\n              @Optional() protected readonly _dir: Directionality) {\r\n    if (!role) {\r\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\r\n    }\r\n\r\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._setupStickyStyler();\r\n\r\n    if (this._isNativeHtmlTable) {\r\n      this._applyNativeTableSections();\r\n    }\r\n\r\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\r\n    // the user has provided a custom trackBy, return the result of that function as evaluated\r\n    // with the values of the `RenderRow`'s data and index.\r\n    this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\r\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\r\n    this._cacheRowDefs();\r\n    this._cacheColumnDefs();\r\n\r\n    // Make sure that the user has at least added header, footer, or data row def.\r\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\r\n      throw getTableMissingRowDefsError();\r\n    }\r\n\r\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\r\n    this._renderUpdatedColumns();\r\n\r\n    // If the header row definition has been changed, trigger a render to the header row.\r\n    if (this._headerRowDefChanged) {\r\n      this._forceRenderHeaderRows();\r\n      this._headerRowDefChanged = false;\r\n    }\r\n\r\n    // If the footer row definition has been changed, trigger a render to the footer row.\r\n    if (this._footerRowDefChanged) {\r\n      this._forceRenderFooterRows();\r\n      this._footerRowDefChanged = false;\r\n    }\r\n\r\n    // If there is a data source and row definitions, connect to the data source unless a\r\n    // connection has already been made.\r\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\r\n      this._observeRenderChanges();\r\n    }\r\n\r\n    this._checkStickyStates();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rowOutlet.viewContainer.clear();\r\n    this._headerRowOutlet.viewContainer.clear();\r\n    this._footerRowOutlet.viewContainer.clear();\r\n\r\n    this._cachedRenderRowsMap.clear();\r\n\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    if (this.dataSource instanceof DataSource) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\r\n   * input or retrieved through an Observable stream (directly or from a DataSource).\r\n   * Checks for differences in the data since the last diff to perform only the necessary\r\n   * changes (add/remove/move rows).\r\n   *\r\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\r\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\r\n   * an array, this function will need to be called to render any changes.\r\n   */\r\n  renderRows() {\r\n    this._renderRows = this._getAllRenderRows();\r\n    const changes = this._dataDiffer.diff(this._renderRows);\r\n    if (!changes) { return; }\r\n\r\n    const viewContainer = this._rowOutlet.viewContainer;\r\n    changes.forEachOperation(\r\n        (record: IterableChangeRecord<RenderRow<T>>, prevIndex: number, currentIndex: number) => {\r\n          if (record.previousIndex == null) {\r\n            this._insertRow(record.item, currentIndex);\r\n          } else if (currentIndex == null) {\r\n            viewContainer.remove(prevIndex);\r\n          } else {\r\n            const view = <RowViewRef<T>>viewContainer.get(prevIndex);\r\n            viewContainer.move(view!, currentIndex);\r\n          }\r\n        });\r\n\r\n    // Update the meta context of a row's context data (index, count, first, last, ...)\r\n    this._updateRowIndexContext();\r\n\r\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\r\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\r\n    changes.forEachIdentityChange((record: IterableChangeRecord<RenderRow<T>>) => {\r\n      const rowView = <RowViewRef<T>>viewContainer.get(record.currentIndex!);\r\n      rowView.context.$implicit = record.item.data;\r\n    });\r\n\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /**\r\n   * Sets the header row definition to be used. Overrides the header row definition gathered by\r\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\r\n   * table's content is checked.\r\n   * @docs-private\r\n   * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  setHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs = new Set([headerRowDef]);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /**\r\n   * Sets the footer row definition to be used. Overrides the footer row definition gathered by\r\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\r\n   * table's content is checked.\r\n   * @docs-private\r\n   * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  setFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs = new Set([footerRowDef]);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /** Adds a column definition that was not included as part of the content children. */\r\n  addColumnDef(columnDef: CdkColumnDef) {\r\n    this._customColumnDefs.add(columnDef);\r\n  }\r\n\r\n  /** Removes a column definition that was not included as part of the content children. */\r\n  removeColumnDef(columnDef: CdkColumnDef) {\r\n    this._customColumnDefs.delete(columnDef);\r\n  }\r\n\r\n  /** Adds a row definition that was not included as part of the content children. */\r\n  addRowDef(rowDef: CdkRowDef<T>) {\r\n    this._customRowDefs.add(rowDef);\r\n  }\r\n\r\n  /** Removes a row definition that was not included as part of the content children. */\r\n  removeRowDef(rowDef: CdkRowDef<T>) {\r\n    this._customRowDefs.delete(rowDef);\r\n  }\r\n\r\n  /** Adds a header row definition that was not included as part of the content children. */\r\n  addHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs.add(headerRowDef);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /** Removes a header row definition that was not included as part of the content children. */\r\n  removeHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs.delete(headerRowDef);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /** Adds a footer row definition that was not included as part of the content children. */\r\n  addFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs.add(footerRowDef);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /** Removes a footer row definition that was not included as part of the content children. */\r\n  removeFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs.delete(footerRowDef);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /**\r\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\r\n   * automatically called when the header row changes its displayed set of columns, or if its\r\n   * sticky input changes. May be called manually for cases where the cell content changes outside\r\n   * of these events.\r\n   */\r\n  updateStickyHeaderRowStyles() {\r\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\r\n\r\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\r\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\r\n   * automatically called when the footer row changes its displayed set of columns, or if its\r\n   * sticky input changes. May be called manually for cases where the cell content changes outside\r\n   * of these events.\r\n   */\r\n  updateStickyFooterRowStyles() {\r\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\r\n\r\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\r\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\r\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the left and right. Then sticky styles are added for the left and right according\r\n   * to the column definitions for each cell in each row. This is automatically called when\r\n   * the data source provides a new set of data or when a column definition changes its sticky\r\n   * input. May be called manually for cases where the cell content changes outside of these events.\r\n   */\r\n  updateStickyColumnStyles() {\r\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n    const dataRows = this._getRenderedRows(this._rowOutlet);\r\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n\r\n    // Clear the left and right positioning from all columns in the table across all rows since\r\n    // sticky columns span across all table sections (header, data, footer)\r\n    this._stickyStyler.clearStickyPositioning(\r\n        [...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\r\n\r\n    // Update the sticky styles for each header row depending on the def's sticky state\r\n    headerRows.forEach((headerRow, i) => {\r\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\r\n    });\r\n\r\n    // Update the sticky styles for each data row depending on its def's sticky state\r\n    this._rowDefs.forEach(rowDef => {\r\n      // Collect all the rows rendered with this row definition.\r\n      const rows: HTMLElement[] = [];\r\n      for (let i = 0; i < dataRows.length; i++) {\r\n        if (this._renderRows[i].rowDef === rowDef) {\r\n          rows.push(dataRows[i]);\r\n        }\r\n      }\r\n\r\n      this._addStickyColumnStyles(rows, rowDef);\r\n    });\r\n\r\n    // Update the sticky styles for each footer row depending on the def's sticky state\r\n    footerRows.forEach((footerRow, i) => {\r\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\r\n    });\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Get the list of RenderRow objects to render according to the current list of data and defined\r\n   * row definitions. If the previous list already contained a particular pair, it should be reused\r\n   * so that the differ equates their references.\r\n   */\r\n  private _getAllRenderRows(): RenderRow<T>[] {\r\n    const renderRows: RenderRow<T>[] = [];\r\n\r\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\r\n    // new cache while unused ones can be picked up by garbage collection.\r\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\r\n    this._cachedRenderRowsMap = new Map();\r\n\r\n    // For each data object, get the list of rows that should be rendered, represented by the\r\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\r\n    for (let i = 0; i < this._data.length; i++) {\r\n      let data = this._data[i];\r\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\r\n\r\n      if (!this._cachedRenderRowsMap.has(data)) {\r\n        this._cachedRenderRowsMap.set(data, new WeakMap());\r\n      }\r\n\r\n      for (let j = 0; j < renderRowsForData.length; j++) {\r\n        let renderRow = renderRowsForData[j];\r\n\r\n        const cache = this._cachedRenderRowsMap.get(renderRow.data)!;\r\n        if (cache.has(renderRow.rowDef)) {\r\n          cache.get(renderRow.rowDef)!.push(renderRow);\r\n        } else {\r\n          cache.set(renderRow.rowDef, [renderRow]);\r\n        }\r\n        renderRows.push(renderRow);\r\n      }\r\n    }\r\n\r\n    return renderRows;\r\n  }\r\n\r\n  /**\r\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\r\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\r\n   * `(T, CdkRowDef)` pair.\r\n   */\r\n  private _getRenderRowsForData(\r\n      data: T, dataIndex: number, cache?: WeakMap<CdkRowDef<T>, RenderRow<T>[]>): RenderRow<T>[] {\r\n    const rowDefs = this._getRowDefs(data, dataIndex);\r\n\r\n    return rowDefs.map(rowDef => {\r\n      const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef)! : [];\r\n      if (cachedRenderRows.length) {\r\n        const dataRow = cachedRenderRows.shift()!;\r\n        dataRow.dataIndex = dataIndex;\r\n        return dataRow;\r\n      } else {\r\n        return {data, rowDef, dataIndex};\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Update the map containing the content's column definitions. */\r\n  private _cacheColumnDefs() {\r\n    this._columnDefsByName.clear();\r\n\r\n    const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\r\n    columnDefs.forEach(columnDef => {\r\n      if (this._columnDefsByName.has(columnDef.name)) {\r\n        throw getTableDuplicateColumnNameError(columnDef.name);\r\n      }\r\n      this._columnDefsByName.set(columnDef.name, columnDef);\r\n    });\r\n  }\r\n\r\n  /** Update the list of all available row definitions that can be used. */\r\n  private _cacheRowDefs() {\r\n    this._headerRowDefs =\r\n        mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\r\n    this._footerRowDefs =\r\n        mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\r\n    this._rowDefs =\r\n        mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\r\n\r\n    // After all row definitions are determined, find the row definition to be considered default.\r\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\r\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\r\n      throw getTableMultipleDefaultRowDefsError();\r\n    }\r\n    this._defaultRowDef = defaultRowDefs[0];\r\n  }\r\n\r\n  /**\r\n   * Check if the header, data, or footer rows have changed what columns they want to display or\r\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\r\n   * re-render that section.\r\n   */\r\n  private _renderUpdatedColumns() {\r\n    const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => acc || !!def.getColumnsDiff();\r\n\r\n    // Force re-render data rows if the list of column definitions have changed.\r\n    if (this._rowDefs.reduce(columnsDiffReducer, false)) {\r\n      this._forceRenderDataRows();\r\n    }\r\n\r\n    // Force re-render header/footer rows if the list of column definitions have changed..\r\n    if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\r\n      this._forceRenderHeaderRows();\r\n    }\r\n\r\n    if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\r\n      this._forceRenderFooterRows();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n   * render change subscription if one exists. If the data source is null, interpret this by\r\n   * clearing the row outlet. Otherwise start listening for new data.\r\n   */\r\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    this._data = [];\r\n\r\n    if (this.dataSource instanceof DataSource) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n\r\n    // Stop listening for data from the previous data source.\r\n    if (this._renderChangeSubscription) {\r\n      this._renderChangeSubscription.unsubscribe();\r\n      this._renderChangeSubscription = null;\r\n    }\r\n\r\n    if (!dataSource) {\r\n      if (this._dataDiffer) {\r\n        this._dataDiffer.diff([]);\r\n      }\r\n      this._rowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._dataSource = dataSource;\r\n  }\r\n\r\n  /** Set up a subscription for the data provided by the data source. */\r\n  private _observeRenderChanges() {\r\n    // If no data source has been set, there is nothing to observe for changes.\r\n    if (!this.dataSource) { return; }\r\n\r\n    let dataStream: Observable<T[]> | undefined;\r\n\r\n    // Check if the datasource is a DataSource object by observing if it has a connect function.\r\n    // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\r\n    // checked as an instanceof DataSource<T> since the table should allow for data sources\r\n    // that did not explicitly extend DataSource<T>.\r\n    if ((this.dataSource as DataSource<T>).connect instanceof Function) {\r\n      dataStream = (this.dataSource as DataSource<T>).connect(this);\r\n    } else if (this.dataSource instanceof Observable) {\r\n      dataStream = this.dataSource;\r\n    } else if (Array.isArray(this.dataSource)) {\r\n      dataStream = observableOf(this.dataSource);\r\n    }\r\n\r\n    if (dataStream === undefined) {\r\n      throw getTableUnknownDataSourceError();\r\n    }\r\n\r\n    this._renderChangeSubscription = dataStream\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(data => {\r\n          this._data = data || [];\r\n          this.renderRows();\r\n        });\r\n  }\r\n\r\n  /**\r\n   * Clears any existing content in the header row outlet and creates a new embedded view\r\n   * in the outlet using the header row definition.\r\n   */\r\n  private _forceRenderHeaderRows() {\r\n    // Clear the header row outlet if any content exists.\r\n    if (this._headerRowOutlet.viewContainer.length > 0) {\r\n      this._headerRowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\r\n    this.updateStickyHeaderRowStyles();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n  /**\r\n   * Clears any existing content in the footer row outlet and creates a new embedded view\r\n   * in the outlet using the footer row definition.\r\n   */\r\n  private _forceRenderFooterRows() {\r\n    // Clear the footer row outlet if any content exists.\r\n    if (this._footerRowOutlet.viewContainer.length > 0) {\r\n      this._footerRowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\r\n    this.updateStickyFooterRowStyles();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\r\n  private _addStickyColumnStyles(rows: HTMLElement[], rowDef: BaseRowDef) {\r\n    const columnDefs = Array.from(rowDef.columns || []).map(c => this._columnDefsByName.get(c)!);\r\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\r\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\r\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\r\n  }\r\n\r\n  /** Gets the list of rows that have been rendered in the row outlet. */\r\n  _getRenderedRows(rowOutlet: RowOutlet) {\r\n    const renderedRows: HTMLElement[] = [];\r\n\r\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\r\n      const viewRef = (rowOutlet.viewContainer.get(i)! as EmbeddedViewRef<any>);\r\n      renderedRows.push(viewRef.rootNodes[0]);\r\n    }\r\n\r\n    return renderedRows;\r\n  }\r\n\r\n  /**\r\n   * Get the matching row definitions that should be used for this row data. If there is only\r\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\r\n   * predicate that returns true with the data. If none return true, return the default row\r\n   * definition.\r\n   */\r\n  _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[] {\r\n    if (this._rowDefs.length == 1) { return [this._rowDefs[0]]; }\r\n\r\n    let rowDefs: CdkRowDef<T>[] = [];\r\n    if (this.multiTemplateDataRows) {\r\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\r\n    } else {\r\n      let rowDef =\r\n          this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\r\n      if (rowDef) {\r\n        rowDefs.push(rowDef);\r\n      }\r\n    }\r\n\r\n    if (!rowDefs.length) {\r\n      throw getTableMissingMatchingRowDefError(data);\r\n    }\r\n\r\n    return rowDefs;\r\n  }\r\n\r\n  /**\r\n   * Create the embedded view for the data row template and place it in the correct index location\r\n   * within the data row view container.\r\n   */\r\n  private _insertRow(renderRow: RenderRow<T>, renderIndex: number) {\r\n    const rowDef = renderRow.rowDef;\r\n    const context: RowContext<T> = {$implicit: renderRow.data};\r\n    this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\r\n  }\r\n\r\n  /**\r\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\r\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\r\n   * of where to place the new row template in the outlet.\r\n   */\r\n  private _renderRow(\r\n      outlet: RowOutlet, rowDef: BaseRowDef, index: number, context: RowContext<T> = {}) {\r\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\r\n    outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\r\n\r\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\r\n      if (CdkCellOutlet.mostRecentCellOutlet) {\r\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n   * e.g. first/last/even/odd.\r\n   */\r\n  private _updateRowIndexContext() {\r\n    const viewContainer = this._rowOutlet.viewContainer;\r\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\r\n      const viewRef = viewContainer.get(renderIndex) as RowViewRef<T>;\r\n      const context = viewRef.context as RowContext<T>;\r\n      context.count = count;\r\n      context.first = renderIndex === 0;\r\n      context.last = renderIndex === count - 1;\r\n      context.even = renderIndex % 2 === 0;\r\n      context.odd = !context.even;\r\n\r\n      if (this.multiTemplateDataRows) {\r\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\r\n        context.renderIndex = renderIndex;\r\n      } else {\r\n        context.index = this._renderRows[renderIndex].dataIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Gets the column definitions for the provided row def. */\r\n  private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\r\n    if (!rowDef || !rowDef.columns) { return []; }\r\n    return Array.from(rowDef.columns, columnId => {\r\n      const column = this._columnDefsByName.get(columnId);\r\n\r\n      if (!column) {\r\n        throw getTableUnknownColumnError(columnId);\r\n      }\r\n\r\n      return rowDef.extractCellTemplate(column);\r\n    });\r\n  }\r\n\r\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\r\n  private _applyNativeTableSections() {\r\n    const sections = [\r\n      {tag: 'thead', outlet: this._headerRowOutlet},\r\n      {tag: 'tbody', outlet: this._rowOutlet},\r\n      {tag: 'tfoot', outlet: this._footerRowOutlet},\r\n    ];\r\n\r\n    for (const section of sections) {\r\n      const element = document.createElement(section.tag);\r\n      element.appendChild(section.outlet.elementRef.nativeElement);\r\n      this._elementRef.nativeElement.appendChild(element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\r\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\r\n   * `multiTemplateDataRows` or adding/removing row definitions.\r\n   */\r\n  private _forceRenderDataRows() {\r\n    this._dataDiffer.diff([]);\r\n    this._rowOutlet.viewContainer.clear();\r\n    this.renderRows();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /**\r\n   * Checks if there has been a change in sticky states since last check and applies the correct\r\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\r\n   * during a change detection and after the inputs are settled (after content check).\r\n   */\r\n  private _checkStickyStates() {\r\n    const stickyCheckReducer = (acc: boolean, d: CdkHeaderRowDef|CdkFooterRowDef|CdkColumnDef) => {\r\n      return acc || d.hasStickyChanged();\r\n    };\r\n\r\n    // Note that the check needs to occur for every definition since it notifies the definition\r\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\r\n    // remaining definitions and leave them in an unchecked state.\r\n\r\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyHeaderRowStyles();\r\n    }\r\n\r\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyFooterRowStyles();\r\n    }\r\n\r\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyColumnStyles();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\r\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\r\n   * stickiness when directionality changes.\r\n   */\r\n  private _setupStickyStyler() {\r\n    const direction: Direction = this._dir ? this._dir.value : 'ltr';\r\n    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction);\r\n    (this._dir ? this._dir.change : observableOf<Direction>())\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(value => {\r\n          this._stickyStyler.direction = value;\r\n          this.updateStickyColumnStyles();\r\n        });\r\n  }\r\n}\r\n\r\n/** Utility function that gets a merged list of the entries in a QueryList and values of a Set. */\r\nfunction  mergeQueryListAndSet<T>(queryList: QueryList<T>, set: Set<T>): T[] {\r\n  return queryList.toArray().concat(Array.from(set));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {HeaderRowOutlet, DataRowOutlet, CdkTable, FooterRowOutlet} from './table';\r\nimport {\r\n  CdkCellOutlet, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow,\r\n  CdkRowDef\r\n} from './row';\r\nimport {\r\n  CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef,\r\n  CdkFooterCellDef, CdkFooterCell\r\n} from './cell';\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n  CdkTable,\r\n  CdkRowDef,\r\n  CdkCellDef,\r\n  CdkCellOutlet,\r\n  CdkHeaderCellDef,\r\n  CdkFooterCellDef,\r\n  CdkColumnDef,\r\n  CdkCell,\r\n  CdkRow,\r\n  CdkHeaderCell,\r\n  CdkFooterCell,\r\n  CdkHeaderRow,\r\n  CdkHeaderRowDef,\r\n  CdkFooterRow,\r\n  CdkFooterRowDef,\r\n  DataRowOutlet,\r\n  HeaderRowOutlet,\r\n  FooterRowOutlet,\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: EXPORTED_DECLARATIONS,\r\n  declarations: EXPORTED_DECLARATIONS\r\n\r\n})\r\nexport class CdkTableModule { }\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","mixinHasStickyInput","base","_super","class_1","args","_i","arguments","length","_this","apply","_sticky","_hasStickyChanged","tslib_1.__extends","defineProperty","v","prevValue","coerceBooleanProperty","hasStickyChanged","resetStickyChanged","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","name","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","CdkCellDef","template","type","Directive","selector","TemplateRef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDefBase","_CdkColumnDefBase","_stickyEnd","CdkColumnDef","_name","cssClassFriendlyName","replace","inputs","Input","stickyEnd","cell","ContentChild","headerCell","footerCell","BaseCdkCell","columnDef","elementRef","columnClassName","nativeElement","classList","add","CdkHeaderCell","call","host","class","role","ElementRef","CdkFooterCell","CdkCell","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","IterableDiffers","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","ngOnDestroy","ViewContainerRef","Component","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","CdkHeaderRow","CdkFooterRow","CdkRow","STICKY_DIRECTIONS","StickyStyler","isNativeHtmlTable","stickCellCss","direction","clearStickyPositioning","rows","stickyDirections","rows_1","row","nodeType","ELEMENT_NODE","_removeStickyStyle","i","children","updateStickyColumns","stickyStartStates","stickyEndStates","hasStickyColumns","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","isRtl","rows_2","_addStickyStyle","stickRows","rowsToStick","stickyStates","position","reverse","stickyHeight","rowIndex","j","getBoundingClientRect","height","updateStickyFooterContainer","tableElement","tfoot","querySelector","element","stickyDirections_1","dir","style","zIndex","_getCalculatedZIndex","remove","dirValue","cssText","zIndexIncrements","top","bottom","left","right","STICKY_DIRECTIONS_1","firstRowCells","push","width","widths","positions","nextPosition","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","CDK_TABLE_TEMPLATE","RowViewRef","EmbeddedViewRef","CdkTable","_changeDetectorRef","_elementRef","_dir","_onDestroy","Subject","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_multiTemplateDataRows","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","setAttribute","_isNativeHtmlTable","nodeName","_trackByFn","fn","isDevMode","console","warn","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","dataRow","trackBy","dataIndex","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_headerRowOutlet","_footerRowOutlet","next","complete","DataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","view","get","move","_updateRowIndexContext","forEachIdentityChange","context","$implicit","updateStickyColumnStyles","setHeaderRowDef","headerRowDef","setFooterRowDef","footerRowDef","addColumnDef","removeColumnDef","delete","addRowDef","rowDef","removeRowDef","addHeaderRowDef","removeHeaderRowDef","addFooterRowDef","removeFooterRowDef","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","_stickyStyler","map","def","sticky","forEach","updateStickyFooterRowStyles","footerRows","dataRows","concat","headerRow","_addStickyColumnStyles","footerRow","from","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeQueryListAndSet","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","when","multiTemplateDataRows","_defaultRowDef","columnsDiffReducer","acc","reduce","unsubscribe","dataStream","connect","Function","Observable","isArray","observableOf","undefined","pipe","takeUntil","subscribe","_renderRow","columnDefs","c","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","renderIndex","outlet","index","createEmbeddedView","_a","_b","_getCellTemplates","cellTemplate","markForCheck","count","first","last","even","odd","columnId","sections","tag","sections_1","section","document","createElement","appendChild","stickyCheckReducer","value","change","exportAs","decorators","Attribute","Directionality","Optional","propDecorators","ViewChild","ContentChildren","EXPORTED_DECLARATIONS","NgModule","imports","CommonModule","exports","declarations","CdkTableModule"],"mappings":"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"}