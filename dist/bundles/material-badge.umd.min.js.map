{"version":3,"file":"material-badge.umd.min.js","sources":["../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AriaDescriber} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\r\nimport {ThemePalette} from '@angular/material/core';\r\n\r\n\r\nlet nextId = 0;\r\n\r\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\r\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\r\n\r\n/** Directive to display a text badge. */\r\n@Directive({\r\n  selector: '[matBadge]',\r\n  host: {\r\n    'class': 'mat-badge',\r\n    '[class.mat-badge-overlap]': 'overlap',\r\n    '[class.mat-badge-above]': 'isAbove()',\r\n    '[class.mat-badge-below]': '!isAbove()',\r\n    '[class.mat-badge-before]': '!isAfter()',\r\n    '[class.mat-badge-after]': 'isAfter()',\r\n    '[class.mat-badge-small]': 'size === \"small\"',\r\n    '[class.mat-badge-medium]': 'size === \"medium\"',\r\n    '[class.mat-badge-large]': 'size === \"large\"',\r\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\r\n  },\r\n})\r\nexport class MatBadge implements OnDestroy {\r\n  /** Whether the badge has any content. */\r\n  _hasContent = false;\r\n\r\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\r\n  @Input('matBadgeColor')\r\n  get color(): ThemePalette { return this._color; }\r\n  set color(value: ThemePalette) {\r\n    this._setColor(value);\r\n    this._color = value;\r\n  }\r\n  private _color: ThemePalette = 'primary';\r\n\r\n  /** Whether the badge should overlap its contents or not */\r\n  @Input('matBadgeOverlap')\r\n  get overlap(): boolean { return this._overlap; }\r\n  set overlap(val: boolean) {\r\n    this._overlap = coerceBooleanProperty(val);\r\n  }\r\n  private _overlap: boolean = true;\r\n\r\n  /**\r\n   * Position the badge should reside.\r\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\r\n   */\r\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\r\n\r\n  /** The content for the badge */\r\n  @Input('matBadge')\r\n  get content(): string { return this._content; }\r\n  set content(value: string) {\r\n    this._content = value;\r\n    this._hasContent = value != null && `${value}`.trim().length > 0;\r\n    this._updateTextContent();\r\n  }\r\n  private _content: string;\r\n\r\n  /** Message used to describe the decorated element via aria-describedby */\r\n  @Input('matBadgeDescription')\r\n  get description(): string { return this._description; }\r\n  set description(newDescription: string) {\r\n    if (newDescription !== this._description) {\r\n      this._updateHostAriaDescription(newDescription, this._description);\r\n      this._description = newDescription;\r\n    }\r\n  }\r\n  private _description: string;\r\n\r\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\r\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\r\n\r\n  /** Whether the badge is hidden. */\r\n  @Input('matBadgeHidden')\r\n  get hidden(): boolean { return this._hidden; }\r\n  set hidden(val: boolean) {\r\n    this._hidden = coerceBooleanProperty(val);\r\n  }\r\n  private _hidden: boolean;\r\n\r\n  /** Unique id for the badge */\r\n  _id: number = nextId++;\r\n\r\n  private _badgeElement: HTMLElement;\r\n\r\n  constructor(\r\n      @Optional() @Inject(DOCUMENT) private _document: any,\r\n      private _ngZone: NgZone,\r\n      private _elementRef: ElementRef,\r\n      private _ariaDescriber: AriaDescriber) {}\r\n\r\n  /** Whether the badge is above the host or not */\r\n  isAbove(): boolean {\r\n    return this.position.indexOf('below') === -1;\r\n  }\r\n\r\n  /** Whether the badge is after the host or not */\r\n  isAfter(): boolean {\r\n    return this.position.indexOf('before') === -1;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.description && this._badgeElement) {\r\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\r\n    }\r\n  }\r\n\r\n  /** Injects a span element into the DOM with the content. */\r\n  private _updateTextContent(): HTMLSpanElement {\r\n    if (!this._badgeElement) {\r\n      this._badgeElement = this._createBadgeElement();\r\n    } else {\r\n      this._badgeElement.textContent = this.content;\r\n    }\r\n    return this._badgeElement;\r\n  }\r\n\r\n  /** Creates the badge element */\r\n  private _createBadgeElement(): HTMLElement {\r\n    const badgeElement = this._document.createElement('span');\r\n    const activeClass = 'mat-badge-active';\r\n\r\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\r\n    badgeElement.classList.add('mat-badge-content');\r\n    badgeElement.textContent = this.content;\r\n\r\n    if (this.description) {\r\n      badgeElement.setAttribute('aria-label', this.description);\r\n    }\r\n\r\n    this._elementRef.nativeElement.appendChild(badgeElement);\r\n\r\n    // animate in after insertion\r\n    if (typeof requestAnimationFrame === 'function') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => {\r\n          badgeElement.classList.add(activeClass);\r\n        });\r\n      });\r\n    } else {\r\n      badgeElement.classList.add(activeClass);\r\n    }\r\n\r\n    return badgeElement;\r\n  }\r\n\r\n  /** Sets the aria-label property on the element */\r\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\r\n    // ensure content available before setting label\r\n    const content = this._updateTextContent();\r\n\r\n    if (oldDescription) {\r\n      this._ariaDescriber.removeDescription(content, oldDescription);\r\n    }\r\n\r\n    if (newDescription) {\r\n      this._ariaDescriber.describe(content, newDescription);\r\n    }\r\n  }\r\n\r\n  /** Adds css theme class given the color to the component host */\r\n  private _setColor(colorPalette: ThemePalette) {\r\n    if (colorPalette !== this._color) {\r\n      if (this._color) {\r\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\r\n      }\r\n      if (colorPalette) {\r\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MatBadge} from './badge';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    A11yModule,\r\n    MatCommonModule\r\n  ],\r\n  exports: [MatBadge],\r\n  declarations: [MatBadge],\r\n})\r\nexport class MatBadgeModule {}\r\n"],"names":["nextId","MatBadge","_document","_ngZone","_elementRef","_ariaDescriber","this","_hasContent","_color","_overlap","position","size","_id","Object","defineProperty","prototype","value","_setColor","val","coerceBooleanProperty","_content","trim","length","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","indexOf","isAfter","ngOnDestroy","description","_badgeElement","removeDescription","textContent","content","_createBadgeElement","badgeElement","createElement","setAttribute","classList","add","nativeElement","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","describe","colorPalette","remove","type","Directive","args","selector","host","class","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","undefined","decorators","Optional","Inject","DOCUMENT","NgZone","ElementRef","AriaDescriber","color","Input","overlap","hidden","NgModule","imports","A11yModule","MatCommonModule","exports","declarations","MatBadgeModule"],"mappings":"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"}