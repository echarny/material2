{"version":3,"file":"cdk-accordion.umd.min.js","sources":["../../src/cdk/accordion/accordion.ts","../../src/cdk/accordion/accordion-item.ts","../../src/cdk/accordion/accordion-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Used to generate unique ID for each accordion. */\r\nlet nextId = 0;\r\n\r\n/**\r\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\r\n */\r\n@Directive({\r\n  selector: 'cdk-accordion, [cdkAccordion]',\r\n  exportAs: 'cdkAccordion',\r\n})\r\nexport class CdkAccordion {\r\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\r\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\r\n\r\n  /** A readonly id value to use for unique selection coordination. */\r\n  readonly id = `cdk-accordion-${nextId++}`;\r\n\r\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\r\n  @Input()\r\n  get multi(): boolean { return this._multi; }\r\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\r\n  private _multi: boolean = false;\r\n\r\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\r\n  openAll(): void {\r\n    this._openCloseAll(true);\r\n  }\r\n\r\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\r\n  closeAll(): void {\r\n    this._openCloseAll(false);\r\n  }\r\n\r\n  private _openCloseAll(expanded: boolean): void {\r\n    if (this.multi) {\r\n      this._openCloseAllActions.next(expanded);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Output,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {CdkAccordion} from './accordion';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subscription} from 'rxjs';\r\n\r\n/** Used to generate unique ID for each accordion item. */\r\nlet nextId = 0;\r\n\r\n/**\r\n * An basic directive expected to be extended and decorated as a component.  Sets up all\r\n * events and attributes needed to be managed by a CdkAccordion parent.\r\n */\r\n@Directive({\r\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\r\n  exportAs: 'cdkAccordionItem',\r\n  providers: [\r\n    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\r\n    // to the same accordion.\r\n    {provide: CdkAccordion, useValue: undefined},\r\n  ],\r\n})\r\nexport class CdkAccordionItem implements OnDestroy {\r\n  /** Subscription to openAll/closeAll events. */\r\n  private _openCloseAllSubscription = Subscription.EMPTY;\r\n  /** Event emitted every time the AccordionItem is closed. */\r\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Event emitted every time the AccordionItem is opened. */\r\n  @Output() opened: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Event emitted when the AccordionItem is destroyed. */\r\n  @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Emits whenever the expanded state of the accordion changes.\r\n   * Primarily used to facilitate two-way binding.\r\n   * @docs-private\r\n   */\r\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** The unique AccordionItem id. */\r\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\r\n\r\n  /** Whether the AccordionItem is expanded. */\r\n  @Input()\r\n  get expanded(): any { return this._expanded; }\r\n  set expanded(expanded: any) {\r\n    expanded = coerceBooleanProperty(expanded);\r\n\r\n    // Only emit events and update the internal value if the value changes.\r\n    if (this._expanded !== expanded) {\r\n      this._expanded = expanded;\r\n      this.expandedChange.emit(expanded);\r\n\r\n      if (expanded) {\r\n        this.opened.emit();\r\n        /**\r\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\r\n         * the name value is the id of the accordion.\r\n         */\r\n        const accordionId = this.accordion ? this.accordion.id : this.id;\r\n        this._expansionDispatcher.notify(this.id, accordionId);\r\n      } else {\r\n        this.closed.emit();\r\n      }\r\n\r\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\r\n      // This includes cases like the open, close and toggle methods.\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _expanded = false;\r\n\r\n  /** Whether the AccordionItem is disabled. */\r\n  @Input()\r\n  get disabled() { return this._disabled; }\r\n  set disabled(disabled: any) { this._disabled = coerceBooleanProperty(disabled); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Unregister function for _expansionDispatcher. */\r\n  private _removeUniqueSelectionListener: () => void = () => {};\r\n\r\n  constructor(@Optional() @SkipSelf() public accordion: CdkAccordion,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\r\n    this._removeUniqueSelectionListener =\r\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\r\n        if (this.accordion && !this.accordion.multi &&\r\n            this.accordion.id === accordionId && this.id !== id) {\r\n          this.expanded = false;\r\n        }\r\n      });\r\n\r\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\r\n    if (this.accordion) {\r\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\r\n    }\r\n  }\r\n\r\n  /** Emits an event for the accordion item being destroyed. */\r\n  ngOnDestroy() {\r\n    this.opened.complete();\r\n    this.closed.complete();\r\n    this.destroyed.emit();\r\n    this.destroyed.complete();\r\n    this._removeUniqueSelectionListener();\r\n    this._openCloseAllSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Toggles the expanded state of the accordion item. */\r\n  toggle(): void {\r\n    if (!this.disabled) {\r\n      this.expanded = !this.expanded;\r\n    }\r\n  }\r\n\r\n  /** Sets the expanded state of the accordion item to false. */\r\n  close(): void {\r\n    if (!this.disabled) {\r\n      this.expanded = false;\r\n    }\r\n  }\r\n\r\n  /** Sets the expanded state of the accordion item to true. */\r\n  open(): void {\r\n    if (!this.disabled) {\r\n      this.expanded = true;\r\n    }\r\n  }\r\n\r\n  private _subscribeToOpenCloseAllActions(): Subscription {\r\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\r\n      // Only change expanded state if item is enabled\r\n      if (!this.disabled) {\r\n        this.expanded = expanded;\r\n      }\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkAccordion} from './accordion';\r\nimport {CdkAccordionItem} from './accordion-item';\r\n\r\n\r\n@NgModule({\r\n  exports: [CdkAccordion, CdkAccordionItem],\r\n  declarations: [CdkAccordion, CdkAccordionItem],\r\n})\r\nexport class CdkAccordionModule {}\r\n"],"names":["nextId","this","_openCloseAllActions","Subject","id","_multi","Object","defineProperty","CdkAccordion","prototype","multi","coerceBooleanProperty","openAll","_openCloseAll","closeAll","expanded","next","type","Directive","args","selector","exportAs","Input","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_this","_openCloseAllSubscription","Subscription","EMPTY","closed","EventEmitter","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","ngOnDestroy","complete","unsubscribe","toggle","close","open","subscribe","providers","provide","useValue","undefined","decorators","Optional","SkipSelf","ChangeDetectorRef","UniqueSelectionDispatcher","Output","NgModule","exports","declarations","CdkAccordionModule"],"mappings":"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"}