{"version":3,"file":"cdk-observers.umd.min.js","sources":["../../src/cdk/observers/observe-content.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  Input,\r\n  NgModule,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n} from '@angular/core';\r\nimport {Observable, Subject, Subscription} from 'rxjs';\r\nimport {debounceTime} from 'rxjs/operators';\r\n\r\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MutationObserverFactory {\r\n  create(callback: MutationCallback): MutationObserver | null {\r\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\r\n  }\r\n}\r\n\r\n\r\n/** An injectable service that allows watching elements for changes to their content. */\r\n@Injectable({providedIn: 'root'})\r\nexport class ContentObserver implements OnDestroy {\r\n  /** Keeps track of the existing MutationObservers so they can be reused. */\r\n  private _observedElements = new Map<Element, {\r\n    observer: MutationObserver | null,\r\n    stream: Subject<MutationRecord[]>,\r\n    count: number\r\n  }>();\r\n\r\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\r\n\r\n  ngOnDestroy() {\r\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\r\n  }\r\n\r\n  /**\r\n   * Observe content changes on an element.\r\n   * @param element The element to observe for content changes.\r\n   */\r\n  observe(element: Element): Observable<MutationRecord[]> {\r\n    return Observable.create(observer => {\r\n      const stream = this._observeElement(element);\r\n      const subscription = stream.subscribe(observer);\r\n\r\n      return () => {\r\n        subscription.unsubscribe();\r\n        this._unobserveElement(element);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Observes the given element by using the existing MutationObserver if available, or creating a\r\n   * new one if not.\r\n   */\r\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\r\n    if (!this._observedElements.has(element)) {\r\n      const stream = new Subject<MutationRecord[]>();\r\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\r\n      if (observer) {\r\n        observer.observe(element, {\r\n          characterData: true,\r\n          childList: true,\r\n          subtree: true\r\n        });\r\n      }\r\n      this._observedElements.set(element, {observer, stream, count: 1});\r\n    } else {\r\n      this._observedElements.get(element)!.count++;\r\n    }\r\n    return this._observedElements.get(element)!.stream;\r\n  }\r\n\r\n  /**\r\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\r\n   * observing this element.\r\n   */\r\n  private _unobserveElement(element: Element) {\r\n    if (this._observedElements.has(element)) {\r\n      this._observedElements.get(element)!.count--;\r\n      if (!this._observedElements.get(element)!.count) {\r\n        this._cleanupObserver(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clean up the underlying MutationObserver for the specified element. */\r\n  private _cleanupObserver(element: Element) {\r\n    if (this._observedElements.has(element)) {\r\n      const {observer, stream} = this._observedElements.get(element)!;\r\n      if (observer) {\r\n        observer.disconnect();\r\n      }\r\n      stream.complete();\r\n      this._observedElements.delete(element);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\n@Directive({\r\n  selector: '[cdkObserveContent]',\r\n  exportAs: 'cdkObserveContent',\r\n})\r\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\r\n  /** Event emitted for each change in the element's content. */\r\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\r\n\r\n  /**\r\n   * Whether observing content is disabled. This option can be used\r\n   * to disconnect the underlying MutationObserver until it is needed.\r\n   */\r\n  @Input('cdkObserveContentDisabled')\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: any) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    if (this._disabled) {\r\n      this._unsubscribe();\r\n    } else {\r\n      this._subscribe();\r\n    }\r\n  }\r\n  private _disabled = false;\r\n\r\n  /** Debounce interval for emitting the changes. */\r\n  @Input()\r\n  get debounce(): number { return this._debounce; }\r\n  set debounce(value: number) {\r\n    this._debounce = coerceNumberProperty(value);\r\n    this._subscribe();\r\n  }\r\n  private _debounce: number;\r\n\r\n  private _currentSubscription: Subscription | null = null;\r\n\r\n  constructor(private _contentObserver: ContentObserver, private _elementRef: ElementRef,\r\n              private _ngZone: NgZone) {}\r\n\r\n  ngAfterContentInit() {\r\n    if (!this._currentSubscription && !this.disabled) {\r\n      this._subscribe();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._unsubscribe();\r\n  }\r\n\r\n  private _subscribe() {\r\n    this._unsubscribe();\r\n    const stream = this._contentObserver.observe(this._elementRef.nativeElement);\r\n\r\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\r\n    // Consider brining it back inside the zone next time we're making breaking changes.\r\n    // Bringing it back inside can cause things like infinite change detection loops and changed\r\n    // after checked errors if people's code isn't handling it properly.\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._currentSubscription =\r\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\r\n    });\r\n  }\r\n\r\n  private _unsubscribe() {\r\n    if (this._currentSubscription) {\r\n      this._currentSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  exports: [CdkObserveContent],\r\n  declarations: [CdkObserveContent],\r\n  providers: [MutationObserverFactory]\r\n})\r\nexport class ObserversModule {}\r\n"],"names":["MutationObserverFactory","prototype","create","callback","MutationObserver","type","Injectable","args","providedIn","ContentObserver","_mutationObserverFactory","this","_observedElements","Map","ngOnDestroy","_this","forEach","_","element","_cleanupObserver","observe","Observable","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","get","count","stream_1","Subject","mutations","next","characterData","childList","subtree","set","_a","disconnect","complete","delete","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","EventEmitter","_disabled","_currentSubscription","Object","defineProperty","value","coerceBooleanProperty","_unsubscribe","_subscribe","_debounce","coerceNumberProperty","ngAfterContentInit","disabled","nativeElement","runOutsideAngular","debounce","pipe","debounceTime","Directive","selector","exportAs","ElementRef","NgZone","Output","Input","ObserversModule","NgModule","exports","declarations","providers"],"mappings":"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"}