{"version":3,"file":"cdk-scrolling.umd.min.js","sources":["../../src/cdk/scrolling/fixed-size-virtual-scroll.ts","../../src/cdk/scrolling/scroll-dispatcher.ts","../../src/cdk/scrolling/virtual-scroll-viewport.ts","../../src/cdk/scrolling/virtual-for-of.ts","../../src/cdk/scrolling/viewport-ruler.ts","../../src/cdk/scrolling/virtual-scroll-strategy.ts","../../src/cdk/scrolling/scrollable.ts","../../src/cdk/scrolling/scrolling-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {distinctUntilChanged} from 'rxjs/operators';\r\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n\r\n/** Virtual scrolling strategy for lists with items of known fixed size. */\r\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\r\n  private _scrolledIndexChange = new Subject<number>();\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\r\n\r\n  /** The attached viewport. */\r\n  private _viewport: CdkVirtualScrollViewport | null = null;\r\n\r\n  /** The size of the items in the virtually scrolling list. */\r\n  private _itemSize: number;\r\n\r\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\r\n  private _minBufferPx: number;\r\n\r\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\r\n  private _maxBufferPx: number;\r\n\r\n  /**\r\n   * @param itemSize The size of the items in the virtually scrolling list.\r\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\r\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\r\n   */\r\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\r\n    this._itemSize = itemSize;\r\n    this._minBufferPx = minBufferPx;\r\n    this._maxBufferPx = maxBufferPx;\r\n  }\r\n\r\n  /**\r\n   * Attaches this scroll strategy to a viewport.\r\n   * @param viewport The viewport to attach this strategy to.\r\n   */\r\n  attach(viewport: CdkVirtualScrollViewport) {\r\n    this._viewport = viewport;\r\n    this._updateTotalContentSize();\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** Detaches this scroll strategy from the currently attached viewport. */\r\n  detach() {\r\n    this._scrolledIndexChange.complete();\r\n    this._viewport = null;\r\n  }\r\n\r\n  /**\r\n   * Update the item size and buffer size.\r\n   * @param itemSize The size of the items in the virtually scrolling list.\r\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\r\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\r\n   */\r\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\r\n    if (maxBufferPx < minBufferPx) {\r\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\r\n    }\r\n    this._itemSize = itemSize;\r\n    this._minBufferPx = minBufferPx;\r\n    this._maxBufferPx = maxBufferPx;\r\n    this._updateTotalContentSize();\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onContentScrolled() {\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onDataLengthChanged() {\r\n    this._updateTotalContentSize();\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onContentRendered() { /* no-op */ }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onRenderedOffsetChanged() { /* no-op */ }\r\n\r\n  /**\r\n   * Scroll to the offset for the given index.\r\n   * @param index The index of the element to scroll to.\r\n   * @param behavior The ScrollBehavior to use when scrolling.\r\n   */\r\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\r\n    if (this._viewport) {\r\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\r\n    }\r\n  }\r\n\r\n  /** Update the viewport's total content size. */\r\n  private _updateTotalContentSize() {\r\n    if (!this._viewport) {\r\n      return;\r\n    }\r\n\r\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\r\n  }\r\n\r\n  /** Update the viewport's rendered range. */\r\n  private _updateRenderedRange() {\r\n    if (!this._viewport) {\r\n      return;\r\n    }\r\n\r\n    const scrollOffset = this._viewport.measureScrollOffset();\r\n    const firstVisibleIndex = scrollOffset / this._itemSize;\r\n    const renderedRange = this._viewport.getRenderedRange();\r\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\r\n    const viewportSize = this._viewport.getViewportSize();\r\n    const dataLength = this._viewport.getDataLength();\r\n\r\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\r\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\r\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\r\n      newRange.start = Math.max(0, newRange.start - expandStart);\r\n      newRange.end = Math.min(dataLength,\r\n          Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\r\n    } else {\r\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\r\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\r\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\r\n        if (expandEnd > 0) {\r\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\r\n          newRange.start = Math.max(0,\r\n              Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\r\n        }\r\n      }\r\n    }\r\n\r\n    this._viewport.setRenderedRange(newRange);\r\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\r\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\r\n * `FixedSizeVirtualScrollStrategy` from the given directive.\r\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\r\n *     `FixedSizeVirtualScrollStrategy` from.\r\n */\r\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\r\n  return fixedSizeDir._scrollStrategy;\r\n}\r\n\r\n\r\n/** A virtual scroll strategy that supports fixed-size items. */\r\n@Directive({\r\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\r\n  providers: [{\r\n    provide: VIRTUAL_SCROLL_STRATEGY,\r\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\r\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\r\n  }],\r\n})\r\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\r\n  /** The size of the items in the list (in pixels). */\r\n  @Input()\r\n  get itemSize(): number { return this._itemSize; }\r\n  set itemSize(value: number) { this._itemSize = coerceNumberProperty(value); }\r\n  _itemSize = 20;\r\n\r\n  /**\r\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\r\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\r\n   */\r\n  @Input()\r\n  get minBufferPx(): number { return this._minBufferPx; }\r\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\r\n  _minBufferPx = 100;\r\n\r\n  /**\r\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\r\n   */\r\n  @Input()\r\n  get maxBufferPx(): number { return this._maxBufferPx; }\r\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\r\n  _maxBufferPx = 200;\r\n\r\n  /** The scroll strategy used by this directive. */\r\n  _scrollStrategy =\r\n      new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\r\n\r\n  ngOnChanges() {\r\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ElementRef,\r\n  Injectable,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable} from 'rxjs';\r\nimport {auditTime, filter} from 'rxjs/operators';\r\nimport {CdkScrollable} from './scrollable';\r\n\r\n\r\n/** Time in ms to throttle the scrolling events by default. */\r\nexport const DEFAULT_SCROLL_TIME = 20;\r\n\r\n/**\r\n * Service contained all registered Scrollable references and emits an event when any one of the\r\n * Scrollable references emit a scrolled event.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class ScrollDispatcher implements OnDestroy {\r\n  constructor(private _ngZone: NgZone, private _platform: Platform) { }\r\n\r\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\r\n  private _scrolled = new Subject<CdkScrollable|void>();\r\n\r\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\r\n  _globalSubscription: Subscription | null = null;\r\n\r\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\r\n  private _scrolledCount = 0;\r\n\r\n  /**\r\n   * Map of all the scrollable references that are registered with the service and their\r\n   * scroll event subscriptions.\r\n   */\r\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\r\n\r\n  /**\r\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\r\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\r\n   * @param scrollable Scrollable instance to be registered.\r\n   */\r\n  register(scrollable: CdkScrollable): void {\r\n    const scrollSubscription = scrollable.elementScrolled()\r\n        .subscribe(() => this._scrolled.next(scrollable));\r\n\r\n    this.scrollContainers.set(scrollable, scrollSubscription);\r\n  }\r\n\r\n  /**\r\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\r\n   * @param scrollable Scrollable instance to be deregistered.\r\n   */\r\n  deregister(scrollable: CdkScrollable): void {\r\n    const scrollableReference = this.scrollContainers.get(scrollable);\r\n\r\n    if (scrollableReference) {\r\n      scrollableReference.unsubscribe();\r\n      this.scrollContainers.delete(scrollable);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an observable that emits an event whenever any of the registered Scrollable\r\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\r\n   * to override the default \"throttle\" time.\r\n   *\r\n   * **Note:** in order to avoid hitting change detection for every scroll event,\r\n   * all of the events emitted from this stream will be run outside the Angular zone.\r\n   * If you need to update any data bindings as a result of a scroll event, you have\r\n   * to run the callback using `NgZone.run`.\r\n   */\r\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\r\n    return this._platform.isBrowser ? Observable.create(observer => {\r\n      if (!this._globalSubscription) {\r\n        this._addGlobalListener();\r\n      }\r\n\r\n      // In the case of a 0ms delay, use an observable without auditTime\r\n      // since it does add a perceptible delay in processing overhead.\r\n      const subscription = auditTimeInMs > 0 ?\r\n        this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\r\n        this._scrolled.subscribe(observer);\r\n\r\n      this._scrolledCount++;\r\n\r\n      return () => {\r\n        subscription.unsubscribe();\r\n        this._scrolledCount--;\r\n\r\n        if (!this._scrolledCount) {\r\n          this._removeGlobalListener();\r\n        }\r\n      };\r\n    }) : observableOf<void>();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._removeGlobalListener();\r\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\r\n    this._scrolled.complete();\r\n  }\r\n\r\n  /**\r\n   * Returns an observable that emits whenever any of the\r\n   * scrollable ancestors of an element are scrolled.\r\n   * @param elementRef Element whose ancestors to listen for.\r\n   * @param auditTimeInMs Time to throttle the scroll events.\r\n   */\r\n  ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable|void> {\r\n    const ancestors = this.getAncestorScrollContainers(elementRef);\r\n\r\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\r\n      return !target || ancestors.indexOf(target) > -1;\r\n    }));\r\n  }\r\n\r\n  /** Returns all registered Scrollables that contain the provided element. */\r\n  getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\r\n    const scrollingContainers: CdkScrollable[] = [];\r\n\r\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\r\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\r\n        scrollingContainers.push(scrollable);\r\n      }\r\n    });\r\n\r\n    return scrollingContainers;\r\n  }\r\n\r\n  /** Returns true if the element is contained within the provided Scrollable. */\r\n  private _scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\r\n    let element = elementRef.nativeElement;\r\n    let scrollableElement = scrollable.getElementRef().nativeElement;\r\n\r\n    // Traverse through the element parents until we reach null, checking if any of the elements\r\n    // are the scrollable's element.\r\n    do {\r\n      if (element == scrollableElement) { return true; }\r\n    } while (element = element.parentElement);\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Sets up the global scroll listeners. */\r\n  private _addGlobalListener() {\r\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\r\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\r\n    });\r\n  }\r\n\r\n  /** Cleans up the global scroll listener. */\r\n  private _removeGlobalListener() {\r\n    if (this._globalSubscription) {\r\n      this._globalSubscription.unsubscribe();\r\n      this._globalSubscription = null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\r\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\r\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const SCROLL_DISPATCHER_PROVIDER = {\r\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\r\n  provide: ScrollDispatcher,\r\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\r\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ListRange} from '@angular/cdk/collections';\r\nimport {supportsScrollBehavior} from '@angular/cdk/platform';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {animationFrameScheduler, fromEvent, Observable, Subject} from 'rxjs';\r\nimport {sampleTime, takeUntil} from 'rxjs/operators';\r\nimport {CdkVirtualForOf} from './virtual-for-of';\r\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\r\n\r\n\r\n/** Checks if the given ranges are equal. */\r\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\r\n  return r1.start == r2.start && r1.end == r2.end;\r\n}\r\n\r\n\r\n/** A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-virtual-scroll-viewport',\r\n  templateUrl: 'virtual-scroll-viewport.html',\r\n  styleUrls: ['virtual-scroll-viewport.css'],\r\n  host: {\r\n    'class': 'cdk-virtual-scroll-viewport',\r\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\r\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation === \"vertical\"',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CdkVirtualScrollViewport implements OnInit, OnDestroy {\r\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\r\n  private _detachedSubject = new Subject<void>();\r\n\r\n  /** Emits when the rendered range changes. */\r\n  private _renderedRangeSubject = new Subject<ListRange>();\r\n\r\n  /** The direction the viewport scrolls. */\r\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\r\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\r\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\r\n  // performance.\r\n  /** Emits when the index of the first element visible in the viewport changes. */\r\n  @Output() scrolledIndexChange: Observable<number> = Observable.create(observer =>\r\n      this._scrollStrategy.scrolledIndexChange.subscribe(index =>\r\n          Promise.resolve().then(() => this._ngZone.run(() => observer.next(index)))));\r\n\r\n  /** The element that wraps the rendered content. */\r\n  @ViewChild('contentWrapper') _contentWrapper: ElementRef<HTMLElement>;\r\n\r\n  /** A stream that emits whenever the rendered range changes. */\r\n  renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\r\n\r\n  /**\r\n   * The transform used to scale the spacer to the same size as all content, including content that\r\n   * is not currently rendered.\r\n   */\r\n  _totalContentSizeTransform = '';\r\n\r\n  /**\r\n   * The total size of all content (in pixels), including content that is not currently rendered.\r\n   */\r\n  private _totalContentSize = 0;\r\n\r\n  /**\r\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\r\n   * of the visible viewport.\r\n   */\r\n  private _renderedContentTransform: string;\r\n\r\n  /** The currently rendered range of indices. */\r\n  private _renderedRange: ListRange = {start: 0, end: 0};\r\n\r\n  /** The length of the data bound to this viewport (in number of items). */\r\n  private _dataLength = 0;\r\n\r\n  /** The size of the viewport (in pixels). */\r\n  private _viewportSize = 0;\r\n\r\n  /** The pending scroll offset to be applied during the next change detection cycle. */\r\n  private _pendingScrollOffset: number | null;\r\n\r\n  /** the currently attached CdkVirtualForOf. */\r\n  private _forOf: CdkVirtualForOf<any> | null;\r\n\r\n  /** The last rendered content offset that was set. */\r\n  private _renderedContentOffset = 0;\r\n\r\n  /**\r\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\r\n   * be rewritten as an offset to the start of the content).\r\n   */\r\n  private _renderedContentOffsetNeedsRewrite = false;\r\n\r\n  /** Observable that emits when the viewport is destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Whether there is a pending change detection cycle. */\r\n  private _isChangeDetectionPending = false;\r\n\r\n  /** A list of functions to run after the next change detection cycle. */\r\n  private _runAfterChangeDetection: Function[] = [];\r\n\r\n  constructor(public elementRef: ElementRef<HTMLElement>,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _ngZone: NgZone,\r\n              @Inject(VIRTUAL_SCROLL_STRATEGY) private _scrollStrategy: VirtualScrollStrategy) {}\r\n\r\n  ngOnInit() {\r\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\r\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\r\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\r\n    // ourselves instead.\r\n    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\r\n      this._measureViewportSize();\r\n      this._scrollStrategy.attach(this);\r\n\r\n      fromEvent(this.elementRef.nativeElement, 'scroll')\r\n          // Sample the scroll stream at every animation frame. This way if there are multiple\r\n          // scroll events in the same frame we only need to recheck our layout once.\r\n          .pipe(sampleTime(0, animationFrameScheduler), takeUntil(this._destroyed))\r\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\r\n\r\n      this._markChangeDetectionNeeded();\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.detach();\r\n    this._scrollStrategy.detach();\r\n    this._destroyed.next();\r\n\r\n    // Complete all subjects\r\n    this._renderedRangeSubject.complete();\r\n    this._detachedSubject.complete();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Attaches a `CdkVirtualForOf` to this viewport. */\r\n  attach(forOf: CdkVirtualForOf<any>) {\r\n    if (this._forOf) {\r\n      throw Error('CdkVirtualScrollViewport is already attached.');\r\n    }\r\n\r\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\r\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\r\n    // change detection loop ourselves.\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._forOf = forOf;\r\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\r\n        const newLength = data.length;\r\n        if (newLength !== this._dataLength) {\r\n          this._dataLength = newLength;\r\n          this._scrollStrategy.onDataLengthChanged();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Detaches the current `CdkVirtualForOf`. */\r\n  detach() {\r\n    this._forOf = null;\r\n    this._detachedSubject.next();\r\n  }\r\n\r\n  /** Gets the length of the data bound to this viewport (in number of items). */\r\n  getDataLength(): number {\r\n    return this._dataLength;\r\n  }\r\n\r\n  /** Gets the size of the viewport (in pixels). */\r\n  getViewportSize(): number {\r\n    return this._viewportSize;\r\n  }\r\n\r\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\r\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\r\n  // setting it to something else, but its error prone and should probably be split into\r\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\r\n\r\n  /** Get the current rendered range of items. */\r\n  getRenderedRange(): ListRange {\r\n    return this._renderedRange;\r\n  }\r\n\r\n  /**\r\n   * Sets the total size of all content (in pixels), including content that is not currently\r\n   * rendered.\r\n   */\r\n  setTotalContentSize(size: number) {\r\n    if (this._totalContentSize !== size) {\r\n      this._totalContentSize = size;\r\n      const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\r\n      this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\r\n      this._markChangeDetectionNeeded();\r\n    }\r\n  }\r\n\r\n  /** Sets the currently rendered range of indices. */\r\n  setRenderedRange(range: ListRange) {\r\n    if (!rangesEqual(this._renderedRange, range)) {\r\n      this._renderedRangeSubject.next(this._renderedRange = range);\r\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\r\n   */\r\n  getOffsetToRenderedContentStart(): number | null {\r\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\r\n  }\r\n\r\n  /**\r\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\r\n   * (in pixels).\r\n   */\r\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\r\n    const axis = this.orientation === 'horizontal' ? 'X' : 'Y';\r\n    let transform = `translate${axis}(${Number(offset)}px)`;\r\n    this._renderedContentOffset = offset;\r\n    if (to === 'to-end') {\r\n      transform += ` translate${axis}(-100%)`;\r\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\r\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\r\n      // expand upward).\r\n      this._renderedContentOffsetNeedsRewrite = true;\r\n    }\r\n    if (this._renderedContentTransform != transform) {\r\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\r\n      // into the string.\r\n      this._renderedContentTransform = transform;\r\n      this._markChangeDetectionNeeded(() => {\r\n        if (this._renderedContentOffsetNeedsRewrite) {\r\n          this._renderedContentOffset -= this.measureRenderedContentSize();\r\n          this._renderedContentOffsetNeedsRewrite = false;\r\n          this.setRenderedContentOffset(this._renderedContentOffset);\r\n        } else {\r\n          this._scrollStrategy.onRenderedOffsetChanged();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the offset on the viewport.\r\n   * @param offset The offset to scroll to.\r\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\r\n   */\r\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\r\n    const viewportElement = this.elementRef.nativeElement;\r\n\r\n    if (supportsScrollBehavior()) {\r\n      const offsetDirection = this.orientation === 'horizontal' ? 'left' : 'top';\r\n      viewportElement.scrollTo({[offsetDirection]: offset, behavior});\r\n    } else {\r\n      if (this.orientation === 'horizontal') {\r\n        viewportElement.scrollLeft = offset;\r\n      } else {\r\n        viewportElement.scrollTop = offset;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the offset for the given index.\r\n   * @param index The index of the element to scroll to.\r\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\r\n   */\r\n  scrollToIndex(index: number,  behavior: ScrollBehavior = 'auto') {\r\n    this._scrollStrategy.scrollToIndex(index, behavior);\r\n  }\r\n\r\n  /** @docs-private Internal method to set the scroll offset on the viewport. */\r\n  setScrollOffset(offset: number) {\r\n    // Rather than setting the offset immediately, we batch it up to be applied along with other DOM\r\n    // writes during the next change detection cycle.\r\n    this._pendingScrollOffset = offset;\r\n    this._markChangeDetectionNeeded();\r\n  }\r\n\r\n  /** Gets the current scroll offset of the viewport (in pixels). */\r\n  measureScrollOffset(): number {\r\n    return this.orientation === 'horizontal' ?\r\n        this.elementRef.nativeElement.scrollLeft : this.elementRef.nativeElement.scrollTop;\r\n  }\r\n\r\n  /** Measure the combined size of all of the rendered items. */\r\n  measureRenderedContentSize(): number {\r\n    const contentEl = this._contentWrapper.nativeElement;\r\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\r\n  }\r\n\r\n  /**\r\n   * Measure the total combined size of the given range. Throws if the range includes items that are\r\n   * not rendered.\r\n   */\r\n  measureRangeSize(range: ListRange): number {\r\n    if (!this._forOf) {\r\n      return 0;\r\n    }\r\n    return this._forOf.measureRangeSize(range, this.orientation);\r\n  }\r\n\r\n  /** Update the viewport dimensions and re-render. */\r\n  checkViewportSize() {\r\n    // TODO: Cleanup later when add logic for handling content resize\r\n    this._measureViewportSize();\r\n    this._scrollStrategy.onDataLengthChanged();\r\n  }\r\n\r\n  /** Measure the viewport size. */\r\n  private _measureViewportSize() {\r\n    const viewportEl = this.elementRef.nativeElement;\r\n    this._viewportSize = this.orientation === 'horizontal' ?\r\n        viewportEl.clientWidth : viewportEl.clientHeight;\r\n  }\r\n\r\n  /** Queue up change detection to run. */\r\n  private _markChangeDetectionNeeded(runAfter?: Function) {\r\n    if (runAfter) {\r\n      this._runAfterChangeDetection.push(runAfter);\r\n    }\r\n\r\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\r\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\r\n    if (!this._isChangeDetectionPending) {\r\n      this._isChangeDetectionPending = true;\r\n      this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\r\n        this._doChangeDetection();\r\n      }));\r\n    }\r\n  }\r\n\r\n  /** Run change detection. */\r\n  private _doChangeDetection() {\r\n    this._isChangeDetectionPending = false;\r\n\r\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\r\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\r\n    // instead does not properly check the projected content.\r\n    this._ngZone.run(() => this._changeDetectorRef.markForCheck());\r\n    // Apply the content transform. The transform can't be set via an Angular binding because\r\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\r\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\r\n    // the `Number` function first to coerce it to a numeric value.\r\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\r\n    // Apply the pending scroll offset separately, since it can't be set up as an Angular binding.\r\n    if (this._pendingScrollOffset != null) {\r\n      if (this.orientation === 'horizontal') {\r\n        this.elementRef.nativeElement.scrollLeft = this._pendingScrollOffset;\r\n      } else {\r\n        this.elementRef.nativeElement.scrollTop = this._pendingScrollOffset;\r\n      }\r\n    }\r\n\r\n    const runAfterChangeDetection = this._runAfterChangeDetection;\r\n    this._runAfterChangeDetection = [];\r\n    for (const fn of runAfterChangeDetection) {\r\n      fn();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ArrayDataSource, CollectionViewer, DataSource, ListRange} from '@angular/cdk/collections';\r\nimport {\r\n  Directive,\r\n  DoCheck,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  IterableChangeRecord,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  NgIterable,\r\n  OnDestroy,\r\n  SkipSelf,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n\r\n/** The context for an item rendered by `CdkVirtualForOf` */\r\nexport type CdkVirtualForOfContext<T> = {\r\n  /** The item value. */\r\n  $implicit: T;\r\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\r\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\r\n  /** The index of the item in the DataSource. */\r\n  index: number;\r\n  /** The number of items in the DataSource. */\r\n  count: number;\r\n  /** Whether this is the first item in the DataSource. */\r\n  first: boolean;\r\n  /** Whether this is the last item in the DataSource. */\r\n  last: boolean;\r\n  /** Whether the index is even. */\r\n  even: boolean;\r\n  /** Whether the index is odd. */\r\n  odd: boolean;\r\n};\r\n\r\n\r\n/** Helper to extract size from a DOM Node. */\r\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\r\n  const el = node as Element;\r\n  if (!el.getBoundingClientRect) {\r\n    return 0;\r\n  }\r\n  const rect = el.getBoundingClientRect();\r\n  return orientation == 'horizontal' ? rect.width : rect.height;\r\n}\r\n\r\n\r\n/**\r\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\r\n * container.\r\n */\r\n@Directive({\r\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\r\n})\r\nexport class CdkVirtualForOf<T> implements CollectionViewer, DoCheck, OnDestroy {\r\n  /** Emits when the rendered view of the data changes. */\r\n  viewChange = new Subject<ListRange>();\r\n\r\n  /** Subject that emits when a new DataSource instance is given. */\r\n  private _dataSourceChanges = new Subject<DataSource<T>>();\r\n\r\n  /** The DataSource to display. */\r\n  @Input()\r\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> {\r\n    return this._cdkVirtualForOf;\r\n  }\r\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T>) {\r\n    this._cdkVirtualForOf = value;\r\n    const ds = value instanceof DataSource ? value :\r\n        // Slice the value if its an NgIterable to ensure we're working with an array.\r\n        new ArrayDataSource<T>(\r\n            value instanceof Observable ? value : Array.prototype.slice.call(value || []));\r\n    this._dataSourceChanges.next(ds);\r\n  }\r\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\r\n\r\n  /**\r\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\r\n   * the item and produces a value to be used as the item's identity when tracking changes.\r\n   */\r\n  @Input()\r\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\r\n    return this._cdkVirtualForTrackBy;\r\n  }\r\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\r\n    this._needsUpdate = true;\r\n    this._cdkVirtualForTrackBy = fn ?\r\n        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\r\n        undefined;\r\n  }\r\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\r\n\r\n  /** The template used to stamp out new elements. */\r\n  @Input()\r\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\r\n    if (value) {\r\n      this._needsUpdate = true;\r\n      this._template = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The size of the cache used to store templates that are not being used for re-use later.\r\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\r\n   */\r\n  @Input() cdkVirtualForTemplateCacheSize: number = 20;\r\n\r\n  /** Emits whenever the data in the current DataSource changes. */\r\n  dataStream: Observable<T[]> = this._dataSourceChanges\r\n      .pipe(\r\n          // Start off with null `DataSource`.\r\n          startWith(null!),\r\n          // Bundle up the previous and current data sources so we can work with both.\r\n          pairwise(),\r\n          // Use `_changeDataSource` to disconnect from the previous data source and connect to the\r\n          // new one, passing back a stream of data changes which we run through `switchMap` to give\r\n          // us a data stream that emits the latest data from whatever the current `DataSource` is.\r\n          switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\r\n          // Replay the last emitted data when someone subscribes.\r\n          shareReplay(1));\r\n\r\n  /** The differ used to calculate changes to the data. */\r\n  private _differ: IterableDiffer<T> | null = null;\r\n\r\n  /** The most recent data emitted from the DataSource. */\r\n  private _data: T[];\r\n\r\n  /** The currently rendered items. */\r\n  private _renderedItems: T[];\r\n\r\n  /** The currently rendered range of indices. */\r\n  private _renderedRange: ListRange;\r\n\r\n  /**\r\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\r\n   * currently need to be rendered. These instances will be reused in the future rather than\r\n   * stamping out brand new ones.\r\n   */\r\n  private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\r\n\r\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\r\n  private _needsUpdate = false;\r\n\r\n  private _destroyed = new Subject<void>();\r\n\r\n  constructor(\r\n      /** The view container to add items to. */\r\n      private _viewContainerRef: ViewContainerRef,\r\n      /** The template to use when stamping out new items. */\r\n      private _template: TemplateRef<CdkVirtualForOfContext<T>>,\r\n      /** The set of available differs. */\r\n      private _differs: IterableDiffers,\r\n      /** The virtual scrolling viewport that these items are being rendered in. */\r\n      @SkipSelf() private _viewport: CdkVirtualScrollViewport) {\r\n    this.dataStream.subscribe(data => {\r\n      this._data = data;\r\n      this._onRenderedDataChange();\r\n    });\r\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\r\n      this._renderedRange = range;\r\n      this.viewChange.next(this._renderedRange);\r\n      this._onRenderedDataChange();\r\n    });\r\n    this._viewport.attach(this);\r\n  }\r\n\r\n  /**\r\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\r\n   * in the specified range. Throws an error if the range includes items that are not currently\r\n   * rendered.\r\n   */\r\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\r\n    if (range.start >= range.end) {\r\n      return 0;\r\n    }\r\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\r\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\r\n    }\r\n\r\n    // The index into the list of rendered views for the first item in the range.\r\n    const renderedStartIndex = range.start - this._renderedRange.start;\r\n    // The length of the range we're measuring.\r\n    const rangeLen = range.end - range.start;\r\n\r\n    // Loop over all root nodes for all items in the range and sum up their size.\r\n    let totalSize = 0;\r\n    let i = rangeLen;\r\n    while (i--) {\r\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as\r\n          EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\r\n      let j = view ? view.rootNodes.length : 0;\r\n      while (j--) {\r\n        totalSize += getSize(orientation, view!.rootNodes[j]);\r\n      }\r\n    }\r\n\r\n    return totalSize;\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this._differ && this._needsUpdate) {\r\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\r\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\r\n      // changing (need to do this diff).\r\n      const changes = this._differ.diff(this._renderedItems);\r\n      if (!changes) {\r\n        this._updateContext();\r\n      } else {\r\n        this._applyChanges(changes);\r\n      }\r\n      this._needsUpdate = false;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._viewport.detach();\r\n\r\n    this._dataSourceChanges.complete();\r\n    this.viewChange.complete();\r\n\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n\r\n    for (let view of this._templateCache) {\r\n      view.destroy();\r\n    }\r\n  }\r\n\r\n  /** React to scroll state changes in the viewport. */\r\n  private _onRenderedDataChange() {\r\n    if (!this._renderedRange) {\r\n      return;\r\n    }\r\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\r\n    if (!this._differ) {\r\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\r\n    }\r\n    this._needsUpdate = true;\r\n  }\r\n\r\n  /** Swap out one `DataSource` for another. */\r\n  private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T>): Observable<T[]> {\r\n    if (oldDs) {\r\n      oldDs.disconnect(this);\r\n    }\r\n    this._needsUpdate = true;\r\n    return newDs.connect(this);\r\n  }\r\n\r\n  /** Update the `CdkVirtualForOfContext` for all views. */\r\n  private _updateContext() {\r\n    const count = this._data.length;\r\n    let i = this._viewContainerRef.length;\r\n    while (i--) {\r\n      let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n      view.context.index = this._renderedRange.start + i;\r\n      view.context.count = count;\r\n      this._updateComputedContextProperties(view.context);\r\n      view.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Apply changes to the DOM. */\r\n  private _applyChanges(changes: IterableChanges<T>) {\r\n    // Rearrange the views to put them in the right location.\r\n    changes.forEachOperation(\r\n        (record: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\r\n          if (record.previousIndex == null) {  // Item added.\r\n            const view = this._getViewForNewItem();\r\n            this._viewContainerRef.insert(view, currentIndex);\r\n            view.context.$implicit = record.item;\r\n          } else if (currentIndex == null) {  // Item removed.\r\n            this._cacheView(this._viewContainerRef.detach(adjustedPreviousIndex) as\r\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>);\r\n          } else {  // Item moved.\r\n            const view = this._viewContainerRef.get(adjustedPreviousIndex) as\r\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n            this._viewContainerRef.move(view, currentIndex);\r\n            view.context.$implicit = record.item;\r\n          }\r\n        });\r\n\r\n    // Update $implicit for any items that had an identity change.\r\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\r\n      const view = this._viewContainerRef.get(record.currentIndex!) as\r\n          EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n      view.context.$implicit = record.item;\r\n    });\r\n\r\n    // Update the context variables on all items.\r\n    const count = this._data.length;\r\n    let i = this._viewContainerRef.length;\r\n    while (i--) {\r\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n      view.context.index = this._renderedRange.start + i;\r\n      view.context.count = count;\r\n      this._updateComputedContextProperties(view.context);\r\n    }\r\n  }\r\n\r\n  /** Cache the given detached view. */\r\n  private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\r\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\r\n      this._templateCache.push(view);\r\n    } else {\r\n      view.destroy();\r\n    }\r\n  }\r\n\r\n  /** Get a view for a new item, either from the cache or by creating a new one. */\r\n  private _getViewForNewItem(): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\r\n    return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\r\n      $implicit: null!,\r\n      cdkVirtualForOf: this._cdkVirtualForOf,\r\n      index: -1,\r\n      count: -1,\r\n      first: false,\r\n      last: false,\r\n      odd: false,\r\n      even: false\r\n    });\r\n  }\r\n\r\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\r\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\r\n    context.first = context.index === 0;\r\n    context.last = context.index === context.count - 1;\r\n    context.even = context.index % 2 === 0;\r\n    context.odd = !context.even;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {Injectable, NgZone, OnDestroy, Optional, SkipSelf} from '@angular/core';\r\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\r\nimport {auditTime} from 'rxjs/operators';\r\n\r\n/** Time in ms to throttle the resize events by default. */\r\nexport const DEFAULT_RESIZE_TIME = 20;\r\n\r\n/**\r\n * Simple utility for getting the bounds of the browser viewport.\r\n * @docs-private\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class ViewportRuler implements OnDestroy {\r\n  /** Cached viewport dimensions. */\r\n  private _viewportSize: {width: number; height: number};\r\n\r\n  /** Stream of viewport change events. */\r\n  private _change: Observable<Event>;\r\n\r\n  /** Subscription to streams that invalidate the cached viewport dimensions. */\r\n  private _invalidateCache: Subscription;\r\n\r\n  constructor(private _platform: Platform, ngZone: NgZone) {\r\n    this._change = _platform.isBrowser ? ngZone.runOutsideAngular(() => {\r\n      return merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange'));\r\n    }) : observableOf();\r\n\r\n    this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._invalidateCache.unsubscribe();\r\n  }\r\n\r\n  /** Returns the viewport's width and height. */\r\n  getViewportSize(): Readonly<{width: number, height: number}> {\r\n    if (!this._viewportSize) {\r\n      this._updateViewportSize();\r\n    }\r\n\r\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\r\n\r\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\r\n    if (!this._platform.isBrowser) {\r\n      this._viewportSize = null!;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /** Gets a ClientRect for the viewport's bounds. */\r\n  getViewportRect(): ClientRect {\r\n    // Use the document element's bounding rect rather than the window scroll properties\r\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\r\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\r\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\r\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\r\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\r\n    // We use the documentElement instead of the body because, by default (without a css reset)\r\n    // browsers typically give the document body an 8px margin, which is not included in\r\n    // getBoundingClientRect().\r\n    const scrollPosition = this.getViewportScrollPosition();\r\n    const {width, height} = this.getViewportSize();\r\n\r\n    return {\r\n      top: scrollPosition.top,\r\n      left: scrollPosition.left,\r\n      bottom: scrollPosition.top + height,\r\n      right: scrollPosition.left + width,\r\n      height,\r\n      width,\r\n    };\r\n  }\r\n\r\n  /** Gets the (top, left) scroll position of the viewport. */\r\n  getViewportScrollPosition() {\r\n    // While we can get a reference to the fake document\r\n    // during SSR, it doesn't have getBoundingClientRect.\r\n    if (!this._platform.isBrowser) {\r\n      return {top: 0, left: 0};\r\n    }\r\n\r\n    // The top-left-corner of the viewport is determined by the scroll position of the document\r\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\r\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\r\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\r\n    // `document.documentElement` works consistently, where the `top` and `left` values will\r\n    // equal negative the scroll position.\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n\r\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\r\n                 document.documentElement.scrollTop || 0;\r\n\r\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\r\n                  document.documentElement.scrollLeft || 0;\r\n\r\n    return {top, left};\r\n  }\r\n\r\n  /**\r\n   * Returns a stream that emits whenever the size of the viewport changes.\r\n   * @param throttleTime Time in milliseconds to throttle the stream.\r\n   */\r\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\r\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\r\n  }\r\n\r\n  /** Updates the cached viewport size. */\r\n  private _updateViewportSize() {\r\n    this._viewportSize = this._platform.isBrowser ?\r\n        {width: window.innerWidth, height: window.innerHeight} :\r\n        {width: 0, height: 0};\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\r\n                                                platform: Platform,\r\n                                                ngZone: NgZone) {\r\n  return parentRuler || new ViewportRuler(platform, ngZone);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const VIEWPORT_RULER_PROVIDER = {\r\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\r\n  provide: ViewportRuler,\r\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\r\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n\r\n/** The injection token used to specify the virtual scrolling strategy. */\r\nexport const VIRTUAL_SCROLL_STRATEGY =\r\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\r\n\r\n\r\n/** A strategy that dictates which items should be rendered in the viewport. */\r\nexport interface VirtualScrollStrategy {\r\n  /** Emits when the index of the first element visible in the viewport changes. */\r\n  scrolledIndexChange: Observable<number>;\r\n\r\n  /**\r\n   * Attaches this scroll strategy to a viewport.\r\n   * @param viewport The viewport to attach this strategy to.\r\n   */\r\n  attach(viewport: CdkVirtualScrollViewport): void;\r\n\r\n  /** Detaches this scroll strategy from the currently attached viewport. */\r\n  detach(): void;\r\n\r\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\r\n  onContentScrolled();\r\n\r\n  /** Called when the length of the data changes. */\r\n  onDataLengthChanged();\r\n\r\n  /** Called when the range of items rendered in the DOM has changed. */\r\n  onContentRendered();\r\n\r\n  /** Called when the offset of the rendered items changed. */\r\n  onRenderedOffsetChanged();\r\n\r\n  /**\r\n   * Scroll to the offset for the given index.\r\n   * @param index The index of the element to scroll to.\r\n   * @param behavior The ScrollBehavior to use when scrolling.\r\n   */\r\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  getRtlScrollAxisType,\r\n  RtlScrollAxisType,\r\n  supportsScrollBehavior\r\n} from '@angular/cdk/platform';\r\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Optional} from '@angular/core';\r\nimport {fromEvent, Observable, Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {ScrollDispatcher} from './scroll-dispatcher';\r\n\r\nexport type _Without<T> = {[P in keyof T]?: never};\r\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\r\nexport type _Top = {top?: number};\r\nexport type _Bottom = {bottom?: number};\r\nexport type _Left = {left?: number};\r\nexport type _Right = {right?: number};\r\nexport type _Start = {start?: number};\r\nexport type _End = {end?: number};\r\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\r\nexport type _YAxis = _XOR<_Top, _Bottom>;\r\n\r\n/**\r\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\r\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\r\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\r\n * start, and end properties.\r\n */\r\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\r\n\r\n/**\r\n * Sends an event when the directive's element is scrolled. Registers itself with the\r\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\r\n * can be listened to through the service.\r\n */\r\n@Directive({\r\n  selector: '[cdk-scrollable], [cdkScrollable]'\r\n})\r\nexport class CdkScrollable implements OnInit, OnDestroy {\r\n  private _destroyed = new Subject();\r\n\r\n  private _elementScrolled: Observable<Event> = Observable.create(observer =>\r\n      this._ngZone.runOutsideAngular(() =>\r\n          fromEvent(this._elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\r\n              .subscribe(observer)));\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>,\r\n              private _scroll: ScrollDispatcher,\r\n              private _ngZone: NgZone,\r\n              @Optional() private _dir?: Directionality) {}\r\n\r\n  ngOnInit() {\r\n    this._scroll.register(this);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._scroll.deregister(this);\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Returns observable that emits when a scroll event is fired on the host element. */\r\n  elementScrolled(): Observable<Event> {\r\n    return this._elementScrolled;\r\n  }\r\n\r\n  /** Gets the ElementRef for the viewport. */\r\n  getElementRef(): ElementRef<HTMLElement> {\r\n    return this._elementRef;\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\r\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\r\n   * left and right always refer to the left and right side of the scrolling container irrespective\r\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\r\n   * in an RTL context.\r\n   * @param options specified the offsets to scroll to.\r\n   */\r\n  scrollTo(options: ExtendedScrollToOptions): void {\r\n    const el = this._elementRef.nativeElement;\r\n    const isRtl = this._dir && this._dir.value == 'rtl';\r\n\r\n    // Rewrite start & end offsets as right or left offsets.\r\n    options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\r\n    options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\r\n\r\n    // Rewrite the bottom offset as a top offset.\r\n    if (options.bottom != null) {\r\n      options.top = el.scrollHeight - el.clientHeight - options.bottom;\r\n    }\r\n\r\n    // Rewrite the right offset as a left offset.\r\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\r\n      if (options.left != null) {\r\n        options.right = el.scrollWidth - el.clientWidth - options.left;\r\n      }\r\n\r\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\r\n        options.left = options.right;\r\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\r\n        options.left = options.right ? -options.right : options.right;\r\n      }\r\n    } else {\r\n      if (options.right != null) {\r\n        options.left = el.scrollWidth - el.clientWidth - options.right;\r\n      }\r\n    }\r\n\r\n    this._applyScrollToOptions(options);\r\n  }\r\n\r\n  private _applyScrollToOptions(options: ScrollToOptions): void {\r\n    const el = this._elementRef.nativeElement;\r\n\r\n    if (supportsScrollBehavior()) {\r\n      el.scrollTo(options);\r\n    } else {\r\n      if (options.top != null) {\r\n        el.scrollTop = options.top;\r\n      }\r\n      if (options.left != null) {\r\n        el.scrollLeft = options.left;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\r\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\r\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\r\n   * left and right always refer to the left and right side of the scrolling container irrespective\r\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\r\n   * in an RTL context.\r\n   * @param from The edge to measure from.\r\n   */\r\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\r\n    const LEFT = 'left';\r\n    const RIGHT = 'right';\r\n    const el = this._elementRef.nativeElement;\r\n    if (from == 'top') {\r\n      return el.scrollTop;\r\n    }\r\n    if (from == 'bottom') {\r\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\r\n    }\r\n\r\n    // Rewrite start & end as left or right offsets.\r\n    const isRtl = this._dir && this._dir.value == 'rtl';\r\n    if (from == 'start') {\r\n      from = isRtl ? RIGHT : LEFT;\r\n    } else if (from == 'end') {\r\n      from = isRtl ? LEFT : RIGHT;\r\n    }\r\n\r\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\r\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\r\n      // 0 when scrolled all the way right.\r\n      if (from == LEFT) {\r\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\r\n      } else {\r\n        return el.scrollLeft;\r\n      }\r\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\r\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\r\n      // 0 when scrolled all the way right.\r\n      if (from == LEFT) {\r\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\r\n      } else {\r\n        return -el.scrollLeft;\r\n      }\r\n    } else {\r\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\r\n      // (scrollWidth - clientWidth) when scrolled all the way right.\r\n      if (from == LEFT) {\r\n        return el.scrollLeft;\r\n      } else {\r\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\r\nimport {CdkScrollable} from './scrollable';\r\nimport {CdkVirtualForOf} from './virtual-for-of';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n@NgModule({\r\n  imports: [PlatformModule, BidiModule],\r\n  exports: [\r\n    BidiModule,\r\n    CdkFixedSizeVirtualScroll,\r\n    CdkScrollable,\r\n    CdkVirtualForOf,\r\n    CdkVirtualScrollViewport,\r\n  ],\r\n  declarations: [\r\n    CdkFixedSizeVirtualScroll,\r\n    CdkScrollable,\r\n    CdkVirtualForOf,\r\n    CdkVirtualScrollViewport,\r\n  ],\r\n})\r\nexport class ScrollingModule {}\r\n\r\n/**\r\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\r\n * @breaking-change 8.0.0 delete this alias\r\n */\r\n@NgModule({\r\n  imports: [ScrollingModule],\r\n  exports: [ScrollingModule],\r\n})\r\nexport class ScrollDispatchModule {}\r\n"],"names":["_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","ScrollDispatcher","rangesEqual","r1","r2","start","end","getSize","orientation","node","el","getBoundingClientRect","rect","width","height","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","ViewportRuler","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","this","_scrolledIndexChange","Subject","scrolledIndexChange","pipe","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","prototype","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","Object","defineProperty","CdkFixedSizeVirtualScroll","value","coerceNumberProperty","ngOnChanges","type","Directive","args","selector","providers","provide","useFactory","deps","forwardRef","Input","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","_this","scrollSubscription","elementScrolled","subscribe","set","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","Observable","create","observer","_addGlobalListener","subscription","auditTime","_removeGlobalListener","observableOf","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","window","document","Injectable","providedIn","NgZone","Platform","SCROLL_DISPATCHER_PROVIDER","Optional","SkipSelf","CdkScrollable","_elementRef","_scroll","_dir","_destroyed","_elementScrolled","takeUntil","ngOnInit","scrollTo","options","isRtl","left","right","bottom","top","scrollHeight","clientHeight","getRtlScrollAxisType","RtlScrollAxisType","NORMAL","scrollWidth","clientWidth","INVERTED","NEGATED","_applyScrollToOptions","supportsScrollBehavior","scrollTop","scrollLeft","from","ElementRef","Directionality","decorators","CdkVirtualScrollViewport","_changeDetectorRef","_detachedSubject","_renderedRangeSubject","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSizeTransform","_totalContentSize","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_measureViewportSize","sampleTime","animationFrameScheduler","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","size","axis","range","getOffsetToRenderedContentStart","offset","to","transform","Number","_renderedContentTransform","measureRenderedContentSize","viewportElement","offsetDirection","_a","setScrollOffset","_pendingScrollOffset","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","checkViewportSize","viewportEl","runAfter","_doChangeDetection","markForCheck","style","runAfterChangeDetection","_i","runAfterChangeDetection_1","fn","Component","template","styles","host","class","[class.cdk-virtual-scroll-orientation-horizontal]","[class.cdk-virtual-scroll-orientation-vertical]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","undefined","Inject","propDecorators","ViewChild","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","startWith","pairwise","switchMap","prev","cur","_changeDataSource","shareReplay","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","ds","DataSource","ArrayDataSource","Array","slice","call","_cdkVirtualForTrackBy","item","renderedStartIndex","rangeLen","totalSize","i","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_applyChanges","_updateContext","destroy","find","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_getViewForNewItem","insert","$implicit","_cacheView","move","forEachIdentityChange","pop","createEmbeddedView","cdkVirtualForOf","first","last","odd","even","ViewContainerRef","TemplateRef","IterableDiffers","cdkVirtualForTemplate","NgModule","imports","PlatformModule","BidiModule","exports","declarations","ScrollingModule","ScrollDispatchModule","_change","merge","_invalidateCache","change","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentRect","documentElement","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","VIEWPORT_RULER_PROVIDER"],"mappings":"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"}