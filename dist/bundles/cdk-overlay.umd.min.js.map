{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/connected-position-strategy.ts","../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DomPortalOutlet} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  Inject,\r\n  Injectable,\r\n  Injector,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\nimport {ScrollStrategyOptions} from './scroll/index';\r\n\r\n\r\n/** Next overlay unique ID. */\r\nlet nextUniqueId = 0;\r\n\r\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\r\n// it needs is different based on where OverlayModule is imported.\r\n\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\r\n */\r\n@Injectable()\r\nexport class Overlay {\r\n  private _appRef: ApplicationRef;\r\n\r\n  constructor(\r\n              /** Scrolling strategies that can be used when creating an overlay. */\r\n              public scrollStrategies: ScrollStrategyOptions,\r\n              private _overlayContainer: OverlayContainer,\r\n              private _componentFactoryResolver: ComponentFactoryResolver,\r\n              private _positionBuilder: OverlayPositionBuilder,\r\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\r\n              private _injector: Injector,\r\n              private _ngZone: NgZone,\r\n              @Inject(DOCUMENT) private _document: any,\r\n              private _directionality: Directionality) { }\r\n\r\n  /**\r\n   * Creates an overlay.\r\n   * @param config Configuration applied to the overlay.\r\n   * @returns Reference to the created overlay.\r\n   */\r\n  create(config?: OverlayConfig): OverlayRef {\r\n    const host = this._createHostElement();\r\n    const pane = this._createPaneElement(host);\r\n    const portalOutlet = this._createPortalOutlet(pane);\r\n    const overlayConfig = new OverlayConfig(config);\r\n\r\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\r\n\r\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\r\n      this._keyboardDispatcher, this._document);\r\n  }\r\n\r\n  /**\r\n   * Gets a position builder that can be used, via fluent API,\r\n   * to construct and configure a position strategy.\r\n   * @returns An overlay position builder.\r\n   */\r\n  position(): OverlayPositionBuilder {\r\n    return this._positionBuilder;\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n   * @returns Newly-created pane element\r\n   */\r\n  private _createPaneElement(host: HTMLElement): HTMLElement {\r\n    const pane = this._document.createElement('div');\r\n\r\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\r\n    pane.classList.add('cdk-overlay-pane');\r\n    host.appendChild(pane);\r\n\r\n    return pane;\r\n  }\r\n\r\n  /**\r\n   * Creates the host element that wraps around an overlay\r\n   * and can be used for advanced positioning.\r\n   * @returns Newly-create host element.\r\n   */\r\n  private _createHostElement(): HTMLElement {\r\n    const host = this._document.createElement('div');\r\n    this._overlayContainer.getContainerElement().appendChild(host);\r\n    return host;\r\n  }\r\n\r\n  /**\r\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\r\n   * @param pane The DOM element to turn into a portal outlet.\r\n   * @returns A portal outlet for the given DOM element.\r\n   */\r\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\r\n    // We have to resolve the ApplicationRef later in order to allow people\r\n    // to use overlay-based providers during app initialization.\r\n    if (!this._appRef) {\r\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\r\n    }\r\n\r\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {Overlay} from './overlay';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\r\nimport {\r\n  ConnectedPosition,\r\n  FlexibleConnectedPositionStrategy,\r\n} from './position/flexible-connected-position-strategy';\r\nimport {\r\n  RepositionScrollStrategy,\r\n  RepositionScrollStrategyConfig,\r\n  ScrollStrategy,\r\n} from './scroll/index';\r\n\r\n\r\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\r\nconst defaultPositionList: ConnectedPosition[] = [\r\n  {\r\n    originX: 'start',\r\n    originY: 'bottom',\r\n    overlayX: 'start',\r\n    overlayY: 'top'\r\n  },\r\n  {\r\n    originX: 'start',\r\n    originY: 'top',\r\n    overlayX: 'start',\r\n    overlayY: 'bottom'\r\n  },\r\n  {\r\n    originX: 'end',\r\n    originY: 'top',\r\n    overlayX: 'end',\r\n    overlayY: 'bottom'\r\n  },\r\n  {\r\n    originX: 'end',\r\n    originY: 'bottom',\r\n    overlayX: 'end',\r\n    overlayY: 'top'\r\n  }\r\n];\r\n\r\n/** Injection token that determines the scroll handling while the connected overlay is open. */\r\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\r\n  () => ScrollStrategy {\r\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\r\n}\r\n\r\n/**\r\n * Directive applied to an element to make it usable as an origin for an Overlay using a\r\n * ConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\r\n  exportAs: 'cdkOverlayOrigin',\r\n})\r\nexport class CdkOverlayOrigin {\r\n  constructor(\r\n      /** Reference to the element on which the directive is applied. */\r\n      public elementRef: ElementRef) { }\r\n}\r\n\r\n\r\n/**\r\n * Directive to facilitate declarative creation of an\r\n * Overlay using a FlexibleConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\r\n  exportAs: 'cdkConnectedOverlay'\r\n})\r\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\r\n  private _overlayRef: OverlayRef;\r\n  private _templatePortal: TemplatePortal;\r\n  private _hasBackdrop = false;\r\n  private _lockPosition = false;\r\n  private _growAfterOpen = false;\r\n  private _flexibleDimensions = false;\r\n  private _push = false;\r\n  private _backdropSubscription = Subscription.EMPTY;\r\n  private _offsetX: number;\r\n  private _offsetY: number;\r\n  private _position: FlexibleConnectedPositionStrategy;\r\n\r\n  /** Origin for the connected overlay. */\r\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\r\n\r\n  /** Registered connected position pairs. */\r\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\r\n\r\n  /** The offset in pixels for the overlay connection point on the x-axis */\r\n  @Input('cdkConnectedOverlayOffsetX')\r\n  get offsetX(): number { return this._offsetX; }\r\n  set offsetX(offsetX: number) {\r\n    this._offsetX = offsetX;\r\n\r\n    if (this._position) {\r\n      this._setPositions(this._position);\r\n    }\r\n  }\r\n\r\n  /** The offset in pixels for the overlay connection point on the y-axis */\r\n  @Input('cdkConnectedOverlayOffsetY')\r\n  get offsetY() { return this._offsetY; }\r\n  set offsetY(offsetY: number) {\r\n    this._offsetY = offsetY;\r\n\r\n    if (this._position) {\r\n      this._setPositions(this._position);\r\n    }\r\n  }\r\n\r\n  /** The width of the overlay panel. */\r\n  @Input('cdkConnectedOverlayWidth') width: number | string;\r\n\r\n  /** The height of the overlay panel. */\r\n  @Input('cdkConnectedOverlayHeight') height: number | string;\r\n\r\n  /** The min width of the overlay panel. */\r\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\r\n\r\n  /** The min height of the overlay panel. */\r\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\r\n\r\n  /** The custom class to be set on the backdrop element. */\r\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\r\n\r\n  /** Margin between the overlay and the viewport edges. */\r\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\r\n\r\n  /** Strategy to be used when handling scroll events while the overlay is open. */\r\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy =\r\n      this._scrollStrategy();\r\n\r\n  /** Whether the overlay is open. */\r\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\r\n\r\n  /** Whether or not the overlay should attach a backdrop. */\r\n  @Input('cdkConnectedOverlayHasBackdrop')\r\n  get hasBackdrop() { return this._hasBackdrop; }\r\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\r\n\r\n  /** Whether or not the overlay should be locked when scrolling. */\r\n  @Input('cdkConnectedOverlayLockPosition')\r\n  get lockPosition() { return this._lockPosition; }\r\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  @Input('cdkConnectedOverlayFlexibleDimensions')\r\n  get flexibleDiemsions() { return this._flexibleDimensions; }\r\n  set flexibleDiemsions(value: boolean) { this._flexibleDimensions = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\r\n  @Input('cdkConnectedOverlayGrowAfterOpen')\r\n  get growAfterOpen() { return this._growAfterOpen; }\r\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n  @Input('cdkConnectedOverlayPush')\r\n  get push() { return this._push; }\r\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\r\n\r\n  /** Event emitted when the backdrop is clicked. */\r\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\r\n\r\n  /** Event emitted when the position has changed. */\r\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\r\n\r\n  /** Event emitted when the overlay has been attached. */\r\n  @Output() attach = new EventEmitter<void>();\r\n\r\n  /** Event emitted when the overlay has been detached. */\r\n  @Output() detach = new EventEmitter<void>();\r\n\r\n  /** Emits when there are keyboard events that are targeted at the overlay. */\r\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\r\n\r\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      templateRef: TemplateRef<any>,\r\n      viewContainerRef: ViewContainerRef,\r\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\r\n      @Optional() private _dir: Directionality) {\r\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\r\n  }\r\n\r\n  /** The associated overlay reference. */\r\n  get overlayRef(): OverlayRef {\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /** The element's layout direction. */\r\n  get dir(): Direction {\r\n    return this._dir ? this._dir.value : 'ltr';\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyOverlay();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (this._position) {\r\n      if (changes['positions']) {\r\n        this._position.withPositions(this.positions);\r\n      }\r\n\r\n      if (changes['lockPosition']) {\r\n        this._position.withLockedPosition(this.lockPosition);\r\n      }\r\n\r\n      if (changes['origin']) {\r\n        this._position.setOrigin(this.origin.elementRef);\r\n\r\n        if (this.open) {\r\n          this._position.apply();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (changes['open']) {\r\n      this.open ? this._attachOverlay() : this._detachOverlay();\r\n    }\r\n  }\r\n\r\n  /** Creates an overlay */\r\n  private _createOverlay() {\r\n    if (!this.positions || !this.positions.length) {\r\n      this.positions = defaultPositionList;\r\n    }\r\n\r\n    this._overlayRef = this._overlay.create(this._buildConfig());\r\n  }\r\n\r\n  /** Builds the overlay config based on the directive's inputs */\r\n  private _buildConfig(): OverlayConfig {\r\n    const positionStrategy = this._position = this._createPositionStrategy();\r\n    const overlayConfig = new OverlayConfig({\r\n      direction: this._dir,\r\n      positionStrategy,\r\n      scrollStrategy: this.scrollStrategy,\r\n      hasBackdrop: this.hasBackdrop\r\n    });\r\n\r\n    if (this.width || this.width === 0) {\r\n      overlayConfig.width = this.width;\r\n    }\r\n\r\n    if (this.height || this.height === 0) {\r\n      overlayConfig.height = this.height;\r\n    }\r\n\r\n    if (this.minWidth || this.minWidth === 0) {\r\n      overlayConfig.minWidth = this.minWidth;\r\n    }\r\n\r\n    if (this.minHeight || this.minHeight === 0) {\r\n      overlayConfig.minHeight = this.minHeight;\r\n    }\r\n\r\n    if (this.backdropClass) {\r\n      overlayConfig.backdropClass = this.backdropClass;\r\n    }\r\n\r\n    return overlayConfig;\r\n  }\r\n\r\n  /** Returns the position strategy of the overlay to be set on the overlay config */\r\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\r\n    const strategy = this._overlay.position()\r\n      .flexibleConnectedTo(this.origin.elementRef)\r\n      .withFlexibleDimensions(this.flexibleDiemsions)\r\n      .withPush(this.push)\r\n      .withGrowAfterOpen(this.growAfterOpen)\r\n      .withViewportMargin(this.viewportMargin)\r\n      .withLockedPosition(this.lockPosition);\r\n\r\n    this._setPositions(strategy);\r\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\r\n\r\n    return strategy;\r\n  }\r\n\r\n  /**\r\n   * Sets the primary and fallback positions of a positions strategy,\r\n   * based on the current directive inputs.\r\n   */\r\n  private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\r\n    const positions: ConnectedPosition[] = this.positions.map(pos => ({\r\n      originX: pos.originX,\r\n      originY: pos.originY,\r\n      overlayX: pos.overlayX,\r\n      overlayY: pos.overlayY,\r\n      offsetX: pos.offsetX || this.offsetX,\r\n      offsetY: pos.offsetY || this.offsetY\r\n    }));\r\n\r\n    positionStrategy.withPositions(positions);\r\n  }\r\n\r\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\r\n  private _attachOverlay() {\r\n    if (!this._overlayRef) {\r\n      this._createOverlay();\r\n\r\n      this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n        this.overlayKeydown.next(event);\r\n\r\n        if (event.keyCode === ESCAPE) {\r\n          this._detachOverlay();\r\n        }\r\n      });\r\n    } else {\r\n      // Update the overlay size, in case the directive's inputs have changed\r\n      this._overlayRef.updateSize({\r\n        width: this.width,\r\n        minWidth: this.minWidth,\r\n        height: this.height,\r\n        minHeight: this.minHeight,\r\n      });\r\n    }\r\n\r\n    if (!this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._templatePortal);\r\n      this.attach.emit();\r\n    }\r\n\r\n    if (this.hasBackdrop) {\r\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\r\n        this.backdropClick.emit(event);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\r\n  private _detachOverlay() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.detach();\r\n      this.detach.emit();\r\n    }\r\n\r\n    this._backdropSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Destroys the overlay created by this directive. */\r\n  private _destroyOverlay() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n    }\r\n\r\n    this._backdropSubscription.unsubscribe();\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private */\r\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollingModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\r\nimport {NgModule, Provider} from '@angular/core';\r\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\r\nimport {Overlay} from './overlay';\r\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\r\nimport {\r\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n  CdkConnectedOverlay,\r\n  CdkOverlayOrigin,\r\n} from './overlay-directives';\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\n\r\n\r\n@NgModule({\r\n  imports: [BidiModule, PortalModule, ScrollingModule],\r\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\r\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\r\n  providers: [\r\n    Overlay,\r\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n})\r\nexport class OverlayModule {}\r\n\r\n\r\n/**\r\n * @deprecated Use `OverlayModule` instead.\r\n * @breaking-change 7.0.0\r\n */\r\nexport const OVERLAY_PROVIDERS: Provider[] = [\r\n  Overlay,\r\n  OverlayPositionBuilder,\r\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\r\n  VIEWPORT_RULER_PROVIDER,\r\n  OVERLAY_CONTAINER_PROVIDER,\r\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n];\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n\r\n/**\r\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\r\n * Fullscreen mode\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\r\n *\r\n * Should be provided in the root component.\r\n */\r\n@Injectable()\r\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\r\n  private _fullScreenEventName: string | undefined;\r\n  private _fullScreenListener: () => void;\r\n\r\n  constructor(@Inject(DOCUMENT) _document: any) {\r\n    super(_document);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n\r\n    if (this._fullScreenEventName && this._fullScreenListener) {\r\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\r\n    }\r\n  }\r\n\r\n  protected _createContainer(): void {\r\n    super._createContainer();\r\n    this._adjustParentForFullscreenChange();\r\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\r\n  }\r\n\r\n  private _adjustParentForFullscreenChange(): void {\r\n    if (!this._containerElement) {\r\n      return;\r\n    }\r\n\r\n    const fullscreenElement = this.getFullscreenElement();\r\n    const parent = fullscreenElement || this._document.body;\r\n    parent.appendChild(this._containerElement);\r\n  }\r\n\r\n  private _addFullscreenChangeListener(fn: () => void) {\r\n    const eventName = this._getEventName();\r\n\r\n    if (eventName) {\r\n      if (this._fullScreenListener) {\r\n        this._document.removeEventListener(eventName, this._fullScreenListener);\r\n      }\r\n\r\n      this._document.addEventListener(eventName, fn);\r\n      this._fullScreenListener = fn;\r\n    }\r\n  }\r\n\r\n  private _getEventName(): string | undefined {\r\n    if (!this._fullScreenEventName) {\r\n      if (this._document.fullscreenEnabled) {\r\n        this._fullScreenEventName = 'fullscreenchange';\r\n      } else if (this._document.webkitFullscreenEnabled) {\r\n        this._fullScreenEventName = 'webkitfullscreenchange';\r\n      } else if ((this._document as any).mozFullScreenEnabled) {\r\n        this._fullScreenEventName = 'mozfullscreenchange';\r\n      } else if ((this._document as any).msFullscreenEnabled) {\r\n        this._fullScreenEventName = 'MSFullscreenChange';\r\n      }\r\n    }\r\n\r\n    return this._fullScreenEventName;\r\n  }\r\n\r\n  /**\r\n   * When the page is put into fullscreen mode, a specific element is specified.\r\n   * Only that element and its children are visible when in fullscreen mode.\r\n   */\r\n  getFullscreenElement(): Element {\r\n    return this._document.fullscreenElement ||\r\n           this._document.webkitFullscreenElement ||\r\n           (this._document as any).mozFullScreenElement ||\r\n           (this._document as any).msFullscreenElement ||\r\n           null;\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\r\nimport {Optional} from '@angular/core';\r\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\r\n\r\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\r\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\r\n\r\n\r\n/** A connection point on the origin element. */\r\nexport interface OriginConnectionPosition {\r\n  originX: HorizontalConnectionPos;\r\n  originY: VerticalConnectionPos;\r\n}\r\n\r\n/** A connection point on the overlay element. */\r\nexport interface OverlayConnectionPosition {\r\n  overlayX: HorizontalConnectionPos;\r\n  overlayY: VerticalConnectionPos;\r\n}\r\n\r\n/** The points of the origin element and the overlay element to connect. */\r\nexport class ConnectionPositionPair {\r\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\r\n  originX: HorizontalConnectionPos;\r\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\r\n  originY: VerticalConnectionPos;\r\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\r\n  overlayX: HorizontalConnectionPos;\r\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\r\n  overlayY: VerticalConnectionPos;\r\n\r\n  constructor(\r\n    origin: OriginConnectionPosition,\r\n    overlay: OverlayConnectionPosition,\r\n    public offsetX?: number,\r\n    public offsetY?: number) {\r\n\r\n    this.originX = origin.originX;\r\n    this.originY = origin.originY;\r\n    this.overlayX = overlay.overlayX;\r\n    this.overlayY = overlay.overlayY;\r\n  }\r\n}\r\n\r\n/**\r\n * Set of properties regarding the position of the origin and overlay relative to the viewport\r\n * with respect to the containing Scrollable elements.\r\n *\r\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\r\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n * The overlay and origin are outside view if there is no overlap between their bounding client\r\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n *       -----------                    -----------\r\n *       | outside |                    | clipped |\r\n *       |  view   |              --------------------------\r\n *       |         |              |     |         |        |\r\n *       ----------               |     -----------        |\r\n *  --------------------------    |                        |\r\n *  |                        |    |      Scrollable        |\r\n *  |                        |    |                        |\r\n *  |                        |     --------------------------\r\n *  |      Scrollable        |\r\n *  |                        |\r\n *  --------------------------\r\n *\r\n *  @docs-private\r\n */\r\nexport class ScrollingVisibility {\r\n  isOriginClipped: boolean;\r\n  isOriginOutsideView: boolean;\r\n  isOverlayClipped: boolean;\r\n  isOverlayOutsideView: boolean;\r\n}\r\n\r\n/** The change event emitted by the strategy when a fallback position is used. */\r\nexport class ConnectedOverlayPositionChange {\r\n  constructor(\r\n      /** The position used as a result of this change. */\r\n      public connectionPair: ConnectionPositionPair,\r\n      /** @docs-private */\r\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\r\n}\r\n\r\n/**\r\n * Validates whether a vertical position property matches the expected values.\r\n * @param property Name of the property being validated.\r\n * @param value Value of the property being validated.\r\n * @docs-private\r\n */\r\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\r\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\r\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\r\n                `Expected \"top\", \"bottom\" or \"center\".`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates whether a horizontal position property matches the expected values.\r\n * @param property Name of the property being validated.\r\n * @param value Value of the property being validated.\r\n * @docs-private\r\n */\r\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\r\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\r\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\r\n                `Expected \"start\", \"end\" or \"center\".`);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n/**\r\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\r\n */\r\nexport interface ScrollStrategy {\r\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\r\n  enable: () => void;\r\n\r\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\r\n  disable: () => void;\r\n\r\n  /** Attaches this `ScrollStrategy` to an overlay. */\r\n  attach: (overlayRef: OverlayReference) => void;\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\r\n */\r\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\r\n  return Error(`Scroll strategy has already been attached.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n// TODO(jelbourn): move this to live with the rest of the scrolling code\r\n// TODO(jelbourn): someday replace this with IntersectionObservers\r\n\r\n/**\r\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\r\n * @param element Dimensions of the element (from getBoundingClientRect)\r\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\r\n * @returns Whether the element is scrolled out of view\r\n * @docs-private\r\n */\r\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\r\n  return scrollContainers.some(containerBounds => {\r\n    const outsideAbove = element.bottom < containerBounds.top;\r\n    const outsideBelow = element.top > containerBounds.bottom;\r\n    const outsideLeft = element.right < containerBounds.left;\r\n    const outsideRight = element.left > containerBounds.right;\r\n\r\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Gets whether an element is clipped by any of its scrolling containers.\r\n * @param element Dimensions of the element (from getBoundingClientRect)\r\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\r\n * @returns Whether the element is clipped\r\n * @docs-private\r\n */\r\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\r\n  return scrollContainers.some(scrollContainerRect => {\r\n    const clippedAbove = element.top < scrollContainerRect.top;\r\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\r\n    const clippedLeft = element.left < scrollContainerRect.left;\r\n    const clippedRight = element.right > scrollContainerRect.right;\r\n\r\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\r\n  });\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {OverlayRef} from '../overlay-ref';\r\n\r\n\r\n/**\r\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\r\n * if any. It maintains a list of attached overlays to determine best suited overlay based\r\n * on event target and order of overlay opens.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayKeyboardDispatcher implements OnDestroy {\r\n\r\n  /** Currently attached overlays in the order they were attached. */\r\n  _attachedOverlays: OverlayRef[] = [];\r\n\r\n  private _document: Document;\r\n  private _isAttached: boolean;\r\n\r\n  constructor(@Inject(DOCUMENT) document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._detach();\r\n  }\r\n\r\n  /** Add a new overlay to the list of attached overlay refs. */\r\n  add(overlayRef: OverlayRef): void {\r\n    // Ensure that we don't get the same overlay multiple times.\r\n    this.remove(overlayRef);\r\n\r\n    // Lazily start dispatcher once first overlay is added\r\n    if (!this._isAttached) {\r\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\r\n      this._isAttached = true;\r\n    }\r\n\r\n    this._attachedOverlays.push(overlayRef);\r\n  }\r\n\r\n  /** Remove an overlay from the list of attached overlay refs. */\r\n  remove(overlayRef: OverlayRef): void {\r\n    const index = this._attachedOverlays.indexOf(overlayRef);\r\n\r\n    if (index > -1) {\r\n      this._attachedOverlays.splice(index, 1);\r\n    }\r\n\r\n    // Remove the global listener once there are no more overlays.\r\n    if (this._attachedOverlays.length === 0) {\r\n      this._detach();\r\n    }\r\n  }\r\n\r\n  /** Detaches the global keyboard event listener. */\r\n  private _detach() {\r\n    if (this._isAttached) {\r\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\r\n      this._isAttached = false;\r\n    }\r\n  }\r\n\r\n  /** Keyboard event listener that will be attached to the body. */\r\n  private _keydownListener = (event: KeyboardEvent) => {\r\n    const overlays = this._attachedOverlays;\r\n\r\n    for (let i = overlays.length - 1; i > -1; i--) {\r\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\r\n      // We want to target the most recent overlay, rather than trying to match where the event came\r\n      // from, because some components might open an overlay, but keep focus on a trigger element\r\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\r\n      // because we don't want overlays that don't handle keyboard events to block the ones below\r\n      // them that do.\r\n      if (overlays[i]._keydownEventSubscriptions > 0) {\r\n        overlays[i]._keydownEvents.next(event);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\r\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\r\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\r\n  // If there is already an OverlayKeyboardDispatcher available, use that.\r\n  // Otherwise, provide a new one.\r\n  provide: OverlayKeyboardDispatcher,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\r\n\r\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\r\n    // of the type expected by Angular\r\n    DOCUMENT as InjectionToken<any>\r\n  ],\r\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\n\r\n\r\n/** Container inside which all overlays will render. */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayContainer implements OnDestroy {\r\n  protected _containerElement: HTMLElement;\r\n\r\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\r\n\r\n  ngOnDestroy() {\r\n    if (this._containerElement && this._containerElement.parentNode) {\r\n      this._containerElement.parentNode.removeChild(this._containerElement);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method returns the overlay container element. It will lazily\r\n   * create the element the first time  it is called to facilitate using\r\n   * the container in non-browser environments.\r\n   * @returns the container element\r\n   */\r\n  getContainerElement(): HTMLElement {\r\n    if (!this._containerElement) { this._createContainer(); }\r\n    return this._containerElement;\r\n  }\r\n\r\n  /**\r\n   * Create the overlay container element, which is simply a div\r\n   * with the 'cdk-overlay-container' class on the document body.\r\n   */\r\n  protected _createContainer(): void {\r\n    const container = this._document.createElement('div');\r\n\r\n    container.classList.add('cdk-overlay-container');\r\n    this._document.body.appendChild(container);\r\n    this._containerElement = container;\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\r\n  _document: any) {\r\n  return parentContainer || new OverlayContainer(_document);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const OVERLAY_CONTAINER_PROVIDER = {\r\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\r\n  provide: OverlayContainer,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), OverlayContainer],\r\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\r\n  ],\r\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position-strategy';\r\nimport {ElementRef} from '@angular/core';\r\nimport {ViewportRuler, CdkScrollable} from '@angular/cdk/scrolling';\r\nimport {\r\n  ConnectedOverlayPositionChange,\r\n  ConnectionPositionPair,\r\n  ScrollingVisibility,\r\n  validateHorizontalPosition,\r\n  validateVerticalPosition,\r\n} from './connected-position';\r\nimport {Observable, Subscription, Subject} from 'rxjs';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\r\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {OverlayContainer} from '../overlay-container';\r\n\r\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\r\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n */\r\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n\r\n  /** Whether we're performing the very first positioning of the overlay. */\r\n  private _isInitialRender = true;\r\n\r\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\r\n  private _lastBoundingBoxSize = {width: 0, height: 0};\r\n\r\n  /** Whether the overlay was pushed in a previous positioning. */\r\n  private _isPushed = false;\r\n\r\n  /** Whether the overlay can be pushed on-screen on the initial open. */\r\n  private _canPush = true;\r\n\r\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\r\n  private _growAfterOpen = false;\r\n\r\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  private _hasFlexibleDimensions = true;\r\n\r\n  /** Whether the overlay position is locked. */\r\n  private _positionLocked = false;\r\n\r\n  /** Cached origin dimensions */\r\n  private _originRect: ClientRect;\r\n\r\n  /** Cached overlay dimensions */\r\n  private _overlayRect: ClientRect;\r\n\r\n  /** Cached viewport dimensions */\r\n  private _viewportRect: ClientRect;\r\n\r\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\r\n  private _viewportMargin = 0;\r\n\r\n  /** The Scrollable containers used to check scrollable view properties on position change. */\r\n  private scrollables: CdkScrollable[] = [];\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  _preferredPositions: ConnectionPositionPair[] = [];\r\n\r\n  /** The origin element against which the overlay will be positioned. */\r\n  private _origin: HTMLElement;\r\n\r\n  /** The overlay pane element. */\r\n  private _pane: HTMLElement;\r\n\r\n  /** Whether the strategy has been disposed of already. */\r\n  private _isDisposed: boolean;\r\n\r\n  /**\r\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\r\n   * within the viewport.\r\n   */\r\n  private _boundingBox: HTMLElement | null;\r\n\r\n  /** The last position to have been calculated as the best fit position. */\r\n  private _lastPosition: ConnectedPosition | null;\r\n\r\n  /** Subject that emits whenever the position changes. */\r\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\r\n\r\n  /** Subscription to viewport size changes. */\r\n  private _resizeSubscription = Subscription.EMPTY;\r\n\r\n  /** Default offset for the overlay along the x axis. */\r\n  private _offsetX = 0;\r\n\r\n  /** Default offset for the overlay along the y axis. */\r\n  private _offsetY = 0;\r\n\r\n  /** Selector to be used when finding the elements on which to set the transform origin. */\r\n  private _transformOriginSelector: string;\r\n\r\n  /** Amount of subscribers to the `positionChanges` stream. */\r\n  private _positionChangeSubscriptions = 0;\r\n\r\n  /** Observable sequence of position changes. */\r\n  positionChanges: Observable<ConnectedOverlayPositionChange> = Observable.create(observer => {\r\n    const subscription = this._positionChanges.subscribe(observer);\r\n    this._positionChangeSubscriptions++;\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      this._positionChangeSubscriptions--;\r\n    };\r\n  });\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  get positions() {\r\n    return this._preferredPositions;\r\n  }\r\n\r\n  constructor(\r\n    connectedTo: ElementRef | HTMLElement,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _document: Document,\r\n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\r\n    private _platform?: Platform,\r\n    private _overlayContainer?: OverlayContainer) {\r\n    this.setOrigin(connectedTo);\r\n  }\r\n\r\n  /** Attaches this position strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference): void {\r\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\r\n      throw Error('This position strategy is already attached to an overlay');\r\n    }\r\n\r\n    this._validatePositions();\r\n\r\n    overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\r\n\r\n    this._overlayRef = overlayRef;\r\n    this._boundingBox = overlayRef.hostElement;\r\n    this._pane = overlayRef.overlayElement;\r\n    this._resizeSubscription.unsubscribe();\r\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the overlay element, using whichever preferred position relative\r\n   * to the origin best fits on-screen.\r\n   *\r\n   * The selection of a position goes as follows:\r\n   *  - If any positions fit completely within the viewport as-is,\r\n   *      choose the first position that does so.\r\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\r\n   *      choose the position with the greatest available size modified by the positions' weight.\r\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\r\n   *      on-screen.\r\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\r\n    // @breaking-change 7.0.0 Remove `_platform` null check once it's guaranteed to be defined.\r\n    if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\r\n      return;\r\n    }\r\n\r\n    // If the position has been applied already (e.g. when the overlay was opened) and the\r\n    // consumer opted into locking in the position, re-use the old position, in order to\r\n    // prevent the overlay from jumping around.\r\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\r\n      this.reapplyLastPosition();\r\n      return;\r\n    }\r\n\r\n    this._resetOverlayElementStyles();\r\n    this._resetBoundingBoxStyles();\r\n\r\n    // We need the bounding rects for the origin and the overlay to determine how to position\r\n    // the overlay relative to the origin.\r\n    // We use the viewport rect to determine whether a position would go off-screen.\r\n    this._viewportRect = this._getNarrowedViewportRect();\r\n    this._originRect = this._origin.getBoundingClientRect();\r\n    this._overlayRect = this._pane.getBoundingClientRect();\r\n\r\n    const originRect = this._originRect;\r\n    const overlayRect = this._overlayRect;\r\n    const viewportRect = this._viewportRect;\r\n\r\n    // Positions where the overlay will fit with flexible dimensions.\r\n    const flexibleFits: FlexibleFit[] = [];\r\n\r\n    // Fallback if none of the preferred positions fit within the viewport.\r\n    let fallback: FallbackPosition | undefined;\r\n\r\n    // Go through each of the preferred positions looking for a good fit.\r\n    // If a good fit is found, it will be applied immediately.\r\n    for (let pos of this._preferredPositions) {\r\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\r\n      let originPoint = this._getOriginPoint(originRect, pos);\r\n\r\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\r\n      // overlay in this position. We use the top-left corner for calculations and later translate\r\n      // this into an appropriate (top, left, bottom, right) style.\r\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\r\n\r\n      // Calculate how well the overlay would fit into the viewport with this point.\r\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\r\n\r\n      // If the overlay, without any further work, fits into the viewport, use this position.\r\n      if (overlayFit.isCompletelyWithinViewport) {\r\n        this._isPushed = false;\r\n        this._applyPosition(pos, originPoint);\r\n        return;\r\n      }\r\n\r\n      // If the overlay has flexible dimensions, we can use this position\r\n      // so long as there's enough space for the minimum dimensions.\r\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\r\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\r\n        // if none of the positions fit *without* flexible dimensions.\r\n        flexibleFits.push({\r\n          position: pos,\r\n          origin: originPoint,\r\n          overlayRect,\r\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      // If the current preferred position does not fit on the screen, remember the position\r\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\r\n      // position.\r\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\r\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\r\n      }\r\n    }\r\n\r\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\r\n    // one that has the greatest area available modified by the position's weight\r\n    if (flexibleFits.length) {\r\n      let bestFit: FlexibleFit | null = null;\r\n      let bestScore = -1;\r\n      for (const fit of flexibleFits) {\r\n        const score =\r\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\r\n        if (score > bestScore) {\r\n          bestScore = score;\r\n          bestFit = fit;\r\n        }\r\n      }\r\n\r\n      this._isPushed = false;\r\n      this._applyPosition(bestFit!.position, bestFit!.origin);\r\n      return;\r\n    }\r\n\r\n    // When none of the preferred positions fit within the viewport, take the position\r\n    // that went off-screen the least and attempt to push it on-screen.\r\n    if (this._canPush) {\r\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\r\n      this._isPushed = true;\r\n      this._applyPosition(fallback!.position, fallback!.originPoint);\r\n      return;\r\n    }\r\n\r\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\r\n    // position that went off-screen the least.\r\n    this._applyPosition(fallback!.position, fallback!.originPoint);\r\n  }\r\n\r\n  detach() {\r\n    this._resizeSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Cleanup after the element gets destroyed. */\r\n  dispose() {\r\n    if (!this._isDisposed) {\r\n      this.detach();\r\n      this._boundingBox = null;\r\n      this._positionChanges.complete();\r\n      this._isDisposed = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This re-aligns the overlay element with the trigger in its last calculated position,\r\n   * even if a position higher in the \"preferred positions\" list would now fit. This\r\n   * allows one to re-align the panel without changing the orientation of the panel.\r\n   */\r\n  reapplyLastPosition(): void {\r\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\r\n      this._originRect = this._origin.getBoundingClientRect();\r\n      this._overlayRect = this._pane.getBoundingClientRect();\r\n      this._viewportRect = this._getNarrowedViewportRect();\r\n\r\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\r\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\r\n\r\n      this._applyPosition(lastPosition, originPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the list of Scrollable containers that host the origin element so that\r\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n   * Scrollable must be an ancestor element of the strategy's origin element.\r\n   */\r\n  withScrollableContainers(scrollables: CdkScrollable[]) {\r\n    this.scrollables = scrollables;\r\n  }\r\n\r\n  /**\r\n   * Adds new preferred positions.\r\n   * @param positions List of positions options for this overlay.\r\n   */\r\n  withPositions(positions: ConnectedPosition[]): this {\r\n    this._preferredPositions = positions;\r\n\r\n    // If the last calculated position object isn't part of the positions anymore, clear\r\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\r\n    if (positions.indexOf(this._lastPosition!) === -1) {\r\n      this._lastPosition = null;\r\n    }\r\n\r\n    this._validatePositions();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\r\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\r\n   */\r\n  withViewportMargin(margin: number): this {\r\n    this._viewportMargin = margin;\r\n    return this;\r\n  }\r\n\r\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  withFlexibleDimensions(flexibleDimensions = true): this {\r\n    this._hasFlexibleDimensions = flexibleDimensions;\r\n    return this;\r\n  }\r\n\r\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\r\n  withGrowAfterOpen(growAfterOpen = true): this {\r\n    this._growAfterOpen = growAfterOpen;\r\n    return this;\r\n  }\r\n\r\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n  withPush(canPush = true): this {\r\n    this._canPush = canPush;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the overlay's position should be locked in after it is positioned\r\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n   * when the position is re-applied (e.g. when the user scrolls away).\r\n   * @param isLocked Whether the overlay should locked in.\r\n   */\r\n  withLockedPosition(isLocked = true): this {\r\n    this._positionLocked = isLocked;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the origin element, relative to which to position the overlay.\r\n   * @param origin Reference to the new origin element.\r\n   */\r\n  setOrigin(origin: ElementRef | HTMLElement): this {\r\n    this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the default offset for the overlay's connection point on the x-axis.\r\n   * @param offset New offset in the X axis.\r\n   */\r\n  withDefaultOffsetX(offset: number): this {\r\n    this._offsetX = offset;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the default offset for the overlay's connection point on the y-axis.\r\n   * @param offset New offset in the Y axis.\r\n   */\r\n  withDefaultOffsetY(offset: number): this {\r\n    this._offsetY = offset;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures that the position strategy should set a `transform-origin` on some elements\r\n   * inside the overlay, depending on the current position that is being applied. This is\r\n   * useful for the cases where the origin of an animation can change depending on the\r\n   * alignment of the overlay.\r\n   * @param selector CSS selector that will be used to find the target\r\n   *    elements onto which to set the transform origin.\r\n   */\r\n  withTransformOriginOn(selector: string): this {\r\n    this._transformOriginSelector = selector;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\r\n   */\r\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\r\n    let x: number;\r\n    if (pos.originX == 'center') {\r\n      // Note: when centering we should always use the `left`\r\n      // offset, otherwise the position will be wrong in RTL.\r\n      x = originRect.left + (originRect.width / 2);\r\n    } else {\r\n      const startX = this._isRtl() ? originRect.right : originRect.left;\r\n      const endX = this._isRtl() ? originRect.left : originRect.right;\r\n      x = pos.originX == 'start' ? startX : endX;\r\n    }\r\n\r\n    let y: number;\r\n    if (pos.originY == 'center') {\r\n      y = originRect.top + (originRect.height / 2);\r\n    } else {\r\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\r\n    }\r\n\r\n    return {x, y};\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\r\n   * origin point to which the overlay should be connected.\r\n   */\r\n  private _getOverlayPoint(\r\n      originPoint: Point,\r\n      overlayRect: ClientRect,\r\n      pos: ConnectedPosition): Point {\r\n\r\n    // Calculate the (overlayStartX, overlayStartY), the start of the\r\n    // potential overlay position relative to the origin point.\r\n    let overlayStartX: number;\r\n    if (pos.overlayX == 'center') {\r\n      overlayStartX = -overlayRect.width / 2;\r\n    } else if (pos.overlayX === 'start') {\r\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\r\n    } else {\r\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\r\n    }\r\n\r\n    let overlayStartY: number;\r\n    if (pos.overlayY == 'center') {\r\n      overlayStartY = -overlayRect.height / 2;\r\n    } else {\r\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\r\n    }\r\n\r\n    // The (x, y) coordinates of the overlay.\r\n    return {\r\n      x: originPoint.x + overlayStartX,\r\n      y: originPoint.y + overlayStartY,\r\n    };\r\n  }\r\n\r\n  /** Gets how well an overlay at the given point will fit within the viewport. */\r\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\r\n    position: ConnectedPosition): OverlayFit {\r\n\r\n    let {x, y} = point;\r\n    let offsetX = this._getOffset(position, 'x');\r\n    let offsetY = this._getOffset(position, 'y');\r\n\r\n    // Account for the offsets since they could push the overlay out of the viewport.\r\n    if (offsetX) {\r\n      x += offsetX;\r\n    }\r\n\r\n    if (offsetY) {\r\n      y += offsetY;\r\n    }\r\n\r\n    // How much the overlay would overflow at this position, on each side.\r\n    let leftOverflow = 0 - x;\r\n    let rightOverflow = (x + overlay.width) - viewport.width;\r\n    let topOverflow = 0 - y;\r\n    let bottomOverflow = (y + overlay.height) - viewport.height;\r\n\r\n    // Visible parts of the element on each axis.\r\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\r\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\r\n    let visibleArea = visibleWidth * visibleHeight;\r\n\r\n    return {\r\n      visibleArea,\r\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\r\n      fitsInViewportVertically: visibleHeight === overlay.height,\r\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\r\n   * @param fit How well the overlay fits in the viewport at some position.\r\n   * @param point The (x, y) coordinates of the overlat at some position.\r\n   * @param viewport The geometry of the viewport.\r\n   */\r\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\r\n    if (this._hasFlexibleDimensions) {\r\n      const availableHeight = viewport.bottom - point.y;\r\n      const availableWidth = viewport.right - point.x;\r\n      const minHeight = this._overlayRef.getConfig().minHeight;\r\n      const minWidth = this._overlayRef.getConfig().minWidth;\r\n\r\n      const verticalFit = fit.fitsInViewportVertically ||\r\n          (minHeight != null && minHeight <= availableHeight);\r\n      const horizontalFit = fit.fitsInViewportHorizontally ||\r\n          (minWidth != null && minWidth <= availableWidth);\r\n\r\n      return verticalFit && horizontalFit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\r\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\r\n   * right and bottom).\r\n   *\r\n   * @param start The starting point from which the overlay is pushed.\r\n   * @param overlay The overlay dimensions.\r\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\r\n   *     originPoint.\r\n   */\r\n  private _pushOverlayOnScreen(start: Point, overlay: ClientRect): Point {\r\n    const viewport = this._viewportRect;\r\n\r\n    // Determine how much the overlay goes outside the viewport on each side, which we'll use to\r\n    // decide which direction to push it.\r\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\r\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\r\n    const overflowTop = Math.max(viewport.top - start.y, 0);\r\n    const overflowLeft = Math.max(viewport.left - start.x, 0);\r\n\r\n    // Amount by which to push the overlay in each direction such that it remains on-screen.\r\n    let pushX, pushY = 0;\r\n\r\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\r\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\r\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\r\n    if (overlay.width <= viewport.width) {\r\n      pushX = overflowLeft || -overflowRight;\r\n    } else {\r\n      pushX = viewport.left - start.x;\r\n    }\r\n\r\n    if (overlay.height <= viewport.height) {\r\n      pushY = overflowTop || -overflowBottom;\r\n    } else {\r\n      pushY = viewport.top - start.y;\r\n    }\r\n\r\n    return {\r\n      x: start.x + pushX,\r\n      y: start.y + pushY,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Applies a computed position to the overlay and emits a position change.\r\n   * @param position The position preference\r\n   * @param originPoint The point on the origin element where the overlay is connected.\r\n   */\r\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\r\n    this._setTransformOrigin(position);\r\n    this._setOverlayElementStyles(originPoint, position);\r\n    this._setBoundingBoxStyles(originPoint, position);\r\n\r\n    // Save the last connected position in case the position needs to be re-calculated.\r\n    this._lastPosition = position;\r\n\r\n    // Notify that the position has been changed along with its change properties.\r\n    // We only emit if we've got any subscriptions, because the scroll visibility\r\n    // calculcations can be somewhat expensive.\r\n    if (this._positionChangeSubscriptions > 0) {\r\n      const scrollableViewProperties = this._getScrollVisibility();\r\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\r\n      this._positionChanges.next(changeEvent);\r\n    }\r\n\r\n    this._isInitialRender = false;\r\n  }\r\n\r\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\r\n  private _setTransformOrigin(position: ConnectedPosition) {\r\n    if (!this._transformOriginSelector) {\r\n      return;\r\n    }\r\n\r\n    const elements: NodeListOf<HTMLElement> =\r\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\r\n    let xOrigin: 'left' | 'right' | 'center';\r\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\r\n\r\n    if (position.overlayX === 'center') {\r\n      xOrigin = 'center';\r\n    } else if (this._isRtl()) {\r\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\r\n    } else {\r\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\r\n    }\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the position and size of the overlay's sizing container.\r\n   *\r\n   * This method does no measuring and applies no styles so that we can cheaply compute the\r\n   * bounds for all positions and choose the best fit based on these results.\r\n   */\r\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\r\n    const viewport = this._viewportRect;\r\n    const isRtl = this._isRtl();\r\n    let height, top, bottom;\r\n\r\n    if (position.overlayY === 'top') {\r\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\r\n      top = origin.y;\r\n      height = viewport.bottom - origin.y;\r\n    } else if (position.overlayY === 'bottom') {\r\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\r\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\r\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\r\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\r\n      height = viewport.height - bottom + this._viewportMargin;\r\n    } else {\r\n      // If neither top nor bottom, it means that the overlay\r\n      // is vertically centered on the origin point.\r\n      const smallestDistanceToViewportEdge =\r\n          Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\r\n      const previousHeight = this._lastBoundingBoxSize.height;\r\n\r\n      height = smallestDistanceToViewportEdge * 2;\r\n      top = origin.y - smallestDistanceToViewportEdge;\r\n\r\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\r\n        top = origin.y - (previousHeight / 2);\r\n      }\r\n    }\r\n\r\n    // The overlay is opening 'right-ward' (the content flows to the right).\r\n    const isBoundedByRightViewportEdge =\r\n        (position.overlayX === 'start' && !isRtl) ||\r\n        (position.overlayX === 'end' && isRtl);\r\n\r\n    // The overlay is opening 'left-ward' (the content flows to the left).\r\n    const isBoundedByLeftViewportEdge =\r\n        (position.overlayX === 'end' && !isRtl) ||\r\n        (position.overlayX === 'start' && isRtl);\r\n\r\n    let width, left, right;\r\n\r\n    if (isBoundedByLeftViewportEdge) {\r\n      right = viewport.right - origin.x + this._viewportMargin;\r\n      width = origin.x - viewport.left;\r\n    } else if (isBoundedByRightViewportEdge) {\r\n      left = origin.x;\r\n      width = viewport.right - origin.x;\r\n    } else {\r\n      // If neither start nor end, it means that the overlay\r\n      // is horizontally centered on the origin point.\r\n      const smallestDistanceToViewportEdge =\r\n          Math.min(viewport.right - origin.x, origin.x - viewport.top);\r\n      const previousWidth = this._lastBoundingBoxSize.width;\r\n\r\n      width = smallestDistanceToViewportEdge * 2;\r\n      left = origin.x - smallestDistanceToViewportEdge;\r\n\r\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\r\n        left = origin.x - (previousWidth / 2);\r\n      }\r\n    }\r\n\r\n    return {top, left, bottom, right, width, height};\r\n  }\r\n\r\n  /**\r\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\r\n   * origin's connection point and stetches to the bounds of the viewport.\r\n   *\r\n   * @param origin The point on the origin element where the overlay is connected.\r\n   * @param position The position preference\r\n   */\r\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\r\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\r\n\r\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\r\n    // when applying a new size.\r\n    if (!this._isInitialRender && !this._growAfterOpen) {\r\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\r\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\r\n    }\r\n\r\n    const styles = {} as CSSStyleDeclaration;\r\n\r\n    if (this._hasExactPosition()) {\r\n      styles.top = styles.left = '0';\r\n      styles.bottom = styles.right = '';\r\n      styles.width = styles.height = '100%';\r\n    } else {\r\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\r\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\r\n\r\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\r\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\r\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\r\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\r\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\r\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\r\n\r\n      // Push the pane content towards the proper direction.\r\n      if (position.overlayX === 'center') {\r\n        styles.alignItems = 'center';\r\n      } else {\r\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\r\n      }\r\n\r\n      if (position.overlayY === 'center') {\r\n        styles.justifyContent = 'center';\r\n      } else {\r\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\r\n      }\r\n\r\n      if (maxHeight) {\r\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\r\n      }\r\n\r\n      if (maxWidth) {\r\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\r\n      }\r\n    }\r\n\r\n    this._lastBoundingBoxSize = boundingBoxRect;\r\n\r\n    extendStyles(this._boundingBox!.style, styles);\r\n  }\r\n\r\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\r\n  private _resetBoundingBoxStyles() {\r\n    extendStyles(this._boundingBox!.style, {\r\n      top: '0',\r\n      left: '0',\r\n      right: '0',\r\n      bottom: '0',\r\n      height: '',\r\n      width: '',\r\n      alignItems: '',\r\n      justifyContent: '',\r\n    } as CSSStyleDeclaration);\r\n  }\r\n\r\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\r\n  private _resetOverlayElementStyles() {\r\n    extendStyles(this._pane.style, {\r\n      top: '',\r\n      left: '',\r\n      bottom: '',\r\n      right: '',\r\n      position: '',\r\n    } as CSSStyleDeclaration);\r\n  }\r\n\r\n  /** Sets positioning styles to the overlay element. */\r\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\r\n    const styles = {} as CSSStyleDeclaration;\r\n\r\n    if (this._hasExactPosition()) {\r\n      extendStyles(styles, this._getExactOverlayY(position, originPoint));\r\n      extendStyles(styles, this._getExactOverlayX(position, originPoint));\r\n    } else {\r\n      styles.position = 'static';\r\n    }\r\n\r\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\r\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\r\n    // off the position. We also can't use margins, because they won't have an effect in some\r\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\r\n    // better both with flexible and non-flexible positioning.\r\n    let transformString = '';\r\n    let offsetX = this._getOffset(position, 'x');\r\n    let offsetY = this._getOffset(position, 'y');\r\n\r\n    if (offsetX) {\r\n      transformString += `translateX(${offsetX}px) `;\r\n    }\r\n\r\n    if (offsetY) {\r\n      transformString += `translateY(${offsetY}px)`;\r\n    }\r\n\r\n    styles.transform = transformString.trim();\r\n\r\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\r\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\r\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\r\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\r\n      styles.maxHeight = '';\r\n    }\r\n\r\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\r\n      styles.maxWidth = '';\r\n    }\r\n\r\n    extendStyles(this._pane.style, styles);\r\n  }\r\n\r\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\r\n  private _getExactOverlayY(position: ConnectedPosition, originPoint: Point) {\r\n    // Reset any existing styles. This is necessary in case the\r\n    // preferred position has changed since the last `apply`.\r\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\r\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\r\n\r\n    if (this._isPushed) {\r\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\r\n    }\r\n\r\n    // @breaking-change 7.0.0 Currently the `_overlayContainer` is optional in order to avoid a\r\n    // breaking change. The null check here can be removed once the `_overlayContainer` becomes\r\n    // a required parameter.\r\n    let virtualKeyboardOffset = this._overlayContainer ?\r\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\r\n\r\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\r\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\r\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\r\n    // otherwise our positioning will be thrown off.\r\n    overlayPoint.y -= virtualKeyboardOffset;\r\n\r\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\r\n    // above or below the origin and the direction in which the element will expand.\r\n    if (position.overlayY === 'bottom') {\r\n      // When using `bottom`, we adjust the y position such that it is the distance\r\n      // from the bottom of the viewport rather than the top.\r\n      const documentHeight = this._document.documentElement.clientHeight;\r\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\r\n    } else {\r\n      styles.top = coerceCssPixelValue(overlayPoint.y);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\r\n  private _getExactOverlayX(position: ConnectedPosition, originPoint: Point) {\r\n    // Reset any existing styles. This is necessary in case the preferred position has\r\n    // changed since the last `apply`.\r\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\r\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\r\n\r\n    if (this._isPushed) {\r\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\r\n    }\r\n\r\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\r\n    // or \"after\" the origin, which determines the direction in which the element will expand.\r\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\r\n    // page is in RTL or LTR.\r\n    let horizontalStyleProperty: 'left' | 'right';\r\n\r\n    if (this._isRtl()) {\r\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\r\n    } else {\r\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\r\n    }\r\n\r\n    // When we're setting `right`, we adjust the x position such that it is the distance\r\n    // from the right edge of the viewport rather than the left edge.\r\n    if (horizontalStyleProperty === 'right') {\r\n      const documentWidth = this._document.documentElement.clientWidth;\r\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\r\n    } else {\r\n      styles.left = coerceCssPixelValue(overlayPoint.x);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\r\n   * or completely outside the view of any of the strategy's scrollables.\r\n   */\r\n  private _getScrollVisibility(): ScrollingVisibility {\r\n    // Note: needs fresh rects since the position could've changed.\r\n    const originBounds = this._origin.getBoundingClientRect();\r\n    const overlayBounds =  this._pane.getBoundingClientRect();\r\n\r\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\r\n    // every time, we should be able to use the scrollTop of the containers if the size of those\r\n    // containers hasn't changed.\r\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\r\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\r\n    });\r\n\r\n    return {\r\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\r\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\r\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\r\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\r\n    };\r\n  }\r\n\r\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\r\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\r\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\r\n      return currentValue - Math.max(currentOverflow, 0);\r\n    }, length);\r\n  }\r\n\r\n  /** Narrows the given viewport rect by the current _viewportMargin. */\r\n  private _getNarrowedViewportRect(): ClientRect {\r\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\r\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\r\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\r\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\r\n    // 100% `width` and `height` which don't include the scrollbar either.\r\n    const width = this._document.documentElement.clientWidth;\r\n    const height = this._document.documentElement.clientHeight;\r\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n    return {\r\n      top:    scrollPosition.top + this._viewportMargin,\r\n      left:   scrollPosition.left + this._viewportMargin,\r\n      right:  scrollPosition.left + width - this._viewportMargin,\r\n      bottom: scrollPosition.top + height - this._viewportMargin,\r\n      width:  width  - (2 * this._viewportMargin),\r\n      height: height - (2 * this._viewportMargin),\r\n    };\r\n  }\r\n\r\n  /** Whether the we're dealing with an RTL context */\r\n  private _isRtl() {\r\n    return this._overlayRef.getDirection() === 'rtl';\r\n  }\r\n\r\n  /** Determines whether the overlay uses exact or flexible positioning. */\r\n  private _hasExactPosition() {\r\n    return !this._hasFlexibleDimensions || this._isPushed;\r\n  }\r\n\r\n  /** Retrieves the offset of a position along the x or y axis. */\r\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\r\n    if (axis === 'x') {\r\n      // We don't do something like `position['offset' + axis]` in\r\n      // order to avoid breking minifiers that rename properties.\r\n      return position.offsetX == null ? this._offsetX : position.offsetX;\r\n    }\r\n\r\n    return position.offsetY == null ? this._offsetY : position.offsetY;\r\n  }\r\n\r\n  /** Validates that the current position match the expected values. */\r\n  private _validatePositions(): void {\r\n    if (!this._preferredPositions.length) {\r\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\r\n    }\r\n\r\n    // TODO(crisbeto): remove these once Angular's template type\r\n    // checking is advanced enough to catch these cases.\r\n    this._preferredPositions.forEach(pair => {\r\n      validateHorizontalPosition('originX', pair.originX);\r\n      validateVerticalPosition('originY', pair.originY);\r\n      validateHorizontalPosition('overlayX', pair.overlayX);\r\n      validateVerticalPosition('overlayY', pair.overlayY);\r\n    });\r\n  }\r\n}\r\n\r\n/** A simple (x, y) coordinate. */\r\ninterface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\r\ninterface OverlayFit {\r\n  /** Whether the overlay fits completely in the viewport. */\r\n  isCompletelyWithinViewport: boolean;\r\n\r\n  /** Whether the overlay fits in the viewport on the y-axis. */\r\n  fitsInViewportVertically: boolean;\r\n\r\n  /** Whether the overlay fits in the viewport on the x-axis. */\r\n  fitsInViewportHorizontally: boolean;\r\n\r\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\r\n  visibleArea: number;\r\n}\r\n\r\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\r\ninterface FallbackPosition {\r\n  position: ConnectedPosition;\r\n  originPoint: Point;\r\n  overlayPoint: Point;\r\n  overlayFit: OverlayFit;\r\n  overlayRect: ClientRect;\r\n}\r\n\r\n/** Position and size of the overlay sizing wrapper for a specific position. */\r\ninterface BoundingBoxRect {\r\n  top: number;\r\n  left: number;\r\n  bottom: number;\r\n  right: number;\r\n  height: number;\r\n  width: number;\r\n}\r\n\r\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\r\ninterface FlexibleFit {\r\n  position: ConnectedPosition;\r\n  origin: Point;\r\n  overlayRect: ClientRect;\r\n  boundingBoxRect: BoundingBoxRect;\r\n}\r\n\r\n/** A connected position as specified by the user. */\r\nexport interface ConnectedPosition {\r\n  originX: 'start' | 'center' | 'end';\r\n  originY: 'top' | 'center' | 'bottom';\r\n\r\n  overlayX: 'start' | 'center' | 'end';\r\n  overlayY: 'top' | 'center' | 'bottom';\r\n\r\n  weight?: number;\r\n  offsetX?: number;\r\n  offsetY?: number;\r\n}\r\n\r\n/** Shallow-extends a stylesheet object with another stylesheet object. */\r\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\r\n  for (let key in source) {\r\n    if (source.hasOwnProperty(key)) {\r\n      dest[key] = source[key];\r\n    }\r\n  }\r\n\r\n  return dest;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollStrategy} from './scroll-strategy';\r\n\r\n/** Scroll strategy that doesn't do anything. */\r\nexport class NoopScrollStrategy implements ScrollStrategy {\r\n  /** Does nothing, as this scroll strategy is a no-op. */\r\n  enable() { }\r\n  /** Does nothing, as this scroll strategy is a no-op. */\r\n  disable() { }\r\n  /** Does nothing, as this scroll strategy is a no-op. */\r\n  attach() { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position/position-strategy';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ScrollStrategy} from './scroll/scroll-strategy';\r\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\r\n\r\n\r\n/** Initial configuration used when creating an overlay. */\r\nexport class OverlayConfig {\r\n  /** Strategy with which to position the overlay. */\r\n  positionStrategy?: PositionStrategy;\r\n\r\n  /** Strategy to be used when handling scroll events while the overlay is open. */\r\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\r\n\r\n  /** Custom class to add to the overlay pane. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the overlay has a backdrop. */\r\n  hasBackdrop?: boolean = false;\r\n\r\n  /** Custom class to add to the backdrop */\r\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\r\n\r\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  width?: number | string;\r\n\r\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  height?: number | string;\r\n\r\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  minWidth?: number | string;\r\n\r\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  minHeight?: number | string;\r\n\r\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  maxWidth?: number | string;\r\n\r\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  maxHeight?: number | string;\r\n\r\n  /**\r\n   * Direction of the text in the overlay panel. If a `Directionality` instance\r\n   * is passed in, the overlay will handle changes to its value automatically.\r\n   */\r\n  direction?: Direction | Directionality;\r\n\r\n  constructor(config?: OverlayConfig) {\r\n    if (config) {\r\n      Object.keys(config)\r\n        .filter(key => typeof config[key] !== 'undefined')\r\n        .forEach(key => this[key] = config[key]);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollStrategy} from './scroll-strategy';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\r\n\r\n/**\r\n * Strategy that will prevent the user from scrolling while the overlay is visible.\r\n */\r\nexport class BlockScrollStrategy implements ScrollStrategy {\r\n  private _previousHTMLStyles = { top: '', left: '' };\r\n  private _previousScrollPosition: { top: number, left: number };\r\n  private _isEnabled = false;\r\n  private _document: Document;\r\n\r\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach() { }\r\n\r\n  /** Blocks page-level scroll while the attached overlay is open. */\r\n  enable() {\r\n    if (this._canBeEnabled()) {\r\n      const root = this._document.documentElement;\r\n\r\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n      // Cache the previous inline styles in case the user had set them.\r\n      this._previousHTMLStyles.left = root.style.left || '';\r\n      this._previousHTMLStyles.top = root.style.top || '';\r\n\r\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\r\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\r\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\r\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\r\n      root.classList.add('cdk-global-scrollblock');\r\n      this._isEnabled = true;\r\n    }\r\n  }\r\n\r\n  /** Unblocks page-level scroll while the attached overlay is open. */\r\n  disable() {\r\n    if (this._isEnabled) {\r\n      const html = this._document.documentElement;\r\n      const body = this._document.body;\r\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\r\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\r\n\r\n      this._isEnabled = false;\r\n\r\n      html.style.left = this._previousHTMLStyles.left;\r\n      html.style.top = this._previousHTMLStyles.top;\r\n      html.classList.remove('cdk-global-scrollblock');\r\n\r\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\r\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\r\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\r\n\r\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\r\n\r\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior;\r\n      body.style['scrollBehavior'] = previousBodyScrollBehavior;\r\n    }\r\n  }\r\n\r\n  private _canBeEnabled(): boolean {\r\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\r\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\r\n    // scrolling multiple times.\r\n    const html = this._document.documentElement;\r\n\r\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\r\n      return false;\r\n    }\r\n\r\n    const body = this._document.body;\r\n    const viewport = this._viewportRuler.getViewportSize();\r\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgZone} from '@angular/core';\r\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {Subscription} from 'rxjs';\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\n\r\n/**\r\n * Config options for the CloseScrollStrategy.\r\n */\r\nexport interface CloseScrollStrategyConfig {\r\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\r\n  threshold?: number;\r\n}\r\n\r\n/**\r\n * Strategy that will close the overlay as soon as the user starts scrolling.\r\n */\r\nexport class CloseScrollStrategy implements ScrollStrategy {\r\n  private _scrollSubscription: Subscription|null = null;\r\n  private _overlayRef: OverlayReference;\r\n  private _initialScrollPosition: number;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _config?: CloseScrollStrategyConfig) {}\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference) {\r\n    if (this._overlayRef) {\r\n      throw getMatScrollStrategyAlreadyAttachedError();\r\n    }\r\n\r\n    this._overlayRef = overlayRef;\r\n  }\r\n\r\n  /** Enables the closing of the attached overlay on scroll. */\r\n  enable() {\r\n    if (this._scrollSubscription) {\r\n      return;\r\n    }\r\n\r\n    const stream = this._scrollDispatcher.scrolled(0);\r\n\r\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\r\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\r\n\r\n      this._scrollSubscription = stream.subscribe(() => {\r\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\r\n\r\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\r\n          this._detach();\r\n        } else {\r\n          this._overlayRef.updatePosition();\r\n        }\r\n      });\r\n    } else {\r\n      this._scrollSubscription = stream.subscribe(this._detach);\r\n    }\r\n  }\r\n\r\n  /** Disables the closing the attached overlay on scroll. */\r\n  disable() {\r\n    if (this._scrollSubscription) {\r\n      this._scrollSubscription.unsubscribe();\r\n      this._scrollSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Detaches the overlay ref and disables the scroll strategy. */\r\n  private _detach = () => {\r\n    this.disable();\r\n\r\n    if (this._overlayRef.hasAttached()) {\r\n      this._ngZone.run(() => this._overlayRef.detach());\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgZone} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\r\n\r\n/**\r\n * Config options for the RepositionScrollStrategy.\r\n */\r\nexport interface RepositionScrollStrategyConfig {\r\n  /** Time in milliseconds to throttle the scroll events. */\r\n  scrollThrottle?: number;\r\n\r\n  /** Whether to close the overlay once the user has scrolled away completely. */\r\n  autoClose?: boolean;\r\n}\r\n\r\n/**\r\n * Strategy that will update the element position as the user is scrolling.\r\n */\r\nexport class RepositionScrollStrategy implements ScrollStrategy {\r\n  private _scrollSubscription: Subscription|null = null;\r\n  private _overlayRef: OverlayReference;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _ngZone: NgZone,\r\n    private _config?: RepositionScrollStrategyConfig) { }\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference) {\r\n    if (this._overlayRef) {\r\n      throw getMatScrollStrategyAlreadyAttachedError();\r\n    }\r\n\r\n    this._overlayRef = overlayRef;\r\n  }\r\n\r\n  /** Enables repositioning of the attached overlay on scroll. */\r\n  enable() {\r\n    if (!this._scrollSubscription) {\r\n      const throttle = this._config ? this._config.scrollThrottle : 0;\r\n\r\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\r\n        this._overlayRef.updatePosition();\r\n\r\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\r\n        if (this._config && this._config.autoClose) {\r\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\r\n          const {width, height} = this._viewportRuler.getViewportSize();\r\n\r\n          // TODO(crisbeto): include all ancestor scroll containers here once\r\n          // we have a way of exposing the trigger element to the scroll strategy.\r\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\r\n\r\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\r\n            this.disable();\r\n            this._ngZone.run(() => this._overlayRef.detach());\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Disables repositioning of the attached overlay on scroll. */\r\n  disable() {\r\n    if (this._scrollSubscription) {\r\n      this._scrollSubscription.unsubscribe();\r\n      this._scrollSubscription = null;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable, NgZone} from '@angular/core';\r\nimport {BlockScrollStrategy} from './block-scroll-strategy';\r\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\r\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\r\nimport {\r\n  RepositionScrollStrategy,\r\n  RepositionScrollStrategyConfig,\r\n} from './reposition-scroll-strategy';\r\n\r\n\r\n/**\r\n * Options for how an overlay will handle scrolling.\r\n *\r\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\r\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class ScrollStrategyOptions {\r\n  private _document: Document;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) document: any) {\r\n      this._document = document;\r\n    }\r\n\r\n  /** Do nothing on scroll. */\r\n  noop = () => new NoopScrollStrategy();\r\n\r\n  /**\r\n   * Close the overlay as soon as the user scrolls.\r\n   * @param config Configuration to be used inside the scroll strategy.\r\n   */\r\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\r\n      this._ngZone, this._viewportRuler, config)\r\n\r\n  /** Block scrolling. */\r\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\r\n\r\n  /**\r\n   * Update the overlay's position on scroll.\r\n   * @param config Configuration to be used inside the scroll strategy.\r\n   * Allows debouncing the reposition calls.\r\n   */\r\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\r\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\r\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\r\nimport {Observable, Subject, merge} from 'rxjs';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\r\nimport {OverlayReference} from './overlay-reference';\r\n\r\n\r\n/** An object where all of its properties cannot be written. */\r\nexport type ImmutableObject<T> = {\r\n  readonly [P in keyof T]: T[P];\r\n};\r\n\r\n/**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nexport class OverlayRef implements PortalOutlet, OverlayReference {\r\n  private _backdropElement: HTMLElement | null = null;\r\n  private _backdropClick: Subject<MouseEvent> = new Subject();\r\n  private _attachments = new Subject<void>();\r\n  private _detachments = new Subject<void>();\r\n\r\n  /**\r\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\r\n   * the `_host` to its original position in the DOM when it gets re-attached.\r\n   */\r\n  private _previousHostParent: HTMLElement;\r\n  private _keydownEventsObservable: Observable<KeyboardEvent> = Observable.create(observer => {\r\n    const subscription = this._keydownEvents.subscribe(observer);\r\n    this._keydownEventSubscriptions++;\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      this._keydownEventSubscriptions--;\r\n    };\r\n  });\r\n\r\n  /** Stream of keydown events dispatched to this overlay. */\r\n  _keydownEvents = new Subject<KeyboardEvent>();\r\n\r\n  /** Amount of subscriptions to the keydown events. */\r\n  _keydownEventSubscriptions = 0;\r\n\r\n  constructor(\r\n      private _portalOutlet: PortalOutlet,\r\n      private _host: HTMLElement,\r\n      private _pane: HTMLElement,\r\n      private _config: ImmutableObject<OverlayConfig>,\r\n      private _ngZone: NgZone,\r\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\r\n      private _document: Document) {\r\n\r\n    if (_config.scrollStrategy) {\r\n      _config.scrollStrategy.attach(this);\r\n    }\r\n  }\r\n\r\n  /** The overlay's HTML element */\r\n  get overlayElement(): HTMLElement {\r\n    return this._pane;\r\n  }\r\n\r\n  /** The overlay's backdrop HTML element. */\r\n  get backdropElement(): HTMLElement | null {\r\n    return this._backdropElement;\r\n  }\r\n\r\n  /**\r\n   * Wrapper around the panel element. Can be used for advanced\r\n   * positioning where a wrapper with specific styling is\r\n   * required around the overlay pane.\r\n   */\r\n  get hostElement(): HTMLElement {\r\n    return this._host;\r\n  }\r\n\r\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\r\n  attach(portal: any): any;\r\n\r\n  /**\r\n   * Attaches content, given via a Portal, to the overlay.\r\n   * If the overlay is configured to have a backdrop, it will be created.\r\n   *\r\n   * @param portal Portal instance to which to attach the overlay.\r\n   * @returns The portal attachment result.\r\n   */\r\n  attach(portal: Portal<any>): any {\r\n    let attachResult = this._portalOutlet.attach(portal);\r\n\r\n    if (this._config.positionStrategy) {\r\n      this._config.positionStrategy.attach(this);\r\n    }\r\n\r\n    // Update the pane element with the given configuration.\r\n    if (!this._host.parentElement && this._previousHostParent) {\r\n      this._previousHostParent.appendChild(this._host);\r\n    }\r\n\r\n    this._updateStackingOrder();\r\n    this._updateElementSize();\r\n    this._updateElementDirection();\r\n\r\n    if (this._config.scrollStrategy) {\r\n      this._config.scrollStrategy.enable();\r\n    }\r\n\r\n    // Update the position once the zone is stable so that the overlay will be fully rendered\r\n    // before attempting to position it, as the position may depend on the size of the rendered\r\n    // content.\r\n    this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        // The overlay could've been detached before the zone has stabilized.\r\n        if (this.hasAttached()) {\r\n          this.updatePosition();\r\n        }\r\n      });\r\n\r\n    // Enable pointer events for the overlay pane element.\r\n    this._togglePointerEvents(true);\r\n\r\n    if (this._config.hasBackdrop) {\r\n      this._attachBackdrop();\r\n    }\r\n\r\n    if (this._config.panelClass) {\r\n      this._toggleClasses(this._pane, this._config.panelClass, true);\r\n    }\r\n\r\n    // Only emit the `attachments` event once all other setup is done.\r\n    this._attachments.next();\r\n\r\n    // Track this overlay by the keyboard dispatcher\r\n    this._keyboardDispatcher.add(this);\r\n\r\n    return attachResult;\r\n  }\r\n\r\n  /**\r\n   * Detaches an overlay from a portal.\r\n   * @returns The portal detachment result.\r\n   */\r\n  detach(): any {\r\n    if (!this.hasAttached()) {\r\n      return;\r\n    }\r\n\r\n    this.detachBackdrop();\r\n\r\n    // When the overlay is detached, the pane element should disable pointer events.\r\n    // This is necessary because otherwise the pane element will cover the page and disable\r\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\r\n    this._togglePointerEvents(false);\r\n\r\n    if (this._config.positionStrategy && this._config.positionStrategy.detach) {\r\n      this._config.positionStrategy.detach();\r\n    }\r\n\r\n    if (this._config.scrollStrategy) {\r\n      this._config.scrollStrategy.disable();\r\n    }\r\n\r\n    if (this._config.panelClass) {\r\n      this._toggleClasses(this._pane, this._config.panelClass, false);\r\n    }\r\n\r\n    const detachmentResult = this._portalOutlet.detach();\r\n\r\n    // Only emit after everything is detached.\r\n    this._detachments.next();\r\n\r\n    // Remove this overlay from keyboard dispatcher tracking.\r\n    this._keyboardDispatcher.remove(this);\r\n\r\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets rendered,\r\n    // even though it's transparent and unclickable. We can't remove the host here immediately,\r\n    // because the overlay pane's content might still be animating. This stream helps us avoid\r\n    // interrupting the animation by waiting for the pane to become empty.\r\n    const subscription = this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(takeUntil(merge(this._attachments, this._detachments)))\r\n      .subscribe(() => {\r\n        // Needs a couple of checks for the pane and host, because\r\n        // they may have been removed by the time the zone stabilizes.\r\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\r\n          if (this._host && this._host.parentElement) {\r\n            this._previousHostParent = this._host.parentElement;\r\n            this._previousHostParent.removeChild(this._host);\r\n          }\r\n\r\n          subscription.unsubscribe();\r\n        }\r\n      });\r\n\r\n    return detachmentResult;\r\n  }\r\n\r\n  /** Cleans up the overlay from the DOM. */\r\n  dispose(): void {\r\n    const isAttached = this.hasAttached();\r\n\r\n    if (this._config.positionStrategy) {\r\n      this._config.positionStrategy.dispose();\r\n    }\r\n\r\n    if (this._config.scrollStrategy) {\r\n      this._config.scrollStrategy.disable();\r\n    }\r\n\r\n    this.detachBackdrop();\r\n    this._keyboardDispatcher.remove(this);\r\n    this._portalOutlet.dispose();\r\n    this._attachments.complete();\r\n    this._backdropClick.complete();\r\n    this._keydownEvents.complete();\r\n\r\n    if (this._host && this._host.parentNode) {\r\n      this._host.parentNode.removeChild(this._host);\r\n      this._host = null!;\r\n    }\r\n\r\n    this._previousHostParent = this._pane = null!;\r\n\r\n    if (isAttached) {\r\n      this._detachments.next();\r\n    }\r\n\r\n    this._detachments.complete();\r\n  }\r\n\r\n  /** Whether the overlay has attached content. */\r\n  hasAttached(): boolean {\r\n    return this._portalOutlet.hasAttached();\r\n  }\r\n\r\n  /** Gets an observable that emits when the backdrop has been clicked. */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._backdropClick.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been attached. */\r\n  attachments(): Observable<void> {\r\n    return this._attachments.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been detached. */\r\n  detachments(): Observable<void> {\r\n    return this._detachments.asObservable();\r\n  }\r\n\r\n  /** Gets an observable of keydown events targeted to this overlay. */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._keydownEventsObservable;\r\n  }\r\n\r\n  /** Gets the the current overlay configuration, which is immutable. */\r\n  getConfig(): OverlayConfig {\r\n    return this._config;\r\n  }\r\n\r\n  /** Updates the position of the overlay based on the position strategy. */\r\n  updatePosition() {\r\n    if (this._config.positionStrategy) {\r\n      this._config.positionStrategy.apply();\r\n    }\r\n  }\r\n\r\n  /** Update the size properties of the overlay. */\r\n  updateSize(sizeConfig: OverlaySizeConfig) {\r\n    this._config = {...this._config, ...sizeConfig};\r\n    this._updateElementSize();\r\n  }\r\n\r\n  /** Sets the LTR/RTL direction for the overlay. */\r\n  setDirection(dir: Direction | Directionality) {\r\n    this._config = {...this._config, direction: dir};\r\n    this._updateElementDirection();\r\n  }\r\n\r\n  /**\r\n   * Returns the layout direction of the overlay panel.\r\n   */\r\n  getDirection(): Direction {\r\n    const direction = this._config.direction;\r\n\r\n    if (!direction) {\r\n      return 'ltr';\r\n    }\r\n\r\n    return typeof direction === 'string' ? direction : direction.value;\r\n  }\r\n\r\n  /** Updates the text direction of the overlay panel. */\r\n  private _updateElementDirection() {\r\n    this._host.setAttribute('dir', this.getDirection());\r\n  }\r\n\r\n  /** Updates the size of the overlay element based on the overlay config. */\r\n  private _updateElementSize() {\r\n    const style = this._pane.style;\r\n\r\n    style.width = coerceCssPixelValue(this._config.width);\r\n    style.height = coerceCssPixelValue(this._config.height);\r\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\r\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\r\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\r\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\r\n  }\r\n\r\n  /** Toggles the pointer events for the overlay pane element. */\r\n  private _togglePointerEvents(enablePointer: boolean) {\r\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\r\n  }\r\n\r\n  /** Attaches a backdrop for this overlay. */\r\n  private _attachBackdrop() {\r\n    const showingClass = 'cdk-overlay-backdrop-showing';\r\n\r\n    this._backdropElement = this._document.createElement('div');\r\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\r\n\r\n    if (this._config.backdropClass) {\r\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\r\n    }\r\n\r\n    // Insert the backdrop before the pane in the DOM order,\r\n    // in order to handle stacked overlays properly.\r\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\r\n\r\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\r\n    // action desired when such a click occurs (usually closing the overlay).\r\n    this._backdropElement.addEventListener('click',\r\n        (event: MouseEvent) => this._backdropClick.next(event));\r\n\r\n    // Add class to fade-in the backdrop after one frame.\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => {\r\n          if (this._backdropElement) {\r\n            this._backdropElement.classList.add(showingClass);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      this._backdropElement.classList.add(showingClass);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the stacking order of the element, moving it to the top if necessary.\r\n   * This is required in cases where one overlay was detached, while another one,\r\n   * that should be behind it, was destroyed. The next time both of them are opened,\r\n   * the stacking will be wrong, because the detached element's pane will still be\r\n   * in its original DOM position.\r\n   */\r\n  private _updateStackingOrder() {\r\n    if (this._host.nextSibling) {\r\n      this._host.parentNode!.appendChild(this._host);\r\n    }\r\n  }\r\n\r\n  /** Detaches the backdrop (if any) associated with the overlay. */\r\n  detachBackdrop(): void {\r\n    let backdropToDetach = this._backdropElement;\r\n\r\n    if (backdropToDetach) {\r\n      let timeoutId: number;\r\n      let finishDetach = () => {\r\n        // It may not be attached to anything in certain cases (e.g. unit tests).\r\n        if (backdropToDetach && backdropToDetach.parentNode) {\r\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\r\n        }\r\n\r\n        // It is possible that a new portal has been attached to this overlay since we started\r\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\r\n        // is still the same instance that we started to remove.\r\n        if (this._backdropElement == backdropToDetach) {\r\n          this._backdropElement = null;\r\n        }\r\n\r\n        clearTimeout(timeoutId);\r\n      };\r\n\r\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\r\n\r\n      if (this._config.backdropClass) {\r\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\r\n      }\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        backdropToDetach!.addEventListener('transitionend', finishDetach);\r\n      });\r\n\r\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\r\n      // In this case we make it unclickable and we try to remove it after a delay.\r\n      backdropToDetach.style.pointerEvents = 'none';\r\n\r\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\r\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\r\n      // either async or fakeAsync.\r\n      timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\r\n    }\r\n  }\r\n\r\n  /** Toggles a single CSS class or an array of classes on an element. */\r\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\r\n    const classList = element.classList;\r\n\r\n    coerceArray(cssClasses).forEach(cssClass => {\r\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\r\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/** Size properties for an overlay. */\r\nexport interface OverlaySizeConfig {\r\n  width?: number | string;\r\n  height?: number | string;\r\n  minWidth?: number | string;\r\n  minHeight?: number | string;\r\n  maxWidth?: number | string;\r\n  maxHeight?: number | string;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {ElementRef} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {\r\n  ConnectedOverlayPositionChange,\r\n  ConnectionPositionPair,\r\n  OriginConnectionPosition,\r\n  OverlayConnectionPosition,\r\n} from './connected-position';\r\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\r\nimport {PositionStrategy} from './position-strategy';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative to some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\r\n * @breaking-change 7.0.0\r\n */\r\nexport class ConnectedPositionStrategy implements PositionStrategy {\r\n  /**\r\n   * Reference to the underlying position strategy to which all the API calls are proxied.\r\n   * @docs-private\r\n   */\r\n  _positionStrategy: FlexibleConnectedPositionStrategy;\r\n\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n\r\n  private _direction: Direction | null;\r\n\r\n  /** Whether the we're dealing with an RTL context */\r\n  get _isRtl() {\r\n    return this._overlayRef.getDirection() === 'rtl';\r\n  }\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  _preferredPositions: ConnectionPositionPair[] = [];\r\n\r\n  /** Emits an event when the connection point changes. */\r\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\r\n    return this._positionStrategy.positionChanges;\r\n  }\r\n\r\n  constructor(\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition,\r\n      connectedTo: ElementRef,\r\n      viewportRuler: ViewportRuler,\r\n      document: Document,\r\n      // @breaking-change 7.0.0 `platform` parameter to be made required.\r\n      platform?: Platform) {\r\n\r\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\r\n    // the extra logic, we create an instance of the positioning strategy that has some\r\n    // defaults that make it behave as the old position strategy and to which we'll\r\n    // proxy all of the API calls.\r\n    this._positionStrategy =\r\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\r\n        .withFlexibleDimensions(false)\r\n        .withPush(false)\r\n        .withViewportMargin(0);\r\n\r\n    this.withFallbackPosition(originPos, overlayPos);\r\n  }\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  get positions(): ConnectionPositionPair[] {\r\n    return this._preferredPositions;\r\n  }\r\n\r\n  /** Attach this position strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference): void {\r\n    this._overlayRef = overlayRef;\r\n    this._positionStrategy.attach(overlayRef);\r\n\r\n    if (this._direction) {\r\n      overlayRef.setDirection(this._direction);\r\n      this._direction = null;\r\n    }\r\n  }\r\n\r\n  /** Disposes all resources used by the position strategy. */\r\n  dispose() {\r\n    this._positionStrategy.dispose();\r\n  }\r\n\r\n  /** @docs-private */\r\n  detach() {\r\n    this._positionStrategy.detach();\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the overlay element, using whichever preferred position relative\r\n   * to the origin fits on-screen.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    this._positionStrategy.apply();\r\n  }\r\n\r\n  /**\r\n   * Re-positions the overlay element with the trigger in its last calculated position,\r\n   * even if a position higher in the \"preferred positions\" list would now fit. This\r\n   * allows one to re-align the panel without changing the orientation of the panel.\r\n   */\r\n  recalculateLastPosition(): void {\r\n    this._positionStrategy.reapplyLastPosition();\r\n  }\r\n\r\n  /**\r\n   * Sets the list of Scrollable containers that host the origin element so that\r\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n   * Scrollable must be an ancestor element of the strategy's origin element.\r\n   */\r\n  withScrollableContainers(scrollables: CdkScrollable[]) {\r\n    this._positionStrategy.withScrollableContainers(scrollables);\r\n  }\r\n\r\n  /**\r\n   * Adds a new preferred fallback position.\r\n   * @param originPos\r\n   * @param overlayPos\r\n   */\r\n  withFallbackPosition(\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition,\r\n      offsetX?: number,\r\n      offsetY?: number): this {\r\n\r\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\r\n    this._preferredPositions.push(position);\r\n    this._positionStrategy.withPositions(this._preferredPositions);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the layout direction so the overlay's position can be adjusted to match.\r\n   * @param dir New layout direction.\r\n   */\r\n  withDirection(dir: 'ltr' | 'rtl'): this {\r\n    // Since the direction might be declared before the strategy is attached,\r\n    // we save the value in a temporary property and we'll transfer it to the\r\n    // overlay ref on attachment.\r\n    if (this._overlayRef) {\r\n      this._overlayRef.setDirection(dir);\r\n    } else {\r\n      this._direction = dir;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an offset for the overlay's connection point on the x-axis\r\n   * @param offset New offset in the X axis.\r\n   */\r\n  withOffsetX(offset: number): this {\r\n    this._positionStrategy.withDefaultOffsetX(offset);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an offset for the overlay's connection point on the y-axis\r\n   * @param  offset New offset in the Y axis.\r\n   */\r\n  withOffsetY(offset: number): this {\r\n    this._positionStrategy.withDefaultOffsetY(offset);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the overlay's position should be locked in after it is positioned\r\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n   * when the position is re-applied (e.g. when the user scrolls away).\r\n   * @param isLocked Whether the overlay should locked in.\r\n   */\r\n  withLockedPosition(isLocked: boolean): this {\r\n    this._positionStrategy.withLockedPosition(isLocked);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Overwrites the current set of positions with an array of new ones.\r\n   * @param positions Position pairs to be set on the strategy.\r\n   */\r\n  withPositions(positions: ConnectionPositionPair[]): this {\r\n    this._preferredPositions = positions.slice();\r\n    this._positionStrategy.withPositions(this._preferredPositions);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the origin element, relative to which to position the overlay.\r\n   * @param origin Reference to the new origin element.\r\n   */\r\n  setOrigin(origin: ElementRef): this {\r\n    this._positionStrategy.setOrigin(origin);\r\n    return this;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * explicit position relative to the browser's viewport. We use flexbox, instead of\r\n * transforms, in order to avoid issues with subpixel rendering which can cause the\r\n * element to become blurry.\r\n */\r\nexport class GlobalPositionStrategy implements PositionStrategy {\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n  private _cssPosition: string = 'static';\r\n  private _topOffset: string = '';\r\n  private _bottomOffset: string = '';\r\n  private _leftOffset: string = '';\r\n  private _rightOffset: string = '';\r\n  private _alignItems: string = '';\r\n  private _justifyContent: string = '';\r\n  private _width: string = '';\r\n  private _height: string = '';\r\n\r\n  attach(overlayRef: OverlayReference): void {\r\n    const config = overlayRef.getConfig();\r\n\r\n    this._overlayRef = overlayRef;\r\n\r\n    if (this._width && !config.width) {\r\n      overlayRef.updateSize({width: this._width});\r\n    }\r\n\r\n    if (this._height && !config.height) {\r\n      overlayRef.updateSize({height: this._height});\r\n    }\r\n\r\n    overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\r\n  }\r\n\r\n  /**\r\n   * Sets the top position of the overlay. Clears any previously set vertical position.\r\n   * @param value New top offset.\r\n   */\r\n  top(value: string = ''): this {\r\n    this._bottomOffset = '';\r\n    this._topOffset = value;\r\n    this._alignItems = 'flex-start';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\r\n   * @param value New left offset.\r\n   */\r\n  left(value: string = ''): this {\r\n    this._rightOffset = '';\r\n    this._leftOffset = value;\r\n    this._justifyContent = 'flex-start';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\r\n   * @param value New bottom offset.\r\n   */\r\n  bottom(value: string = ''): this {\r\n    this._topOffset = '';\r\n    this._bottomOffset = value;\r\n    this._alignItems = 'flex-end';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\r\n   * @param value New right offset.\r\n   */\r\n  right(value: string = ''): this {\r\n    this._leftOffset = '';\r\n    this._rightOffset = value;\r\n    this._justifyContent = 'flex-end';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the overlay width and clears any previously set width.\r\n   * @param value New width for the overlay\r\n   * @deprecated Pass the `width` through the `OverlayConfig`.\r\n   * @breaking-change 7.0.0\r\n   */\r\n  width(value: string = ''): this {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.updateSize({width: value});\r\n    } else {\r\n      this._width = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the overlay height and clears any previously set height.\r\n   * @param value New height for the overlay\r\n   * @deprecated Pass the `height` through the `OverlayConfig`.\r\n   * @breaking-change 7.0.0\r\n   */\r\n  height(value: string = ''): this {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.updateSize({height: value});\r\n    } else {\r\n      this._height = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Centers the overlay horizontally with an optional offset.\r\n   * Clears any previously set horizontal position.\r\n   *\r\n   * @param offset Overlay offset from the horizontal center.\r\n   */\r\n  centerHorizontally(offset: string = ''): this {\r\n    this.left(offset);\r\n    this._justifyContent = 'center';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Centers the overlay vertically with an optional offset.\r\n   * Clears any previously set vertical position.\r\n   *\r\n   * @param offset Overlay offset from the vertical center.\r\n   */\r\n  centerVertically(offset: string = ''): this {\r\n    this.top(offset);\r\n    this._alignItems = 'center';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the position to the element.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    // Since the overlay ref applies the strategy asynchronously, it could\r\n    // have been disposed before it ends up being applied. If that is the\r\n    // case, we shouldn't do anything.\r\n    if (!this._overlayRef.hasAttached()) {\r\n      return;\r\n    }\r\n\r\n    const styles = this._overlayRef.overlayElement.style;\r\n    const parentStyles = this._overlayRef.hostElement.style;\r\n    const config = this._overlayRef.getConfig();\r\n\r\n    styles.position = this._cssPosition;\r\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\r\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\r\n    styles.marginBottom = this._bottomOffset;\r\n    styles.marginRight = this._rightOffset;\r\n\r\n    if (config.width === '100%') {\r\n      parentStyles.justifyContent = 'flex-start';\r\n    } else if (this._justifyContent === 'center') {\r\n        parentStyles.justifyContent = 'center';\r\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\r\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\r\n      // don't want that because our positioning is explicitly `left` and `right`, hence\r\n      // why we do another inversion to ensure that the overlay stays in the same position.\r\n      // TODO: reconsider this if we add `start` and `end` methods.\r\n      if (this._justifyContent === 'flex-start') {\r\n        parentStyles.justifyContent = 'flex-end';\r\n      } else if (this._justifyContent === 'flex-end') {\r\n        parentStyles.justifyContent = 'flex-start';\r\n      }\r\n    } else {\r\n      parentStyles.justifyContent = this._justifyContent;\r\n    }\r\n\r\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\r\n  }\r\n\r\n  /**\r\n   * Noop implemented as a part of the PositionStrategy interface.\r\n   * @docs-private\r\n   */\r\n  dispose(): void { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\r\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\r\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\r\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\r\nimport {GlobalPositionStrategy} from './global-position-strategy';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {OverlayContainer} from '../overlay-container';\r\n\r\n\r\n/** Builder for overlay position strategy. */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayPositionBuilder {\r\n  constructor(\r\n    private _viewportRuler: ViewportRuler,\r\n    @Inject(DOCUMENT) private _document: any,\r\n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\r\n    @Optional() private _platform?: Platform,\r\n    @Optional() private _overlayContainer?: OverlayContainer) { }\r\n\r\n  /**\r\n   * Creates a global position strategy.\r\n   */\r\n  global(): GlobalPositionStrategy {\r\n    return new GlobalPositionStrategy();\r\n  }\r\n\r\n  /**\r\n   * Creates a relative position strategy.\r\n   * @param elementRef\r\n   * @param originPos\r\n   * @param overlayPos\r\n   * @deprecated Use `flexibleConnectedTo` instead.\r\n   * @breaking-change 7.0.0\r\n   */\r\n  connectedTo(\r\n      elementRef: ElementRef,\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\r\n\r\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\r\n        this._document);\r\n  }\r\n\r\n  /**\r\n   * Creates a flexible position strategy.\r\n   * @param elementRef\r\n   */\r\n  flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\r\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\r\n        this._platform, this._overlayContainer);\r\n  }\r\n\r\n}\r\n"],"names":["Overlay","scrollStrategies","_overlayContainer","_componentFactoryResolver","_positionBuilder","_keyboardDispatcher","_injector","_ngZone","_document","_directionality","this","prototype","create","config","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","direction","value","OverlayRef","position","createElement","id","nextUniqueId","classList","add","appendChild","getContainerElement","_appRef","get","ApplicationRef","DomPortalOutlet","type","Injectable","ScrollStrategyOptions","OverlayContainer","ComponentFactoryResolver","OverlayPositionBuilder","OverlayKeyboardDispatcher","Injector","NgZone","undefined","decorators","Inject","args","DOCUMENT","Directionality","defaultPositionList","originX","originY","overlayX","overlayY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","Directive","selector","exportAs","ElementRef","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","_hasBackdrop","_lockPosition","_growAfterOpen","_flexibleDimensions","_push","_backdropSubscription","Subscription","EMPTY","viewportMargin","scrollStrategy","open","backdropClick","EventEmitter","positionChange","attach","detach","overlayKeydown","_templatePortal","TemplatePortal","Object","defineProperty","_offsetX","offsetX","_position","_setPositions","_offsetY","offsetY","coerceBooleanProperty","_overlayRef","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","withPositions","positions","withLockedPosition","lockPosition","setOrigin","origin","apply","_attachOverlay","_detachOverlay","_createOverlay","length","_buildConfig","positionStrategy","_createPositionStrategy","hasBackdrop","width","height","minWidth","minHeight","backdropClass","strategy","flexibleConnectedTo","withFlexibleDimensions","flexibleDiemsions","withPush","push","withGrowAfterOpen","growAfterOpen","withViewportMargin","positionChanges","subscribe","p","_this","emit","map","pos","updateSize","keydownEvents","event","next","keyCode","ESCAPE","hasAttached","unsubscribe","dispose","TemplateRef","ViewContainerRef","Optional","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","NgModule","imports","BidiModule","PortalModule","ScrollingModule","exports","declarations","providers","OverlayModule","OVERLAY_PROVIDERS","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_super","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","getFullscreenElement","body","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","__extends","d","b","__","constructor","extendStatics","validateVerticalPosition","property","Error","validateHorizontalPosition","getMatScrollStrategyAlreadyAttachedError","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","top","outsideBelow","outsideLeft","right","left","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","key","hasOwnProperty","overlay","reposition","setPrototypeOf","__proto__","Array","__assign","assign","t","s","i","n","arguments","NoopScrollStrategy","enable","disable","panelClass","keys","filter","forEach","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","html","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","noop","close","block","providedIn","ScrollDispatcher","ViewportRuler","_attachedOverlays","_keydownListener","overlays","_keydownEventSubscriptions","_keydownEvents","_isAttached","index","indexOf","splice","SkipSelf","parentNode","removeChild","container","_portalOutlet","_host","_pane","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_keydownEventsObservable","Observable","observer","subscription","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","takeUntil","merge","children","isAttached","complete","attachments","detachments","getConfig","sizeConfig","tslib_1.__assign","setDirection","dir","getDirection","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId_1","finishDetach_1","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","cssClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_positionChangeSubscriptions","_validatePositions","hostElement","_boundingBox","change","_isDisposed","isBrowser","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","lastPosition","withScrollableContainers","margin","flexibleDimensions","canPush","isLocked","nativeElement","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","pushX","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","alignItems","justifyContent","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","virtualKeyboardOffset","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","_positionStrategy","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","global","Platform"],"mappings":"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"}