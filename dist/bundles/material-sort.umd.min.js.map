{"version":3,"file":"material-sort.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/sort/sort-errors.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getSortDuplicateSortableIdError(id: string): Error {\r\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortHeaderNotContainedWithinSortError(): Error {\r\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortHeaderMissingIdError(): Error {\r\n  return Error(`MatSortHeader must be provided with a unique id.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortInvalidDirectionError(direction: string): Error {\r\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  isDevMode,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\r\nimport {SortDirection} from './sort-direction';\r\nimport {\r\n  getSortDuplicateSortableIdError,\r\n  getSortHeaderMissingIdError,\r\n  getSortInvalidDirectionError\r\n} from './sort-errors';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\r\nexport interface MatSortable {\r\n  /** The id of the column being sorted. */\r\n  id: string;\r\n\r\n  /** Starting sort direction. */\r\n  start: 'asc' | 'desc';\r\n\r\n  /** Whether to disable clearing the sorting state. */\r\n  disableClear: boolean;\r\n}\r\n\r\n/** The current sort state. */\r\nexport interface Sort {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n\r\n  /** The sort direction. */\r\n  direction: SortDirection;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSort.\r\n/** @docs-private */\r\nexport class MatSortBase {}\r\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\r\n\r\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\r\n@Directive({\r\n  selector: '[matSort]',\r\n  exportAs: 'matSort',\r\n  inputs: ['disabled: matSortDisabled']\r\n})\r\nexport class MatSort extends _MatSortMixinBase\r\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\r\n  /** Collection of all registered sortables that this directive manages. */\r\n  sortables = new Map<string, MatSortable>();\r\n\r\n  /** Used to notify any child components listening to state changes. */\r\n  readonly _stateChanges = new Subject<void>();\r\n\r\n  /** The id of the most recently sorted MatSortable. */\r\n  @Input('matSortActive') active: string;\r\n\r\n  /**\r\n   * The direction to set when an MatSortable is initially sorted.\r\n   * May be overriden by the MatSortable's sort start.\r\n   */\r\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\r\n\r\n  /** The sort direction of the currently active MatSortable. */\r\n  @Input('matSortDirection')\r\n  get direction(): SortDirection { return this._direction; }\r\n  set direction(direction: SortDirection) {\r\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\r\n      throw getSortInvalidDirectionError(direction);\r\n    }\r\n    this._direction = direction;\r\n  }\r\n  private _direction: SortDirection = '';\r\n\r\n  /**\r\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\r\n   * May be overriden by the MatSortable's disable clear input.\r\n   */\r\n  @Input('matSortDisableClear')\r\n  get disableClear(): boolean { return this._disableClear; }\r\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\r\n  private _disableClear: boolean;\r\n\r\n  /** Event emitted when the user changes either the active sort or sort direction. */\r\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\r\n\r\n  /**\r\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\r\n   * collection of MatSortables.\r\n   */\r\n  register(sortable: MatSortable): void {\r\n    if (!sortable.id) {\r\n      throw getSortHeaderMissingIdError();\r\n    }\r\n\r\n    if (this.sortables.has(sortable.id)) {\r\n      throw getSortDuplicateSortableIdError(sortable.id);\r\n    }\r\n    this.sortables.set(sortable.id, sortable);\r\n  }\r\n\r\n  /**\r\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\r\n   * collection of contained MatSortables.\r\n   */\r\n  deregister(sortable: MatSortable): void {\r\n    this.sortables.delete(sortable.id);\r\n  }\r\n\r\n  /** Sets the active sort id and determines the new sort direction. */\r\n  sort(sortable: MatSortable): void {\r\n    if (this.active != sortable.id) {\r\n      this.active = sortable.id;\r\n      this.direction = sortable.start ? sortable.start : this.start;\r\n    } else {\r\n      this.direction = this.getNextSortDirection(sortable);\r\n    }\r\n\r\n    this.sortChange.emit({active: this.active, direction: this.direction});\r\n  }\r\n\r\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\r\n  getNextSortDirection(sortable: MatSortable): SortDirection {\r\n    if (!sortable) { return ''; }\r\n\r\n    // Get the sort direction cycle with the potential sortable overrides.\r\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\r\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\r\n\r\n    // Get and return the next direction in the cycle\r\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\r\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\r\n    return sortDirectionCycle[nextDirectionIndex];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._markInitialized();\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this._stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n\r\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\r\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\r\n                               disableClear: boolean): SortDirection[] {\r\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\r\n  if (start == 'desc') { sortOrder.reverse(); }\r\n  if (!disableClear) { sortOrder.push(''); }\r\n\r\n  return sortOrder;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\r\n * include it in a custom provider.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatSortHeaderIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** ARIA label for the sorting button. */\r\n  sortButtonLabel = (id: string) => {\r\n    return `Change sorting for ${id}`;\r\n  }\r\n}\r\n/** @docs-private */\r\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\r\n  return parentIntl || new MatSortHeaderIntl();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\r\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatSortHeaderIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\r\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\r\n};\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  keyframes,\r\n  AnimationTriggerMetadata, query, animateChild,\r\n} from '@angular/animations';\r\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\r\n\r\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\r\n                                  AnimationCurves.STANDARD_CURVE;\r\n\r\n/** Animations used by MatSort. */\r\nexport const matSortAnimations: {\r\n  readonly indicator: AnimationTriggerMetadata;\r\n  readonly leftPointer: AnimationTriggerMetadata;\r\n  readonly rightPointer: AnimationTriggerMetadata;\r\n  readonly arrowOpacity: AnimationTriggerMetadata;\r\n  readonly arrowPosition: AnimationTriggerMetadata;\r\n  readonly allowChildren: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that moves the sort indicator. */\r\n  indicator: trigger('indicator', [\r\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\r\n    // 10px is the height of the sort indicator, minus the width of the pointers\r\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\r\n  leftPointer: trigger('leftPointer', [\r\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\r\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\r\n  rightPointer: trigger('rightPointer', [\r\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\r\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that controls the arrow opacity. */\r\n  arrowOpacity: trigger('arrowOpacity', [\r\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\r\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\r\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\r\n        style({opacity: 0})),\r\n    // Transition between all states except for immediate transitions\r\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\r\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\r\n  ]),\r\n\r\n  /**\r\n   * Animation for the translation of the arrow as a whole. States are separated into two\r\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\r\n   * peek, and active. The other states define a specific animation (source-to-destination)\r\n   * and are determined as a function of their prev user-perceived state and what the next state\r\n   * should be.\r\n   */\r\n  arrowPosition: trigger('arrowPosition', [\r\n    // Hidden Above => Hint Center\r\n    transition('* => desc-to-hint, * => desc-to-active',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(-25%)'}),\r\n          style({transform: 'translateY(0)'})\r\n        ]))),\r\n    // Hint Center => Hidden Below\r\n    transition('* => hint-to-desc, * => active-to-desc',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(0)'}),\r\n          style({transform: 'translateY(25%)'})\r\n        ]))),\r\n    // Hidden Below => Hint Center\r\n    transition('* => asc-to-hint, * => asc-to-active',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(25%)'}),\r\n          style({transform: 'translateY(0)'})\r\n        ]))),\r\n    // Hint Center => Hidden Above\r\n    transition('* => hint-to-asc, * => active-to-asc',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(0)'}),\r\n          style({transform: 'translateY(-25%)'})\r\n        ]))),\r\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\r\n        style({transform: 'translateY(0)'})),\r\n    state('hint-to-desc, active-to-desc, desc',\r\n        style({transform: 'translateY(-25%)'})),\r\n    state('hint-to-asc, active-to-asc, asc',\r\n        style({transform: 'translateY(25%)'})),\r\n  ]),\r\n\r\n  /** Necessary trigger that calls animate on children animations. */\r\n  allowChildren: trigger('allowChildren', [\r\n    transition('* <=> *', [\r\n      query('@*', animateChild(), {optional: true})\r\n    ])\r\n  ]),\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CdkColumnDef} from '@angular/cdk/table';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {MatSort, MatSortable} from './sort';\r\nimport {matSortAnimations} from './sort-animations';\r\nimport {SortDirection} from './sort-direction';\r\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\r\nimport {MatSortHeaderIntl} from './sort-header-intl';\r\n\r\n\r\n// Boilerplate for applying mixins to the sort header.\r\n/** @docs-private */\r\nexport class MatSortHeaderBase {}\r\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\r\n\r\n/**\r\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\r\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\r\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\r\n * be fully opaque in the center.\r\n *\r\n * @docs-private\r\n */\r\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\r\n\r\n/**\r\n * States describing the arrow's animated position (animating fromState to toState).\r\n * If the fromState is not defined, there will be no animated transition to the toState.\r\n * @docs-private\r\n */\r\nexport interface ArrowViewStateTransition {\r\n  fromState?: ArrowViewState;\r\n  toState: ArrowViewState;\r\n}\r\n\r\n/**\r\n * Applies sorting behavior (click to change sort) and styles to an element, including an\r\n * arrow to display the current sort direction.\r\n *\r\n * Must be provided with an id and contained within a parent MatSort directive.\r\n *\r\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\r\n * column definition.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-sort-header]',\r\n  exportAs: 'matSortHeader',\r\n  templateUrl: 'sort-header.html',\r\n  styleUrls: ['sort-header.css'],\r\n  host: {\r\n    '(click)': '_handleClick()',\r\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\r\n    '(longpress)': '_setIndicatorHintVisible(true)',\r\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\r\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\r\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  animations: [\r\n    matSortAnimations.indicator,\r\n    matSortAnimations.leftPointer,\r\n    matSortAnimations.rightPointer,\r\n    matSortAnimations.arrowOpacity,\r\n    matSortAnimations.arrowPosition,\r\n    matSortAnimations.allowChildren,\r\n  ]\r\n})\r\nexport class MatSortHeader extends _MatSortHeaderMixinBase\r\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\r\n  private _rerenderSubscription: Subscription;\r\n\r\n  /**\r\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\r\n   * provide an affordance that the header is sortable by showing on focus and hover.\r\n   */\r\n  _showIndicatorHint: boolean = false;\r\n\r\n  /**\r\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\r\n   * position through the animation. If animations are currently disabled, the fromState is removed\r\n   * so that there is no animation displayed.\r\n   */\r\n  _viewState: ArrowViewStateTransition;\r\n\r\n  /** The direction the arrow should be facing according to the current state. */\r\n  _arrowDirection: SortDirection = '';\r\n\r\n  /**\r\n   * Whether the view state animation should show the transition between the `from` and `to` states.\r\n   */\r\n  _disableViewStateAnimation = false;\r\n\r\n  /**\r\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\r\n   * the column's name.\r\n   */\r\n  @Input('mat-sort-header') id: string;\r\n\r\n  /** Sets the position of the arrow that displays when sorted. */\r\n  @Input() arrowPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\r\n  @Input() start: 'asc' | 'desc';\r\n\r\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\r\n  @Input()\r\n  get disableClear(): boolean { return this._disableClear; }\r\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\r\n  private _disableClear: boolean;\r\n\r\n  constructor(public _intl: MatSortHeaderIntl,\r\n              changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _sort: MatSort,\r\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\r\n\r\n    super();\r\n\r\n    if (!_sort) {\r\n      throw getSortHeaderNotContainedWithinSortError();\r\n    }\r\n\r\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\r\n        .subscribe(() => {\r\n          if (this._isSorted()) {\r\n            this._updateArrowDirection();\r\n          }\r\n\r\n          // If this header was recently active and now no longer sorted, animate away the arrow.\r\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\r\n            this._disableViewStateAnimation = false;\r\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\r\n          }\r\n\r\n          changeDetectorRef.markForCheck();\r\n        });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.id && this._cdkColumnDef) {\r\n      this.id = this._cdkColumnDef.name;\r\n    }\r\n\r\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\r\n    this._updateArrowDirection();\r\n    this._setAnimationTransitionState(\r\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\r\n\r\n    this._sort.register(this);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._sort.deregister(this);\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\r\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\r\n   */\r\n  _setIndicatorHintVisible(visible: boolean) {\r\n    // No-op if the sort header is disabled - should not make the hint visible.\r\n    if (this._isDisabled() && visible) { return; }\r\n\r\n    this._showIndicatorHint = visible;\r\n\r\n    if (!this._isSorted()) {\r\n      this._updateArrowDirection();\r\n      if (this._showIndicatorHint) {\r\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\r\n      } else {\r\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the animation transition view state for the arrow's position and opacity. If the\r\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\r\n   * no animation appears.\r\n   */\r\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\r\n    this._viewState = viewState;\r\n\r\n    // If the animation for arrow position state (opacity/translation) should be disabled,\r\n    // remove the fromState so that it jumps right to the toState.\r\n    if (this._disableViewStateAnimation) {\r\n      this._viewState = {toState: viewState.toState};\r\n    }\r\n  }\r\n\r\n  /** Triggers the sort on this sort header and removes the indicator hint. */\r\n  _handleClick() {\r\n    if (this._isDisabled()) { return; }\r\n\r\n    this._sort.sort(this);\r\n\r\n    // Do not show the animation if the header was already shown in the right position.\r\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\r\n      this._disableViewStateAnimation = true;\r\n    }\r\n\r\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\r\n    // the direction it is facing.\r\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\r\n        {fromState: this._arrowDirection, toState: 'active'} :\r\n        {fromState: 'active', toState: this._arrowDirection};\r\n    this._setAnimationTransitionState(viewState);\r\n\r\n    this._showIndicatorHint = false;\r\n  }\r\n\r\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\r\n  _isSorted() {\r\n    return this._sort.active == this.id &&\r\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\r\n  }\r\n\r\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\r\n  _getArrowDirectionState() {\r\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\r\n  }\r\n\r\n  /** Returns the arrow position state (opacity, translation). */\r\n  _getArrowViewState() {\r\n    const fromState = this._viewState.fromState;\r\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\r\n  }\r\n\r\n  /**\r\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\r\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\r\n   * active sorted direction. The reason this is updated through a function is because the direction\r\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\r\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\r\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\r\n   * preserving its direction, even though the next sort direction is actually different and should\r\n   * only be changed once the arrow displays again (hint or activation).\r\n   */\r\n  _updateArrowDirection() {\r\n    this._arrowDirection = this._isSorted() ?\r\n        this._sort.direction :\r\n        (this.start || this._sort.start);\r\n  }\r\n\r\n  _isDisabled() {\r\n    return this._sort.disabled || this.disabled;\r\n  }\r\n\r\n  /**\r\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\r\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\r\n   * says that the aria-sort property should only be present on one header at a time, so removing\r\n   * ensures this is true.\r\n   */\r\n  _getAriaSortAttribute() {\r\n    if (!this._isSorted()) { return null; }\r\n\r\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatSortHeader} from './sort-header';\r\nimport {MatSort} from './sort';\r\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [MatSort, MatSortHeader],\r\n  declarations: [MatSort, MatSortHeader],\r\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\r\n})\r\nexport class MatSortModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getSortDuplicateSortableIdError","id","Error","getSortHeaderNotContainedWithinSortError","getSortHeaderMissingIdError","getSortInvalidDirectionError","direction","getSortDirectionCycle","start","disableClear","sortOrder","reverse","push","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MatSortHeaderIntl","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatSortBase","_MatSortMixinBase","mixinInitialized","mixinDisabled","_this","sortables","Map","_stateChanges","Subject","_direction","sortChange","EventEmitter","tslib_1.__extends","MatSort","_super","defineProperty","isDevMode","_disableClear","v","coerceBooleanProperty","register","sortable","has","set","deregister","delete","sort","active","getNextSortDirection","emit","sortDirectionCycle","nextDirectionIndex","indexOf","length","ngOnInit","_markInitialized","ngOnChanges","next","ngOnDestroy","complete","type","Directive","args","selector","exportAs","inputs","Input","Output","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","trigger","state","style","transform","transition","animate","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","changes","sortButtonLabel","Injectable","providedIn","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","call","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","_rerenderSubscription","merge","subscribe","_isSorted","_updateArrowDirection","_viewState","toState","_setAnimationTransitionState","fromState","markForCheck","name","unsubscribe","_setIndicatorHintVisible","visible","_isDisabled","viewState","_handleClick","_getArrowDirectionState","_getArrowViewState","disabled","_getAriaSortAttribute","Component","template","styles","host","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","animations","decorators","CdkColumnDef","propDecorators","NgModule","imports","CommonModule","exports","declarations","providers","MatSortModule"],"mappings":"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"}