{"version":3,"file":"material-tabs.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HasTabIndex,\r\n  MAT_RIPPLE_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex, RippleConfig,\r\n  RippleGlobalOptions,\r\n  RippleRenderer,\r\n  RippleTarget,\r\n  ThemePalette,\r\n} from '@angular/material/core';\r\nimport {merge, of as observableOf, Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {MatInkBar} from '../ink-bar';\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\n\r\n\r\n// Boilerplate for applying mixins to MatTabNav.\r\n/** @docs-private */\r\nexport class MatTabNavBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\r\n\r\n/**\r\n * Navigation component matching the styles of the tab group header.\r\n * Provides anchored navigation with animated ink bar.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-tab-nav-bar]',\r\n  exportAs: 'matTabNavBar, matTabNav',\r\n  inputs: ['color', 'disableRipple'],\r\n  templateUrl: 'tab-nav-bar.html',\r\n  styleUrls: ['tab-nav-bar.css'],\r\n  host: {'class': 'mat-tab-nav-bar'},\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatTabNav extends _MatTabNavMixinBase\r\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private readonly _onDestroy = new Subject<void>();\r\n\r\n  private _activeLinkChanged: boolean;\r\n  private _activeLinkElement: ElementRef | null;\r\n\r\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\r\n\r\n  /** Query list of all tab links of the tab navigation. */\r\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\r\n  _tabLinks: QueryList<MatTabLink>;\r\n\r\n  /** Background color of the tab nav. */\r\n  @Input()\r\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\r\n  set backgroundColor(value: ThemePalette) {\r\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\r\n\r\n    if (value) {\r\n      nativeElement.classList.add(`mat-background-${value}`);\r\n    }\r\n\r\n    this._backgroundColor = value;\r\n  }\r\n  private _backgroundColor: ThemePalette;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              @Optional() private _dir: Directionality,\r\n              private _ngZone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _viewportRuler: ViewportRuler) {\r\n    super(elementRef);\r\n  }\r\n\r\n  /**\r\n   * Notifies the component that the active link has been changed.\r\n   * @breaking-change 7.0.0 `element` parameter to be removed.\r\n   */\r\n  updateActiveLink(element: ElementRef) {\r\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\r\n    // @breaking-change 7.0.0\r\n    this._activeLinkChanged = !!element;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\r\n\r\n      return merge(dirChange, this._viewportRuler.change(10))\r\n          .pipe(takeUntil(this._onDestroy))\r\n          .subscribe(() => this._alignInkBar());\r\n    });\r\n  }\r\n\r\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\r\n  ngAfterContentChecked(): void {\r\n    if (this._activeLinkChanged) {\r\n      const activeTab = this._tabLinks.find(tab => tab.active);\r\n\r\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\r\n      this._alignInkBar();\r\n      this._activeLinkChanged = false;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  /** Aligns the ink bar to the active link. */\r\n  _alignInkBar(): void {\r\n    if (this._activeLinkElement) {\r\n      this._inkBar.show();\r\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\r\n    } else {\r\n      this._inkBar.hide();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatTabLink.\r\nexport class MatTabLinkBase {}\r\nexport const _MatTabLinkMixinBase =\r\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\r\n\r\n/**\r\n * Link inside of a `mat-tab-nav-bar`.\r\n */\r\n@Directive({\r\n  selector: '[mat-tab-link], [matTabLink]',\r\n  exportAs: 'matTabLink',\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  host: {\r\n    'class': 'mat-tab-link',\r\n    '[attr.aria-current]': 'active',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.tabIndex]': 'tabIndex',\r\n    '[class.mat-tab-disabled]': 'disabled',\r\n    '[class.mat-tab-label-active]': 'active',\r\n    '(click)': '_handleClick($event)'\r\n  }\r\n})\r\nexport class MatTabLink extends _MatTabLinkMixinBase\r\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\r\n\r\n  /** Whether the tab link is active or not. */\r\n  protected _isActive: boolean = false;\r\n\r\n  /** Reference to the RippleRenderer for the tab-link. */\r\n  protected _tabLinkRipple: RippleRenderer;\r\n\r\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\r\n  private _ripplesGloballyDisabled = false;\r\n\r\n  /** Whether the link is active. */\r\n  @Input()\r\n  get active(): boolean { return this._isActive; }\r\n  set active(value: boolean) {\r\n    if (value !== this._isActive) {\r\n      this._isActive = value;\r\n      this._tabNavBar.updateActiveLink(this._elementRef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ripple configuration for ripples that are launched on pointer down.\r\n   * @docs-private\r\n   */\r\n  rippleConfig: RippleConfig = {};\r\n\r\n  /**\r\n   * Whether ripples are disabled on interaction\r\n   * @docs-private\r\n   */\r\n  get rippleDisabled(): boolean {\r\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\r\n      this._ripplesGloballyDisabled;\r\n  }\r\n\r\n  constructor(private _tabNavBar: MatTabNav,\r\n              public _elementRef: ElementRef,\r\n              ngZone: NgZone,\r\n              platform: Platform,\r\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\r\n              @Attribute('tabindex') tabIndex: string,\r\n              /**\r\n               * @deprecated\r\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\r\n               */\r\n              private _focusMonitor?: FocusMonitor) {\r\n    super();\r\n\r\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\r\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n\r\n    if (globalOptions) {\r\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\r\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\r\n      this.rippleConfig = {\r\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\r\n        speedFactor: globalOptions.baseSpeedFactor,\r\n        animation: globalOptions.animation,\r\n      };\r\n    }\r\n\r\n    if (_focusMonitor) {\r\n      _focusMonitor.monitor(_elementRef.nativeElement);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabLinkRipple._removeTriggerEvents();\r\n\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the click event, preventing default navigation if the tab link is disabled.\r\n   */\r\n  _handleClick(event: MouseEvent) {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatInkBar} from './ink-bar';\r\nimport {MatTab} from './tab';\r\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\r\nimport {MatTabContent} from './tab-content';\r\nimport {MatTabGroup} from './tab-group';\r\nimport {MatTabHeader} from './tab-header';\r\nimport {MatTabLabel} from './tab-label';\r\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\r\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatCommonModule,\r\n    PortalModule,\r\n    MatRippleModule,\r\n    ObserversModule,\r\n    A11yModule,\r\n  ],\r\n  // Don't export all components because some are only to be used internally.\r\n  exports: [\r\n    MatCommonModule,\r\n    MatTabGroup,\r\n    MatTabLabel,\r\n    MatTab,\r\n    MatTabNav,\r\n    MatTabLink,\r\n    MatTabContent,\r\n  ],\r\n  declarations: [\r\n    MatTabGroup,\r\n    MatTabLabel,\r\n    MatTab,\r\n    MatInkBar,\r\n    MatTabLabelWrapper,\r\n    MatTabNav,\r\n    MatTabLink,\r\n    MatTabBody,\r\n    MatTabBodyPortal,\r\n    MatTabHeader,\r\n    MatTabContent,\r\n  ],\r\n})\r\nexport class MatTabsModule {}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\r\n\r\n\r\n/**\r\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\r\n * bar in a set of tabs.\r\n */\r\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\r\nexport interface _MatInkBarPositioner {\r\n  (element: HTMLElement): { left: string, width: string };\r\n}\r\n\r\n/** Injection token for the MatInkBar's Positioner. */\r\nexport const _MAT_INK_BAR_POSITIONER =\r\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\r\n    providedIn: 'root',\r\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\r\n  });\r\n\r\n/**\r\n * The default positioner function for the MatInkBar.\r\n * @docs-private\r\n */\r\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\r\n  const method = (element: HTMLElement) => ({\r\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\r\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\r\n  });\r\n\r\n  return method;\r\n}\r\n\r\n/**\r\n * The ink-bar is used to display and animate the line underneath the current active tab label.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-ink-bar',\r\n  host: {\r\n    'class': 'mat-ink-bar',\r\n  },\r\n})\r\nexport class MatInkBar {\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _ngZone: NgZone,\r\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\r\n\r\n  /**\r\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\r\n   * Shows the ink bar if previously set as hidden.\r\n   * @param element\r\n   */\r\n  alignToElement(element: HTMLElement) {\r\n    this.show();\r\n\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => this._setStyles(element));\r\n      });\r\n    } else {\r\n      this._setStyles(element);\r\n    }\r\n  }\r\n\r\n  /** Shows the ink bar. */\r\n  show(): void {\r\n    this._elementRef.nativeElement.style.visibility = 'visible';\r\n  }\r\n\r\n  /** Hides the ink bar. */\r\n  hide(): void {\r\n    this._elementRef.nativeElement.style.visibility = 'hidden';\r\n  }\r\n\r\n  /**\r\n   * Sets the proper styles to the ink bar element.\r\n   * @param element\r\n   */\r\n  private _setStyles(element: HTMLElement) {\r\n    const positions = this._inkBarPositioner(element);\r\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    inkBar.style.left = positions.left;\r\n    inkBar.style.width = positions.width;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\r\nimport {CdkPortal} from '@angular/cdk/portal';\r\n\r\n/** Used to flag tab labels for use with the portal directive */\r\n@Directive({\r\n  selector: '[mat-tab-label], [matTabLabel]',\r\n})\r\nexport class MatTabLabel extends CdkPortal {\r\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n/** Decorates the `ng-template` tags and reads out the template from it. */\r\n@Directive({selector: '[matTabContent]'})\r\nexport class MatTabContent {\r\n  constructor(public template: TemplateRef<any>) { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {MatTabLabel} from './tab-label';\r\nimport {MatTabContent} from './tab-content';\r\n\r\n\r\n// Boilerplate for applying mixins to MatTab.\r\n/** @docs-private */\r\nexport class MatTabBase {}\r\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab',\r\n  templateUrl: 'tab.html',\r\n  inputs: ['disabled'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matTab',\r\n})\r\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\r\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\r\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\r\n\r\n  /**\r\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\r\n   */\r\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\r\n\r\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\r\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\r\n\r\n  /** Plain text label for the tab, used when there is no template label. */\r\n  @Input('label') textLabel: string = '';\r\n\r\n  /** Aria label for the tab. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /**\r\n   * Reference to the element that the tab is labelled by.\r\n   * Will be cleared if `aria-label` is set at the same time.\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** Portal that will be the hosted content of the tab */\r\n  private _contentPortal: TemplatePortal | null = null;\r\n\r\n  /** @docs-private */\r\n  get content(): TemplatePortal | null {\r\n    return this._contentPortal;\r\n  }\r\n\r\n  /** Emits whenever the internal state of the tab changes. */\r\n  readonly _stateChanges = new Subject<void>();\r\n\r\n  /**\r\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\r\n   * represents the right.\r\n   */\r\n  position: number | null = null;\r\n\r\n  /**\r\n   * The initial relatively index origin of the tab if it was created and selected after there\r\n   * was already a selected tab. Provides context of what position the tab should originate from.\r\n   */\r\n  origin: number | null = null;\r\n\r\n  /**\r\n   * Whether the tab is currently active.\r\n   */\r\n  isActive = false;\r\n\r\n  constructor(private _viewContainerRef: ViewContainerRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\r\n      this._stateChanges.next();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._stateChanges.complete();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._contentPortal = new TemplatePortal(\r\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by the Material tabs. */\r\nexport const matTabsAnimations: {\r\n  readonly translateTab: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation translates a tab along the X axis. */\r\n  translateTab: trigger('translateTab', [\r\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\r\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\r\n\r\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\r\n    // in order to ensure that the element has a height before its state changes. This is\r\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\r\n    // not have a static height and is not rendered. See related issue: #9465\r\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\r\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\r\n\r\n    transition('* => left, * => right, left => center, right => center',\r\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\r\n    transition('void => left-origin-center', [\r\n      style({transform: 'translate3d(-100%, 0, 0)'}),\r\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\r\n    ]),\r\n    transition('void => right-origin-center', [\r\n      style({transform: 'translate3d(100%, 0, 0)'}),\r\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\r\n    ])\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ChangeDetectorRef,\r\n  Input,\r\n  Inject,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit,\r\n  ElementRef,\r\n  Directive,\r\n  Optional,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ComponentFactoryResolver,\r\n  ViewContainerRef,\r\n  forwardRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\r\nimport {Directionality, Direction} from '@angular/cdk/bidi';\r\nimport {Subscription} from 'rxjs';\r\nimport {matTabsAnimations} from './tabs-animations';\r\nimport {startWith} from 'rxjs/operators';\r\n\r\n/**\r\n * These position states are used internally as animation states for the tab body. Setting the\r\n * position state to left, right, or center will transition the tab body from its current\r\n * position to its respective state. If there is not current position (void, in the case of a new\r\n * tab body), then there will be no transition animation to its state.\r\n *\r\n * In the case of a new tab body that should immediately be centered with an animating transition,\r\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\r\n * psuedo-prior state.\r\n */\r\nexport type MatTabBodyPositionState =\r\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\r\n\r\n/**\r\n * The origin state is an internally used state that is set on a new tab body indicating if it\r\n * began to the left or right of the prior selected index. For example, if the selected index was\r\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\r\n * origin of right because its index was greater than the prior selected index.\r\n */\r\nexport type MatTabBodyOriginState = 'left' | 'right';\r\n\r\n/**\r\n * The portal host directive for the contents of the tab.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[matTabBodyHost]'\r\n})\r\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\r\n  /** Subscription to events for when the tab body begins centering. */\r\n  private _centeringSub = Subscription.EMPTY;\r\n  /** Subscription to events for when the tab body finishes leaving from center position. */\r\n  private _leavingSub = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    componentFactoryResolver: ComponentFactoryResolver,\r\n    viewContainerRef: ViewContainerRef,\r\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\r\n      super(componentFactoryResolver, viewContainerRef);\r\n  }\r\n\r\n  /** Set initial visibility or set up subscription for changing visibility. */\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n\r\n    this._centeringSub = this._host._beforeCentering\r\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\r\n      .subscribe((isCentering: boolean) => {\r\n        if (isCentering && !this.hasAttached()) {\r\n          this.attach(this._host._content);\r\n        }\r\n      });\r\n\r\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\r\n      this.detach();\r\n    });\r\n  }\r\n\r\n  /** Clean up centering subscription. */\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this._centeringSub.unsubscribe();\r\n    this._leavingSub.unsubscribe();\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper for the contents of a tab.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-body',\r\n  templateUrl: 'tab-body.html',\r\n  styleUrls: ['tab-body.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [matTabsAnimations.translateTab],\r\n  host: {\r\n    'class': 'mat-tab-body',\r\n  },\r\n})\r\nexport class MatTabBody implements OnInit, OnDestroy {\r\n\r\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\r\n  private _positionIndex: number;\r\n\r\n  /** Subscription to the directionality change observable. */\r\n  private _dirChangeSubscription = Subscription.EMPTY;\r\n\r\n  /** Tab body position state. Used by the animation trigger for the current state. */\r\n  _position: MatTabBodyPositionState;\r\n\r\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\r\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** Event emitted before the centering of the tab begins. */\r\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted before the centering of the tab begins. */\r\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted when the tab completes its animation towards the center. */\r\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\r\n\r\n   /** The portal host inside of this container into which the tab body content will be loaded. */\r\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\r\n\r\n  /** The tab body content to display. */\r\n  @Input('content') _content: TemplatePortal;\r\n\r\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\r\n  @Input() origin: number;\r\n\r\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\r\n  @Input()\r\n  set position(position: number) {\r\n    this._positionIndex = position;\r\n    this._computePositionAnimationState();\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              @Optional() private _dir: Directionality,\r\n              /**\r\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\r\n               */\r\n              changeDetectorRef?: ChangeDetectorRef) {\r\n\r\n    if (this._dir && changeDetectorRef) {\r\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\r\n        this._computePositionAnimationState(dir);\r\n        changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * After initialized, check if the content is centered and has an origin. If so, set the\r\n   * special position states that transition the tab from the left or right before centering.\r\n   */\r\n  ngOnInit() {\r\n    if (this._position == 'center' && this.origin != null) {\r\n      this._position = this._computePositionFromOrigin();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dirChangeSubscription.unsubscribe();\r\n  }\r\n\r\n  _onTranslateTabStarted(e: AnimationEvent): void {\r\n    const isCentering = this._isCenterPosition(e.toState);\r\n    this._beforeCentering.emit(isCentering);\r\n    if (isCentering) {\r\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\r\n    }\r\n  }\r\n\r\n  _onTranslateTabComplete(e: AnimationEvent): void {\r\n    // If the transition to the center is complete, emit an event.\r\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\r\n      this._onCentered.emit();\r\n    }\r\n\r\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\r\n      this._afterLeavingCenter.emit();\r\n    }\r\n  }\r\n\r\n  /** The text direction of the containing app. */\r\n  _getLayoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Whether the provided position state is considered center, regardless of origin. */\r\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\r\n    return position == 'center' ||\r\n        position == 'left-origin-center' ||\r\n        position == 'right-origin-center';\r\n  }\r\n\r\n  /** Computes the position state that will be used for the tab-body animation trigger. */\r\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\r\n    if (this._positionIndex < 0) {\r\n      this._position = dir == 'ltr' ? 'left' : 'right';\r\n    } else if (this._positionIndex > 0) {\r\n      this._position = dir == 'ltr' ? 'right' : 'left';\r\n    } else {\r\n      this._position = 'center';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Computes the position state based on the specified origin position. This is used if the\r\n   * tab is becoming visible immediately after creation.\r\n   */\r\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\r\n    const dir = this._getLayoutDirection();\r\n\r\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\r\n      return 'left-origin-center';\r\n    }\r\n\r\n    return 'right-origin-center';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef} from '@angular/core';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\n\r\n// Boilerplate for applying mixins to MatTabLabelWrapper.\r\n/** @docs-private */\r\nexport class MatTabLabelWrapperBase {}\r\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\r\n\r\n/**\r\n * Used in the `mat-tab-group` view to display tab labels.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[matTabLabelWrapper]',\r\n  inputs: ['disabled'],\r\n  host: {\r\n    '[class.mat-tab-disabled]': 'disabled',\r\n    '[attr.aria-disabled]': '!!disabled',\r\n  }\r\n})\r\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\r\n  constructor(public elementRef: ElementRef) {\r\n    super();\r\n  }\r\n\r\n  /** Sets focus on the wrapper element */\r\n  focus(): void {\r\n    this.elementRef.nativeElement.focus();\r\n  }\r\n\r\n  getOffsetLeft(): number {\r\n    return this.elementRef.nativeElement.offsetLeft;\r\n  }\r\n\r\n  getOffsetWidth(): number {\r\n    return this.elementRef.nativeElement.offsetWidth;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\r\nimport {merge, of as observableOf, Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {MatInkBar} from './ink-bar';\r\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\n\r\n\r\n/**\r\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\r\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\r\n * beginning of the list.\r\n */\r\nexport type ScrollDirection = 'after' | 'before';\r\n\r\n/**\r\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\r\n * provide a small affordance to the label next to it.\r\n */\r\nconst EXAGGERATED_OVERSCROLL = 60;\r\n\r\n// Boilerplate for applying mixins to MatTabHeader.\r\n/** @docs-private */\r\nexport class MatTabHeaderBase {}\r\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\r\n\r\n/**\r\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\r\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\r\n * width of the header container, then arrows will be displayed to allow the user to scroll\r\n * left and right across the header.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-header',\r\n  templateUrl: 'tab-header.html',\r\n  styleUrls: ['tab-header.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-tab-header',\r\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\r\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\r\n  },\r\n})\r\nexport class MatTabHeader extends _MatTabHeaderMixinBase\r\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\r\n\r\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\r\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\r\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\r\n  @ViewChild('tabList') _tabList: ElementRef;\r\n\r\n  /** The distance in pixels that the tab labels should be translated to the left. */\r\n  private _scrollDistance = 0;\r\n\r\n  /** Whether the header should scroll to the selected index after the view has been checked. */\r\n  private _selectedIndexChanged = false;\r\n\r\n  /** Emits when the component is destroyed. */\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  /** Whether the controls for pagination should be displayed */\r\n  _showPaginationControls = false;\r\n\r\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\r\n  _disableScrollAfter = true;\r\n\r\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\r\n  _disableScrollBefore = true;\r\n\r\n  /**\r\n   * The number of tab labels that are displayed on the header. When this changes, the header\r\n   * should re-evaluate the scroll position.\r\n   */\r\n  private _tabLabelCount: number;\r\n\r\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\r\n  private _scrollDistanceChanged: boolean;\r\n\r\n  /** Used to manage focus between the tabs. */\r\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\r\n\r\n  private _selectedIndex: number = 0;\r\n\r\n  /** The index of the active tab. */\r\n  @Input()\r\n  get selectedIndex(): number { return this._selectedIndex; }\r\n  set selectedIndex(value: number) {\r\n    value = coerceNumberProperty(value);\r\n    this._selectedIndexChanged = this._selectedIndex != value;\r\n    this._selectedIndex = value;\r\n\r\n    if (this._keyManager) {\r\n      this._keyManager.updateActiveItemIndex(value);\r\n    }\r\n  }\r\n\r\n  /** Event emitted when the option is selected. */\r\n  @Output() readonly selectFocusedIndex = new EventEmitter();\r\n\r\n  /** Event emitted when a label is focused. */\r\n  @Output() readonly indexFocused = new EventEmitter();\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _viewportRuler: ViewportRuler,\r\n              @Optional() private _dir: Directionality) {\r\n    super();\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    // If the number of tab labels have changed, check if scrolling should be enabled\r\n    if (this._tabLabelCount != this._labelWrappers.length) {\r\n      this._updatePagination();\r\n      this._tabLabelCount = this._labelWrappers.length;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\r\n    // should be disabled.\r\n    if (this._selectedIndexChanged) {\r\n      this._scrollToLabel(this._selectedIndex);\r\n      this._checkScrollingControls();\r\n      this._alignInkBarToSelectedTab();\r\n      this._selectedIndexChanged = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\r\n    // then translate the header to reflect this.\r\n    if (this._scrollDistanceChanged) {\r\n      this._updateTabScrollPosition();\r\n      this._scrollDistanceChanged = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      case HOME:\r\n        this._keyManager.setFirstItemActive();\r\n        event.preventDefault();\r\n        break;\r\n      case END:\r\n        this._keyManager.setLastItemActive();\r\n        event.preventDefault();\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this.selectFocusedIndex.emit(this.focusIndex);\r\n        event.preventDefault();\r\n        break;\r\n      default:\r\n        this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Aligns the ink bar to the selected tab on load.\r\n   */\r\n  ngAfterContentInit() {\r\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\r\n    const resize = this._viewportRuler.change(150);\r\n    const realign = () => {\r\n      this._updatePagination();\r\n      this._alignInkBarToSelectedTab();\r\n    };\r\n\r\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\r\n      .withHorizontalOrientation(this._getLayoutDirection())\r\n      .withWrap();\r\n\r\n    this._keyManager.updateActiveItem(0);\r\n\r\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\r\n    // This helps in cases where the user lands directly on a page with paginated tabs.\r\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\r\n\r\n    // On dir change or window resize, realign the ink bar and update the orientation of\r\n    // the key manager if the direction has changed.\r\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n      realign();\r\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\r\n    });\r\n\r\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\r\n    // event in order to provide a public event that notifies about focus changes. Also we realign\r\n    // the tabs container by scrolling the new focused tab into the visible section.\r\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\r\n      this.indexFocused.emit(newFocusIndex);\r\n      this._setTabFocus(newFocusIndex);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /**\r\n   * Callback for when the MutationObserver detects that the content has changed.\r\n   */\r\n  _onContentChanges() {\r\n    this._updatePagination();\r\n    this._alignInkBarToSelectedTab();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Updating the view whether pagination should be enabled or not\r\n   */\r\n  _updatePagination() {\r\n    this._checkPaginationEnabled();\r\n    this._checkScrollingControls();\r\n    this._updateTabScrollPosition();\r\n  }\r\n\r\n  /** Tracks which element has focus; used for keyboard navigation */\r\n  get focusIndex(): number {\r\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\r\n  }\r\n\r\n  /** When the focus index is set, we must manually send focus to the correct label */\r\n  set focusIndex(value: number) {\r\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\r\n      return;\r\n    }\r\n\r\n    this._keyManager.setActiveItem(value);\r\n  }\r\n\r\n  /**\r\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\r\n   * providing a valid index and return true.\r\n   */\r\n  _isValidIndex(index: number): boolean {\r\n    if (!this._labelWrappers) { return true; }\r\n\r\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\r\n    return !!tab && !tab.disabled;\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\r\n   * scrolling is enabled.\r\n   */\r\n  _setTabFocus(tabIndex: number) {\r\n    if (this._showPaginationControls) {\r\n      this._scrollToLabel(tabIndex);\r\n    }\r\n\r\n    if (this._labelWrappers && this._labelWrappers.length) {\r\n      this._labelWrappers.toArray()[tabIndex].focus();\r\n\r\n      // Do not let the browser manage scrolling to focus the element, this will be handled\r\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\r\n      // should be the full width minus the offset width.\r\n      const containerEl = this._tabListContainer.nativeElement;\r\n      const dir = this._getLayoutDirection();\r\n\r\n      if (dir == 'ltr') {\r\n        containerEl.scrollLeft = 0;\r\n      } else {\r\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** The layout direction of the containing app. */\r\n  _getLayoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\r\n  _updateTabScrollPosition() {\r\n    const scrollDistance = this.scrollDistance;\r\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\r\n\r\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\r\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\r\n    // and ripples will exceed the boundaries of the visible tab bar.\r\n    // See: https://github.com/angular/material2/issues/10276\r\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\r\n  }\r\n\r\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\r\n  get scrollDistance(): number { return this._scrollDistance; }\r\n  set scrollDistance(v: number) {\r\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\r\n\r\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\r\n    // transformation can move the header.\r\n    this._scrollDistanceChanged = true;\r\n    this._checkScrollingControls();\r\n  }\r\n\r\n  /**\r\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\r\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\r\n   * length of the tab list view window.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _scrollHeader(scrollDir: ScrollDirection) {\r\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n\r\n    // Move the scroll distance one-third the length of the tab list's viewport.\r\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\r\n  }\r\n\r\n  /**\r\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _scrollToLabel(labelIndex: number) {\r\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\r\n\r\n    if (!selectedLabel) { return; }\r\n\r\n    // The view length is the visible width of the tab labels.\r\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n\r\n    let labelBeforePos: number, labelAfterPos: number;\r\n    if (this._getLayoutDirection() == 'ltr') {\r\n      labelBeforePos = selectedLabel.getOffsetLeft();\r\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\r\n    } else {\r\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\r\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\r\n    }\r\n\r\n    const beforeVisiblePos = this.scrollDistance;\r\n    const afterVisiblePos = this.scrollDistance + viewLength;\r\n\r\n    if (labelBeforePos < beforeVisiblePos) {\r\n      // Scroll header to move label to the before direction\r\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\r\n    } else if (labelAfterPos > afterVisiblePos) {\r\n      // Scroll header to move label to the after direction\r\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\r\n   * tab list is wider than the size of the header container, then the pagination controls should\r\n   * be shown.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _checkPaginationEnabled() {\r\n    const isEnabled =\r\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\r\n\r\n    if (!isEnabled) {\r\n      this.scrollDistance = 0;\r\n    }\r\n\r\n    if (isEnabled !== this._showPaginationControls) {\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    this._showPaginationControls = isEnabled;\r\n  }\r\n\r\n  /**\r\n   * Evaluate whether the before and after controls should be enabled or disabled.\r\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\r\n   * before button. If the header is at the end of the list (scroll distance is equal to the\r\n   * maximum distance we can scroll), then disable the after button.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _checkScrollingControls() {\r\n    // Check if the pagination arrows should be activated.\r\n    this._disableScrollBefore = this.scrollDistance == 0;\r\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\r\n   * is equal to the difference in width between the tab list container and tab header container.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _getMaxScrollDistance(): number {\r\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\r\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n    return (lengthOfTabList - viewLength) || 0;\r\n  }\r\n\r\n  /** Tells the ink-bar to align itself to the current label wrapper */\r\n  _alignInkBarToSelectedTab(): void {\r\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\r\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\r\n        null;\r\n\r\n    this._inkBar.alignToElement(selectedLabelWrapper);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisableRipple,\r\n  mixinColor,\r\n  mixinDisableRipple,\r\n  ThemePalette\r\n} from '@angular/material/core';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {MatTab} from './tab';\r\nimport {MatTabHeader} from './tab-header';\r\n\r\n\r\n/** Used to generate unique ID's for each tab component */\r\nlet nextId = 0;\r\n\r\n/** A simple change event emitted on focus or selection changes. */\r\nexport class MatTabChangeEvent {\r\n  /** Index of the currently-selected tab. */\r\n  index: number;\r\n  /** Reference to the currently-selected tab. */\r\n  tab: MatTab;\r\n}\r\n\r\n/** Possible positions for the tab header. */\r\nexport type MatTabHeaderPosition = 'above' | 'below';\r\n\r\n// Boilerplate for applying mixins to MatTabGroup.\r\n/** @docs-private */\r\nexport class MatTabGroupBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\r\n\r\n/**\r\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\r\n * animated ink-bar, keyboard navigation, and screen reader.\r\n * See: https://material.io/design/components/tabs.html\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-group',\r\n  exportAs: 'matTabGroup',\r\n  templateUrl: 'tab-group.html',\r\n  styleUrls: ['tab-group.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color', 'disableRipple'],\r\n  host: {\r\n    'class': 'mat-tab-group',\r\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\r\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\r\n  },\r\n})\r\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\r\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\r\n\r\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\r\n\r\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\r\n\r\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\r\n\r\n  /** The tab index that should be selected after the content has been checked. */\r\n  private _indexToSelect: number | null = 0;\r\n\r\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\r\n  private _tabBodyWrapperHeight: number = 0;\r\n\r\n  /** Subscription to tabs being added/removed. */\r\n  private _tabsSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to changes in the tab labels. */\r\n  private _tabLabelSubscription = Subscription.EMPTY;\r\n\r\n  /** Whether the tab group should grow to the size of the active tab. */\r\n  @Input()\r\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\r\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\r\n  private _dynamicHeight: boolean = false;\r\n\r\n  /** The index of the active tab. */\r\n  @Input()\r\n  get selectedIndex(): number | null { return this._selectedIndex; }\r\n  set selectedIndex(value: number | null) {\r\n    this._indexToSelect = coerceNumberProperty(value, null);\r\n  }\r\n  private _selectedIndex: number | null = null;\r\n\r\n  /** Position of the tab header. */\r\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\r\n\r\n  /** Background color of the tab group. */\r\n  @Input()\r\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\r\n  set backgroundColor(value: ThemePalette) {\r\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\r\n\r\n    if (value) {\r\n      nativeElement.classList.add(`mat-background-${value}`);\r\n    }\r\n\r\n    this._backgroundColor = value;\r\n  }\r\n  private _backgroundColor: ThemePalette;\r\n\r\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\r\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** Event emitted when focus has changed within a tab group. */\r\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\r\n      new EventEmitter<MatTabChangeEvent>();\r\n\r\n  /** Event emitted when the body animation has completed */\r\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Event emitted when the tab selection has changed. */\r\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\r\n      new EventEmitter<MatTabChangeEvent>(true);\r\n\r\n  private _groupId: number;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    super(elementRef);\r\n    this._groupId = nextId++;\r\n  }\r\n\r\n  /**\r\n   * After the content is checked, this component knows what tabs have been defined\r\n   * and what the selected index should be. This is where we can know exactly what position\r\n   * each tab should be in according to the new selected index, and additionally we know how\r\n   * a new selected tab should transition in (from the left or right).\r\n   */\r\n  ngAfterContentChecked() {\r\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\r\n    // the amount of tabs changes before the actual change detection runs.\r\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\r\n\r\n    // If there is a change in selected index, emit a change event. Should not trigger if\r\n    // the selected index has not yet been initialized.\r\n    if (this._selectedIndex != indexToSelect) {\r\n      const isFirstRun = this._selectedIndex == null;\r\n\r\n      if (!isFirstRun) {\r\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\r\n      }\r\n\r\n      // Changing these values after change detection has run\r\n      // since the checked content may contain references to them.\r\n      Promise.resolve().then(() => {\r\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\r\n\r\n        if (!isFirstRun) {\r\n          this.selectedIndexChange.emit(indexToSelect);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\r\n    this._tabs.forEach((tab: MatTab, index: number) => {\r\n      tab.position = index - indexToSelect;\r\n\r\n      // If there is already a selected tab, then set up an origin for the next selected tab\r\n      // if it doesn't have one already.\r\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\r\n        tab.origin = indexToSelect - this._selectedIndex;\r\n      }\r\n    });\r\n\r\n    if (this._selectedIndex !== indexToSelect) {\r\n      this._selectedIndex = indexToSelect;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._subscribeToTabLabels();\r\n\r\n    // Subscribe to changes in the amount of tabs, in order to be\r\n    // able to re-render the content as new tabs are added or removed.\r\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\r\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\r\n\r\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\r\n      // explicit change that selects a different tab.\r\n      if (indexToSelect === this._selectedIndex) {\r\n        const tabs = this._tabs.toArray();\r\n\r\n        for (let i = 0; i < tabs.length; i++) {\r\n          if (tabs[i].isActive) {\r\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\r\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\r\n            // adding a tab within the `selectedIndexChange` event.\r\n            this._indexToSelect = this._selectedIndex = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      this._subscribeToTabLabels();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabsSubscription.unsubscribe();\r\n    this._tabLabelSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Re-aligns the ink bar to the selected tab element. */\r\n  realignInkBar() {\r\n    if (this._tabHeader) {\r\n      this._tabHeader._alignInkBarToSelectedTab();\r\n    }\r\n  }\r\n\r\n  _focusChanged(index: number) {\r\n    this.focusChange.emit(this._createChangeEvent(index));\r\n  }\r\n\r\n  private _createChangeEvent(index: number): MatTabChangeEvent {\r\n    const event = new MatTabChangeEvent;\r\n    event.index = index;\r\n    if (this._tabs && this._tabs.length) {\r\n      event.tab = this._tabs.toArray()[index];\r\n    }\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\r\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\r\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\r\n   * manually.\r\n   */\r\n  private _subscribeToTabLabels() {\r\n    if (this._tabLabelSubscription) {\r\n      this._tabLabelSubscription.unsubscribe();\r\n    }\r\n\r\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\r\n      .subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\r\n  private _clampTabIndex(index: number | null): number {\r\n    // Note the `|| 0`, which ensures that values like NaN can't get through\r\n    // and which would otherwise throw the component into an infinite loop\r\n    // (since Math.max(NaN, 0) === NaN).\r\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\r\n  }\r\n\r\n  /** Returns a unique id for each tab label element */\r\n  _getTabLabelId(i: number): string {\r\n    return `mat-tab-label-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /** Returns a unique id for each tab content element */\r\n  _getTabContentId(i: number): string {\r\n    return `mat-tab-content-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /**\r\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\r\n   * height property is true.\r\n   */\r\n  _setTabBodyWrapperHeight(tabHeight: number): void {\r\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\r\n\r\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\r\n\r\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\r\n\r\n    // This conditional forces the browser to paint the height so that\r\n    // the animation to the new height can have an origin.\r\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\r\n      wrapper.style.height = tabHeight + 'px';\r\n    }\r\n  }\r\n\r\n  /** Removes the height of the tab body wrapper. */\r\n  _removeTabBodyWrapperHeight(): void {\r\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\r\n    this._tabBodyWrapper.nativeElement.style.height = '';\r\n    this.animationDone.emit();\r\n  }\r\n\r\n  /** Handle click events, setting new selected index if appropriate. */\r\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\r\n    if (!tab.disabled) {\r\n      this.selectedIndex = tabHeader.focusIndex = idx;\r\n    }\r\n  }\r\n\r\n  /** Retrieves the tabindex for the tab. */\r\n  _getTabIndex(tab: MatTab, idx: number): number | null {\r\n    if (tab.disabled) {\r\n      return null;\r\n    }\r\n    return this.selectedIndex === idx ? 0 : -1;\r\n  }\r\n}\r\n"],"names":["type","NgZone","Platform","undefined","decorators","Optional","Inject","args","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","MatTabLink","propDecorators","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabNav","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","_MAT_INK_BAR_POSITIONER_FACTORY","element","left","offsetLeft","width","offsetWidth","setPrototypeOf","__proto__","Array","p","hasOwnProperty","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_elementRef","_ngZone","_inkBarPositioner","alignToElement","_this","show","requestAnimationFrame","runOutsideAngular","_setStyles","nativeElement","style","visibility","hide","positions","inkBar","Directive","selector","host","class","ElementRef","templateRef","viewContainerRef","_super","call","tslib_1.__extends","TemplateRef","ViewContainerRef","CdkPortal","template","MatTabBase","_MatTabMixinBase","mixinDisabled","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","defineProperty","ngOnChanges","changes","next","ngOnDestroy","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","Component","inputs","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","exportAs","ViewChild","Input","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","pipe","startWith","_isCenterPosition","_position","subscribe","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","value","styles","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","elementRef","focus","getOffsetLeft","getOffsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","merge","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","index","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","forEach","_subscribeToTabLabels","tabs","i","realignInkBar","_tabHeader","_focusChanged","apply","map","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)"],"mappings":"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"}