{"version":3,"file":"material-radio.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HasTabIndex,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\n// Increasing integer for generating unique ids for radio components.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\r\n * allows it to support [(ngModel)] and ngControl.\r\n * @docs-private\r\n */\r\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatRadioGroup),\r\n  multi: true\r\n};\r\n\r\n/** Change event object emitted by MatRadio and MatRadioGroup. */\r\nexport class MatRadioChange {\r\n  constructor(\r\n    /** The MatRadioButton that emits the change event. */\r\n    public source: MatRadioButton,\r\n    /** The value of the MatRadioButton. */\r\n    public value: any) {}\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatRadioGroup.\r\n/** @docs-private */\r\nexport class MatRadioGroupBase { }\r\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\r\n\r\n/**\r\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\r\n */\r\n@Directive({\r\n  selector: 'mat-radio-group',\r\n  exportAs: 'matRadioGroup',\r\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\r\n  host: {\r\n    'role': 'radiogroup',\r\n    'class': 'mat-radio-group',\r\n  },\r\n  inputs: ['disabled'],\r\n})\r\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\r\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\r\n\r\n  /** Selected value for the radio group. */\r\n  private _value: any = null;\r\n\r\n  /** The HTML name attribute applied to radio buttons in this group. */\r\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\r\n\r\n  /** The currently selected radio button. Should match value. */\r\n  private _selected: MatRadioButton | null = null;\r\n\r\n  /** Whether the `value` has been set to its initial value. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n  private _labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Whether the radio group is disabled. */\r\n  private _disabled: boolean = false;\r\n\r\n  /** Whether the radio group is required. */\r\n  private _required: boolean = false;\r\n\r\n  /** The method to be called in order to update ngModel */\r\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /**\r\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\n   * @docs-private\r\n   */\r\n  onTouched: () => any = () => {};\r\n\r\n  /**\r\n   * Event emitted when the group value changes.\r\n   * Change events are only emitted when the value changes due to user interaction with\r\n   * a radio button (the same behavior as `<input type-\"radio\">`).\r\n   */\r\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\r\n\r\n  /** Child radio buttons. */\r\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\r\n  _radios: QueryList<MatRadioButton>;\r\n\r\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\r\n  @Input()\r\n  get name(): string { return this._name; }\r\n  set name(value: string) {\r\n    this._name = value;\r\n    this._updateRadioButtonNames();\r\n  }\r\n\r\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n  @Input()\r\n  get labelPosition(): 'before' | 'after' {\r\n    return this._labelPosition;\r\n  }\r\n  set labelPosition(v) {\r\n    this._labelPosition = v === 'before' ? 'before' : 'after';\r\n    this._markRadiosForCheck();\r\n  }\r\n\r\n  /**\r\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\r\n   * a corresponding radio button with a matching value. If there is not such a corresponding\r\n   * radio button, this value persists to be applied in case a new radio button is added with a\r\n   * matching value.\r\n   */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (this._value !== newValue) {\r\n      // Set this before proceeding to ensure no circular loop occurs with selection.\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedRadioFromValue();\r\n      this._checkSelectedRadioButton();\r\n    }\r\n  }\r\n\r\n  _checkSelectedRadioButton() {\r\n    if (this._selected && !this._selected.checked) {\r\n      this._selected.checked = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The currently selected radio button. If set to a new radio button, the radio group value\r\n   * will be updated to match the new selected button.\r\n   */\r\n  @Input()\r\n  get selected() { return this._selected; }\r\n  set selected(selected: MatRadioButton | null) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n    this._checkSelectedRadioButton();\r\n  }\r\n\r\n  /** Whether the radio group is disabled */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\r\n\r\n  /** Whether the radio group is required */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\r\n\r\n  constructor(private _changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Initialize properties once content children are available.\r\n   * This allows us to propagate relevant attributes to associated buttons.\r\n   */\r\n  ngAfterContentInit() {\r\n    // Mark this component as initialized in AfterContentInit because the initial value can\r\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\r\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\r\n   * radio buttons upon their blur.\r\n   */\r\n  _touch() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  private _updateRadioButtonNames(): void {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => {\r\n        radio.name = this.name;\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Updates the `selected` radio button from the internal _value state. */\r\n  private _updateSelectedRadioFromValue(): void {\r\n    // If the value already matches the selected radio, do nothing.\r\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\r\n\r\n    if (this._radios && !isAlreadySelected) {\r\n      this._selected = null;\r\n      this._radios.forEach(radio => {\r\n        radio.checked = this.value === radio.value;\r\n        if (radio.checked) {\r\n          this._selected = radio;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  _emitChangeEvent(): void {\r\n    if (this._isInitialized) {\r\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\r\n    }\r\n  }\r\n\r\n  _markRadiosForCheck() {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => radio._markForCheck());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the model value changes.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the control is touched.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\r\n   * @param isDisabled Whether the control should be disabled.\r\n   */\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatRadioButton.\r\n/** @docs-private */\r\nexport class MatRadioButtonBase {\r\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\r\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\r\n  // defined to properly work.\r\n  disabled: boolean;\r\n\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n// As per Material design specifications the selection control radio should use the accent color\r\n// palette by default. https://material.io/guidelines/components/selection-controls.html\r\nexport const _MatRadioButtonMixinBase =\r\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\r\n\r\n/**\r\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-radio-button',\r\n  templateUrl: 'radio.html',\r\n  styleUrls: ['radio.css'],\r\n  inputs: ['color', 'disableRipple', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matRadioButton',\r\n  host: {\r\n    'class': 'mat-radio-button',\r\n    '[class.mat-radio-checked]': 'checked',\r\n    '[class.mat-radio-disabled]': 'disabled',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n    '[attr.id]': 'id',\r\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\r\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\r\n    // the focus to the native element.\r\n    '(focus)': '_inputElement.nativeElement.focus()',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatRadioButton extends _MatRadioButtonMixinBase\r\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\r\n\r\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\r\n\r\n  /** The unique ID for the radio button. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\r\n  @Input() name: string;\r\n\r\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\r\n  @Input('aria-describedby') ariaDescribedby: string;\r\n\r\n  /** Whether this radio button is checked. */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value: boolean) {\r\n    const newCheckedState = coerceBooleanProperty(value);\r\n    if (this._checked !== newCheckedState) {\r\n      this._checked = newCheckedState;\r\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\r\n        this.radioGroup.selected = this;\r\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\r\n\r\n        // When unchecking the selected radio button, update the selected radio\r\n        // property on the group.\r\n        this.radioGroup.selected = null;\r\n      }\r\n\r\n      if (newCheckedState) {\r\n        // Notify all radio buttons with the same name to un-check.\r\n        this._radioDispatcher.notify(this.id, this.name);\r\n      }\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** The value of this radio button. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    if (this._value !== value) {\r\n      this._value = value;\r\n      if (this.radioGroup !== null) {\r\n        if (!this.checked) {\r\n          // Update checked when the value changed to match the radio group's value\r\n          this.checked = this.radioGroup.value === value;\r\n        }\r\n        if (this.checked) {\r\n          this.radioGroup.selected = this;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\r\n  @Input()\r\n  get labelPosition(): 'before' | 'after' {\r\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\r\n  }\r\n  set labelPosition(value) {\r\n    this._labelPosition = value;\r\n  }\r\n  private _labelPosition: 'before' | 'after';\r\n\r\n  /** Whether the radio button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newDisabledState = coerceBooleanProperty(value);\r\n    if (this._disabled !== newDisabledState) {\r\n      this._disabled = newDisabledState;\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the radio button is required. */\r\n  @Input()\r\n  get required(): boolean {\r\n    return this._required || (this.radioGroup && this.radioGroup.required);\r\n  }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /**\r\n   * Event emitted when the checked state of this radio button changes.\r\n   * Change events are only emitted when the value changes due to user interaction with\r\n   * the radio button (the same behavior as `<input type-\"radio\">`).\r\n   */\r\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\r\n\r\n  /** The parent radio group. May or may not be present. */\r\n  radioGroup: MatRadioGroup;\r\n\r\n  /** ID of the native input element inside `<mat-radio-button>` */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Whether this radio is checked. */\r\n  private _checked: boolean = false;\r\n\r\n  /** Whether this radio is disabled. */\r\n  private _disabled: boolean;\r\n\r\n  /** Whether this radio is required. */\r\n  private _required: boolean;\r\n\r\n  /** Value assigned to this radio. */\r\n  private _value: any = null;\r\n\r\n  /** The child ripple instance. */\r\n  @ViewChild(MatRipple) _ripple: MatRipple;\r\n\r\n  /** Reference to the current focus ripple. */\r\n  private _focusRipple: RippleRef | null;\r\n\r\n  /** Unregister function for _radioDispatcher */\r\n  private _removeUniqueSelectionListener: () => void = () => {};\r\n\r\n  /** The native `<input type=radio>` element */\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  constructor(@Optional() radioGroup: MatRadioGroup,\r\n              elementRef: ElementRef,\r\n              private _changeDetector: ChangeDetectorRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _radioDispatcher: UniqueSelectionDispatcher,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\r\n    super(elementRef);\r\n\r\n    // Assertions. Ideally these should be stripped out by the compiler.\r\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\r\n    this.radioGroup = radioGroup;\r\n\r\n    this._removeUniqueSelectionListener =\r\n      _radioDispatcher.listen((id: string, name: string) => {\r\n        if (id !== this.id && name === this.name) {\r\n          this.checked = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  /** Focuses the radio button. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\r\n\r\n  /**\r\n   * Marks the radio button as needing checking for change detection.\r\n   * This method is exposed because the parent radio group will directly\r\n   * update bound properties of the radio button.\r\n   */\r\n  _markForCheck() {\r\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\r\n    // update radio button's status\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.radioGroup) {\r\n      // If the radio is inside a radio group, determine if it should be checked\r\n      this.checked = this.radioGroup.value === this._value;\r\n      // Copy name from parent radio group\r\n      this.name = this.radioGroup.name;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n    this._removeUniqueSelectionListener();\r\n  }\r\n\r\n  /** Dispatch change event with current value. */\r\n  private _emitChangeEvent(): void {\r\n    this.change.emit(new MatRadioChange(this, this._value));\r\n  }\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `radio-button` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Triggered when the radio button received a click or the input recognized any change.\r\n   * Clicking on a label element, will trigger a change event on the associated input.\r\n   */\r\n  _onInputChange(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n\r\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\r\n    this.checked = true;\r\n    this._emitChangeEvent();\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\r\n      this.radioGroup._touch();\r\n      if (groupValueChanged) {\r\n        this.radioGroup._emitChangeEvent();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Function is called whenever the focus changes for the input element. */\r\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\r\n    } else if (!focusOrigin) {\r\n      if (this.radioGroup) {\r\n        this.radioGroup._touch();\r\n      }\r\n\r\n      if (this._focusRipple) {\r\n        this._focusRipple.fadeOut();\r\n        this._focusRipple = null;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatRadioButton, MatRadioGroup} from './radio';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\r\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\r\n  declarations: [MatRadioGroup, MatRadioButton],\r\n})\r\nexport class MatRadioModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatRadioGroup","multi","MatRadioChange","source","value","MatRadioGroupBase","_MatRadioGroupMixinBase","mixinDisabled","_changeDetector","_this","_super","call","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","EventEmitter","tslib_1.__extends","defineProperty","_updateRadioButtonNames","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","coerceBooleanProperty","ngAfterContentInit","_touch","_radios","forEach","radio","name","isAlreadySelected","_emitChangeEvent","emit","_markForCheck","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","type","Directive","args","selector","exportAs","providers","host","role","class","inputs","ChangeDetectorRef","Output","ContentChildren","MatRadioButton","descendants","Input","labelPosition","required","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","mixinColor","mixinDisableRipple","mixinTabIndex","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_uniqueId","id","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","focus","focusVia","_inputElement","nativeElement","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","_onInputFocusChange","ngOnDestroy","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputChange","groupValueChanged","_focusRipple","fadeOut","_ripple","launch","persistent","Component","template","styles","encapsulation","ViewEncapsulation","None","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class._mat-animation-noopable]","[attr.id]","changeDetection","ChangeDetectionStrategy","OnPush","FocusMonitor","UniqueSelectionDispatcher","undefined","decorators","Optional","Inject","ANIMATION_MODULE_TYPE","propDecorators","ariaLabel","ariaLabelledby","ariaDescribedby","ViewChild","MatRipple","NgModule","imports","CommonModule","MatRippleModule","MatCommonModule","exports","declarations","MatRadioModule"],"mappings":"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"}