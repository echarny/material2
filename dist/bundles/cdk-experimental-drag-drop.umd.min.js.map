{"version":3,"file":"cdk-experimental-drag-drop.umd.min.js","sources":["../../src/cdk-experimental/drag-drop/drag.ts","../../src/cdk-experimental/drag-drop/drag-utils.ts","../../src/cdk-experimental/drag-drop/drag-handle.ts","../../src/cdk-experimental/drag-drop/drop-container.ts","../../src/cdk-experimental/drag-drop/drag-preview.ts","../../src/cdk-experimental/drag-drop/drag-placeholder.ts","../../src/cdk-experimental/drag-drop/drag-drop-registry.ts","../../src/cdk-experimental/drag-drop/drop.ts","../../src/cdk-experimental/drag-drop/drag-drop-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {CdkDragHandle} from './drag-handle';\r\nimport {CdkDropContainer, CDK_DROP_CONTAINER} from './drop-container';\r\nimport {\r\n  CdkDragStart,\r\n  CdkDragEnd,\r\n  CdkDragExit,\r\n  CdkDragEnter,\r\n  CdkDragDrop,\r\n  CdkDragMove,\r\n} from './drag-events';\r\nimport {CdkDragPreview} from './drag-preview';\r\nimport {CdkDragPlaceholder} from './drag-placeholder';\r\nimport {ViewportRuler} from '@angular/cdk/overlay';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\nimport {Subject, merge, Observable} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\n// TODO(crisbeto): add auto-scrolling functionality.\r\n// TODO(crisbeto): add an API for moving a draggable up/down the\r\n// list programmatically. Useful for keyboard controls.\r\n\r\n/** Element that can be moved inside a CdkDrop container. */\r\n@Directive({\r\n  selector: '[cdkDrag]',\r\n  exportAs: 'cdkDrag',\r\n  host: {\r\n    'class': 'cdk-drag',\r\n    '(mousedown)': '_startDragging($event)',\r\n    '(touchstart)': '_startDragging($event)',\r\n  }\r\n})\r\nexport class CdkDrag<T = any> implements OnDestroy {\r\n  private _document: Document;\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Element displayed next to the user's pointer while the element is dragged. */\r\n  private _preview: HTMLElement;\r\n\r\n  /** Reference to the view of the preview element. */\r\n  private _previewRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Reference to the view of the placeholder element. */\r\n  private _placeholderRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\r\n  private _placeholder: HTMLElement;\r\n\r\n  /** Coordinates within the element at which the user picked up the element. */\r\n  private _pickupPositionInElement: Point;\r\n\r\n  /** Coordinates on the page at which the user picked up the element. */\r\n  private _pickupPositionOnPage: Point;\r\n\r\n  /**\r\n   * Reference to the element that comes after the draggable in the DOM, at the time\r\n   * it was picked up. Used for restoring its initial position when it's dropped.\r\n   */\r\n  private _nextSibling: Node | null;\r\n\r\n  /**\r\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n   * passive transform in order for the dragged element to retain its new position\r\n   * after the user has stopped dragging and because we need to know the relative\r\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n   */\r\n  private _passiveTransform: Point = {x: 0, y: 0};\r\n\r\n  /** CSS `transform` that is applied to the element while it's being dragged. */\r\n  private _activeTransform: Point = {x: 0, y: 0};\r\n\r\n  /** Whether the element has moved since the user started dragging it. */\r\n  private _hasMoved = false;\r\n\r\n  /** Drop container in which the CdkDrag resided when dragging began. */\r\n  private _initialContainer: CdkDropContainer;\r\n\r\n  /** Cached scroll position on the page when the element was picked up. */\r\n  private _scrollPosition: {top: number, left: number};\r\n\r\n  /** Emits when the item is being moved. */\r\n  private _moveEvents = new Subject<CdkDragMove<T>>();\r\n\r\n  /**\r\n   * Amount of subscriptions to the move event. Used to avoid\r\n   * hitting the zone if the consumer didn't subscribe to it.\r\n   */\r\n  private _moveEventSubscriptions = 0;\r\n\r\n  /** Elements that can be used to drag the draggable item. */\r\n  @ContentChildren(CdkDragHandle) _handles: QueryList<CdkDragHandle>;\r\n\r\n  /** Element that will be used as a template to create the draggable item's preview. */\r\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\r\n\r\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\r\n\r\n  /** Arbitrary data to attach to this drag instance. */\r\n  @Input('cdkDragData') data: T;\r\n\r\n  /** Locks the position of the dragged element along the specified axis. */\r\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\r\n\r\n  /** Emits when the user starts dragging the item. */\r\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\r\n\r\n  /** Emits when the user stops dragging an item in the container. */\r\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\r\n\r\n  /** Emits when the user has moved the item into a new container. */\r\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\r\n      new EventEmitter<CdkDragEnter<any>>();\r\n\r\n  /** Emits when the user removes the item its container by dragging it into another container. */\r\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\r\n      new EventEmitter<CdkDragExit<any>>();\r\n\r\n  /** Emits when the user drops the item inside a container. */\r\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\r\n      new EventEmitter<CdkDragDrop<any>>();\r\n\r\n  /**\r\n   * Emits as the user is dragging the item. Use with caution,\r\n   * because this event will fire for every pixel that the user has dragged.\r\n   */\r\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> = Observable.create(observer => {\r\n    const subscription = this._moveEvents.subscribe(observer);\r\n    this._moveEventSubscriptions++;\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      this._moveEventSubscriptions--;\r\n    };\r\n  });\r\n\r\n  constructor(\r\n    /** Element that the draggable is attached to. */\r\n    public element: ElementRef<HTMLElement>,\r\n    /** Droppable container that the draggable is a part of. */\r\n    @Inject(CDK_DROP_CONTAINER) @Optional() @SkipSelf() public dropContainer: CdkDropContainer,\r\n    @Inject(DOCUMENT) document: any,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropContainer>,\r\n    @Optional() private _dir: Directionality) {\r\n      this._document = document;\r\n      _dragDropRegistry.registerDragItem(this);\r\n    }\r\n\r\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\r\n  getPlaceholderElement(): HTMLElement {\r\n    return this._placeholder;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n\r\n    // Do this check before removing from the registry since it'll\r\n    // stop being considered as dragged once it is removed.\r\n    if (this._dragDropRegistry.isDragging(this)) {\r\n      // Since we move out the element to the end of the body while it's being\r\n      // dragged, we have to make sure that it's removed if it gets destroyed.\r\n      this._removeElement(this.element.nativeElement);\r\n    }\r\n\r\n    this._nextSibling = null;\r\n    this._dragDropRegistry.removeDragItem(this);\r\n    this._moveEvents.complete();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Starts the dragging sequence. */\r\n  _startDragging(event: MouseEvent | TouchEvent) {\r\n    // Delegate the event based on whether it started from a handle or the element itself.\r\n    if (this._handles.length) {\r\n      const targetHandle = this._handles.find(handle => {\r\n        const element = handle.element.nativeElement;\r\n        const target = event.target;\r\n        return !!target && (target === element || element.contains(target as HTMLElement));\r\n      });\r\n\r\n      if (targetHandle) {\r\n        this._pointerDown(targetHandle.element, event);\r\n      }\r\n    } else {\r\n      this._pointerDown(this.element, event);\r\n    }\r\n  }\r\n\r\n  /** Handler for when the pointer is pressed down on the element or the handle. */\r\n  private _pointerDown = (referenceElement: ElementRef<HTMLElement>,\r\n                          event: MouseEvent | TouchEvent) => {\r\n    if (this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    const endedOrDestroyed = merge(this.ended, this._destroyed);\r\n\r\n    this._dragDropRegistry.pointerMove\r\n        .pipe(takeUntil(endedOrDestroyed))\r\n        .subscribe(this._pointerMove);\r\n\r\n        this._dragDropRegistry.pointerUp\r\n        .pipe(takeUntil(endedOrDestroyed))\r\n        .subscribe(this._pointerUp);\r\n\r\n    this._dragDropRegistry.startDragging(this, event);\r\n    this._initialContainer = this.dropContainer;\r\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\r\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\r\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\r\n        this._getPointerPositionInElement(referenceElement, event);\r\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\r\n\r\n    // Emit the event on the item before the one on the container.\r\n    this.started.emit({source: this});\r\n\r\n    if (this.dropContainer) {\r\n      const element = this.element.nativeElement;\r\n      const preview = this._preview = this._createPreviewElement();\r\n      const placeholder = this._placeholder = this._createPlaceholderElement();\r\n\r\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\r\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\r\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\r\n      element.style.display = 'none';\r\n      this._nextSibling = element.nextSibling;\r\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\r\n      this._document.body.appendChild(preview);\r\n      this.dropContainer.start();\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\r\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\r\n    // TODO(crisbeto): this should start dragging after a certain threshold,\r\n    // otherwise we risk interfering with clicks on the element.\r\n    if (!this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    this._hasMoved = true;\r\n    event.preventDefault();\r\n\r\n    const pointerPosition = this._getConstrainedPointerPosition(event);\r\n\r\n    if (this.dropContainer) {\r\n      this._updateActiveDropContainer(pointerPosition);\r\n    } else {\r\n      const activeTransform = this._activeTransform;\r\n      activeTransform.x =\r\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\r\n      activeTransform.y =\r\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\r\n      this._setTransform(this.element.nativeElement, activeTransform.x, activeTransform.y);\r\n    }\r\n\r\n    // Since this event gets fired for every pixel while dragging, we only\r\n    // want to fire it if the consumer opted into it. Also we have to\r\n    // re-enter the zone becaus we run all of the events on the outside.\r\n    if (this._moveEventSubscriptions > 0) {\r\n      this._ngZone.run(() => {\r\n        this._moveEvents.next({\r\n          source: this,\r\n          pointerPosition,\r\n          event\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\r\n  private _pointerUp = () => {\r\n    if (!this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    this._dragDropRegistry.stopDragging(this);\r\n\r\n    if (!this.dropContainer) {\r\n      // Convert the active transform into a passive one. This means that next time\r\n      // the user starts dragging the item, its position will be calculated relatively\r\n      // to the new passive transform.\r\n      this._passiveTransform.x = this._activeTransform.x;\r\n      this._passiveTransform.y = this._activeTransform.y;\r\n      this._ngZone.run(() => this.ended.emit({source: this}));\r\n      return;\r\n    }\r\n\r\n    this._animatePreviewToPlaceholder().then(() => this._cleanupDragArtifacts());\r\n  }\r\n\r\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\r\n  private _cleanupDragArtifacts() {\r\n    // Restore the element's visibility and insert it at its old position in the DOM.\r\n    // It's important that we maintain the position, because moving the element around in the DOM\r\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\r\n    // while moving the existing elements in all other cases.\r\n    this.element.nativeElement.style.display = '';\r\n\r\n    if (this._nextSibling) {\r\n      this._nextSibling.parentNode!.insertBefore(this.element.nativeElement, this._nextSibling);\r\n    } else {\r\n      this._placeholder.parentNode!.appendChild(this.element.nativeElement);\r\n    }\r\n\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n\r\n    // Re-enter the NgZone since we bound `document` events on the outside.\r\n    this._ngZone.run(() => {\r\n      const currentIndex = this.dropContainer.getItemIndex(this);\r\n\r\n      this.ended.emit({source: this});\r\n      this.dropped.emit({\r\n        item: this,\r\n        currentIndex,\r\n        previousIndex: this._initialContainer.getItemIndex(this),\r\n        container: this.dropContainer,\r\n        previousContainer: this._initialContainer\r\n      });\r\n      this.dropContainer.drop(this, currentIndex, this._initialContainer);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the item's position in its drop container, or moves it\r\n   * into a new one, depending on its current drag position.\r\n   */\r\n  private _updateActiveDropContainer({x, y}) {\r\n    // Drop container that draggable has been moved into.\r\n    const newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\r\n\r\n    if (newContainer) {\r\n      this._ngZone.run(() => {\r\n        // Notify the old container that the item has left.\r\n        this.exited.emit({item: this, container: this.dropContainer});\r\n        this.dropContainer.exit(this);\r\n        // Notify the new container that the item has entered.\r\n        this.entered.emit({item: this, container: newContainer});\r\n        this.dropContainer = newContainer;\r\n        this.dropContainer.enter(this, x, y);\r\n      });\r\n    }\r\n\r\n    this.dropContainer._sortItem(this, x, y);\r\n    this._setTransform(this._preview,\r\n                       x - this._pickupPositionInElement.x,\r\n                       y - this._pickupPositionInElement.y);\r\n  }\r\n\r\n  /**\r\n   * Creates the element that will be rendered next to the user's pointer\r\n   * and will be used as a preview of the element that is being dragged.\r\n   */\r\n  private _createPreviewElement(): HTMLElement {\r\n    let preview: HTMLElement;\r\n\r\n    if (this._previewTemplate) {\r\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\r\n                                                                this._previewTemplate.data);\r\n\r\n      preview = viewRef.rootNodes[0];\r\n      this._previewRef = viewRef;\r\n      this._setTransform(preview, this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\r\n    } else {\r\n      const element = this.element.nativeElement;\r\n      const elementRect = element.getBoundingClientRect();\r\n\r\n      preview = element.cloneNode(true) as HTMLElement;\r\n      preview.style.width = `${elementRect.width}px`;\r\n      preview.style.height = `${elementRect.height}px`;\r\n      this._setTransform(preview, elementRect.left, elementRect.top);\r\n    }\r\n\r\n    preview.classList.add('cdk-drag-preview');\r\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\r\n\r\n    return preview;\r\n  }\r\n\r\n  /** Creates an element that will be shown instead of the current element while dragging. */\r\n  private _createPlaceholderElement(): HTMLElement {\r\n    let placeholder: HTMLElement;\r\n\r\n    if (this._placeholderTemplate) {\r\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\r\n        this._placeholderTemplate.templateRef,\r\n        this._placeholderTemplate.data\r\n      );\r\n      placeholder = this._placeholderRef.rootNodes[0];\r\n    } else {\r\n      placeholder = this.element.nativeElement.cloneNode(true) as HTMLElement;\r\n    }\r\n\r\n    placeholder.classList.add('cdk-drag-placeholder');\r\n    return placeholder;\r\n  }\r\n\r\n  /**\r\n   * Figures out the coordinates at which an element was picked up.\r\n   * @param referenceElement Element that initiated the dragging.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  private _getPointerPositionInElement(referenceElement: ElementRef<HTMLElement>,\r\n                                       event: MouseEvent | TouchEvent): Point {\r\n    const elementRect = this.element.nativeElement.getBoundingClientRect();\r\n    const handleElement = referenceElement === this.element ? null : referenceElement.nativeElement;\r\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\r\n    const x = this._isTouchEvent(event) ?\r\n        event.targetTouches[0].pageX - referenceRect.left - this._scrollPosition.left :\r\n        event.offsetX;\r\n    const y = this._isTouchEvent(event) ?\r\n        event.targetTouches[0].pageY - referenceRect.top - this._scrollPosition.top :\r\n        event.offsetY;\r\n\r\n    return {\r\n      x: referenceRect.left - elementRect.left + x,\r\n      y: referenceRect.top - elementRect.top + y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Animates the preview element from its current position to the location of the drop placeholder.\r\n   * @returns Promise that resolves when the animation completes.\r\n   */\r\n  private _animatePreviewToPlaceholder(): Promise<void> {\r\n    // If the user hasn't moved yet, the transitionend event won't fire.\r\n    if (!this._hasMoved) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const placeholderRect = this._placeholder.getBoundingClientRect();\r\n\r\n    // Apply the class that adds a transition to the preview.\r\n    this._preview.classList.add('cdk-drag-animating');\r\n\r\n    // Move the preview to the placeholder position.\r\n    this._setTransform(this._preview, placeholderRect.left, placeholderRect.top);\r\n\r\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\r\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\r\n    // apply its style, we take advantage of the available info to figure out whether we need to\r\n    // bind the event in the first place.\r\n    const duration = getTransitionDurationInMs(this._preview);\r\n\r\n    if (duration === 0) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this._ngZone.runOutsideAngular(() => {\r\n      return new Promise(resolve => {\r\n        const handler = (event: TransitionEvent) => {\r\n          if (!event || event.target === this._preview) {\r\n            this._preview.removeEventListener('transitionend', handler);\r\n            resolve();\r\n            clearTimeout(timeout);\r\n          }\r\n        };\r\n\r\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\r\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\r\n        // fire if the transition hasn't completed when it was supposed to.\r\n        const timeout = setTimeout(handler, duration * 1.5);\r\n        this._preview.addEventListener('transitionend', handler);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the `transform` style on an element.\r\n   * @param element Element on which to set the transform.\r\n   * @param x Desired position of the element along the X axis.\r\n   * @param y Desired position of the element along the Y axis.\r\n   */\r\n  private _setTransform(element: HTMLElement, x: number, y: number) {\r\n    element.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n  }\r\n\r\n  /**\r\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\r\n   * @param element Element to be removed.\r\n   */\r\n  private _removeElement(element: HTMLElement | null) {\r\n    if (element && element.parentNode) {\r\n      element.parentNode.removeChild(element);\r\n    }\r\n  }\r\n\r\n  /** Determines the point of the page that was touched by the user. */\r\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\r\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\r\n\r\n    return {\r\n      x: point.pageX - this._scrollPosition.left,\r\n      y: point.pageY - this._scrollPosition.top\r\n    };\r\n  }\r\n\r\n  /** Gets the pointer position on the page, accounting for any position constraints. */\r\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\r\n    const point = this._getPointerPositionOnPage(event);\r\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\r\n\r\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\r\n      point.y = this._pickupPositionOnPage.y;\r\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\r\n      point.x = this._pickupPositionOnPage.x;\r\n    }\r\n\r\n    return point;\r\n  }\r\n\r\n  /** Determines whether an event is a touch event. */\r\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n    return event.type.startsWith('touch');\r\n  }\r\n\r\n  /** Destroys the preview element and its ViewRef. */\r\n  private _destroyPreview() {\r\n    if (this._preview) {\r\n      this._removeElement(this._preview);\r\n    }\r\n\r\n    if (this._previewRef) {\r\n      this._previewRef.destroy();\r\n    }\r\n\r\n    this._preview = this._previewRef = null!;\r\n  }\r\n\r\n  /** Destroys the placeholder element and its ViewRef. */\r\n  private _destroyPlaceholder() {\r\n    if (this._placeholder) {\r\n      this._removeElement(this._placeholder);\r\n    }\r\n\r\n    if (this._placeholderRef) {\r\n      this._placeholderRef.destroy();\r\n    }\r\n\r\n    this._placeholder = this._placeholderRef = null!;\r\n  }\r\n}\r\n\r\n/** Parses a CSS time value to milliseconds. */\r\nfunction parseCssTimeUnitsToMs(value: string): number {\r\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\r\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\r\n  return parseFloat(value) * multiplier;\r\n}\r\n\r\n/** Gets the transition duration, including the delay, of an element in milliseconds. */\r\nfunction getTransitionDurationInMs(element: HTMLElement): number {\r\n  const computedStyle = getComputedStyle(element);\r\n  const rawDuration = computedStyle.getPropertyValue('transition-duration');\r\n  const rawDelay = computedStyle.getPropertyValue('transition-delay');\r\n\r\n  return parseCssTimeUnitsToMs(rawDuration) + parseCssTimeUnitsToMs(rawDelay);\r\n}\r\n\r\n\r\n/** Point on the page or within an element. */\r\ninterface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Moves an item one index in an array to another.\r\n * @param array Array in which to move the item.\r\n * @param fromIndex Starting index of the item.\r\n * @param toIndex Index to which the item should be moved.\r\n */\r\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\r\n  const from = clamp(fromIndex, array.length - 1);\r\n  const to = clamp(toIndex, array.length - 1);\r\n\r\n  if (from === to) {\r\n    return;\r\n  }\r\n\r\n  const target = array[from];\r\n  const delta = to < from ? -1 : 1;\r\n\r\n  for (let i = from; i !== to; i += delta) {\r\n    array[i] = array[i + delta];\r\n  }\r\n\r\n  array[to] = target;\r\n}\r\n\r\n\r\n/**\r\n * Moves an item from one array to another.\r\n * @param currentArray Array from which to transfer the item.\r\n * @param targetArray Array into which to put the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n */\r\nexport function transferArrayItem<T = any>(currentArray: T[],\r\n                                           targetArray: T[],\r\n                                           currentIndex: number,\r\n                                           targetIndex: number): void {\r\n\r\n  const from = clamp(currentIndex, currentArray.length - 1);\r\n  const to = clamp(targetIndex, targetArray.length);\r\n\r\n  if (currentArray.length) {\r\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\r\n  }\r\n}\r\n\r\n/** Clamps a number between zero and a maximum. */\r\nfunction clamp(value: number, max: number): number {\r\n  return Math.max(0, Math.min(max, value));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef} from '@angular/core';\r\n\r\n/** Handle that can be used to drag and CdkDrag instance. */\r\n@Directive({\r\n  selector: '[cdkDragHandle]',\r\n  host: {\r\n    'class': 'cdk-drag-handle'\r\n  }\r\n})\r\nexport class CdkDragHandle {\r\n  constructor(public element: ElementRef<HTMLElement>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken, QueryList} from '@angular/core';\r\nimport {CdkDrag} from './drag';\r\n\r\nexport interface CdkDropContainer<T = any> {\r\n  /** Arbitrary data to attach to all events emitted by this container. */\r\n  data: T;\r\n\r\n  /** Unique ID for the drop zone. */\r\n  id: string;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  orientation: 'horizontal' | 'vertical';\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void;\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   */\r\n  drop(item: CdkDrag, currentIndex: number, previousContainer?: CdkDropContainer): void;\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param xOffset Position of the item along the X axis.\r\n   * @param yOffset Position of the item along the Y axis.\r\n   */\r\n  enter(item: CdkDrag, xOffset: number, yOffset: number): void;\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: CdkDrag): void;\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: CdkDrag): number;\r\n  _sortItem(item: CdkDrag, xOffset: number, yOffset: number): void;\r\n  _draggables: QueryList<CdkDrag>;\r\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropContainer | null;\r\n}\r\n\r\n/**\r\n * Injection token that is used to provide a CdkDrop instance to CdkDrag.\r\n * Used for avoiding circular imports.\r\n */\r\nexport const CDK_DROP_CONTAINER = new InjectionToken<CdkDropContainer>('CDK_DROP_CONTAINER');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, Input} from '@angular/core';\r\n\r\n/**\r\n * Element that will be used as a template for the preview\r\n * of a CdkDrag when it is being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPreview]'\r\n})\r\nexport class CdkDragPreview<T = any> {\r\n  /** Context data to be added to the preview template instance. */\r\n  @Input() data: T;\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, Input} from '@angular/core';\r\n\r\n/**\r\n * Element that will be used as a template for the placeholder of a CdkDrag when\r\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPlaceholder]'\r\n})\r\nexport class CdkDragPlaceholder<T = any> {\r\n  /** Context data to be added to the placeholder template instance. */\r\n  @Input() data: T;\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {supportsPassiveEventListeners} from '@angular/cdk/platform';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Event options that can be used to bind an active event. */\r\nconst activeEventOptions = supportsPassiveEventListeners() ? {passive: false} : false;\r\n\r\n/** Handler for a pointer event callback. */\r\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\r\n\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\n// Note: this class is generic, rather than referencing CdkDrag and CdkDrop directly, in order to\r\n// avoid circular imports. If we were to reference them here, importing the registry into the\r\n// classes that are registering themselves will introduce a circular import.\r\n@Injectable({providedIn: 'root'})\r\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  /** Registered drop container instances. */\r\n  private _dropInstances = new Set<C>();\r\n\r\n  /** Registered drag item instances. */\r\n  private _dragInstances = new Set<I>();\r\n\r\n  /** Drag item instances that are currently being dragged. */\r\n  private _activeDragInstances = new Set<I>();\r\n\r\n  /** Keeps track of the event listeners that we've bound to the `document`. */\r\n  private _globalListeners = new Map<string, {handler: PointerEventHandler, options?: any}>();\r\n\r\n  /**\r\n   * Emits the `touchmove` or `mousemove` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  /**\r\n   * Emits the `touchend` or `mouseup` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) _document: any) {\r\n    this._document = _document;\r\n  }\r\n\r\n  /** Adds a drop container to the registry. */\r\n  registerDropContainer(drop: C) {\r\n    if (!this._dropInstances.has(drop)) {\r\n      if (this.getDropContainer(drop.id)) {\r\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\r\n      }\r\n\r\n      this._dropInstances.add(drop);\r\n    }\r\n  }\r\n\r\n  /** Adds a drag item instance to the registry. */\r\n  registerDragItem(drag: I) {\r\n    this._dragInstances.add(drag);\r\n\r\n    if (this._dragInstances.size === 1) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        // The event handler has to be explicitly active, because\r\n        // newer browsers make it passive by default.\r\n        this._document.addEventListener('touchmove', this._preventScrollListener,\r\n            activeEventOptions);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Removes a drop container from the registry. */\r\n  removeDropContainer(drop: C) {\r\n    this._dropInstances.delete(drop);\r\n  }\r\n\r\n  /** Removes a drag item instance from the registry. */\r\n  removeDragItem(drag: I) {\r\n    this._dragInstances.delete(drag);\r\n    this.stopDragging(drag);\r\n\r\n    if (this._dragInstances.size === 0) {\r\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\r\n          activeEventOptions as any);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the dragging sequence for a drag instance.\r\n   * @param drag Drag instance which is being dragged.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\r\n    this._activeDragInstances.add(drag);\r\n\r\n    if (this._activeDragInstances.size === 1) {\r\n      const isTouchEvent = event.type.startsWith('touch');\r\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\r\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\r\n\r\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\r\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\r\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\r\n      this._globalListeners\r\n        .set(moveEvent, {handler: e => this.pointerMove.next(e), options: activeEventOptions})\r\n        .set(upEvent, {handler: e => this.pointerUp.next(e)})\r\n        .forEach((config, name) => {\r\n          this._ngZone.runOutsideAngular(() => {\r\n            this._document.addEventListener(name, config.handler, config.options);\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Stops dragging a drag item instance. */\r\n  stopDragging(drag: I) {\r\n    this._activeDragInstances.delete(drag);\r\n\r\n    if (this._activeDragInstances.size === 0) {\r\n      this._clearGlobalListeners();\r\n    }\r\n  }\r\n\r\n  /** Gets whether a drag item instance is currently being dragged. */\r\n  isDragging(drag: I) {\r\n    return this._activeDragInstances.has(drag);\r\n  }\r\n\r\n  /** Gets a drop container by its id. */\r\n  getDropContainer(id: string): C | undefined {\r\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\r\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\r\n    this._clearGlobalListeners();\r\n    this.pointerMove.complete();\r\n    this.pointerUp.complete();\r\n  }\r\n\r\n  /**\r\n   * Listener used to prevent `touchmove` events while the element is being dragged.\r\n   * This gets bound once, ahead of time, because WebKit won't preventDefault on a\r\n   * dynamically-added `touchmove` listener. See https://bugs.webkit.org/show_bug.cgi?id=184250.\r\n   */\r\n  private _preventScrollListener = (event: TouchEvent) => {\r\n    if (this._activeDragInstances.size) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /** Clears out the global event listeners from the `document`. */\r\n  private _clearGlobalListeners() {\r\n    this._globalListeners.forEach((config, name) => {\r\n      this._document.removeEventListener(name, config.handler, config.options);\r\n    });\r\n\r\n    this._globalListeners.clear();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CdkDrag} from './drag';\r\nimport {CdkDragExit, CdkDragEnter, CdkDragDrop} from './drag-events';\r\nimport {CDK_DROP_CONTAINER} from './drop-container';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\n\r\n/** Counter used to generate unique ids for drop zones. */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Container that wraps a set of draggable items. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-drop',\r\n  exportAs: 'cdkDrop',\r\n  template: '<ng-content></ng-content>',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['drop.css'],\r\n  providers: [\r\n    {provide: CDK_DROP_CONTAINER, useExisting: CdkDrop},\r\n  ],\r\n  host: {\r\n    'class': 'cdk-drop',\r\n    '[id]': 'id',\r\n    '[class.cdk-drop-dragging]': '_dragging'\r\n  }\r\n})\r\nexport class CdkDrop<T = any> implements OnInit, OnDestroy {\r\n  /** Draggable items in the container. */\r\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\r\n\r\n  /**\r\n   * Other draggable containers that this container is connected to and into which the\r\n   * container's items can be transferred. Can either be references to other drop containers,\r\n   * or their unique IDs.\r\n   */\r\n  @Input() connectedTo: (CdkDrop | string)[] = [];\r\n\r\n  /** Arbitrary data to attach to this container. */\r\n  @Input() data: T;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  /**\r\n   * Unique ID for the drop zone. Can be used as a reference\r\n   * in the `connectedTo` of another `CdkDrop`.\r\n   */\r\n  @Input() id: string = `cdk-drop-${_uniqueIdCounter++}`;\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  @Input() lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Function that is used to determine whether an item\r\n   * is allowed to be moved into a drop container.\r\n   */\r\n  @Input() enterPredicate: (drag?: CdkDrag, drop?: CdkDrop) => boolean = () => true;\r\n\r\n  /** Emits when the user drops an item inside the container. */\r\n  @Output() dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\r\n\r\n  /**\r\n   * Emits when the user has moved a new drag item into this container.\r\n   */\r\n  @Output() entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\r\n\r\n  /**\r\n   * Emits when the user removes an item from the container\r\n   * by dragging it into another container.\r\n   */\r\n  @Output() exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\r\n\r\n  constructor(\r\n    public element: ElementRef<HTMLElement>,\r\n    private _dragDropRegistry: DragDropRegistry<CdkDrag, CdkDrop<T>>) {}\r\n\r\n  ngOnInit() {\r\n    this._dragDropRegistry.registerDropContainer(this);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dragDropRegistry.removeDropContainer(this);\r\n  }\r\n\r\n  /** Whether an item in the container is being dragged. */\r\n  _dragging = false;\r\n\r\n  /** Cache of the dimensions of all the items and the sibling containers. */\r\n  private _positionCache = {\r\n    items: [] as {drag: CdkDrag, clientRect: ClientRect, offset: number}[],\r\n    siblings: [] as {drop: CdkDrop, clientRect: ClientRect}[]\r\n  };\r\n\r\n  /**\r\n   * Draggable items that are currently active inside the container. Includes the items\r\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\r\n   * been dropped yet.\r\n   */\r\n  private _activeDraggables: CdkDrag[];\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void {\r\n    this._dragging = true;\r\n    this._activeDraggables = this._draggables.toArray();\r\n    this._cachePositions();\r\n  }\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   */\r\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDrop): void {\r\n    this._reset();\r\n    this.dropped.emit({\r\n      item,\r\n      currentIndex,\r\n      previousIndex: previousContainer.getItemIndex(item),\r\n      container: this,\r\n      // TODO(crisbeto): reconsider whether to make this null if the containers are the same.\r\n      previousContainer\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param xOffset Position of the item along the X axis.\r\n   * @param yOffset Position of the item along the Y axis.\r\n   */\r\n  enter(item: CdkDrag, xOffset: number, yOffset: number): void {\r\n    this.entered.emit({item, container: this});\r\n    this.start();\r\n\r\n    // We use the coordinates of where the item entered the drop\r\n    // zone to figure out at which index it should be inserted.\r\n    const newIndex = this._getItemIndexFromPointerPosition(item, xOffset, yOffset);\r\n    const currentIndex = this._activeDraggables.indexOf(item);\r\n    const newPositionReference = this._activeDraggables[newIndex];\r\n    const placeholder = item.getPlaceholderElement();\r\n\r\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\r\n    // into another container and back again), we have to ensure that it isn't duplicated.\r\n    if (currentIndex > -1) {\r\n      this._activeDraggables.splice(currentIndex, 1);\r\n    }\r\n\r\n    // Don't use items that are being dragged as a reference, because\r\n    // their element has been moved down to the bottom of the body.\r\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\r\n      const element = newPositionReference.element.nativeElement;\r\n      element.parentElement!.insertBefore(placeholder, element);\r\n      this._activeDraggables.splice(newIndex, 0, item);\r\n    } else {\r\n      this.element.nativeElement.appendChild(placeholder);\r\n      this._activeDraggables.push(item);\r\n    }\r\n\r\n    // The transform needs to be cleared so it doesn't throw off the measurements.\r\n    placeholder.style.transform = '';\r\n\r\n    // Note that the positions were already cached when we called `start` above,\r\n    // but we need to refresh them since the amount of items has changed.\r\n    this._cachePositions();\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: CdkDrag): void {\r\n    this._reset();\r\n    this.exited.emit({item, container: this});\r\n  }\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: CdkDrag): number {\r\n    return this._dragging ?\r\n        this._positionCache.items.findIndex(currentItem => currentItem.drag === item) :\r\n        this._draggables.toArray().indexOf(item);\r\n  }\r\n\r\n  /**\r\n   * Sorts an item inside the container based on its position.\r\n   * @param item Item to be sorted.\r\n   * @param xOffset Position of the item along the X axis.\r\n   * @param yOffset Position of the item along the Y axis.\r\n   */\r\n  _sortItem(item: CdkDrag, xOffset: number, yOffset: number): void {\r\n    const siblings = this._positionCache.items;\r\n    const isHorizontal = this.orientation === 'horizontal';\r\n    const newIndex = this._getItemIndexFromPointerPosition(item, xOffset, yOffset);\r\n    const placeholder = item.getPlaceholderElement();\r\n\r\n    if (newIndex === -1 && siblings.length > 0) {\r\n      return;\r\n    }\r\n\r\n    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\r\n    const currentPosition = siblings[currentIndex];\r\n    const newPosition = siblings[newIndex];\r\n\r\n    // Figure out the offset necessary for the items to be swapped.\r\n    const offset = isHorizontal ?\r\n        currentPosition.clientRect.left - newPosition.clientRect.left :\r\n        currentPosition.clientRect.top - newPosition.clientRect.top;\r\n    const topAdjustment = isHorizontal ? 0 : offset;\r\n    const leftAdjustment = isHorizontal ? offset : 0;\r\n\r\n    // Since we've moved the items with a `transform`, we need to adjust their cached\r\n    // client rects to reflect their new position, as well as swap their positions in the cache.\r\n    // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\r\n    // elements may be mid-animation which will give us a wrong result.\r\n    this._adjustClientRect(currentPosition.clientRect, -topAdjustment, -leftAdjustment);\r\n    currentPosition.offset -= offset;\r\n    siblings[currentIndex] = newPosition;\r\n\r\n    this._adjustClientRect(newPosition.clientRect, topAdjustment, leftAdjustment);\r\n    newPosition.offset += offset;\r\n    siblings[newIndex] = currentPosition;\r\n\r\n    // Swap the placeholder's position with the one of the target draggable.\r\n    placeholder.style.transform = isHorizontal ?\r\n        `translate3d(${currentPosition.offset}px, 0, 0)` :\r\n        `translate3d(0, ${currentPosition.offset}px, 0)`;\r\n\r\n    newPosition.drag.element.nativeElement.style.transform = isHorizontal ?\r\n        `translate3d(${newPosition.offset}px, 0, 0)` :\r\n        `translate3d(0, ${newPosition.offset}px, 0)`;\r\n  }\r\n\r\n  /**\r\n   * Figures out whether an item should be moved into a sibling\r\n   * drop container, based on its current position.\r\n   * @param item Drag item that is being moved.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDrop | null {\r\n    const result = this._positionCache.siblings.find(({clientRect}) => {\r\n      const {top, bottom, left, right} = clientRect;\r\n      return y >= top && y <= bottom && x >= left && x <= right;\r\n    });\r\n\r\n    return result && result.drop.enterPredicate(item, this) ? result.drop : null;\r\n  }\r\n\r\n  /** Refreshes the position cache of the items and sibling containers. */\r\n  private _cachePositions() {\r\n    this._positionCache.items = this._activeDraggables\r\n      .map(drag => {\r\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\r\n            // If the element is being dragged, we have to measure the\r\n            // placeholder, because the element is hidden.\r\n            drag.getPlaceholderElement() :\r\n            drag.element.nativeElement;\r\n        const clientRect = elementToMeasure.getBoundingClientRect();\r\n\r\n        return {\r\n          drag,\r\n          offset: 0,\r\n          // We need to clone the `clientRect` here, because all the values on it are readonly\r\n          // and we need to be able to update them. Also we can't use a spread here, because\r\n          // the values on a `ClientRect` aren't own properties. See:\r\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\r\n          clientRect: {\r\n            top: clientRect.top,\r\n            right: clientRect.right,\r\n            bottom: clientRect.bottom,\r\n            left: clientRect.left,\r\n            width: clientRect.width,\r\n            height: clientRect.height\r\n          }\r\n        };\r\n      })\r\n      .sort((a, b) => a.clientRect.top - b.clientRect.top);\r\n\r\n    this._positionCache.siblings = this.connectedTo\r\n      .map(drop => typeof drop === 'string' ? this._dragDropRegistry.getDropContainer(drop)! : drop)\r\n      .filter(drop => drop && drop !== this)\r\n      .map(drop => ({drop, clientRect: drop.element.nativeElement.getBoundingClientRect()}));\r\n  }\r\n\r\n  /** Resets the container to its initial state. */\r\n  private _reset() {\r\n    this._dragging = false;\r\n\r\n    // TODO(crisbeto): may have to wait for the animations to finish.\r\n    this._activeDraggables.forEach(item => item.element.nativeElement.style.transform = '');\r\n    this._activeDraggables = [];\r\n    this._positionCache.items = [];\r\n    this._positionCache.siblings = [];\r\n  }\r\n\r\n  /**\r\n   * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\r\n   * @param clientRect `ClientRect` that should be updated.\r\n   * @param top New value for the `top` position.\r\n   * @param left New value for the `left` position.\r\n   */\r\n  private _adjustClientRect(clientRect: ClientRect, top: number, left: number) {\r\n    clientRect.top += top;\r\n    clientRect.bottom = clientRect.top + clientRect.height;\r\n\r\n    clientRect.left += left;\r\n    clientRect.right = clientRect.left + clientRect.width;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\r\n   * @param item Item that is being sorted.\r\n   * @param xOffset Position of the user's pointer along the X axis.\r\n   * @param yOffset Position of the user's pointer along the Y axis.\r\n   */\r\n  private _getItemIndexFromPointerPosition(item: CdkDrag, xOffset: number, yOffset: number) {\r\n    return this._positionCache.items.findIndex(({drag, clientRect}, _, array) => {\r\n      if (drag === item) {\r\n        // If there's only one item left in the container, it must be\r\n        // the dragged item itself so we use it as a reference.\r\n        return array.length < 2;\r\n      }\r\n\r\n      return this.orientation === 'horizontal' ?\r\n          // Round these down since most browsers report client rects with\r\n          // sub-pixel precision, whereas the mouse coordinates are rounded to pixels.\r\n          xOffset >= Math.floor(clientRect.left) && xOffset <= Math.floor(clientRect.right) :\r\n          yOffset >= Math.floor(clientRect.top) && yOffset <= Math.floor(clientRect.bottom);\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkDrop} from './drop';\r\nimport {CdkDrag} from './drag';\r\nimport {CdkDragHandle} from './drag-handle';\r\nimport {CdkDragPreview} from './drag-preview';\r\nimport {CdkDragPlaceholder} from './drag-placeholder';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CdkDrop,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n  exports: [\r\n    CdkDrop,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n})\r\nexport class DragDropModule {}\r\n"],"names":["parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransitionDurationInMs","element","computedStyle","getComputedStyle","rawDuration","getPropertyValue","rawDelay","moveItemInArray","array","fromIndex","toIndex","from","clamp","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","currentIndex","targetIndex","splice","max","Math","min","CdkDragHandle","this","type","Directive","args","selector","host","class","ElementRef","CDK_DROP_CONTAINER","InjectionToken","CdkDragPreview","templateRef","TemplateRef","data","Input","CdkDragPlaceholder","activeEventOptions","supportsPassiveEventListeners","passive","DragDropRegistry","_ngZone","_document","_this","_dropInstances","Set","_dragInstances","_activeDragInstances","_globalListeners","Map","pointerMove","Subject","pointerUp","_preventScrollListener","event","size","preventDefault","prototype","registerDropContainer","drop","has","getDropContainer","id","Error","add","registerDragItem","drag","runOutsideAngular","addEventListener","removeDropContainer","delete","removeDragItem","stopDragging","removeEventListener","startDragging","isTouchEvent","startsWith","moveEvent","upEvent","set","handler","e","next","options","forEach","config","name","_clearGlobalListeners","isDragging","Array","find","instance","ngOnDestroy","complete","clear","Injectable","providedIn","NgZone","undefined","decorators","Inject","DOCUMENT","CdkDrag","dropContainer","document","_viewContainerRef","_viewportRuler","_dragDropRegistry","_dir","_destroyed","_passiveTransform","x","y","_activeTransform","_hasMoved","_moveEvents","_moveEventSubscriptions","started","EventEmitter","ended","entered","exited","dropped","moved","Observable","create","observer","subscription","subscribe","unsubscribe","_pointerDown","referenceElement","endedOrDestroyed","merge","pipe","takeUntil","_pointerMove","_pointerUp","_initialContainer","_scrollPosition","getViewportScrollPosition","_pickupPositionInElement","_previewTemplate","_getPointerPositionInElement","_pickupPositionOnPage","_getPointerPositionOnPage","emit","source","nativeElement","preview","_preview","_createPreviewElement","placeholder","_placeholder","_createPlaceholderElement","style","display","_nextSibling","nextSibling","body","appendChild","replaceChild","start","pointerPosition","_getConstrainedPointerPosition","_updateActiveDropContainer","activeTransform","_setTransform","run","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","getPlaceholderElement","_destroyPreview","_destroyPlaceholder","_removeElement","_startDragging","_handles","targetHandle","handle","contains","insertBefore","getItemIndex","item","previousIndex","container","previousContainer","_a","newContainer","_getSiblingContainerFromPosition","exit","enter","_sortItem","viewRef","createEmbeddedView","rootNodes","_previewRef","elementRect","getBoundingClientRect","cloneNode","width","height","left","top","classList","setAttribute","_placeholderTemplate","_placeholderRef","handleElement","referenceRect","_isTouchEvent","targetTouches","pageX","offsetX","pageY","offsetY","Promise","resolve","placeholderRect","duration","clearTimeout","timeout","setTimeout","transform","parentNode","removeChild","point","touches","dropContainerLock","lockAxis","destroy","exportAs","(mousedown)","(touchstart)","Optional","SkipSelf","ViewContainerRef","ViewportRuler","Directionality","ContentChildren","ContentChild","Output","_uniqueIdCounter","CdkDrop","connectedTo","orientation","enterPredicate","_dragging","_positionCache","items","siblings","ngOnInit","_activeDraggables","_draggables","toArray","_cachePositions","_reset","xOffset","yOffset","newIndex","_getItemIndexFromPointerPosition","newPositionReference","push","findIndex","currentItem","isHorizontal","currentPosition","newPosition","offset","clientRect","topAdjustment","leftAdjustment","_adjustClientRect","result","bottom","right","map","elementToMeasure","sort","a","b","filter","_","floor","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","providers","provide","useExisting","[id]","[class.cdk-drop-dragging]","propDecorators","NgModule","declarations","exports","DragDropModule"],"mappings":"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"}