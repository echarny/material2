{"version":3,"file":"virtual-scroll-viewport.spec.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/scrolling/virtual-scroll-viewport.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {CdkVirtualScrollViewport, ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {Component, Input, ViewChild, ViewEncapsulation} from '@angular/core';\r\nimport {ComponentFixture, fakeAsync, flush, TestBed} from '@angular/core/testing';\r\nimport {ScrollingModule as ExperimentalScrollingModule} from './scrolling-module';\r\n\r\n\r\ndescribe('CdkVirtualScrollViewport', () => {\r\n  describe ('with AutoSizeVirtualScrollStrategy', () => {\r\n    let fixture: ComponentFixture<AutoSizeVirtualScroll>;\r\n    let testComponent: AutoSizeVirtualScroll;\r\n    let viewport: CdkVirtualScrollViewport;\r\n\r\n    beforeEach(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [ScrollingModule, ExperimentalScrollingModule],\r\n        declarations: [AutoSizeVirtualScroll],\r\n      }).compileComponents();\r\n\r\n      fixture = TestBed.createComponent(AutoSizeVirtualScroll);\r\n      testComponent = fixture.componentInstance;\r\n      viewport = testComponent.viewport;\r\n    });\r\n\r\n    it('should render initial state for uniform items', fakeAsync(() => {\r\n      finishInit(fixture);\r\n\r\n      const contentWrapper =\r\n          viewport.elementRef.nativeElement.querySelector('.cdk-virtual-scroll-content-wrapper')!;\r\n      expect(contentWrapper.children.length)\r\n          .toBe(4, 'should render 4 50px items to fill 200px space');\r\n    }));\r\n\r\n    it('should render extra content if first item is smaller than average', fakeAsync(() => {\r\n      testComponent.items = [50, 200, 200, 200, 200, 200];\r\n      finishInit(fixture);\r\n\r\n      const contentWrapper =\r\n          viewport.elementRef.nativeElement.querySelector('.cdk-virtual-scroll-content-wrapper')!;\r\n      expect(contentWrapper.children.length).toBe(4,\r\n          'should render 4 items to fill 200px space based on 50px estimate from first item');\r\n    }));\r\n\r\n    it('should throw if maxBufferPx is less than minBufferPx', fakeAsync(() => {\r\n      testComponent.minBufferPx = 100;\r\n      testComponent.maxBufferPx = 99;\r\n      expect(() => finishInit(fixture)).toThrow();\r\n    }));\r\n\r\n    // TODO(mmalerba): Add test that it corrects the initial render if it didn't render enough,\r\n    // once it actually does that.\r\n  });\r\n});\r\n\r\n\r\n/** Finish initializing the virtual scroll component at the beginning of a test. */\r\nfunction finishInit(fixture: ComponentFixture<any>) {\r\n  // On the first cycle we render and measure the viewport.\r\n  fixture.detectChanges();\r\n  flush();\r\n\r\n  // On the second cycle we render the items.\r\n  fixture.detectChanges();\r\n  flush();\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <cdk-virtual-scroll-viewport\r\n        autosize [minBufferPx]=\"minBufferPx\" [maxBufferPx]=\"maxBufferPx\"\r\n        [orientation]=\"orientation\" [style.height.px]=\"viewportHeight\"\r\n        [style.width.px]=\"viewportWidth\">\r\n      <div class=\"item\" *cdkVirtualFor=\"let size of items; let i = index\" [style.height.px]=\"size\"\r\n           [style.width.px]=\"size\">\r\n        {{i}} - {{size}}\r\n      </div>\r\n    </cdk-virtual-scroll-viewport>\r\n  `,\r\n  styles: [`\r\n    .cdk-virtual-scroll-content-wrapper {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n\r\n    .cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper {\r\n      flex-direction: row;\r\n    }\r\n  `],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nclass AutoSizeVirtualScroll {\r\n  @ViewChild(CdkVirtualScrollViewport) viewport: CdkVirtualScrollViewport;\r\n\r\n  @Input() orientation = 'vertical';\r\n  @Input() viewportSize = 200;\r\n  @Input() viewportCrossSize = 100;\r\n  @Input() minBufferPx = 0;\r\n  @Input() maxBufferPx = 0;\r\n  @Input() items = Array(10).fill(50);\r\n\r\n  get viewportWidth() {\r\n    return this.orientation == 'horizontal' ? this.viewportSize : this.viewportCrossSize;\r\n  }\r\n\r\n  get viewportHeight() {\r\n    return this.orientation == 'horizontal' ? this.viewportCrossSize : this.viewportSize;\r\n  }\r\n}\r\n"]}