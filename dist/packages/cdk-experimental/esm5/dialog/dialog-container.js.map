{"version":3,"file":"dialog-container.js","sourceRoot":"","sources":["../../../../../src/cdk-experimental/dialog/dialog-container.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {\r\n  BasePortalOutlet,\r\n  ComponentPortal,\r\n  PortalHostDirective,\r\n  TemplatePortal\r\n} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  HostBinding,\r\n  Inject,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {DialogConfig} from './dialog-config';\r\n\r\n\r\nexport function throwDialogContentAlreadyAttachedError() {\r\n  throw Error('Attempting to attach dialog content after content is already attached');\r\n}\r\n\r\n\r\n/**\r\n * Internal component that wraps user-provided dialog content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-dialog-container',\r\n  templateUrl: './dialog-container.html',\r\n  styleUrls: ['dialog-container.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  animations: [\r\n    trigger('dialog', [\r\n      state('enter', style({ opacity: 1 })),\r\n      state('exit, void', style({ opacity: 0 })),\r\n      transition('* => *', animate(225)),\r\n    ])\r\n  ],\r\n  host: {\r\n    '[@dialog]': '_state',\r\n    '(@dialog.start)': '_onAnimationStart($event)',\r\n    '(@dialog.done)': '_onAnimationDone($event)',\r\n  },\r\n})\r\nexport class CdkDialogContainer extends BasePortalOutlet implements OnDestroy {\r\n  /** State of the dialog animation. */\r\n  _state: 'void' | 'enter' | 'exit' = 'enter';\r\n\r\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\r\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\r\n\r\n   /** The class that traps and manages focus within the dialog. */\r\n  private _focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, false);\r\n\r\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\r\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\r\n  // that can be inherited.\r\n  // tslint:disable:no-host-decorator-in-concrete\r\n  @HostBinding('attr.aria-label') get _ariaLabel() { return this._config.ariaLabel || null; }\r\n\r\n  @HostBinding('attr.aria-describedby')\r\n  get _ariaDescribedBy() { return this._config.ariaDescribedBy; }\r\n\r\n  @HostBinding('attr.role') get _role() { return this._config.role; }\r\n\r\n  @HostBinding('attr.tabindex') get _tabindex() { return -1; }\r\n  // tslint:disable:no-host-decorator-in-concrete\r\n\r\n  /** The portal host inside of this container into which the dialog content will be loaded. */\r\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\r\n\r\n  /** A subject emitting before the dialog enters the view. */\r\n  _beforeEnter: Subject<void> = new Subject();\r\n\r\n  /** A subject emitting after the dialog enters the view. */\r\n  _afterEnter: Subject<void> = new Subject();\r\n\r\n  /** A subject emitting before the dialog exits the view. */\r\n  _beforeExit: Subject<void> = new Subject();\r\n\r\n  /** A subject emitting after the dialog exits the view. */\r\n  _afterExit: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _focusTrapFactory: FocusTrapFactory,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(DOCUMENT) private _document: any,\r\n    /** The dialog configuration. */\r\n    public _config: DialogConfig) {\r\n    super();\r\n  }\r\n\r\n  /** Destroy focus trap to place focus back to the element focused before the dialog opened. */\r\n  ngOnDestroy() {\r\n    this._focusTrap.destroy();\r\n  }\r\n\r\n  /**\r\n   * Attach a ComponentPortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachComponentPortal(portal);\r\n  }\r\n\r\n  /**\r\n   * Attach a TemplatePortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Emit lifecycle events based on animation `start` callback. */\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._beforeEnter.next();\r\n    }\r\n    if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\r\n      this._beforeExit.next();\r\n    }\r\n  }\r\n\r\n  /** Emit lifecycle events based on animation `done` callback. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._autoFocusFirstTabbableElement();\r\n      this._afterEnter.next();\r\n    }\r\n\r\n    if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\r\n      this._returnFocusAfterDialog();\r\n      this._afterExit.next();\r\n    }\r\n  }\r\n\r\n  /** Starts the dialog exit animation. */\r\n  _startExiting(): void {\r\n    this._state = 'exit';\r\n\r\n    // Mark the container for check so it can react if the\r\n    // view container is using OnPush change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Saves a reference to the element that was focused before the dialog was opened. */\r\n  private _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\r\n\r\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\r\n      // opening multiple dialogs at the same time. Needs to be async, because the element\r\n      // may not be focusable immediately.\r\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Autofocus the first tabbable element inside of the dialog, if there is not a tabbable element,\r\n   * focus the dialog instead.\r\n   */\r\n  private _autoFocusFirstTabbableElement() {\r\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    if (this._config.autoFocus) {\r\n      this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\r\n        // If we didn't find any focusable elements inside the dialog, focus the\r\n        // container so the user can't tab into other elements behind it.\r\n        if (!hasMovedFocus) {\r\n          this._elementRef.nativeElement.focus();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Returns the focus to the element focused before the dialog was open. */\r\n  private _returnFocusAfterDialog() {\r\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n  }\r\n}\r\n"]}