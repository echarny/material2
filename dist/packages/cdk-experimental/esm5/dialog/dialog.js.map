{"version":3,"file":"dialog.js","sourceRoot":"","sources":["../../../../../src/cdk-experimental/dialog/dialog.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  TemplateRef,\r\n  SkipSelf,\r\n  Optional,\r\n  Injectable,\r\n  Injector,\r\n  Inject,\r\n  ComponentRef\r\n} from '@angular/core';\r\nimport {ComponentPortal, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {of as observableOf, Observable, Subject, defer} from 'rxjs';\r\nimport {DialogRef} from './dialog-ref';\r\nimport {Location} from '@angular/common';\r\nimport {DialogConfig} from './dialog-config';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {CdkDialogContainer} from './dialog-container';\r\nimport {\r\n  ComponentType,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n} from '@angular/cdk/overlay';\r\nimport {startWith} from 'rxjs/operators';\r\n\r\nimport {\r\n  DIALOG_SCROLL_STRATEGY,\r\n  DIALOG_DATA,\r\n  DIALOG_REF,\r\n  DIALOG_CONTAINER,\r\n  DIALOG_CONFIG,\r\n} from './dialog-injectors';\r\n\r\n\r\n/**\r\n * Service to open modal dialogs.\r\n */\r\n@Injectable()\r\nexport class Dialog {\r\n  /** Stream that emits when all dialogs are closed. */\r\n  get _afterAllClosed(): Observable<void> {\r\n    return this._parentDialog ? this._parentDialog.afterAllClosed : this._afterAllClosedBase;\r\n  }\r\n  _afterAllClosedBase = new Subject<void>();\r\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\r\n      this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));\r\n\r\n  /** Stream that emits when a dialog is opened. */\r\n  get afterOpened(): Subject<DialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpened;\r\n  }\r\n  _afterOpened: Subject<DialogRef<any>> = new Subject();\r\n\r\n  /** Stream that emits when a dialog is opened. */\r\n  get openDialogs(): DialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogs;\r\n  }\r\n  _openDialogs: DialogRef<any>[] = [];\r\n\r\n  constructor(\r\n      private overlay: Overlay,\r\n      private injector: Injector,\r\n      @Inject(DIALOG_REF) private dialogRefConstructor,\r\n      @Inject(DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\r\n      @Optional() @SkipSelf() private _parentDialog: Dialog,\r\n      @Optional() location: Location) {\r\n\r\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\r\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\r\n    // the user is using the `HashLocationStrategy`).\r\n    if (!_parentDialog && location) {\r\n      location.subscribe(() => this.closeAll());\r\n    }\r\n  }\r\n\r\n  /** Gets an open dialog by id. */\r\n  getById(id: string): DialogRef<any> | undefined {\r\n    return this._openDialogs.find(ref  => ref.id === id);\r\n  }\r\n\r\n  /** Closes all open dialogs. */\r\n  closeAll(): void {\r\n    this.openDialogs.forEach(ref => ref.close());\r\n  }\r\n\r\n  /** Opens a dialog from a component. */\r\n  openFromComponent<T>(component: ComponentType<T>, config?: DialogConfig): DialogRef<any> {\r\n    config = this._applyConfigDefaults(config);\r\n\r\n    if (config.id && this.getById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef = this._attachDialogContentForComponent(component, dialogContainer,\r\n      overlayRef, config);\r\n\r\n    this.registerDialogRef(dialogRef);\r\n    return dialogRef;\r\n  }\r\n\r\n  /** Opens a dialog from a template. */\r\n  openFromTemplate<T>(template: TemplateRef<T>, config?: DialogConfig): DialogRef<any> {\r\n    config = this._applyConfigDefaults(config);\r\n\r\n    if (config.id && this.getById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef = this._attachDialogContentForTemplate(template, dialogContainer,\r\n      overlayRef, config);\r\n\r\n    this.registerDialogRef(dialogRef);\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Forwards emitting events for when dialogs are opened and all dialogs are closed.\r\n   */\r\n  private registerDialogRef(dialogRef: DialogRef<any>): void {\r\n    this.openDialogs.push(dialogRef);\r\n\r\n    const dialogOpenSub = dialogRef.afterOpened().subscribe(() => {\r\n      this.afterOpened.next(dialogRef);\r\n      dialogOpenSub.unsubscribe();\r\n    });\r\n\r\n    const dialogCloseSub = dialogRef.afterClosed().subscribe(() => {\r\n      let dialogIndex = this._openDialogs.indexOf(dialogRef);\r\n\r\n      if (dialogIndex > -1) {\r\n        this._openDialogs.splice(dialogIndex, 1);\r\n      }\r\n\r\n      if (!this._openDialogs.length) {\r\n        this._afterAllClosedBase.next();\r\n        dialogCloseSub.unsubscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates an overlay config from a dialog config.\r\n   * @param config The dialog configuration.\r\n   * @returns The overlay configuration.\r\n   */\r\n  protected _createOverlay(config: DialogConfig): OverlayRef {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this.overlay.position().global(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: config.panelClass,\r\n      hasBackdrop: config.hasBackdrop,\r\n      direction: config.direction,\r\n      minWidth: config.minWidth,\r\n      minHeight: config.minHeight,\r\n      maxWidth: config.maxWidth,\r\n      maxHeight: config.maxHeight\r\n    });\r\n\r\n    if (config.backdropClass) {\r\n      overlayConfig.backdropClass = config.backdropClass;\r\n    }\r\n    return this.overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n   * @param overlay Reference to the dialog's underlying overlay.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to a ComponentRef for the attached container.\r\n   */\r\n  protected _attachDialogContainer(overlay: OverlayRef, config: DialogConfig): CdkDialogContainer {\r\n    const container = config.containerComponent || this.injector.get(DIALOG_CONTAINER);\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this.injector, new WeakMap([\r\n      [DialogConfig, config]\r\n    ]));\r\n    const containerPortal = new ComponentPortal(container, config.viewContainerRef, injector);\r\n    const containerRef: ComponentRef<CdkDialogContainer> = overlay.attach(containerPortal);\r\n    containerRef.instance._config = config;\r\n\r\n    return containerRef.instance;\r\n  }\r\n\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  protected _attachDialogContentForComponent<T>(\r\n      componentOrTemplateRef: ComponentType<T>,\r\n      dialogContainer: CdkDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: DialogConfig): DialogRef<any> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\r\n\r\n    const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n    const contentRef = dialogContainer.attachComponentPortal(\r\n        new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n    dialogRef.componentInstance = contentRef.instance;\r\n\r\n    dialogRef.updateSize({width: config.width, height: config.height})\r\n             .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  protected _attachDialogContentForTemplate<T>(\r\n      componentOrTemplateRef: TemplateRef<T>,\r\n      dialogContainer: CdkDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: DialogConfig): DialogRef<any> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\r\n\r\n    dialogContainer.attachTemplatePortal(\r\n      new TemplatePortal<T>(componentOrTemplateRef, null!,\r\n        <any>{$implicit: config.data, dialogRef}));\r\n    dialogRef.updateSize({width: config.width, height: config.height})\r\n             .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n   * of a dialog to close itself and, optionally, to return a value.\r\n   * @param config Config object that is used to construct the dialog.\r\n   * @param dialogRef Reference to the dialog.\r\n   * @param container Dialog container element that wraps all of the contents.\r\n   * @returns The custom injector that can be used inside the dialog.\r\n   */\r\n  private _createInjector<T>(\r\n      config: DialogConfig,\r\n      dialogRef: DialogRef<T>,\r\n      dialogContainer: CdkDialogContainer): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injectionTokens = new WeakMap<any, any>([\r\n      [this.injector.get(DIALOG_REF), dialogRef],\r\n      [this.injector.get(DIALOG_CONTAINER), dialogContainer],\r\n      [DIALOG_DATA, config.data]\r\n    ]);\r\n\r\n    if (config.direction &&\r\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\r\n      injectionTokens.set(Directionality, {\r\n        value: config.direction,\r\n        change: observableOf()\r\n      });\r\n    }\r\n\r\n    return new PortalInjector(userInjector || this.injector, injectionTokens);\r\n  }\r\n\r\n  /**\r\n   * Expands the provided configuration object to include the default values for properties which\r\n   * are undefined.\r\n   */\r\n  private _applyConfigDefaults(config?: DialogConfig): DialogConfig {\r\n    const dialogConfig = this.injector.get(DIALOG_CONFIG) as typeof DialogConfig;\r\n    return {...new dialogConfig(), ...config};\r\n  }\r\n}\r\n"]}