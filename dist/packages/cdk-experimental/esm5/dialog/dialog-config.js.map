{"version":3,"file":"dialog-config.js","sourceRoot":"","sources":["../../../../../src/cdk-experimental/dialog/dialog-config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAuBA;;;AAAA;;;;;oBAgBsB,QAAQ;;;;0BAGK,EAAE;;;;2BAGX,IAAI;;;;6BAGS,EAAE;;;;4BAGd,KAAK;;;;qBAGb,EAAE;;;;sBAGD,EAAE;;;;wBAGS,EAAE;;;;yBAGD,EAAE;;;;wBAGH,MAAM;;;;yBAGL,EAAE;;;;oBAMd,IAAI;;;;+BAMY,IAAI;;;;yBAGV,IAAI;;;;yBAGV,IAAI;;uBAvF5B;IAwFC,CAAA;;;;AAjED,wBAiEC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {ViewContainerRef} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {ComponentType} from '@angular/cdk/overlay';\r\nimport {CdkDialogContainer} from './dialog-container';\r\n\r\n/** Valid ARIA roles for a dialog element. */\r\nexport type DialogRole = 'dialog' | 'alertdialog';\r\n\r\n/** Possible overrides for a dialog's position. */\r\nexport interface DialogPosition {\r\n  top?: string;\r\n  bottom?: string;\r\n  left?: string;\r\n  right?: string;\r\n}\r\n\r\nexport class DialogConfig<D = any> {\r\n  /** Component to use as the container for the dialog. */\r\n  containerComponent?: ComponentType<CdkDialogContainer>;\r\n\r\n  /**\r\n   * Where the attached component should live in Angular's *logical* component tree.\r\n   * This affects what is available for injection and the change detection order for the\r\n   * component instantiated inside of the dialog. This does not affect where the dialog\r\n   * content will be rendered.\r\n   */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** The id of the dialog. */\r\n  id?: string;\r\n\r\n  /** The ARIA role of the dialog. */\r\n  role?: DialogRole = 'dialog';\r\n\r\n  /** Custom class(es) for the overlay panel. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the dialog has a background. */\r\n  hasBackdrop?: boolean = true;\r\n\r\n  /** Custom class(es) for the backdrop. */\r\n  backdropClass?: string | undefined = '';\r\n\r\n  /** Whether the dialog can be closed by user interaction. */\r\n  disableClose?: boolean = false;\r\n\r\n  /** The width of the dialog. */\r\n  width?: string = '';\r\n\r\n  /** The height of the dialog. */\r\n  height?: string = '';\r\n\r\n  /** The minimum width of the dialog. */\r\n  minWidth?: string | number = '';\r\n\r\n  /** The minimum height of the dialog. */\r\n  minHeight?: string | number = '';\r\n\r\n  /** The maximum width of the dialog. */\r\n  maxWidth?: string | number = '80vw';\r\n\r\n  /** The maximum height of the dialog. */\r\n  maxHeight?: string | number = '';\r\n\r\n  /** The position of the dialog. */\r\n  position?: DialogPosition;\r\n\r\n  /** Data to be injected into the dialog content. */\r\n  data?: D | null = null;\r\n\r\n  /** The layout direction for the dialog content. */\r\n  direction?: Direction;\r\n\r\n  /** ID of the element that describes the dialog. */\r\n  ariaDescribedBy?: string | null = null;\r\n\r\n  /** Aria label to assign to the dialog element */\r\n  ariaLabel?: string | null = null;\r\n\r\n  /** Whether the dialog should focus the first focusable element on open. */\r\n  autoFocus?: boolean = true;\r\n}\r\n"]}