{"version":3,"file":"drop-container.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/drag-drop/drop-container.ts"],"names":[],"mappings":";;;;;;;;;AAQA,sCAAwD;;;;;AAuD3C,QAAA,kBAAkB,GAAG,IAAI,qBAAc,CAAmB,oBAAoB,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken, QueryList} from '@angular/core';\r\nimport {CdkDrag} from './drag';\r\n\r\nexport interface CdkDropContainer<T = any> {\r\n  /** Arbitrary data to attach to all events emitted by this container. */\r\n  data: T;\r\n\r\n  /** Unique ID for the drop zone. */\r\n  id: string;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  orientation: 'horizontal' | 'vertical';\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void;\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   */\r\n  drop(item: CdkDrag, currentIndex: number, previousContainer?: CdkDropContainer): void;\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param xOffset Position of the item along the X axis.\r\n   * @param yOffset Position of the item along the Y axis.\r\n   */\r\n  enter(item: CdkDrag, xOffset: number, yOffset: number): void;\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: CdkDrag): void;\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: CdkDrag): number;\r\n  _sortItem(item: CdkDrag, xOffset: number, yOffset: number): void;\r\n  _draggables: QueryList<CdkDrag>;\r\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropContainer | null;\r\n}\r\n\r\n/**\r\n * Injection token that is used to provide a CdkDrop instance to CdkDrag.\r\n * Used for avoiding circular imports.\r\n */\r\nexport const CDK_DROP_CONTAINER = new InjectionToken<CdkDropContainer>('CDK_DROP_CONTAINER');\r\n"]}