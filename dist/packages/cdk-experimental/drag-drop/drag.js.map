{"version":3,"file":"drag.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/drag-drop/drag.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {CdkDragHandle} from './drag-handle';\r\nimport {CdkDropContainer, CDK_DROP_CONTAINER} from './drop-container';\r\nimport {\r\n  CdkDragStart,\r\n  CdkDragEnd,\r\n  CdkDragExit,\r\n  CdkDragEnter,\r\n  CdkDragDrop,\r\n  CdkDragMove,\r\n} from './drag-events';\r\nimport {CdkDragPreview} from './drag-preview';\r\nimport {CdkDragPlaceholder} from './drag-placeholder';\r\nimport {ViewportRuler} from '@angular/cdk/overlay';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\nimport {Subject, merge, Observable} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\n// TODO(crisbeto): add auto-scrolling functionality.\r\n// TODO(crisbeto): add an API for moving a draggable up/down the\r\n// list programmatically. Useful for keyboard controls.\r\n\r\n/** Element that can be moved inside a CdkDrop container. */\r\n@Directive({\r\n  selector: '[cdkDrag]',\r\n  exportAs: 'cdkDrag',\r\n  host: {\r\n    'class': 'cdk-drag',\r\n    '(mousedown)': '_startDragging($event)',\r\n    '(touchstart)': '_startDragging($event)',\r\n  }\r\n})\r\nexport class CdkDrag<T = any> implements OnDestroy {\r\n  private _document: Document;\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Element displayed next to the user's pointer while the element is dragged. */\r\n  private _preview: HTMLElement;\r\n\r\n  /** Reference to the view of the preview element. */\r\n  private _previewRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Reference to the view of the placeholder element. */\r\n  private _placeholderRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\r\n  private _placeholder: HTMLElement;\r\n\r\n  /** Coordinates within the element at which the user picked up the element. */\r\n  private _pickupPositionInElement: Point;\r\n\r\n  /** Coordinates on the page at which the user picked up the element. */\r\n  private _pickupPositionOnPage: Point;\r\n\r\n  /**\r\n   * Reference to the element that comes after the draggable in the DOM, at the time\r\n   * it was picked up. Used for restoring its initial position when it's dropped.\r\n   */\r\n  private _nextSibling: Node | null;\r\n\r\n  /**\r\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n   * passive transform in order for the dragged element to retain its new position\r\n   * after the user has stopped dragging and because we need to know the relative\r\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n   */\r\n  private _passiveTransform: Point = {x: 0, y: 0};\r\n\r\n  /** CSS `transform` that is applied to the element while it's being dragged. */\r\n  private _activeTransform: Point = {x: 0, y: 0};\r\n\r\n  /** Whether the element has moved since the user started dragging it. */\r\n  private _hasMoved = false;\r\n\r\n  /** Drop container in which the CdkDrag resided when dragging began. */\r\n  private _initialContainer: CdkDropContainer;\r\n\r\n  /** Cached scroll position on the page when the element was picked up. */\r\n  private _scrollPosition: {top: number, left: number};\r\n\r\n  /** Emits when the item is being moved. */\r\n  private _moveEvents = new Subject<CdkDragMove<T>>();\r\n\r\n  /**\r\n   * Amount of subscriptions to the move event. Used to avoid\r\n   * hitting the zone if the consumer didn't subscribe to it.\r\n   */\r\n  private _moveEventSubscriptions = 0;\r\n\r\n  /** Elements that can be used to drag the draggable item. */\r\n  @ContentChildren(CdkDragHandle) _handles: QueryList<CdkDragHandle>;\r\n\r\n  /** Element that will be used as a template to create the draggable item's preview. */\r\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\r\n\r\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\r\n\r\n  /** Arbitrary data to attach to this drag instance. */\r\n  @Input('cdkDragData') data: T;\r\n\r\n  /** Locks the position of the dragged element along the specified axis. */\r\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\r\n\r\n  /** Emits when the user starts dragging the item. */\r\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\r\n\r\n  /** Emits when the user stops dragging an item in the container. */\r\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\r\n\r\n  /** Emits when the user has moved the item into a new container. */\r\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\r\n      new EventEmitter<CdkDragEnter<any>>();\r\n\r\n  /** Emits when the user removes the item its container by dragging it into another container. */\r\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\r\n      new EventEmitter<CdkDragExit<any>>();\r\n\r\n  /** Emits when the user drops the item inside a container. */\r\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\r\n      new EventEmitter<CdkDragDrop<any>>();\r\n\r\n  /**\r\n   * Emits as the user is dragging the item. Use with caution,\r\n   * because this event will fire for every pixel that the user has dragged.\r\n   */\r\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> = Observable.create(observer => {\r\n    const subscription = this._moveEvents.subscribe(observer);\r\n    this._moveEventSubscriptions++;\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      this._moveEventSubscriptions--;\r\n    };\r\n  });\r\n\r\n  constructor(\r\n    /** Element that the draggable is attached to. */\r\n    public element: ElementRef<HTMLElement>,\r\n    /** Droppable container that the draggable is a part of. */\r\n    @Inject(CDK_DROP_CONTAINER) @Optional() @SkipSelf() public dropContainer: CdkDropContainer,\r\n    @Inject(DOCUMENT) document: any,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropContainer>,\r\n    @Optional() private _dir: Directionality) {\r\n      this._document = document;\r\n      _dragDropRegistry.registerDragItem(this);\r\n    }\r\n\r\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\r\n  getPlaceholderElement(): HTMLElement {\r\n    return this._placeholder;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n\r\n    // Do this check before removing from the registry since it'll\r\n    // stop being considered as dragged once it is removed.\r\n    if (this._dragDropRegistry.isDragging(this)) {\r\n      // Since we move out the element to the end of the body while it's being\r\n      // dragged, we have to make sure that it's removed if it gets destroyed.\r\n      this._removeElement(this.element.nativeElement);\r\n    }\r\n\r\n    this._nextSibling = null;\r\n    this._dragDropRegistry.removeDragItem(this);\r\n    this._moveEvents.complete();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Starts the dragging sequence. */\r\n  _startDragging(event: MouseEvent | TouchEvent) {\r\n    // Delegate the event based on whether it started from a handle or the element itself.\r\n    if (this._handles.length) {\r\n      const targetHandle = this._handles.find(handle => {\r\n        const element = handle.element.nativeElement;\r\n        const target = event.target;\r\n        return !!target && (target === element || element.contains(target as HTMLElement));\r\n      });\r\n\r\n      if (targetHandle) {\r\n        this._pointerDown(targetHandle.element, event);\r\n      }\r\n    } else {\r\n      this._pointerDown(this.element, event);\r\n    }\r\n  }\r\n\r\n  /** Handler for when the pointer is pressed down on the element or the handle. */\r\n  private _pointerDown = (referenceElement: ElementRef<HTMLElement>,\r\n                          event: MouseEvent | TouchEvent) => {\r\n    if (this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    const endedOrDestroyed = merge(this.ended, this._destroyed);\r\n\r\n    this._dragDropRegistry.pointerMove\r\n        .pipe(takeUntil(endedOrDestroyed))\r\n        .subscribe(this._pointerMove);\r\n\r\n        this._dragDropRegistry.pointerUp\r\n        .pipe(takeUntil(endedOrDestroyed))\r\n        .subscribe(this._pointerUp);\r\n\r\n    this._dragDropRegistry.startDragging(this, event);\r\n    this._initialContainer = this.dropContainer;\r\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\r\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\r\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\r\n        this._getPointerPositionInElement(referenceElement, event);\r\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\r\n\r\n    // Emit the event on the item before the one on the container.\r\n    this.started.emit({source: this});\r\n\r\n    if (this.dropContainer) {\r\n      const element = this.element.nativeElement;\r\n      const preview = this._preview = this._createPreviewElement();\r\n      const placeholder = this._placeholder = this._createPlaceholderElement();\r\n\r\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\r\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\r\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\r\n      element.style.display = 'none';\r\n      this._nextSibling = element.nextSibling;\r\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\r\n      this._document.body.appendChild(preview);\r\n      this.dropContainer.start();\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\r\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\r\n    // TODO(crisbeto): this should start dragging after a certain threshold,\r\n    // otherwise we risk interfering with clicks on the element.\r\n    if (!this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    this._hasMoved = true;\r\n    event.preventDefault();\r\n\r\n    const pointerPosition = this._getConstrainedPointerPosition(event);\r\n\r\n    if (this.dropContainer) {\r\n      this._updateActiveDropContainer(pointerPosition);\r\n    } else {\r\n      const activeTransform = this._activeTransform;\r\n      activeTransform.x =\r\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\r\n      activeTransform.y =\r\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\r\n      this._setTransform(this.element.nativeElement, activeTransform.x, activeTransform.y);\r\n    }\r\n\r\n    // Since this event gets fired for every pixel while dragging, we only\r\n    // want to fire it if the consumer opted into it. Also we have to\r\n    // re-enter the zone becaus we run all of the events on the outside.\r\n    if (this._moveEventSubscriptions > 0) {\r\n      this._ngZone.run(() => {\r\n        this._moveEvents.next({\r\n          source: this,\r\n          pointerPosition,\r\n          event\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\r\n  private _pointerUp = () => {\r\n    if (!this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    this._dragDropRegistry.stopDragging(this);\r\n\r\n    if (!this.dropContainer) {\r\n      // Convert the active transform into a passive one. This means that next time\r\n      // the user starts dragging the item, its position will be calculated relatively\r\n      // to the new passive transform.\r\n      this._passiveTransform.x = this._activeTransform.x;\r\n      this._passiveTransform.y = this._activeTransform.y;\r\n      this._ngZone.run(() => this.ended.emit({source: this}));\r\n      return;\r\n    }\r\n\r\n    this._animatePreviewToPlaceholder().then(() => this._cleanupDragArtifacts());\r\n  }\r\n\r\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\r\n  private _cleanupDragArtifacts() {\r\n    // Restore the element's visibility and insert it at its old position in the DOM.\r\n    // It's important that we maintain the position, because moving the element around in the DOM\r\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\r\n    // while moving the existing elements in all other cases.\r\n    this.element.nativeElement.style.display = '';\r\n\r\n    if (this._nextSibling) {\r\n      this._nextSibling.parentNode!.insertBefore(this.element.nativeElement, this._nextSibling);\r\n    } else {\r\n      this._placeholder.parentNode!.appendChild(this.element.nativeElement);\r\n    }\r\n\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n\r\n    // Re-enter the NgZone since we bound `document` events on the outside.\r\n    this._ngZone.run(() => {\r\n      const currentIndex = this.dropContainer.getItemIndex(this);\r\n\r\n      this.ended.emit({source: this});\r\n      this.dropped.emit({\r\n        item: this,\r\n        currentIndex,\r\n        previousIndex: this._initialContainer.getItemIndex(this),\r\n        container: this.dropContainer,\r\n        previousContainer: this._initialContainer\r\n      });\r\n      this.dropContainer.drop(this, currentIndex, this._initialContainer);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the item's position in its drop container, or moves it\r\n   * into a new one, depending on its current drag position.\r\n   */\r\n  private _updateActiveDropContainer({x, y}) {\r\n    // Drop container that draggable has been moved into.\r\n    const newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\r\n\r\n    if (newContainer) {\r\n      this._ngZone.run(() => {\r\n        // Notify the old container that the item has left.\r\n        this.exited.emit({item: this, container: this.dropContainer});\r\n        this.dropContainer.exit(this);\r\n        // Notify the new container that the item has entered.\r\n        this.entered.emit({item: this, container: newContainer});\r\n        this.dropContainer = newContainer;\r\n        this.dropContainer.enter(this, x, y);\r\n      });\r\n    }\r\n\r\n    this.dropContainer._sortItem(this, x, y);\r\n    this._setTransform(this._preview,\r\n                       x - this._pickupPositionInElement.x,\r\n                       y - this._pickupPositionInElement.y);\r\n  }\r\n\r\n  /**\r\n   * Creates the element that will be rendered next to the user's pointer\r\n   * and will be used as a preview of the element that is being dragged.\r\n   */\r\n  private _createPreviewElement(): HTMLElement {\r\n    let preview: HTMLElement;\r\n\r\n    if (this._previewTemplate) {\r\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\r\n                                                                this._previewTemplate.data);\r\n\r\n      preview = viewRef.rootNodes[0];\r\n      this._previewRef = viewRef;\r\n      this._setTransform(preview, this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\r\n    } else {\r\n      const element = this.element.nativeElement;\r\n      const elementRect = element.getBoundingClientRect();\r\n\r\n      preview = element.cloneNode(true) as HTMLElement;\r\n      preview.style.width = `${elementRect.width}px`;\r\n      preview.style.height = `${elementRect.height}px`;\r\n      this._setTransform(preview, elementRect.left, elementRect.top);\r\n    }\r\n\r\n    preview.classList.add('cdk-drag-preview');\r\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\r\n\r\n    return preview;\r\n  }\r\n\r\n  /** Creates an element that will be shown instead of the current element while dragging. */\r\n  private _createPlaceholderElement(): HTMLElement {\r\n    let placeholder: HTMLElement;\r\n\r\n    if (this._placeholderTemplate) {\r\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\r\n        this._placeholderTemplate.templateRef,\r\n        this._placeholderTemplate.data\r\n      );\r\n      placeholder = this._placeholderRef.rootNodes[0];\r\n    } else {\r\n      placeholder = this.element.nativeElement.cloneNode(true) as HTMLElement;\r\n    }\r\n\r\n    placeholder.classList.add('cdk-drag-placeholder');\r\n    return placeholder;\r\n  }\r\n\r\n  /**\r\n   * Figures out the coordinates at which an element was picked up.\r\n   * @param referenceElement Element that initiated the dragging.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  private _getPointerPositionInElement(referenceElement: ElementRef<HTMLElement>,\r\n                                       event: MouseEvent | TouchEvent): Point {\r\n    const elementRect = this.element.nativeElement.getBoundingClientRect();\r\n    const handleElement = referenceElement === this.element ? null : referenceElement.nativeElement;\r\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\r\n    const x = this._isTouchEvent(event) ?\r\n        event.targetTouches[0].pageX - referenceRect.left - this._scrollPosition.left :\r\n        event.offsetX;\r\n    const y = this._isTouchEvent(event) ?\r\n        event.targetTouches[0].pageY - referenceRect.top - this._scrollPosition.top :\r\n        event.offsetY;\r\n\r\n    return {\r\n      x: referenceRect.left - elementRect.left + x,\r\n      y: referenceRect.top - elementRect.top + y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Animates the preview element from its current position to the location of the drop placeholder.\r\n   * @returns Promise that resolves when the animation completes.\r\n   */\r\n  private _animatePreviewToPlaceholder(): Promise<void> {\r\n    // If the user hasn't moved yet, the transitionend event won't fire.\r\n    if (!this._hasMoved) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const placeholderRect = this._placeholder.getBoundingClientRect();\r\n\r\n    // Apply the class that adds a transition to the preview.\r\n    this._preview.classList.add('cdk-drag-animating');\r\n\r\n    // Move the preview to the placeholder position.\r\n    this._setTransform(this._preview, placeholderRect.left, placeholderRect.top);\r\n\r\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\r\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\r\n    // apply its style, we take advantage of the available info to figure out whether we need to\r\n    // bind the event in the first place.\r\n    const duration = getTransitionDurationInMs(this._preview);\r\n\r\n    if (duration === 0) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this._ngZone.runOutsideAngular(() => {\r\n      return new Promise(resolve => {\r\n        const handler = (event: TransitionEvent) => {\r\n          if (!event || event.target === this._preview) {\r\n            this._preview.removeEventListener('transitionend', handler);\r\n            resolve();\r\n            clearTimeout(timeout);\r\n          }\r\n        };\r\n\r\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\r\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\r\n        // fire if the transition hasn't completed when it was supposed to.\r\n        const timeout = setTimeout(handler, duration * 1.5);\r\n        this._preview.addEventListener('transitionend', handler);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the `transform` style on an element.\r\n   * @param element Element on which to set the transform.\r\n   * @param x Desired position of the element along the X axis.\r\n   * @param y Desired position of the element along the Y axis.\r\n   */\r\n  private _setTransform(element: HTMLElement, x: number, y: number) {\r\n    element.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n  }\r\n\r\n  /**\r\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\r\n   * @param element Element to be removed.\r\n   */\r\n  private _removeElement(element: HTMLElement | null) {\r\n    if (element && element.parentNode) {\r\n      element.parentNode.removeChild(element);\r\n    }\r\n  }\r\n\r\n  /** Determines the point of the page that was touched by the user. */\r\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\r\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\r\n\r\n    return {\r\n      x: point.pageX - this._scrollPosition.left,\r\n      y: point.pageY - this._scrollPosition.top\r\n    };\r\n  }\r\n\r\n  /** Gets the pointer position on the page, accounting for any position constraints. */\r\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\r\n    const point = this._getPointerPositionOnPage(event);\r\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\r\n\r\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\r\n      point.y = this._pickupPositionOnPage.y;\r\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\r\n      point.x = this._pickupPositionOnPage.x;\r\n    }\r\n\r\n    return point;\r\n  }\r\n\r\n  /** Determines whether an event is a touch event. */\r\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n    return event.type.startsWith('touch');\r\n  }\r\n\r\n  /** Destroys the preview element and its ViewRef. */\r\n  private _destroyPreview() {\r\n    if (this._preview) {\r\n      this._removeElement(this._preview);\r\n    }\r\n\r\n    if (this._previewRef) {\r\n      this._previewRef.destroy();\r\n    }\r\n\r\n    this._preview = this._previewRef = null!;\r\n  }\r\n\r\n  /** Destroys the placeholder element and its ViewRef. */\r\n  private _destroyPlaceholder() {\r\n    if (this._placeholder) {\r\n      this._removeElement(this._placeholder);\r\n    }\r\n\r\n    if (this._placeholderRef) {\r\n      this._placeholderRef.destroy();\r\n    }\r\n\r\n    this._placeholder = this._placeholderRef = null!;\r\n  }\r\n}\r\n\r\n/** Parses a CSS time value to milliseconds. */\r\nfunction parseCssTimeUnitsToMs(value: string): number {\r\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\r\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\r\n  return parseFloat(value) * multiplier;\r\n}\r\n\r\n/** Gets the transition duration, including the delay, of an element in milliseconds. */\r\nfunction getTransitionDurationInMs(element: HTMLElement): number {\r\n  const computedStyle = getComputedStyle(element);\r\n  const rawDuration = computedStyle.getPropertyValue('transition-duration');\r\n  const rawDelay = computedStyle.getPropertyValue('transition-delay');\r\n\r\n  return parseCssTimeUnitsToMs(rawDuration) + parseCssTimeUnitsToMs(rawDelay);\r\n}\r\n\r\n\r\n/** Point on the page or within an element. */\r\ninterface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n"]}