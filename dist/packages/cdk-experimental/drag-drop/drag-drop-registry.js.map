{"version":3,"file":"drag-drop-registry.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/drag-drop/drag-drop-registry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {supportsPassiveEventListeners} from '@angular/cdk/platform';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Event options that can be used to bind an active event. */\r\nconst activeEventOptions = supportsPassiveEventListeners() ? {passive: false} : false;\r\n\r\n/** Handler for a pointer event callback. */\r\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\r\n\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\n// Note: this class is generic, rather than referencing CdkDrag and CdkDrop directly, in order to\r\n// avoid circular imports. If we were to reference them here, importing the registry into the\r\n// classes that are registering themselves will introduce a circular import.\r\n@Injectable({providedIn: 'root'})\r\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  /** Registered drop container instances. */\r\n  private _dropInstances = new Set<C>();\r\n\r\n  /** Registered drag item instances. */\r\n  private _dragInstances = new Set<I>();\r\n\r\n  /** Drag item instances that are currently being dragged. */\r\n  private _activeDragInstances = new Set<I>();\r\n\r\n  /** Keeps track of the event listeners that we've bound to the `document`. */\r\n  private _globalListeners = new Map<string, {handler: PointerEventHandler, options?: any}>();\r\n\r\n  /**\r\n   * Emits the `touchmove` or `mousemove` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  /**\r\n   * Emits the `touchend` or `mouseup` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) _document: any) {\r\n    this._document = _document;\r\n  }\r\n\r\n  /** Adds a drop container to the registry. */\r\n  registerDropContainer(drop: C) {\r\n    if (!this._dropInstances.has(drop)) {\r\n      if (this.getDropContainer(drop.id)) {\r\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\r\n      }\r\n\r\n      this._dropInstances.add(drop);\r\n    }\r\n  }\r\n\r\n  /** Adds a drag item instance to the registry. */\r\n  registerDragItem(drag: I) {\r\n    this._dragInstances.add(drag);\r\n\r\n    if (this._dragInstances.size === 1) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        // The event handler has to be explicitly active, because\r\n        // newer browsers make it passive by default.\r\n        this._document.addEventListener('touchmove', this._preventScrollListener,\r\n            activeEventOptions);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Removes a drop container from the registry. */\r\n  removeDropContainer(drop: C) {\r\n    this._dropInstances.delete(drop);\r\n  }\r\n\r\n  /** Removes a drag item instance from the registry. */\r\n  removeDragItem(drag: I) {\r\n    this._dragInstances.delete(drag);\r\n    this.stopDragging(drag);\r\n\r\n    if (this._dragInstances.size === 0) {\r\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\r\n          activeEventOptions as any);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the dragging sequence for a drag instance.\r\n   * @param drag Drag instance which is being dragged.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\r\n    this._activeDragInstances.add(drag);\r\n\r\n    if (this._activeDragInstances.size === 1) {\r\n      const isTouchEvent = event.type.startsWith('touch');\r\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\r\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\r\n\r\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\r\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\r\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\r\n      this._globalListeners\r\n        .set(moveEvent, {handler: e => this.pointerMove.next(e), options: activeEventOptions})\r\n        .set(upEvent, {handler: e => this.pointerUp.next(e)})\r\n        .forEach((config, name) => {\r\n          this._ngZone.runOutsideAngular(() => {\r\n            this._document.addEventListener(name, config.handler, config.options);\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Stops dragging a drag item instance. */\r\n  stopDragging(drag: I) {\r\n    this._activeDragInstances.delete(drag);\r\n\r\n    if (this._activeDragInstances.size === 0) {\r\n      this._clearGlobalListeners();\r\n    }\r\n  }\r\n\r\n  /** Gets whether a drag item instance is currently being dragged. */\r\n  isDragging(drag: I) {\r\n    return this._activeDragInstances.has(drag);\r\n  }\r\n\r\n  /** Gets a drop container by its id. */\r\n  getDropContainer(id: string): C | undefined {\r\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\r\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\r\n    this._clearGlobalListeners();\r\n    this.pointerMove.complete();\r\n    this.pointerUp.complete();\r\n  }\r\n\r\n  /**\r\n   * Listener used to prevent `touchmove` events while the element is being dragged.\r\n   * This gets bound once, ahead of time, because WebKit won't preventDefault on a\r\n   * dynamically-added `touchmove` listener. See https://bugs.webkit.org/show_bug.cgi?id=184250.\r\n   */\r\n  private _preventScrollListener = (event: TouchEvent) => {\r\n    if (this._activeDragInstances.size) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /** Clears out the global event listeners from the `document`. */\r\n  private _clearGlobalListeners() {\r\n    this._globalListeners.forEach((config, name) => {\r\n      this._document.removeEventListener(name, config.handler, config.options);\r\n    });\r\n\r\n    this._globalListeners.clear();\r\n  }\r\n}\r\n"]}