{"version":3,"file":"dialog-ref.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/dialog/dialog-ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\r\nimport {OverlayRef, GlobalPositionStrategy, OverlaySizeConfig} from '@angular/cdk/overlay';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {Observable} from 'rxjs';\r\nimport {map, filter} from 'rxjs/operators';\r\nimport {DialogPosition} from './dialog-config';\r\nimport {CdkDialogContainer} from './dialog-container';\r\n\r\n/** Unique id for the created dialog. */\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Reference to a dialog opened via the Dialog service.\r\n */\r\nexport class DialogRef<T, R = any> {\r\n  /** The instance of the component in the dialog. */\r\n  componentInstance: T;\r\n\r\n  /** Whether the user is allowed to close the dialog. */\r\n  disableClose: boolean | undefined;\r\n\r\n  /** Result to be passed to afterClosed. */\r\n  private _result: R | undefined;\r\n\r\n  constructor(\r\n    public _overlayRef: OverlayRef,\r\n    protected _containerInstance: CdkDialogContainer,\r\n    readonly id: string = `dialog-${uniqueId++}`) {\r\n\r\n    // If the dialog has a backdrop, handle clicks from the backdrop.\r\n    if (_containerInstance._config.hasBackdrop) {\r\n      _overlayRef.backdropClick().subscribe(() => {\r\n        if (!this.disableClose) {\r\n          this.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    this.beforeClosed().subscribe(() => {\r\n      this._overlayRef.detachBackdrop();\r\n    });\r\n\r\n    this.afterClosed().subscribe(() => {\r\n      this._overlayRef.detach();\r\n      this._overlayRef.dispose();\r\n      this.componentInstance = null!;\r\n    });\r\n\r\n    // Close when escape keydown event occurs\r\n    _overlayRef.keydownEvents()\r\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\r\n      .subscribe(() => this.close());\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay's backdrop has been clicked. */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._overlayRef.backdropClick();\r\n  }\r\n\r\n  /**\r\n   * Close the dialog.\r\n   * @param dialogResult Optional result to return to the dialog opener.\r\n   */\r\n  close(dialogResult?: R): void {\r\n    this._result = dialogResult;\r\n    this._containerInstance._startExiting();\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's position.\r\n   * @param position New dialog position.\r\n   */\r\n  updatePosition(position?: DialogPosition): this {\r\n    let strategy = this._getPositionStrategy();\r\n\r\n    if (position && (position.left || position.right)) {\r\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n    } else {\r\n      strategy.centerHorizontally();\r\n    }\r\n\r\n    if (position && (position.top || position.bottom)) {\r\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n    } else {\r\n      strategy.centerVertically();\r\n    }\r\n\r\n    this._overlayRef.updatePosition();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when keydown events are targeted on the overlay.\r\n   */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._overlayRef.keydownEvents();\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's width and height, defined, min and max.\r\n   * @param size New size for the overlay.\r\n   */\r\n  updateSize(size: OverlaySizeConfig): this {\r\n    if (size.width) {\r\n      this._getPositionStrategy().width(size.width.toString());\r\n    }\r\n    if (size.height) {\r\n      this._getPositionStrategy().height(size.height.toString());\r\n    }\r\n    this._overlayRef.updateSize(size);\r\n    this._overlayRef.updatePosition();\r\n    return this;\r\n  }\r\n\r\n  /** Fetches the position strategy object from the overlay ref. */\r\n  private _getPositionStrategy(): GlobalPositionStrategy {\r\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog begins opening. */\r\n  beforeOpened(): Observable<void> {\r\n    return this._containerInstance._beforeEnter.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog is finished opening. */\r\n  afterOpened(): Observable<void> {\r\n    return this._containerInstance._afterEnter.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog begins closing. */\r\n  beforeClosed(): Observable<R | undefined> {\r\n    return this._containerInstance._beforeExit.pipe(map(() => this._result));\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog is finished closing. */\r\n  afterClosed(): Observable<R | undefined> {\r\n    return this._containerInstance._afterExit.pipe(map(() => this._result));\r\n  }\r\n}\r\n"]}