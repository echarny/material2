{"version":3,"file":"selection.spec.js","sourceRoot":"","sources":["../../../../src/cdk/collections/selection.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {getMultipleValuesInSingleSelectionError, SelectionModel} from './selection';\r\n\r\n\r\ndescribe('SelectionModel', () => {\r\n  describe('single selection', () => {\r\n    let model: SelectionModel<any>;\r\n\r\n    beforeEach(() => model = new SelectionModel());\r\n\r\n    it('should be able to select a single value', () => {\r\n      model.select(1);\r\n\r\n      expect(model.selected.length).toBe(1);\r\n      expect(model.isSelected(1)).toBe(true);\r\n    });\r\n\r\n    it('should deselect the previously selected value', () => {\r\n      model.select(1);\r\n      model.select(2);\r\n\r\n      expect(model.isSelected(1)).toBe(false);\r\n      expect(model.isSelected(2)).toBe(true);\r\n    });\r\n\r\n    it('should throw an error if multiple values are passed to model', () => {\r\n      expect(() => model.select(1, 2)).toThrow(getMultipleValuesInSingleSelectionError());\r\n    });\r\n\r\n    it('should only preselect one value', () => {\r\n      model = new SelectionModel(false, [1, 2]);\r\n\r\n      expect(model.selected.length).toBe(1);\r\n      expect(model.isSelected(1)).toBe(true);\r\n      expect(model.isSelected(2)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('multiple selection', () => {\r\n    let model: SelectionModel<any>;\r\n\r\n    beforeEach(() => model = new SelectionModel(true));\r\n\r\n    it('should be able to select multiple options', () => {\r\n      const onChangeSpy = jasmine.createSpy('onChange spy');\r\n\r\n      model.onChange!.subscribe(onChangeSpy);\r\n      model.select(1);\r\n      model.select(2);\r\n\r\n      expect(model.selected.length).toBe(2);\r\n      expect(model.isSelected(1)).toBe(true);\r\n      expect(model.isSelected(2)).toBe(true);\r\n      expect(onChangeSpy).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it('should be able to select multiple options at the same time', () => {\r\n      const onChangeSpy = jasmine.createSpy('onChange spy');\r\n\r\n      model.onChange!.subscribe(onChangeSpy);\r\n      model.select(1, 2);\r\n\r\n      expect(model.selected.length).toBe(2);\r\n      expect(model.isSelected(1)).toBe(true);\r\n      expect(model.isSelected(2)).toBe(true);\r\n      expect(onChangeSpy).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should be able to preselect multiple options', () => {\r\n      model = new SelectionModel(true, [1, 2]);\r\n\r\n      expect(model.selected.length).toBe(2);\r\n      expect(model.isSelected(1)).toBe(true);\r\n      expect(model.isSelected(2)).toBe(true);\r\n    });\r\n\r\n    it('should be able to sort the selected values', () => {\r\n      model = new SelectionModel(true, [2, 3, 1]);\r\n\r\n      expect(model.selected).toEqual([2, 3, 1]);\r\n\r\n      model.sort();\r\n\r\n      expect(model.selected).toEqual([1, 2, 3]);\r\n    });\r\n\r\n    it('should sort values if `selected` has not been accessed before', () => {\r\n      model = new SelectionModel(true, [2, 3, 1]);\r\n\r\n      // Important: don't assert `selected` before sorting so the getter isn't invoked\r\n      model.sort();\r\n      expect(model.selected).toEqual([1, 2, 3]);\r\n    });\r\n  });\r\n\r\n  describe('onChange event', () => {\r\n    it('should return the model that dispatched the event', () => {\r\n      let model = new SelectionModel();\r\n      let spy = jasmine.createSpy('SelectionModel change event');\r\n\r\n      model.onChange!.subscribe(spy);\r\n      model.select(1);\r\n\r\n      let event = spy.calls.mostRecent().args[0];\r\n\r\n      expect(spy).toHaveBeenCalled();\r\n      expect(event.source).toBe(model);\r\n    });\r\n\r\n    it('should return both the added and removed values', () => {\r\n      let model = new SelectionModel();\r\n      let spy = jasmine.createSpy('SelectionModel change event');\r\n\r\n      model.select(1);\r\n\r\n      model.onChange!.subscribe(spy);\r\n\r\n      model.select(2);\r\n\r\n      let event = spy.calls.mostRecent().args[0];\r\n\r\n      expect(spy).toHaveBeenCalled();\r\n      expect(event.removed).toEqual([1]);\r\n      expect(event.added).toEqual([2]);\r\n    });\r\n\r\n    it('should have updated the selected value before emitting the change event', () => {\r\n      let model = new SelectionModel(true);\r\n      let spy = jasmine.createSpy('SelectionModel change event');\r\n\r\n      // Note: this assertion is only here to run the getter.\r\n      expect(model.selected).toEqual([]);\r\n\r\n      model.onChange!.subscribe(() => spy(model.selected));\r\n      model.select(1);\r\n\r\n      expect(spy).toHaveBeenCalledWith([1]);\r\n    });\r\n\r\n    describe('selection', () => {\r\n      let model: SelectionModel<any>;\r\n      let spy: jasmine.Spy;\r\n\r\n      beforeEach(() => {\r\n        model = new SelectionModel(true);\r\n        spy = jasmine.createSpy('SelectionModel change event');\r\n\r\n        model.onChange!.subscribe(spy);\r\n      });\r\n\r\n      it('should emit an event when a value is selected', () => {\r\n        model.select(1);\r\n\r\n        let event = spy.calls.mostRecent().args[0];\r\n\r\n        expect(spy).toHaveBeenCalled();\r\n        expect(event.added).toEqual([1]);\r\n        expect(event.removed).toEqual([]);\r\n      });\r\n\r\n      it('should not emit multiple events for the same value', () => {\r\n        model.select(1);\r\n        model.select(1);\r\n\r\n        expect(spy).toHaveBeenCalledTimes(1);\r\n      });\r\n\r\n      it('should not emit an event when preselecting values', () => {\r\n        model = new SelectionModel(false, [1]);\r\n        spy = jasmine.createSpy('SelectionModel initial change event');\r\n        model.onChange!.subscribe(spy);\r\n\r\n        expect(spy).not.toHaveBeenCalled();\r\n      });\r\n    });\r\n\r\n    describe('deselection', () => {\r\n      let model: SelectionModel<any>;\r\n      let spy: jasmine.Spy;\r\n\r\n      beforeEach(() => {\r\n        model = new SelectionModel(true, [1, 2, 3]);\r\n        spy = jasmine.createSpy('SelectionModel change event');\r\n\r\n        model.onChange!.subscribe(spy);\r\n      });\r\n\r\n      it('should emit an event when a value is deselected', () => {\r\n        model.deselect(1);\r\n\r\n        let event = spy.calls.mostRecent().args[0];\r\n\r\n        expect(spy).toHaveBeenCalled();\r\n        expect(event.removed).toEqual([1]);\r\n      });\r\n\r\n      it('should not emit an event when a non-selected value is deselected', () => {\r\n        model.deselect(4);\r\n        expect(spy).not.toHaveBeenCalled();\r\n      });\r\n\r\n      it('should emit a single event when clearing all of the selected options', () => {\r\n        model.clear();\r\n\r\n        let event = spy.calls.mostRecent().args[0];\r\n\r\n        expect(spy).toHaveBeenCalledTimes(1);\r\n        expect(event.removed).toEqual([1, 2, 3]);\r\n      });\r\n\r\n    });\r\n  });\r\n\r\n  describe('disabling the change event', () => {\r\n    let model: SelectionModel<any>;\r\n\r\n    beforeEach(() => {\r\n      model = new SelectionModel(true, undefined, false);\r\n    });\r\n\r\n    it('should not have an onChange stream if change events are disabled', () => {\r\n      expect(model.onChange).toBeFalsy();\r\n    });\r\n\r\n    it('should still update the select value', () => {\r\n      model.select(1);\r\n      expect(model.selected).toEqual([1]);\r\n\r\n      model.select(2);\r\n      expect(model.selected).toEqual([1, 2]);\r\n    });\r\n  });\r\n\r\n  it('should be able to determine whether it is empty', () => {\r\n    let model = new SelectionModel();\r\n\r\n    expect(model.isEmpty()).toBe(true);\r\n\r\n    model.select(1);\r\n\r\n    expect(model.isEmpty()).toBe(false);\r\n  });\r\n\r\n  it('should be able to determine whether it has a value', () => {\r\n    let model = new SelectionModel();\r\n\r\n    expect(model.hasValue()).toBe(false);\r\n\r\n    model.select(1);\r\n\r\n    expect(model.hasValue()).toBe(true);\r\n  });\r\n\r\n  it('should be able to toggle an option', () => {\r\n    let model = new SelectionModel();\r\n\r\n    model.toggle(1);\r\n    expect(model.isSelected(1)).toBe(true);\r\n\r\n    model.toggle(1);\r\n    expect(model.isSelected(1)).toBe(false);\r\n  });\r\n\r\n  it('should be able to clear the selected options', () => {\r\n    let model = new SelectionModel(true);\r\n\r\n    model.select(1);\r\n    model.select(2);\r\n\r\n    expect(model.selected.length).toBe(2);\r\n\r\n    model.clear();\r\n\r\n    expect(model.selected.length).toBe(0);\r\n    expect(model.isEmpty()).toBe(true);\r\n  });\r\n\r\n  it('should be empty if an empty array is passed for the preselected values', () => {\r\n    expect(new SelectionModel(false, []).selected).toEqual([]);\r\n  });\r\n\r\n  it('should be able to determine whether multiple values can be selected', () => {\r\n    let multipleSelectionModel = new SelectionModel(true);\r\n    expect(multipleSelectionModel.isMultipleSelection()).toBe(true);\r\n\r\n    let singleSelectionModel = new SelectionModel();\r\n    expect(singleSelectionModel.isMultipleSelection()).toBe(false);\r\n  });\r\n});\r\n"]}