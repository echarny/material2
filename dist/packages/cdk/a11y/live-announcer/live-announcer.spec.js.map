{"version":3,"file":"live-announcer.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/a11y/live-announcer/live-announcer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {MutationObserverFactory} from '@angular/cdk/observers';\r\nimport {Component, Input} from '@angular/core';\r\nimport {ComponentFixture, fakeAsync, flush, inject, TestBed, tick} from '@angular/core/testing';\r\nimport {By} from '@angular/platform-browser';\r\nimport {A11yModule} from '../index';\r\nimport {LiveAnnouncer} from './live-announcer';\r\nimport {LIVE_ANNOUNCER_ELEMENT_TOKEN} from './live-announcer-token';\r\n\r\n\r\ndescribe('LiveAnnouncer', () => {\r\n  let announcer: LiveAnnouncer;\r\n  let ariaLiveElement: Element;\r\n  let fixture: ComponentFixture<TestApp>;\r\n\r\n  describe('with default element', () => {\r\n    beforeEach(() => TestBed.configureTestingModule({\r\n      imports: [A11yModule],\r\n      declarations: [TestApp],\r\n    }));\r\n\r\n    beforeEach(fakeAsync(inject([LiveAnnouncer], (la: LiveAnnouncer) => {\r\n      announcer = la;\r\n      ariaLiveElement = getLiveElement();\r\n      fixture = TestBed.createComponent(TestApp);\r\n    })));\r\n\r\n    afterEach(() => {\r\n      // In our tests we always remove the current live element, in\r\n      // order to avoid having multiple announcer elements in the DOM.\r\n      announcer.ngOnDestroy();\r\n    });\r\n\r\n    it('should correctly update the announce text', fakeAsync(() => {\r\n      let buttonElement = fixture.debugElement.query(By.css('button')).nativeElement;\r\n      buttonElement.click();\r\n\r\n      // This flushes our 100ms timeout for the screenreaders.\r\n      tick(100);\r\n\r\n      expect(ariaLiveElement.textContent).toBe('Test');\r\n    }));\r\n\r\n    it('should correctly update the politeness attribute', fakeAsync(() => {\r\n      announcer.announce('Hey Google', 'assertive');\r\n\r\n      // This flushes our 100ms timeout for the screenreaders.\r\n      tick(100);\r\n\r\n      expect(ariaLiveElement.textContent).toBe('Hey Google');\r\n      expect(ariaLiveElement.getAttribute('aria-live')).toBe('assertive');\r\n    }));\r\n\r\n    it('should apply the aria-live value polite by default', fakeAsync(() => {\r\n      announcer.announce('Hey Google');\r\n\r\n      // This flushes our 100ms timeout for the screenreaders.\r\n      tick(100);\r\n\r\n      expect(ariaLiveElement.textContent).toBe('Hey Google');\r\n      expect(ariaLiveElement.getAttribute('aria-live')).toBe('polite');\r\n    }));\r\n\r\n    it('should remove the aria-live element from the DOM on destroy', fakeAsync(() => {\r\n      announcer.announce('Hey Google');\r\n\r\n      // This flushes our 100ms timeout for the screenreaders.\r\n      tick(100);\r\n\r\n      // Call the lifecycle hook manually since Angular won't do it in tests.\r\n      announcer.ngOnDestroy();\r\n\r\n      expect(document.body.querySelector('.cdk-live-announcer-element'))\r\n          .toBeFalsy('Expected that the aria-live element was remove from the DOM.');\r\n    }));\r\n\r\n    it('should return a promise that resolves after the text has been announced', fakeAsync(() => {\r\n      const spy = jasmine.createSpy('announce spy');\r\n      announcer.announce('something').then(spy);\r\n\r\n      expect(spy).not.toHaveBeenCalled();\r\n      tick(100);\r\n      expect(spy).toHaveBeenCalled();\r\n    }));\r\n\r\n    it('should ensure that there is only one live element at a time', fakeAsync(() => {\r\n      announcer.ngOnDestroy();\r\n      fixture.destroy();\r\n\r\n      TestBed.resetTestingModule().configureTestingModule({\r\n        imports: [A11yModule],\r\n        declarations: [TestApp],\r\n      });\r\n\r\n      const extraElement = document.createElement('div');\r\n      extraElement.classList.add('cdk-live-announcer-element');\r\n      document.body.appendChild(extraElement);\r\n\r\n      inject([LiveAnnouncer], (la: LiveAnnouncer) => {\r\n        announcer = la;\r\n        ariaLiveElement = getLiveElement();\r\n        fixture = TestBed.createComponent(TestApp);\r\n      })();\r\n\r\n      announcer.announce('Hey Google');\r\n      tick(100);\r\n\r\n      expect(document.body.querySelectorAll('.cdk-live-announcer-element').length)\r\n          .toBe(1, 'Expected only one live announcer element in the DOM.');\r\n    }));\r\n\r\n  });\r\n\r\n  describe('with a custom element', () => {\r\n    let customLiveElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      customLiveElement = document.createElement('div');\r\n\r\n      return TestBed.configureTestingModule({\r\n        imports: [A11yModule],\r\n        declarations: [TestApp],\r\n        providers: [{provide: LIVE_ANNOUNCER_ELEMENT_TOKEN, useValue: customLiveElement}],\r\n      });\r\n    });\r\n\r\n    beforeEach(inject([LiveAnnouncer], (la: LiveAnnouncer) => {\r\n      announcer = la;\r\n      ariaLiveElement = getLiveElement();\r\n    }));\r\n\r\n    it('should allow to use a custom live element', fakeAsync(() => {\r\n      announcer.announce('Custom Element');\r\n\r\n      // This flushes our 100ms timeout for the screenreaders.\r\n      tick(100);\r\n\r\n      expect(customLiveElement.textContent).toBe('Custom Element');\r\n    }));\r\n  });\r\n});\r\n\r\ndescribe('CdkAriaLive', () => {\r\n  let mutationCallbacks: Function[] = [];\r\n  let announcer: LiveAnnouncer;\r\n  let announcerSpy: jasmine.Spy;\r\n  let fixture: ComponentFixture<DivWithCdkAriaLive>;\r\n\r\n  const invokeMutationCallbacks = () => mutationCallbacks.forEach(cb => cb());\r\n\r\n  beforeEach(fakeAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [A11yModule],\r\n      declarations: [DivWithCdkAriaLive],\r\n      providers: [{\r\n        provide: MutationObserverFactory,\r\n        useValue: {\r\n          create: (callback: Function) => {\r\n            mutationCallbacks.push(callback);\r\n\r\n            return {\r\n              observe: () => {},\r\n              disconnect: () => {}\r\n            };\r\n          }\r\n        }\r\n      }]\r\n    });\r\n  }));\r\n\r\n  beforeEach(fakeAsync(inject([LiveAnnouncer], (la: LiveAnnouncer) => {\r\n    announcer = la;\r\n    announcerSpy = spyOn(la, 'announce').and.callThrough();\r\n    fixture = TestBed.createComponent(DivWithCdkAriaLive);\r\n    fixture.detectChanges();\r\n    flush();\r\n  })));\r\n\r\n  afterEach(fakeAsync(() => {\r\n    // In our tests we always remove the current live element, in\r\n    // order to avoid having multiple announcer elements in the DOM.\r\n    announcer.ngOnDestroy();\r\n  }));\r\n\r\n  it('should dynamically update the politeness', fakeAsync(() => {\r\n    fixture.componentInstance.content = 'New content';\r\n    fixture.detectChanges();\r\n    invokeMutationCallbacks();\r\n    flush();\r\n\r\n    expect(announcer.announce).toHaveBeenCalledWith('New content', 'polite');\r\n\r\n    announcerSpy.calls.reset();\r\n    fixture.componentInstance.politeness = 'off';\r\n    fixture.componentInstance.content = 'Newer content';\r\n    fixture.detectChanges();\r\n    invokeMutationCallbacks();\r\n    flush();\r\n\r\n    expect(announcer.announce).not.toHaveBeenCalled();\r\n\r\n    announcerSpy.calls.reset();\r\n    fixture.componentInstance.politeness = 'assertive';\r\n    fixture.componentInstance.content = 'Newest content';\r\n    fixture.detectChanges();\r\n    invokeMutationCallbacks();\r\n    flush();\r\n\r\n    expect(announcer.announce).toHaveBeenCalledWith('Newest content', 'assertive');\r\n  }));\r\n});\r\n\r\n\r\nfunction getLiveElement(): Element {\r\n  return document.body.querySelector('.cdk-live-announcer-element')!;\r\n}\r\n\r\n@Component({template: `<button (click)=\"announceText('Test')\">Announce</button>`})\r\nclass TestApp {\r\n  constructor(public live: LiveAnnouncer) { }\r\n\r\n  announceText(message: string) {\r\n    this.live.announce(message);\r\n  }\r\n}\r\n\r\n@Component({template: `<div [cdkAriaLive]=\"politeness\">{{content}}</div>`})\r\nclass DivWithCdkAriaLive {\r\n  @Input() politeness = 'polite';\r\n  @Input() content = 'Initial content';\r\n}\r\n"]}