{"version":3,"file":"aria-describer.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/a11y/aria-describer/aria-describer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {A11yModule, CDK_DESCRIBEDBY_HOST_ATTRIBUTE} from '../index';\r\nimport {AriaDescriber, MESSAGES_CONTAINER_ID} from './aria-describer';\r\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\r\nimport {Component, ElementRef, ViewChild} from '@angular/core';\r\n\r\ndescribe('AriaDescriber', () => {\r\n  let ariaDescriber: AriaDescriber;\r\n  let component: TestApp;\r\n  let fixture: ComponentFixture<TestApp>;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [A11yModule],\r\n      declarations: [TestApp],\r\n      providers: [AriaDescriber],\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(TestApp);\r\n    component = fixture.componentInstance;\r\n    ariaDescriber = component.ariaDescriber;\r\n  });\r\n\r\n  afterEach(() => {\r\n    ariaDescriber.ngOnDestroy();\r\n  });\r\n\r\n  it('should initialize without the message container', () => {\r\n    expect(getMessagesContainer()).toBeNull();\r\n  });\r\n\r\n  it('should be able to create a message element', () => {\r\n    ariaDescriber.describe(component.element1, 'My Message');\r\n    expectMessages(['My Message']);\r\n  });\r\n\r\n  it('should not register empty strings', () => {\r\n    ariaDescriber.describe(component.element1, '');\r\n    expect(getMessageElements()).toBe(null);\r\n  });\r\n\r\n  it('should not register non-string values', () => {\r\n    expect(() => ariaDescriber.describe(component.element1, null!)).not.toThrow();\r\n    expect(getMessageElements()).toBe(null);\r\n  });\r\n\r\n  it('should not throw when trying to remove non-string value', () => {\r\n    expect(() => ariaDescriber.removeDescription(component.element1, null!)).not.toThrow();\r\n  });\r\n\r\n  it('should de-dupe a message registered multiple times', () => {\r\n    ariaDescriber.describe(component.element1, 'My Message');\r\n    ariaDescriber.describe(component.element2, 'My Message');\r\n    ariaDescriber.describe(component.element3, 'My Message');\r\n    expectMessages(['My Message']);\r\n    expectMessage(component.element1, 'My Message');\r\n    expectMessage(component.element2, 'My Message');\r\n    expectMessage(component.element3, 'My Message');\r\n  });\r\n\r\n  it('should be able to register multiple messages', () => {\r\n    ariaDescriber.describe(component.element1, 'First Message');\r\n    ariaDescriber.describe(component.element2, 'Second Message');\r\n    expectMessages(['First Message', 'Second Message']);\r\n    expectMessage(component.element1, 'First Message');\r\n    expectMessage(component.element2, 'Second Message');\r\n  });\r\n\r\n  it('should be able to unregister messages', () => {\r\n    ariaDescriber.describe(component.element1, 'My Message');\r\n    expectMessages(['My Message']);\r\n\r\n    // Register again to check dedupe\r\n    ariaDescriber.describe(component.element2, 'My Message');\r\n    expectMessages(['My Message']);\r\n\r\n    // Unregister one message and make sure the message is still present in the container\r\n    ariaDescriber.removeDescription(component.element1, 'My Message');\r\n    expect(component.element1.hasAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE)).toBeFalsy();\r\n    expectMessages(['My Message']);\r\n\r\n    // Unregister the second message, message container should be gone\r\n    ariaDescriber.removeDescription(component.element2, 'My Message');\r\n    expect(component.element2.hasAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE)).toBeFalsy();\r\n    expect(getMessagesContainer()).toBeNull();\r\n  });\r\n\r\n  it('should be able to unregister messages while having others registered', () => {\r\n    ariaDescriber.describe(component.element1, 'Persistent Message');\r\n    ariaDescriber.describe(component.element2, 'My Message');\r\n    expectMessages(['Persistent Message', 'My Message']);\r\n\r\n    // Register again to check dedupe\r\n    ariaDescriber.describe(component.element3, 'My Message');\r\n    expectMessages(['Persistent Message', 'My Message']);\r\n\r\n    // Unregister one message and make sure the message is still present in the container\r\n    ariaDescriber.removeDescription(component.element2, 'My Message');\r\n    expectMessages(['Persistent Message', 'My Message']);\r\n\r\n    // Unregister the second message, message container should be gone\r\n    ariaDescriber.removeDescription(component.element3, 'My Message');\r\n    expectMessages(['Persistent Message']);\r\n  });\r\n\r\n  it('should be able to append to an existing list of aria describedby', () => {\r\n    ariaDescriber.describe(component.element4, 'My Message');\r\n    expectMessages(['My Message']);\r\n    expectMessage(component.element4, 'My Message');\r\n  });\r\n\r\n  it('should be able to handle multiple regisitrations of the same message to an element', () => {\r\n    ariaDescriber.describe(component.element1, 'My Message');\r\n    ariaDescriber.describe(component.element1, 'My Message');\r\n    expectMessages(['My Message']);\r\n    expectMessage(component.element1, 'My Message');\r\n  });\r\n\r\n  it('should not throw when attempting to describe a non-element node', () => {\r\n    const node: any = document.createComment('Not an element node');\r\n    expect(() => ariaDescriber.describe(node, 'This looks like an element')).not.toThrow();\r\n  });\r\n\r\n  it('should clear any pre-existing containers', () => {\r\n    const extraContainer = document.createElement('div');\r\n    extraContainer.id = MESSAGES_CONTAINER_ID;\r\n    document.body.appendChild(extraContainer);\r\n\r\n    ariaDescriber.describe(component.element1, 'Hello');\r\n\r\n    // Use `querySelectorAll` with an attribute since `getElementById` will stop at the first match.\r\n    expect(document.querySelectorAll(`[id='${MESSAGES_CONTAINER_ID}']`).length).toBe(1);\r\n  });\r\n});\r\n\r\nfunction getMessagesContainer() {\r\n  return document.querySelector(`#${MESSAGES_CONTAINER_ID}`);\r\n}\r\n\r\nfunction getMessageElements(): Node[] | null {\r\n  const messagesContainer = getMessagesContainer();\r\n  if (!messagesContainer) { return null; }\r\n\r\n  return messagesContainer ?  Array.prototype.slice.call(messagesContainer.children) : null;\r\n}\r\n\r\n/** Checks that the messages array matches the existing created message elements. */\r\nfunction expectMessages(messages: string[]) {\r\n  const messageElements = getMessageElements();\r\n  expect(messageElements).toBeDefined();\r\n\r\n  expect(messages.length).toBe(messageElements!.length);\r\n  messages.forEach((message, i) => {\r\n    expect(messageElements![i].textContent).toBe(message);\r\n  });\r\n}\r\n\r\n/** Checks that an element points to a message element that contains the message. */\r\nfunction expectMessage(el: Element, message: string) {\r\n  const ariaDescribedBy = el.getAttribute('aria-describedby');\r\n  expect(ariaDescribedBy).toBeDefined();\r\n\r\n  const cdkDescribedBy = el.getAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n  expect(cdkDescribedBy).toBeDefined();\r\n\r\n  const messages = ariaDescribedBy!.split(' ').map(referenceId => {\r\n    const messageElement = document.querySelector(`#${referenceId}`);\r\n    return messageElement ? messageElement.textContent : '';\r\n  });\r\n\r\n  expect(messages).toContain(message);\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <div #element1></div>\r\n    <div #element2></div>\r\n    <div #element3></div>\r\n    <div #element4 aria-describedby=\"existing-aria-describedby1 existing-aria-describedby2\"></div>\r\n  `,\r\n})\r\nclass TestApp {\r\n  @ViewChild('element1') _element1: ElementRef;\r\n  get element1(): Element { return this._element1.nativeElement; }\r\n\r\n  @ViewChild('element2') _element2: ElementRef;\r\n  get element2(): Element { return this._element2.nativeElement; }\r\n\r\n  @ViewChild('element3') _element3: ElementRef;\r\n  get element3(): Element { return this._element3.nativeElement; }\r\n\r\n  @ViewChild('element4') _element4: ElementRef;\r\n  get element4(): Element { return this._element4.nativeElement; }\r\n\r\n\r\n  constructor(public ariaDescriber: AriaDescriber) { }\r\n}\r\n"]}