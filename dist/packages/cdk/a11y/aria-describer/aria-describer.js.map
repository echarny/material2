{"version":3,"file":"aria-describer.js","sourceRoot":"","sources":["../../../../../src/cdk/a11y/aria-describer/aria-describer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\r\n\r\n\r\n/**\r\n * Interface used to register message elements and keep a count of how many registrations have\r\n * the same message and the reference to the message element used for the `aria-describedby`.\r\n */\r\nexport interface RegisteredMessage {\r\n  /** The element containing the message. */\r\n  messageElement: Element;\r\n\r\n  /** The number of elements that reference this message element via `aria-describedby`. */\r\n  referenceCount: number;\r\n}\r\n\r\n/** ID used for the body container where all messages are appended. */\r\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\r\n\r\n/** ID prefix used for each created message element. */\r\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\r\n\r\n/** Attribute given to each host element that is described by a message element. */\r\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\r\n\r\n/** Global incremental identifier for each registered message element. */\r\nlet nextId = 0;\r\n\r\n/** Global map of all registered message elements that have been placed into the document. */\r\nconst messageRegistry = new Map<string, RegisteredMessage>();\r\n\r\n/** Container for all registered messages. */\r\nlet messagesContainer: HTMLElement | null = null;\r\n\r\n/**\r\n * Utility that creates visually hidden elements with a message content. Useful for elements that\r\n * want to use aria-describedby to further describe themselves without adding additional visual\r\n * content.\r\n * @docs-private\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class AriaDescriber implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  constructor(@Inject(DOCUMENT) _document: any) {\r\n    this._document = _document;\r\n  }\r\n\r\n  /**\r\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\r\n   * the message. If the same message has already been registered, then it will reuse the created\r\n   * message element.\r\n   */\r\n  describe(hostElement: Element, message: string) {\r\n    if (!this._canBeDescribed(hostElement, message)) {\r\n      return;\r\n    }\r\n\r\n    if (!messageRegistry.has(message)) {\r\n      this._createMessageElement(message);\r\n    }\r\n\r\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\r\n      this._addMessageReference(hostElement, message);\r\n    }\r\n  }\r\n\r\n  /** Removes the host element's aria-describedby reference to the message element. */\r\n  removeDescription(hostElement: Element, message: string) {\r\n    if (!this._canBeDescribed(hostElement, message)) {\r\n      return;\r\n    }\r\n\r\n    if (this._isElementDescribedByMessage(hostElement, message)) {\r\n      this._removeMessageReference(hostElement, message);\r\n    }\r\n\r\n    const registeredMessage = messageRegistry.get(message);\r\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\r\n      this._deleteMessageElement(message);\r\n    }\r\n\r\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\r\n      this._deleteMessagesContainer();\r\n    }\r\n  }\r\n\r\n  /** Unregisters all created message elements and removes the message container. */\r\n  ngOnDestroy() {\r\n    const describedElements =\r\n        this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\r\n\r\n    for (let i = 0; i < describedElements.length; i++) {\r\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\r\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n    }\r\n\r\n    if (messagesContainer) {\r\n      this._deleteMessagesContainer();\r\n    }\r\n\r\n    messageRegistry.clear();\r\n  }\r\n\r\n  /**\r\n   * Creates a new element in the visually hidden message container element with the message\r\n   * as its content and adds it to the message registry.\r\n   */\r\n  private _createMessageElement(message: string) {\r\n    const messageElement = this._document.createElement('div');\r\n    messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\r\n    messageElement.appendChild(this._document.createTextNode(message)!);\r\n\r\n    this._createMessagesContainer();\r\n    messagesContainer!.appendChild(messageElement);\r\n\r\n    messageRegistry.set(message, {messageElement, referenceCount: 0});\r\n  }\r\n\r\n  /** Deletes the message element from the global messages container. */\r\n  private _deleteMessageElement(message: string) {\r\n    const registeredMessage = messageRegistry.get(message);\r\n    const messageElement = registeredMessage && registeredMessage.messageElement;\r\n    if (messagesContainer && messageElement) {\r\n      messagesContainer.removeChild(messageElement);\r\n    }\r\n    messageRegistry.delete(message);\r\n  }\r\n\r\n  /** Creates the global container for all aria-describedby messages. */\r\n  private _createMessagesContainer() {\r\n    if (!messagesContainer) {\r\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\r\n\r\n      // When going from the server to the client, we may end up in a situation where there's\r\n      // already a container on the page, but we don't have a reference to it. Clear the\r\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\r\n      // container, should be slightly faster.\r\n      if (preExistingContainer) {\r\n        preExistingContainer.parentNode!.removeChild(preExistingContainer);\r\n      }\r\n\r\n      messagesContainer = this._document.createElement('div');\r\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\r\n      messagesContainer.setAttribute('aria-hidden', 'true');\r\n      messagesContainer.style.display = 'none';\r\n      this._document.body.appendChild(messagesContainer);\r\n    }\r\n  }\r\n\r\n  /** Deletes the global messages container. */\r\n  private _deleteMessagesContainer() {\r\n    if (messagesContainer && messagesContainer.parentNode) {\r\n      messagesContainer.parentNode.removeChild(messagesContainer);\r\n      messagesContainer = null;\r\n    }\r\n  }\r\n\r\n  /** Removes all cdk-describedby messages that are hosted through the element. */\r\n  private _removeCdkDescribedByReferenceIds(element: Element) {\r\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\r\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\r\n        .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\r\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\r\n  }\r\n\r\n  /**\r\n   * Adds a message reference to the element using aria-describedby and increments the registered\r\n   * message's reference count.\r\n   */\r\n  private _addMessageReference(element: Element, message: string) {\r\n    const registeredMessage = messageRegistry.get(message)!;\r\n\r\n    // Add the aria-describedby reference and set the\r\n    // describedby_host attribute to mark the element.\r\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\r\n\r\n    registeredMessage.referenceCount++;\r\n  }\r\n\r\n  /**\r\n   * Removes a message reference from the element using aria-describedby\r\n   * and decrements the registered message's reference count.\r\n   */\r\n  private _removeMessageReference(element: Element, message: string) {\r\n    const registeredMessage = messageRegistry.get(message)!;\r\n    registeredMessage.referenceCount--;\r\n\r\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n  }\r\n\r\n  /** Returns true if the element has been described by the provided message ID. */\r\n  private _isElementDescribedByMessage(element: Element, message: string): boolean {\r\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\r\n    const registeredMessage = messageRegistry.get(message);\r\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\r\n\r\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\r\n  }\r\n\r\n  /** Determines whether a message can be described on a particular element. */\r\n  private _canBeDescribed(element: Element, message: string): boolean {\r\n    return element.nodeType === this._document.ELEMENT_NODE && message != null &&\r\n        !!`${message}`.trim();\r\n  }\r\n\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher: AriaDescriber, _document: any) {\r\n  return parentDispatcher || new AriaDescriber(_document);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const ARIA_DESCRIBER_PROVIDER = {\r\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\r\n  provide: AriaDescriber,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), AriaDescriber],\r\n    DOCUMENT as InjectionToken<any>\r\n  ],\r\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\r\n};\r\n"]}