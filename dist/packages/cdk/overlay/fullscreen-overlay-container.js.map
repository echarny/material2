{"version":3,"file":"fullscreen-overlay-container.js","sourceRoot":"","sources":["../../../../src/cdk/overlay/fullscreen-overlay-container.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n\r\n/**\r\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\r\n * Fullscreen mode\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\r\n *\r\n * Should be provided in the root component.\r\n */\r\n@Injectable()\r\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\r\n  private _fullScreenEventName: string | undefined;\r\n  private _fullScreenListener: () => void;\r\n\r\n  constructor(@Inject(DOCUMENT) _document: any) {\r\n    super(_document);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n\r\n    if (this._fullScreenEventName && this._fullScreenListener) {\r\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\r\n    }\r\n  }\r\n\r\n  protected _createContainer(): void {\r\n    super._createContainer();\r\n    this._adjustParentForFullscreenChange();\r\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\r\n  }\r\n\r\n  private _adjustParentForFullscreenChange(): void {\r\n    if (!this._containerElement) {\r\n      return;\r\n    }\r\n\r\n    const fullscreenElement = this.getFullscreenElement();\r\n    const parent = fullscreenElement || this._document.body;\r\n    parent.appendChild(this._containerElement);\r\n  }\r\n\r\n  private _addFullscreenChangeListener(fn: () => void) {\r\n    const eventName = this._getEventName();\r\n\r\n    if (eventName) {\r\n      if (this._fullScreenListener) {\r\n        this._document.removeEventListener(eventName, this._fullScreenListener);\r\n      }\r\n\r\n      this._document.addEventListener(eventName, fn);\r\n      this._fullScreenListener = fn;\r\n    }\r\n  }\r\n\r\n  private _getEventName(): string | undefined {\r\n    if (!this._fullScreenEventName) {\r\n      if (this._document.fullscreenEnabled) {\r\n        this._fullScreenEventName = 'fullscreenchange';\r\n      } else if (this._document.webkitFullscreenEnabled) {\r\n        this._fullScreenEventName = 'webkitfullscreenchange';\r\n      } else if ((this._document as any).mozFullScreenEnabled) {\r\n        this._fullScreenEventName = 'mozfullscreenchange';\r\n      } else if ((this._document as any).msFullscreenEnabled) {\r\n        this._fullScreenEventName = 'MSFullscreenChange';\r\n      }\r\n    }\r\n\r\n    return this._fullScreenEventName;\r\n  }\r\n\r\n  /**\r\n   * When the page is put into fullscreen mode, a specific element is specified.\r\n   * Only that element and its children are visible when in fullscreen mode.\r\n   */\r\n  getFullscreenElement(): Element {\r\n    return this._document.fullscreenElement ||\r\n           this._document.webkitFullscreenElement ||\r\n           (this._document as any).mozFullScreenElement ||\r\n           (this._document as any).msFullscreenElement ||\r\n           null;\r\n  }\r\n}\r\n"]}