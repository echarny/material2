{"version":3,"file":"overlay-keyboard-dispatcher.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {TestBed, inject} from '@angular/core/testing';\r\nimport {dispatchKeyboardEvent} from '@angular/cdk/testing';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {Component, NgModule} from '@angular/core';\r\nimport {OverlayModule, OverlayContainer, Overlay} from '../index';\r\nimport {OverlayKeyboardDispatcher} from './overlay-keyboard-dispatcher';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\n\r\n\r\ndescribe('OverlayKeyboardDispatcher', () => {\r\n  let keyboardDispatcher: OverlayKeyboardDispatcher;\r\n  let overlay: Overlay;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [OverlayModule, TestComponentModule],\r\n    });\r\n\r\n    inject([OverlayKeyboardDispatcher, Overlay], (kbd: OverlayKeyboardDispatcher, o: Overlay) => {\r\n      keyboardDispatcher = kbd;\r\n      overlay = o;\r\n    })();\r\n  });\r\n\r\n  afterEach(inject([OverlayContainer], (overlayContainer: OverlayContainer) => {\r\n    overlayContainer.ngOnDestroy();\r\n  }));\r\n\r\n  it('should track overlays in order as they are attached and detached', () => {\r\n    const overlayOne = overlay.create();\r\n    const overlayTwo = overlay.create();\r\n\r\n    // Attach overlays\r\n    keyboardDispatcher.add(overlayOne);\r\n    keyboardDispatcher.add(overlayTwo);\r\n\r\n    expect(keyboardDispatcher._attachedOverlays.length)\r\n        .toBe(2, 'Expected both overlays to be tracked.');\r\n    expect(keyboardDispatcher._attachedOverlays[0]).toBe(overlayOne, 'Expected one to be first.');\r\n    expect(keyboardDispatcher._attachedOverlays[1]).toBe(overlayTwo, 'Expected two to be last.');\r\n\r\n    // Detach first one and re-attach it\r\n    keyboardDispatcher.remove(overlayOne);\r\n    keyboardDispatcher.add(overlayOne);\r\n\r\n    expect(keyboardDispatcher._attachedOverlays[0])\r\n        .toBe(overlayTwo, 'Expected two to now be first.');\r\n    expect(keyboardDispatcher._attachedOverlays[1])\r\n        .toBe(overlayOne, 'Expected one to now be last.');\r\n  });\r\n\r\n  it('should dispatch body keyboard events to the most recently attached overlay', () => {\r\n    const overlayOne = overlay.create();\r\n    const overlayTwo = overlay.create();\r\n    const overlayOneSpy = jasmine.createSpy('overlayOne keyboard event spy');\r\n    const overlayTwoSpy = jasmine.createSpy('overlayTwo keyboard event spy');\r\n\r\n    overlayOne.keydownEvents().subscribe(overlayOneSpy);\r\n    overlayTwo.keydownEvents().subscribe(overlayTwoSpy);\r\n\r\n    // Attach overlays\r\n    keyboardDispatcher.add(overlayOne);\r\n    keyboardDispatcher.add(overlayTwo);\r\n\r\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE);\r\n\r\n    // Most recent overlay should receive event\r\n    expect(overlayOneSpy).not.toHaveBeenCalled();\r\n    expect(overlayTwoSpy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should dispatch keyboard events when propagation is stopped', () => {\r\n    const overlayRef = overlay.create();\r\n    const spy = jasmine.createSpy('keyboard event spy');\r\n    const button = document.createElement('button');\r\n\r\n    document.body.appendChild(button);\r\n    button.addEventListener('keydown', event => event.stopPropagation());\r\n\r\n    overlayRef.keydownEvents().subscribe(spy);\r\n    keyboardDispatcher.add(overlayRef);\r\n    dispatchKeyboardEvent(button, 'keydown', ESCAPE);\r\n\r\n    expect(spy).toHaveBeenCalled();\r\n\r\n    button.parentNode!.removeChild(button);\r\n  });\r\n\r\n  it('should complete the keydown stream on dispose', () => {\r\n    const overlayRef = overlay.create();\r\n    const completeSpy = jasmine.createSpy('keydown complete spy');\r\n\r\n    overlayRef.keydownEvents().subscribe(undefined, undefined, completeSpy);\r\n\r\n    overlayRef.dispose();\r\n\r\n    expect(completeSpy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should stop emitting events to detached overlays', () => {\r\n    const instance = overlay.create();\r\n    const spy = jasmine.createSpy('keyboard event spy');\r\n\r\n    instance.attach(new ComponentPortal(TestComponent));\r\n    instance.keydownEvents().subscribe(spy);\r\n\r\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE, instance.overlayElement);\r\n    expect(spy).toHaveBeenCalledTimes(1);\r\n\r\n    instance.detach();\r\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE, instance.overlayElement);\r\n\r\n    expect(spy).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('should stop emitting events to disposed overlays', () => {\r\n    const instance = overlay.create();\r\n    const spy = jasmine.createSpy('keyboard event spy');\r\n\r\n    instance.attach(new ComponentPortal(TestComponent));\r\n    instance.keydownEvents().subscribe(spy);\r\n\r\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE, instance.overlayElement);\r\n    expect(spy).toHaveBeenCalledTimes(1);\r\n\r\n    instance.dispose();\r\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE, instance.overlayElement);\r\n\r\n    expect(spy).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('should dispose of the global keyboard event handler correctly', () => {\r\n    const overlayRef = overlay.create();\r\n    const body = document.body;\r\n\r\n    spyOn(body, 'addEventListener');\r\n    spyOn(body, 'removeEventListener');\r\n\r\n    keyboardDispatcher.add(overlayRef);\r\n    expect(body.addEventListener).toHaveBeenCalledWith('keydown', jasmine.any(Function), true);\r\n\r\n    overlayRef.dispose();\r\n    expect(body.removeEventListener).toHaveBeenCalledWith('keydown', jasmine.any(Function), true);\r\n  });\r\n\r\n  it('should skip overlays that do not have keydown event subscriptions', () => {\r\n    const overlayOne = overlay.create();\r\n    const overlayTwo = overlay.create();\r\n    const overlayOneSpy = jasmine.createSpy('overlayOne keyboard event spy');\r\n\r\n    overlayOne.keydownEvents().subscribe(overlayOneSpy);\r\n    keyboardDispatcher.add(overlayOne);\r\n    keyboardDispatcher.add(overlayTwo);\r\n\r\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE);\r\n\r\n    expect(overlayOneSpy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should not add the same overlay to the stack multiple times', () => {\r\n    const overlayOne = overlay.create();\r\n    const overlayTwo = overlay.create();\r\n    const overlayOneSpy = jasmine.createSpy('overlayOne keyboard event spy');\r\n    const overlayTwoSpy = jasmine.createSpy('overlayTwo keyboard event spy');\r\n\r\n    overlayOne.keydownEvents().subscribe(overlayOneSpy);\r\n    overlayTwo.keydownEvents().subscribe(overlayTwoSpy);\r\n\r\n    keyboardDispatcher.add(overlayOne);\r\n    keyboardDispatcher.add(overlayTwo);\r\n    keyboardDispatcher.add(overlayOne);\r\n\r\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE);\r\n\r\n    expect(keyboardDispatcher._attachedOverlays).toEqual([overlayTwo, overlayOne]);\r\n\r\n    expect(overlayTwoSpy).not.toHaveBeenCalled();\r\n    expect(overlayOneSpy).toHaveBeenCalled();\r\n  });\r\n\r\n});\r\n\r\n\r\n@Component({\r\n  template: 'Hello'\r\n})\r\nclass TestComponent { }\r\n\r\n\r\n// Create a real (non-test) NgModule as a workaround for\r\n// https://github.com/angular/angular/issues/10760\r\n@NgModule({\r\n  exports: [TestComponent],\r\n  declarations: [TestComponent],\r\n  entryComponents: [TestComponent],\r\n})\r\nclass TestComponentModule { }\r\n"]}