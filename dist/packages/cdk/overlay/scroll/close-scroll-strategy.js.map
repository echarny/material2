{"version":3,"file":"close-scroll-strategy.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/scroll/close-scroll-strategy.ts"],"names":[],"mappings":";;AAQA,qDAA2F;;;;AAgB3F;;;AAAA;IAKE,6BACU,iBAAmC,EACnC,OAAe,EACf,cAA6B,EAC7B,OAAmC;QAJ7C,iBAIiD;QAHvC,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,YAAO,GAAP,OAAO,CAAQ;QACf,mBAAc,GAAd,cAAc,CAAe;QAC7B,YAAO,GAAP,OAAO,CAA4B;mCARI,IAAI;;uBAqDnC;YAChB,KAAI,CAAC,OAAO,EAAE,CAAC;YAEf,EAAE,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACnC,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAzB,CAAyB,CAAC,CAAC;aACnD;SACF;KAnDgD;IAEjD,mDAAmD;;IACnD,oCAAM;IAAN,UAAO,UAA4B;QACjC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,MAAM,0DAAwC,EAAE,CAAC;SAClD;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;KAC/B;IAED,6DAA6D;;IAC7D,oCAAM;IAAN;QAAA,iBAsBC;QArBC,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC;SACR;QAED,IAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAElD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC,GAAG,CAAC;YAElF,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,SAAS,CAAC;gBAC1C,IAAM,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC,GAAG,CAAC;gBAE3E,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,KAAI,CAAC,sBAAsB,CAAC,IAAG,KAAI,CAAC,OAAQ,CAAC,SAAU,CAAA,CAAC,CAAC,CAAC;oBACtF,KAAI,CAAC,OAAO,EAAE,CAAC;iBAChB;gBAAC,IAAI,CAAC,CAAC;oBACN,KAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;iBACnC;aACF,CAAC,CAAC;SACJ;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC3D;KACF;IAED,2DAA2D;;IAC3D,qCAAO;IAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;KACF;8BA3EH;IAqFC,CAAA;AA7DY,kDAAmB","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgZone} from '@angular/core';\r\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {Subscription} from 'rxjs';\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\n\r\n/**\r\n * Config options for the CloseScrollStrategy.\r\n */\r\nexport interface CloseScrollStrategyConfig {\r\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\r\n  threshold?: number;\r\n}\r\n\r\n/**\r\n * Strategy that will close the overlay as soon as the user starts scrolling.\r\n */\r\nexport class CloseScrollStrategy implements ScrollStrategy {\r\n  private _scrollSubscription: Subscription|null = null;\r\n  private _overlayRef: OverlayReference;\r\n  private _initialScrollPosition: number;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _config?: CloseScrollStrategyConfig) {}\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference) {\r\n    if (this._overlayRef) {\r\n      throw getMatScrollStrategyAlreadyAttachedError();\r\n    }\r\n\r\n    this._overlayRef = overlayRef;\r\n  }\r\n\r\n  /** Enables the closing of the attached overlay on scroll. */\r\n  enable() {\r\n    if (this._scrollSubscription) {\r\n      return;\r\n    }\r\n\r\n    const stream = this._scrollDispatcher.scrolled(0);\r\n\r\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\r\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\r\n\r\n      this._scrollSubscription = stream.subscribe(() => {\r\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\r\n\r\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\r\n          this._detach();\r\n        } else {\r\n          this._overlayRef.updatePosition();\r\n        }\r\n      });\r\n    } else {\r\n      this._scrollSubscription = stream.subscribe(this._detach);\r\n    }\r\n  }\r\n\r\n  /** Disables the closing the attached overlay on scroll. */\r\n  disable() {\r\n    if (this._scrollSubscription) {\r\n      this._scrollSubscription.unsubscribe();\r\n      this._scrollSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Detaches the overlay ref and disables the scroll strategy. */\r\n  private _detach = () => {\r\n    this.disable();\r\n\r\n    if (this._overlayRef.hasAttached()) {\r\n      this._ngZone.run(() => this._overlayRef.detach());\r\n    }\r\n  }\r\n}\r\n"]}