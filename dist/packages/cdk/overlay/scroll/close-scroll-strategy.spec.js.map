{"version":3,"file":"close-scroll-strategy.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/scroll/close-scroll-strategy.spec.ts"],"names":[],"mappings":";;AAAA,iDAAiE;AACjE,sCAA0D;AAC1D,6BAA6B;AAC7B,8CAAkE;AAClE,oDAAuE;AACvE,kCAMkB;AAGlB,QAAQ,CAAC,qBAAqB,EAAE;IAC9B,IAAI,UAAsB,CAAC;IAC3B,IAAI,eAA8C,CAAC;IACnD,IAAI,eAAe,GAAG,IAAI,cAAO,EAAE,CAAC;IACpC,IAAI,cAAsB,CAAC;IAE3B,UAAU,CAAC,mBAAS,CAAC;QACnB,cAAc,GAAG,CAAC,CAAC;QAEnB,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,qBAAa,EAAE,qBAAY,EAAE,iBAAiB,CAAC;YACzD,SAAS,EAAE;gBACT,EAAC,OAAO,EAAE,4BAAgB,EAAE,UAAU,EAAE;wBAAM,OAAA,CAAC;4BAC7C,QAAQ,EAAE,cAAM,OAAA,eAAe,CAAC,YAAY,EAAE,EAA9B,CAA8B;yBAC/C,CAAC;oBAF4C,CAE5C,EAAC;gBACH,EAAC,OAAO,EAAE,yBAAa,EAAE,UAAU,EAAE;wBAAM,OAAA,CAAC;4BAC1C,yBAAyB,EAAE,cAAM,OAAA,CAAC,EAAC,GAAG,EAAE,cAAc,EAAC,CAAC,EAAvB,CAAuB;yBACzD,CAAC;oBAFyC,CAEzC,EAAC;aACJ;SACF,CAAC,CAAC;QAEH,iBAAO,CAAC,iBAAiB,EAAE,CAAC;KAC7B,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC,gBAAM,CAAC,CAAC,eAAO,CAAC,EAAE,UAAC,OAAgB;QAC5C,IAAI,aAAa,GAAG,IAAI,qBAAa,CAAC,EAAC,cAAc,EAAE,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAC,CAAC,CAAC;QAC1F,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC3C,eAAe,GAAG,IAAI,wBAAe,CAAC,YAAY,CAAC,CAAC;KACrD,CAAC,CAAC,CAAC;IAEJ,SAAS,CAAC,gBAAM,CAAC,CAAC,wBAAgB,CAAC,EAAE,UAAC,SAA2B;QAC/D,UAAU,CAAC,OAAO,EAAE,CAAC;QACrB,SAAS,CAAC,mBAAmB,EAAE,CAAC,UAAW,CAAC,WAAW,CAAC,SAAS,CAAC,mBAAmB,EAAE,CAAC,CAAC;KAC1F,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,uDAAuD,EAAE;QAC1D,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACnC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAE5B,eAAe,CAAC,IAAI,EAAE,CAAC;QACvB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;KAC9C,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE;QACxE,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACnC,UAAU,CAAC,MAAM,EAAE,CAAC;QAEpB,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC5B,eAAe,CAAC,IAAI,EAAE,CAAC;QAEvB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;KAClD,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE;QACpC,IAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAChD,IAAM,YAAY,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,cAAM,OAAA,GAAG,CAAC,aAAM,CAAC,eAAe,EAAE,CAAC,EAA7B,CAA6B,CAAC,CAAC;QAE7F,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACnC,eAAe,CAAC,IAAI,EAAE,CAAC;QAEvB,MAAM,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACvC,YAAY,CAAC,WAAW,EAAE,CAAC;KAC5B,CAAC,CAAC;IAEH,EAAE,CAAC,mFAAmF,EACpF,gBAAM,CAAC,CAAC,eAAO,CAAC,EAAE,UAAC,OAAgB;QACjC,UAAU,CAAC,OAAO,EAAE,CAAC;QAErB,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;YAC1B,cAAc,EAAE,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAC,SAAS,EAAE,EAAE,EAAC,CAAC;SAChE,CAAC,CAAC;QAEH,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACnC,KAAK,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;QACpC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAE5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,cAAc,EAAE,CAAC;YACjB,eAAe,CAAC,IAAI,EAAE,CAAC;SACxB;QAED,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;QAC5D,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAEjD,cAAc,EAAE,CAAC;QACjB,eAAe,CAAC,IAAI,EAAE,CAAC;QAEvB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;KACpD,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,mEAAmE,EACpE,gBAAM,CAAC,CAAC,eAAO,CAAC,EAAE,UAAC,OAAgB;QACjC,UAAU,CAAC,OAAO,EAAE,CAAC;QACrB,cAAc,GAAG,GAAG,CAAC;QAErB,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;YAC1B,cAAc,EAAE,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAC,SAAS,EAAE,EAAE,EAAC,CAAC;SAChE,CAAC,CAAC;QAEH,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACnC,KAAK,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;QACpC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;;QAG5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,cAAc,EAAE,CAAC;YACjB,eAAe,CAAC,IAAI,EAAE,CAAC;SACxB;;QAGD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,cAAc,EAAE,CAAC;YACjB,eAAe,CAAC,IAAI,EAAE,CAAC;SACxB;QAED,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;QAC5D,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;KAClD,CAAC,CAAC,CAAC;CACT,CAAC,CAAC;;;;;;gBAIF,gBAAS,SAAC,EAAC,QAAQ,EAAE,kBAAkB,EAAC;;uBAxIzC;;;;;;;gBA6IC,eAAQ,SAAC;oBACR,OAAO,EAAE,CAAC,qBAAa,EAAE,qBAAY,CAAC;oBACtC,YAAY,EAAE,CAAC,YAAY,CAAC;oBAC5B,eAAe,EAAE,CAAC,YAAY,CAAC;iBAChC;;4BAjJD","sourcesContent":["import {inject, TestBed, fakeAsync} from '@angular/core/testing';\r\nimport {NgModule, Component, NgZone} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {ComponentPortal, PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  OverlayModule,\r\n  OverlayContainer,\r\n} from '../index';\r\n\r\n\r\ndescribe('CloseScrollStrategy', () => {\r\n  let overlayRef: OverlayRef;\r\n  let componentPortal: ComponentPortal<MozarellaMsg>;\r\n  let scrolledSubject = new Subject();\r\n  let scrollPosition: number;\r\n\r\n  beforeEach(fakeAsync(() => {\r\n    scrollPosition = 0;\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [OverlayModule, PortalModule, OverlayTestModule],\r\n      providers: [\r\n        {provide: ScrollDispatcher, useFactory: () => ({\r\n          scrolled: () => scrolledSubject.asObservable()\r\n        })},\r\n        {provide: ViewportRuler, useFactory: () => ({\r\n          getViewportScrollPosition: () => ({top: scrollPosition})\r\n        })}\r\n      ]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  beforeEach(inject([Overlay], (overlay: Overlay) => {\r\n    let overlayConfig = new OverlayConfig({scrollStrategy: overlay.scrollStrategies.close()});\r\n    overlayRef = overlay.create(overlayConfig);\r\n    componentPortal = new ComponentPortal(MozarellaMsg);\r\n  }));\r\n\r\n  afterEach(inject([OverlayContainer], (container: OverlayContainer) => {\r\n    overlayRef.dispose();\r\n    container.getContainerElement().parentNode!.removeChild(container.getContainerElement());\r\n  }));\r\n\r\n  it('should detach the overlay as soon as the user scrolls', () => {\r\n    overlayRef.attach(componentPortal);\r\n    spyOn(overlayRef, 'detach');\r\n\r\n    scrolledSubject.next();\r\n    expect(overlayRef.detach).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should not attempt to detach the overlay after it has been detached', () => {\r\n    overlayRef.attach(componentPortal);\r\n    overlayRef.detach();\r\n\r\n    spyOn(overlayRef, 'detach');\r\n    scrolledSubject.next();\r\n\r\n    expect(overlayRef.detach).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should detach inside the NgZone', () => {\r\n    const spy = jasmine.createSpy('detachment spy');\r\n    const subscription = overlayRef.detachments().subscribe(() => spy(NgZone.isInAngularZone()));\r\n\r\n    overlayRef.attach(componentPortal);\r\n    scrolledSubject.next();\r\n\r\n    expect(spy).toHaveBeenCalledWith(true);\r\n    subscription.unsubscribe();\r\n  });\r\n\r\n  it('should be able to reposition the overlay up to a certain threshold before closing',\r\n    inject([Overlay], (overlay: Overlay) => {\r\n      overlayRef.dispose();\r\n\r\n      overlayRef = overlay.create({\r\n        scrollStrategy: overlay.scrollStrategies.close({threshold: 50})\r\n      });\r\n\r\n      overlayRef.attach(componentPortal);\r\n      spyOn(overlayRef, 'updatePosition');\r\n      spyOn(overlayRef, 'detach');\r\n\r\n      for (let i = 0; i < 50; i++) {\r\n        scrollPosition++;\r\n        scrolledSubject.next();\r\n      }\r\n\r\n      expect(overlayRef.updatePosition).toHaveBeenCalledTimes(50);\r\n      expect(overlayRef.detach).not.toHaveBeenCalled();\r\n\r\n      scrollPosition++;\r\n      scrolledSubject.next();\r\n\r\n      expect(overlayRef.detach).toHaveBeenCalledTimes(1);\r\n    }));\r\n\r\n    it('should not close if the user starts scrolling away and comes back',\r\n      inject([Overlay], (overlay: Overlay) => {\r\n        overlayRef.dispose();\r\n        scrollPosition = 100;\r\n\r\n        overlayRef = overlay.create({\r\n          scrollStrategy: overlay.scrollStrategies.close({threshold: 50})\r\n        });\r\n\r\n        overlayRef.attach(componentPortal);\r\n        spyOn(overlayRef, 'updatePosition');\r\n        spyOn(overlayRef, 'detach');\r\n\r\n        // Scroll down 30px.\r\n        for (let i = 0; i < 30; i++) {\r\n          scrollPosition++;\r\n          scrolledSubject.next();\r\n        }\r\n\r\n        // Scroll back up 30px.\r\n        for (let i = 0; i < 30; i++) {\r\n          scrollPosition--;\r\n          scrolledSubject.next();\r\n        }\r\n\r\n        expect(overlayRef.updatePosition).toHaveBeenCalledTimes(60);\r\n        expect(overlayRef.detach).not.toHaveBeenCalled();\r\n      }));\r\n});\r\n\r\n\r\n/** Simple component that we can attach to the overlay. */\r\n@Component({template: '<p>Mozarella</p>'})\r\nclass MozarellaMsg { }\r\n\r\n\r\n/** Test module to hold the component. */\r\n@NgModule({\r\n  imports: [OverlayModule, PortalModule],\r\n  declarations: [MozarellaMsg],\r\n  entryComponents: [MozarellaMsg],\r\n})\r\nclass OverlayTestModule { }\r\n"]}