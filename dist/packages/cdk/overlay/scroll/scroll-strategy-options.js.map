{"version":3,"file":"scroll-strategy-options.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/scroll/scroll-strategy-options.ts"],"names":[],"mappings":";;;;;;;;;AAQA,oDAAuE;AACvE,0CAAyC;AACzC,sCAAyD;AACzD,iEAA4D;AAC5D,iEAAuF;AACvF,+DAA0D;AAC1D,2EAGsC;;;;;;;;;;;;IAapC,+BACU,iBAAmC,EACnC,cAA6B,EAC7B,OAAe,EACL;QAJpB,iBAMG;QALO,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,mBAAc,GAAd,cAAc,CAAe;QAC7B,YAAO,GAAP,OAAO,CAAQ;;oBAMlB,cAAM,OAAA,IAAI,yCAAkB,EAAE,EAAxB,CAAwB;;;;;qBAM7B,UAAC,MAAkC;YAAK,OAAA,IAAI,2CAAmB,CAAC,KAAI,CAAC,iBAAiB,EAC1F,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,cAAc,EAAE,MAAM,CAAC;QADE,CACF;;qBAGtC,cAAM,OAAA,IAAI,2CAAmB,CAAC,KAAI,CAAC,cAAc,EAAE,KAAI,CAAC,SAAS,CAAC,EAA5D,CAA4D;;;;;;0BAO7D,UAAC,MAAuC;YAAK,OAAA,IAAI,qDAAwB,CAClF,KAAI,CAAC,iBAAiB,EAAE,KAAI,CAAC,cAAc,EAAE,KAAI,CAAC,OAAO,EAAE,MAAM,CAAC;QADZ,CACY;QAtBlE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;KAC3B;;gBAVJ,iBAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;gBAlBxB,4BAAgB;gBAAE,yBAAa;gBAEX,aAAM;gDAwB7B,aAAM,SAAC,iBAAQ;;;gCAlCpB;;AA2Ba,sDAAqB","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable, NgZone} from '@angular/core';\r\nimport {BlockScrollStrategy} from './block-scroll-strategy';\r\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\r\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\r\nimport {\r\n  RepositionScrollStrategy,\r\n  RepositionScrollStrategyConfig,\r\n} from './reposition-scroll-strategy';\r\n\r\n\r\n/**\r\n * Options for how an overlay will handle scrolling.\r\n *\r\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\r\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class ScrollStrategyOptions {\r\n  private _document: Document;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) document: any) {\r\n      this._document = document;\r\n    }\r\n\r\n  /** Do nothing on scroll. */\r\n  noop = () => new NoopScrollStrategy();\r\n\r\n  /**\r\n   * Close the overlay as soon as the user scrolls.\r\n   * @param config Configuration to be used inside the scroll strategy.\r\n   */\r\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\r\n      this._ngZone, this._viewportRuler, config)\r\n\r\n  /** Block scrolling. */\r\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\r\n\r\n  /**\r\n   * Update the overlay's position on scroll.\r\n   * @param config Configuration to be used inside the scroll strategy.\r\n   * Allows debouncing the reposition calls.\r\n   */\r\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\r\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\r\n}\r\n"]}