{"version":3,"file":"media-matcher.spec.js","sourceRoot":"","sources":["../../../../src/cdk/layout/media-matcher.spec.ts"],"names":[],"mappings":";;AAOA,iCAAqC;AACrC,iDAA6C;AAC7C,iDAA6D;AAC7D,kDAA+C;AAE/C,QAAQ,CAAC,cAAc,EAAE;IACvB,IAAI,YAA0B,CAAC;IAE/B,UAAU,CAAC,eAAK,CAAC;QACf,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,oBAAY,CAAC;SACxB,CAAC,CAAC;KACJ,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC,gBAAM,CAAC,CAAC,4BAAY,CAAC,EAAE,UAAC,EAAgB;QACjD,YAAY,GAAG,EAAE,CAAC;KACnB,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,yDAAyD,EAAE;QAC5D,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC;QACzE,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;KACzE,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EACxE,gBAAM,CAAC,CAAC,mBAAQ,CAAC,EAAE,UAAC,QAAkB;QACpC,IAAM,WAAW,GAAM,IAAI,CAAC,MAAM,EAAE,OAAI,CAAC;QAEzC,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrD,YAAY,CAAC,UAAU,CAAC,aAAW,WAAW,MAAG,CAAC,CAAC;QAEnD,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;SACvD;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;SACtD;QAED,6BAA6B,GAAW;YACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;gBACjE,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAE,GAAG,CAAC,KAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACjF,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAA1B,CAA0B,CAAC,CAAC;aACzD,CAAC,CAAC;SACJ;KACJ,CAAC,CAAC,CAAC;CACL,CAAC,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {LayoutModule} from './index';\r\nimport {MediaMatcher} from './media-matcher';\r\nimport {async, TestBed, inject} from '@angular/core/testing';\r\nimport {Platform} from '@angular/cdk/platform';\r\n\r\ndescribe('MediaMatcher', () => {\r\n  let mediaMatcher: MediaMatcher;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [LayoutModule]\r\n    });\r\n  }));\r\n\r\n  beforeEach(inject([MediaMatcher], (mm: MediaMatcher) => {\r\n    mediaMatcher = mm;\r\n  }));\r\n\r\n  it('correctly returns a MediaQueryList to check for matches', () => {\r\n    expect(mediaMatcher.matchMedia('(min-width: 1px)').matches).toBeTruthy();\r\n    expect(mediaMatcher.matchMedia('(max-width: 1px)').matches).toBeFalsy();\r\n  });\r\n\r\n  it('should add CSS rules for provided queries when the platform is webkit',\r\n    inject([Platform], (platform: Platform) => {\r\n      const randomWidth = `${Math.random()}px`;\r\n\r\n      expect(getStyleTagByString(randomWidth)).toBeFalsy();\r\n      mediaMatcher.matchMedia(`(width: ${randomWidth})`);\r\n\r\n      if (platform.WEBKIT) {\r\n        expect(getStyleTagByString(randomWidth)).toBeTruthy();\r\n      } else {\r\n        expect(getStyleTagByString(randomWidth)).toBeFalsy();\r\n      }\r\n\r\n      function getStyleTagByString(str: string): HTMLStyleElement | undefined {\r\n        return Array.from(document.head.querySelectorAll('style')).find(tag => {\r\n          const rules = tag.sheet ? Array.from((tag.sheet as CSSStyleSheet).cssRules) : [];\r\n          return !!rules.find(rule => rule.cssText.includes(str));\r\n        });\r\n      }\r\n  }));\r\n});\r\n"]}