{"version":3,"file":"breakpoints-observer.spec.js","sourceRoot":"","sources":["../../../../src/cdk/layout/breakpoints-observer.spec.ts"],"names":[],"mappings":";;AAOA,iDAA6C;AAC7C,+DAA2E;AAC3E,iDAA6C;AAC7C,iDAA6D;AAC7D,sCAAyC;AAEzC,QAAQ,CAAC,oBAAoB,EAAE;IAC7B,IAAI,iBAAqC,CAAC;IAC1C,IAAI,YAA8B,CAAC;IAEnC,UAAU,CAAC,eAAK,CAAC;QACf,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,4BAAY,CAAC;YACvB,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,4BAAY,EAAE,QAAQ,EAAE,gBAAgB,EAAC,CAAC;SACjE,CAAC,CAAC;KACJ,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC,gBAAM,CACf,CAAC,yCAAkB,EAAE,4BAAY,CAAC,EAClC,UAAC,EAAsB,EAAE,EAAoB;QAC3C,iBAAiB,GAAG,EAAE,CAAC;QACvB,YAAY,GAAG,EAAE,CAAC;KACnB,CAAC,CAAC,CAAC;IAEN,SAAS,CAAC;QACR,YAAY,CAAC,KAAK,EAAE,CAAC;KACtB,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE;QACvD,IAAM,KAAK,GAAG,mDAAmD,CAAC;QAClE,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;KACzD,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;QACxD,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACzC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE;QACvE,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,iBAAiB,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC5C,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,iBAAiB,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC5C,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACzC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE;QAChC,IAAM,OAAO,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;QAClE,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACnC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KACtD,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE;QAClE,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC7C,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QAC9E,IAAM,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC9C,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QAE/E,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACzC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAE1C,iBAAiB,CAAC,WAAW,EAAE,CAAC;QAEhC,MAAM,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACrC,MAAM,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;KACvC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;QACxD,IAAM,KAAK,GAAG,gBAAgB,CAAC;QAC/B,IAAI,eAAe,GAAG,KAAK,CAAC;QAC5B,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,UAAC,KAAsB;YAChE,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC;SACjC,CAAC,CAAC;QAEH,MAAM,CAAC,eAAe,CAAC,CAAC,UAAU,EAAE,CAAC;QACrC,YAAY,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,eAAe,CAAC,CAAC,SAAS,EAAE,CAAC;KACrC,CAAC,CAAC;IAEH,EAAE,CAAC,kFAAkF,EAAE;QACrF,IAAM,QAAQ,GAAG,gBAAgB,CAAC;QAClC,IAAM,QAAQ,GAAG,gBAAgB,CAAC;QAClC,IAAI,KAAK,GAAoB,EAAC,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE,EAAC,CAAC;QAC/D,iBAAiB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,UAAC,UAA2B;YACpF,KAAK,GAAG,UAAU,CAAC;SACpB,CAAC,CAAC;QAEH,YAAY,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9C,YAAY,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,WAAE,GAAC,QAAQ,IAAG,KAAK,EAAE,GAAC,QAAQ,IAAG,KAAK,MAAE,CAAC;QAE1E,YAAY,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC7C,YAAY,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,WAAE,GAAC,QAAQ,IAAG,IAAI,EAAE,GAAC,QAAQ,IAAG,KAAK,MAAE,CAAC;;KAC1E,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE;QACzD,IAAM,KAAK,GAAG,gBAAgB,CAAC;QAC/B,YAAY,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1C,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;KACzD,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;QAC9D,IAAM,KAAK,GAAG,gBAAgB,CAAC;QAC/B,YAAY,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;KACzD,CAAC,CAAC;CACJ,CAAC,CAAC;AAEH,IAAA;IAIE,4BAAmB,OAAO,EAAS,KAAK;QAArB,YAAO,GAAP,OAAO,CAAA;QAAS,UAAK,GAAL,KAAK,CAAA;KAAI;IAE5C,4DAA4D;;IAC5D,uCAAU;IAAV,UAAW,OAAgB;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,mBAAoB,CAAC,IAAI,CAAC,CAAC;KACjC;IAED,uDAAuD;;IACvD,wCAAW;IAAX,UAAY,QAAuC;QACjD,IAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAC;KACrC;IAED,0DAA0D;;IAC1D,2CAAc;IAAd,eAAmB;6BA/IrB;IAgJC,CAAA;AAnBY,gDAAkB;;;;uBAwBX,IAAI,GAAG,EAA8B;;IAGvD,sBAAI,wCAAU;QADd,iFAAiF;;QACjF;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;SAC1B;;;OAAA;IAED,gEAAgE;;IAChE,qCAAU;IAAV,UAAW,KAAa;QACtB,IAAM,GAAG,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,CAAC;KACZ;IAED,kDAAkD;;IAClD,gCAAK;IAAL;QACE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACtB;IAED,wDAAwD;;IACxD,0CAAe;IAAf,UAAgB,KAAa,EAAE,OAAgB;QAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC9C;KACF;;gBA3BF,iBAAU;;2BAlJX;;AAmJa,4CAAgB","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {LayoutModule} from './layout-module';\r\nimport {BreakpointObserver, BreakpointState} from './breakpoints-observer';\r\nimport {MediaMatcher} from './media-matcher';\r\nimport {async, TestBed, inject} from '@angular/core/testing';\r\nimport {Injectable} from '@angular/core';\r\n\r\ndescribe('BreakpointObserver', () => {\r\n  let breakpointManager: BreakpointObserver;\r\n  let mediaMatcher: FakeMediaMatcher;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [LayoutModule],\r\n      providers: [{provide: MediaMatcher, useClass: FakeMediaMatcher}]\r\n    });\r\n  }));\r\n\r\n  beforeEach(inject(\r\n    [BreakpointObserver, MediaMatcher],\r\n    (bm: BreakpointObserver, mm: FakeMediaMatcher) => {\r\n      breakpointManager = bm;\r\n      mediaMatcher = mm;\r\n    }));\r\n\r\n  afterEach(() => {\r\n    mediaMatcher.clear();\r\n  });\r\n\r\n  it('retrieves the whether a query is currently matched', () => {\r\n    const query = 'everything starts as true in the FakeMediaMatcher';\r\n    expect(breakpointManager.isMatched(query)).toBeTruthy();\r\n  });\r\n\r\n  it('reuses the same MediaQueryList for matching queries', () => {\r\n    expect(mediaMatcher.queryCount).toBe(0);\r\n    breakpointManager.observe('query1');\r\n    expect(mediaMatcher.queryCount).toBe(1);\r\n    breakpointManager.observe('query1');\r\n    expect(mediaMatcher.queryCount).toBe(1);\r\n    breakpointManager.observe('query2');\r\n    expect(mediaMatcher.queryCount).toBe(2);\r\n    breakpointManager.observe('query1');\r\n    expect(mediaMatcher.queryCount).toBe(2);\r\n  });\r\n\r\n  it('splits combined query strings into individual matchMedia listeners', () => {\r\n    expect(mediaMatcher.queryCount).toBe(0);\r\n    breakpointManager.observe('query1, query2');\r\n    expect(mediaMatcher.queryCount).toBe(2);\r\n    breakpointManager.observe('query1');\r\n    expect(mediaMatcher.queryCount).toBe(2);\r\n    breakpointManager.observe('query2, query3');\r\n    expect(mediaMatcher.queryCount).toBe(3);\r\n  });\r\n\r\n  it('accepts an array of queries', () => {\r\n    const queries = ['1 query', '2 query', 'red query', 'blue query'];\r\n    breakpointManager.observe(queries);\r\n    expect(mediaMatcher.queryCount).toBe(queries.length);\r\n  });\r\n\r\n  it('completes all events when the breakpoint manager is destroyed', () => {\r\n    const firstTest = jasmine.createSpy('test1');\r\n    breakpointManager.observe('test1').subscribe(undefined, undefined, firstTest);\r\n    const secondTest = jasmine.createSpy('test2');\r\n    breakpointManager.observe('test2').subscribe(undefined, undefined, secondTest);\r\n\r\n    expect(firstTest).not.toHaveBeenCalled();\r\n    expect(secondTest).not.toHaveBeenCalled();\r\n\r\n    breakpointManager.ngOnDestroy();\r\n\r\n    expect(firstTest).toHaveBeenCalled();\r\n    expect(secondTest).toHaveBeenCalled();\r\n  });\r\n\r\n  it('emits an event on the observable when values change', () => {\r\n    const query = '(width: 999px)';\r\n    let queryMatchState = false;\r\n    breakpointManager.observe(query).subscribe((state: BreakpointState) => {\r\n      queryMatchState = state.matches;\r\n    });\r\n\r\n    expect(queryMatchState).toBeTruthy();\r\n    mediaMatcher.setMatchesQuery(query, false);\r\n    expect(queryMatchState).toBeFalsy();\r\n  });\r\n\r\n  it('emits an event on the observable with the matching state of all queries provided', () => {\r\n    const queryOne = '(width: 999px)';\r\n    const queryTwo = '(width: 700px)';\r\n    let state: BreakpointState = {matches: false, breakpoints: {}};\r\n    breakpointManager.observe([queryOne, queryTwo]).subscribe((breakpoint: BreakpointState) => {\r\n      state = breakpoint;\r\n    });\r\n\r\n    mediaMatcher.setMatchesQuery(queryOne, false);\r\n    mediaMatcher.setMatchesQuery(queryTwo, false);\r\n    expect(state.breakpoints).toEqual({[queryOne]: false, [queryTwo]: false});\r\n\r\n    mediaMatcher.setMatchesQuery(queryOne, true);\r\n    mediaMatcher.setMatchesQuery(queryTwo, false);\r\n    expect(state.breakpoints).toEqual({[queryOne]: true, [queryTwo]: false});\r\n  });\r\n\r\n  it('emits a true matches state when the query is matched', () => {\r\n    const query = '(width: 999px)';\r\n    mediaMatcher.setMatchesQuery(query, true);\r\n    expect(breakpointManager.isMatched(query)).toBeTruthy();\r\n  });\r\n\r\n  it('emits a false matches state when the query is not matched', () => {\r\n    const query = '(width: 999px)';\r\n    mediaMatcher.setMatchesQuery(query, false);\r\n    expect(breakpointManager.isMatched(query)).toBeTruthy();\r\n  });\r\n});\r\n\r\nexport class FakeMediaQueryList implements MediaQueryList {\r\n  /** The callback for change events. */\r\n  addListenerCallback?: (mql: MediaQueryList) => void;\r\n\r\n  constructor(public matches, public media) {}\r\n\r\n  /** Toggles the matches state and \"emits\" a change event. */\r\n  setMatches(matches: boolean) {\r\n    this.matches = matches;\r\n    this.addListenerCallback!(this);\r\n  }\r\n\r\n  /** Registers the callback method for change events. */\r\n  addListener(callback: (mql: MediaQueryList) => void) {\r\n    this.addListenerCallback = callback;\r\n  }\r\n\r\n  /** Noop, but required for implementing MediaQueryList. */\r\n  removeListener() {}\r\n}\r\n\r\n@Injectable()\r\nexport class FakeMediaMatcher {\r\n  /** A map of match media queries. */\r\n  private queries = new Map<string, FakeMediaQueryList>();\r\n\r\n  /** The number of distinct queries created in the media matcher during a test. */\r\n  get queryCount(): number {\r\n    return this.queries.size;\r\n  }\r\n\r\n  /** Fakes the match media response to be controlled in tests. */\r\n  matchMedia(query: string): FakeMediaQueryList {\r\n    const mql = new FakeMediaQueryList(true, query);\r\n    this.queries.set(query, mql);\r\n    return mql;\r\n  }\r\n\r\n  /** Clears all queries from the map of queries. */\r\n  clear() {\r\n    this.queries.clear();\r\n  }\r\n\r\n  /** Toggles the matching state of the provided query. */\r\n  setMatchesQuery(query: string, matches: boolean) {\r\n    if (this.queries.has(query)) {\r\n      this.queries.get(query)!.setMatches(matches);\r\n    }\r\n  }\r\n}\r\n"]}