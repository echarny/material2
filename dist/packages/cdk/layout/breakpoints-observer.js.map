{"version":3,"file":"breakpoints-observer.js","sourceRoot":"","sources":["../../../../src/cdk/layout/breakpoints-observer.ts"],"names":[],"mappings":";;AAOA,sCAA4D;AAC5D,iDAA6C;AAC7C,6BAA0E;AAC1E,4CAAyD;AACzD,kDAAkD;;;;;IAqChD,4BAAoB,YAA0B,EAAU,IAAY;QAAhD,iBAAY,GAAZ,YAAY,CAAc;QAAU,SAAI,GAAJ,IAAI,CAAQ;;wBAJjD,IAAI,GAAG,EAAiB;;+BAEjB,IAAI,cAAO,EAAQ;KAE2B;IAExE,qFAAqF;;IACrF,wCAAW;IAAX;QACE,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;KACjC;IAED;;;;OAIG;;;;;;IACH,sCAAS;;;;;IAAT,UAAU,KAAwB;QAAlC,iBAGC;QAFC,IAAM,OAAO,GAAG,YAAY,CAAC,sBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,OAAO,EAA3C,CAA2C,CAAC,CAAC;KAChF;IAED;;;;;OAKG;;;;;;;IACH,oCAAO;;;;;;IAAP,UAAQ,KAAwB;QAAhC,iBAeC;QAdC,IAAM,OAAO,GAAG,YAAY,CAAC,sBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACjD,IAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,UAAU,EAArC,CAAqC,CAAC,CAAC;QAEhF,MAAM,CAAC,oBAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,eAAG,CAAC,UAAC,gBAA2C;YACrF,IAAM,QAAQ,GAAoB;gBAChC,OAAO,EAAE,KAAK;gBACd,WAAW,EAAE,EAAE;aAChB,CAAC;YACF,gBAAgB,CAAC,OAAO,CAAC,UAAC,KAA8B;gBACtD,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC;gBACrD,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;aACnD,CAAC,CAAC;YACH,MAAM,CAAC,QAAQ,CAAC;SACjB,CAAC,CAAC,CAAC;KACL;IAED,qDAAqD;;IAC7C,2CAAc;IAAtB,UAAuB,KAAa;QAApC,iBA8BC;;QA5BC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC;SAClC;QAED,IAAM,GAAG,GAAmB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;;QAEhE,IAAM,eAAe,GAAG,uBAAgB;QACtC,8FAA8F;QAC9F,mFAAmF;QACnF,8FAA8F;QAC9F,4FAA4F;QAC5F,cAAc;;;;;;QACd,UAAC,QAAgC;YAC/B,GAAG,CAAC,WAAW,CAAC,UAAC,CAAiB,IAAK,OAAA,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,CAAC,CAAC,EAAX,CAAW,CAAC,EAAhC,CAAgC,CAAC,CAAC;SAC1E,EACD,UAAC,QAAgC;YAC/B,GAAG,CAAC,cAAc,CAAC,UAAC,CAAiB,IAAK,OAAA,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,CAAC,CAAC,EAAX,CAAW,CAAC,EAAhC,CAAgC,CAAC,CAAC;SAC7E,CAAC;aACD,IAAI,CACH,qBAAS,CAAC,IAAI,CAAC,eAAe,CAAC,EAC/B,qBAAS,CAAC,GAAG,CAAC,EACd,eAAG,CAAC,UAAC,OAAuB,IAAK,OAAA,CAAC,EAAC,KAAK,OAAA,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAC,CAAC,EAAnC,CAAmC,CAAC,CACtE,CAAC;;QAGJ,IAAM,MAAM,GAAG,EAAC,UAAU,EAAE,eAAe,EAAE,GAAG,KAAA,EAAC,CAAC;QAClD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACjC,MAAM,CAAC,MAAM,CAAC;KACf;;gBA/EF,iBAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;gBAjCxB,4BAAY;gBADA,aAAM;;;6BAP1B;;AA0Ca,gDAAkB;;;;;AAqF/B,sBAAsB,OAAiB;IACrC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC;SACxC,MAAM,CAAC,UAAC,EAAY,EAAE,EAAY,IAAK,OAAA,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,EAAb,CAAa,CAAC;SACrD,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,EAAE,EAAZ,CAAY,CAAC,CAAC;CAC3C","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\r\nimport {MediaMatcher} from './media-matcher';\r\nimport {combineLatest, fromEventPattern, Observable, Subject} from 'rxjs';\r\nimport {map, startWith, takeUntil} from 'rxjs/operators';\r\nimport {coerceArray} from '@angular/cdk/coercion';\r\n\r\n\r\n/** The current state of a layout breakpoint. */\r\nexport interface BreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /**\r\n   * A key boolean pair for each query provided to the observe method,\r\n   * with its current matched state.\r\n   */\r\n  breakpoints: {\r\n    [key: string]: boolean;\r\n  };\r\n}\r\n\r\n/** The current state of a layout breakpoint. */\r\ninterface InternalBreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /** The media query being to be matched */\r\n  query: string;\r\n}\r\n\r\ninterface Query {\r\n  observable: Observable<InternalBreakpointState>;\r\n  mql: MediaQueryList;\r\n}\r\n\r\n/** Utility for checking the matching state of @media queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class BreakpointObserver implements OnDestroy {\r\n  /**  A map of all media queries currently being listened for. */\r\n  private _queries = new Map<string, Query>();\r\n  /** A subject for all other observables to takeUntil based on. */\r\n  private _destroySubject = new Subject<void>();\r\n\r\n  constructor(private mediaMatcher: MediaMatcher, private zone: NgZone) {}\r\n\r\n  /** Completes the active subject, signalling to all other observables to complete. */\r\n  ngOnDestroy() {\r\n    this._destroySubject.next();\r\n    this._destroySubject.complete();\r\n  }\r\n\r\n  /**\r\n   * Whether one or more media queries match the current viewport size.\r\n   * @param value One or more media queries to check.\r\n   * @returns Whether any of the media queries match.\r\n   */\r\n  isMatched(value: string | string[]): boolean {\r\n    const queries = splitQueries(coerceArray(value));\r\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\r\n  }\r\n\r\n  /**\r\n   * Gets an observable of results for the given queries that will emit new results for any changes\r\n   * in matching of the given queries.\r\n   * @param value One or more media queries to check.\r\n   * @returns A stream of matches for the given queries.\r\n   */\r\n  observe(value: string | string[]): Observable<BreakpointState> {\r\n    const queries = splitQueries(coerceArray(value));\r\n    const observables = queries.map(query => this._registerQuery(query).observable);\r\n\r\n    return combineLatest(observables).pipe(map((breakpointStates: InternalBreakpointState[]) => {\r\n      const response: BreakpointState = {\r\n        matches: false,\r\n        breakpoints: {},\r\n      };\r\n      breakpointStates.forEach((state: InternalBreakpointState) => {\r\n        response.matches = response.matches || state.matches;\r\n        response.breakpoints[state.query] = state.matches;\r\n      });\r\n      return response;\r\n    }));\r\n  }\r\n\r\n  /** Registers a specific query to be listened for. */\r\n  private _registerQuery(query: string): Query {\r\n    // Only set up a new MediaQueryList if it is not already being listened for.\r\n    if (this._queries.has(query)) {\r\n      return this._queries.get(query)!;\r\n    }\r\n\r\n    const mql: MediaQueryList = this.mediaMatcher.matchMedia(query);\r\n    // Create callback for match changes and add it is as a listener.\r\n    const queryObservable = fromEventPattern(\r\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\r\n      // back into the zone because matchMedia is only included in Zone.js by loading the\r\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\r\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\r\n      // patches it.\r\n      (listener: MediaQueryListListener) => {\r\n        mql.addListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\r\n      },\r\n      (listener: MediaQueryListListener) => {\r\n        mql.removeListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\r\n      })\r\n      .pipe(\r\n        takeUntil(this._destroySubject),\r\n        startWith(mql),\r\n        map((nextMql: MediaQueryList) => ({query, matches: nextMql.matches}))\r\n      );\r\n\r\n    // Add the MediaQueryList to the set of queries.\r\n    const output = {observable: queryObservable, mql};\r\n    this._queries.set(query, output);\r\n    return output;\r\n  }\r\n}\r\n\r\n/**\r\n * Split each query string into separate query strings if two queries are provided as comma\r\n * separated.\r\n */\r\nfunction splitQueries(queries: string[]): string[] {\r\n  return queries.map((query: string) => query.split(','))\r\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\r\n                .map(query => query.trim());\r\n}\r\n"]}