{"version":3,"file":"platform.js","sourceRoot":"","sources":["../../../../src/cdk/platform/platform.ts"],"names":[],"mappings":";;;;;;;;;AAQA,sCAAwE;AACxE,0CAAkD;;;;AAKlD,IAAM,kBAAkB,GAAG,CAAC,OAAO,IAAI,KAAK,WAAW,IAAK,IAAY,CAAC,eAAe,CAAC,CAAC;;;;;;IAuDxF;;OAEG;IACH,kBAAqD;QAAA,gBAAW,GAAX,WAAW;;;;;;;yBA5C3C,IAAI,CAAC,WAAW,CAAC,CAAC;YACnC,0BAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,QAAQ,KAAK,QAAQ,IAAI,CAAC,CAAC,QAAQ;;oBAGpE,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;;uBAGlD,IAAI,CAAC,SAAS,IAAI,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;;;qBAI/D,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAE,MAAc,CAAC,MAAM,IAAI,kBAAkB,CAAC;YAChF,OAAO,GAAG,KAAK,WAAW,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;;;;sBAK5C,IAAI,CAAC,SAAS;YAC5B,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO;;mBAG3E,IAAI,CAAC,SAAS,IAAI,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;YACzE,CAAE,MAAc,CAAC,QAAQ;;;;;;uBAOV,IAAI,CAAC,SAAS,IAAI,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;;;uBAIlE,IAAI,CAAC,SAAS,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO;;;;;sBAMxE,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,MAAM;KAMrF;;gBArDF,iBAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;6CAoDjB,eAAQ,YAAI,aAAM,SAAC,kBAAW;;;mBAxE7C;;AAqBa,4BAAQ","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Inject, Injectable, Optional, PLATFORM_ID} from '@angular/core';\r\nimport {isPlatformBrowser} from '@angular/common';\r\n\r\n\r\n// Whether the current platform supports the V8 Break Iterator. The V8 check\r\n// is necessary to detect all Blink based browsers.\r\nconst hasV8BreakIterator = (typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator);\r\n\r\n/**\r\n * Service to detect the current platform by comparing the userAgent strings and\r\n * checking browser-specific global properties.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class Platform {\r\n  /**\r\n   * Whether the Angular application is being rendered in the browser.\r\n   * We want to use the Angular platform check because if the Document is shimmed\r\n   * without the navigator, the following checks will fail. This is preferred because\r\n   * sometimes the Document may be shimmed without the user's knowledge or intention\r\n   */\r\n  isBrowser: boolean = this._platformId ?\r\n      isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\r\n\r\n  /** Whether the current browser is Microsoft Edge. */\r\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\r\n\r\n  /** Whether the current rendering engine is Microsoft Trident. */\r\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\r\n\r\n  /** Whether the current rendering engine is Blink. */\r\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\r\n  BLINK: boolean = this.isBrowser && (!!((window as any).chrome || hasV8BreakIterator) &&\r\n      typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\r\n\r\n  /** Whether the current rendering engine is WebKit. */\r\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\r\n  // ensure that Webkit runs standalone and is not used as another engine's base.\r\n  WEBKIT: boolean = this.isBrowser &&\r\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\r\n\r\n  /** Whether the current platform is Apple iOS. */\r\n  IOS: boolean = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\r\n      !(window as any).MSStream;\r\n\r\n  /** Whether the current browser is Firefox. */\r\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\r\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\r\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\r\n  // instead of having an unstable check for Gecko.\r\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\r\n\r\n  /** Whether the current platform is Android. */\r\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\r\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\r\n\r\n  /** Whether the current browser is Safari. */\r\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\r\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\r\n  // Safari browser should also use Webkit as its layout engine.\r\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\r\n\r\n  /**\r\n   * @breaking-change v7.0.0 remove optional decorator\r\n   */\r\n  constructor(@Optional() @Inject(PLATFORM_ID) private _platformId?: Object) {\r\n  }\r\n}\r\n\r\n"]}