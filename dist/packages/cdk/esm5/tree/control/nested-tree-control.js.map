{"version":3,"file":"nested-tree-control.js","sourceRoot":"","sources":["../../../../../../src/cdk/tree/control/nested-tree-control.ts"],"names":[],"mappings":";;;;;AAOA,OAAO,EAAC,UAAU,EAAC,MAAM,MAAM,CAAC;AAChC,OAAO,EAAC,IAAI,EAAC,MAAM,gBAAgB,CAAC;AACpC,OAAO,EAAC,eAAe,EAAC,MAAM,qBAAqB,CAAC;;;;;AAGpD;;;;AAAA;IAA0C,6CAAkB;IAE1D,uDAAuD;IACvD,2BAAmB,WAAqD;QAAxE,YACE,iBAAO,SACR;QAFkB,iBAAW,GAAX,WAAW,CAA0C;;KAEvE;IAED;;;;;OAKG;;;;;;;;IACH,qCAAS;;;;;;;IAAT;QAAA,iBAKC;QAJC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC5B,qBAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,WAAW,EAAE,QAAQ;YACzD,OAAI,WAAW,QAAK,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAE,QAAQ;QAA3D,CAA4D,EAAE,EAAE,CAAC,CAAC;QACtE,CAAA,KAAA,IAAI,CAAC,cAAc,CAAA,CAAC,MAAM,WAAI,QAAQ,EAAE;;KACzC;IAED,8FAA8F;;;;;;IAC9F,0CAAc;;;;;IAAd,UAAe,QAAW;QACxB,qBAAM,WAAW,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;;QAE5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAC9B;IAED,wDAAwD;;;;;;;IAC9C,2CAAe;;;;;;IAAzB,UAA0B,WAAgB,EAAE,QAAW;QAAvD,iBAUC;QATC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,qBAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACjC,aAAa,CAAC,OAAO,CAAC,UAAC,KAAQ,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAAC,CAAC;SAC/E;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,YAAY,UAAU,CAAC,CAAC,CAAC;YAC/C,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,QAAQ;gBAC5C,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAQ,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAAC,CAAC;aAC1E,CAAC,CAAC;SACJ;KACF;4BAnDH;EAY0C,eAAe,EAwCxD,CAAA;;;;;AAxCD,6BAwCC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Observable} from 'rxjs';\r\nimport {take} from 'rxjs/operators';\r\nimport {BaseTreeControl} from './base-tree-control';\r\n\r\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\r\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\r\n\r\n  /** Construct with nested tree function getChildren. */\r\n  constructor(public getChildren: (dataNode: T) => (Observable<T[]> | T[])) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Expands all dataNodes in the tree.\r\n   *\r\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\r\n   * data nodes of the tree.\r\n   */\r\n  expandAll(): void {\r\n    this.expansionModel.clear();\r\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) =>\r\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\r\n    this.expansionModel.select(...allNodes);\r\n  }\r\n\r\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\r\n  getDescendants(dataNode: T): T[] {\r\n    const descendants = [];\r\n    this._getDescendants(descendants, dataNode);\r\n    // Remove the node itself\r\n    return descendants.splice(1);\r\n  }\r\n\r\n  /** A helper function to get descendants recursively. */\r\n  protected _getDescendants(descendants: T[], dataNode: T): void {\r\n    descendants.push(dataNode);\r\n    const childrenNodes = this.getChildren(dataNode);\r\n    if (Array.isArray(childrenNodes)) {\r\n      childrenNodes.forEach((child: T) => this._getDescendants(descendants, child));\r\n    } else if (childrenNodes instanceof Observable) {\r\n      childrenNodes.pipe(take(1)).subscribe(children => {\r\n        children.forEach((child: T) => this._getDescendants(descendants, child));\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}