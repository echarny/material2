{"version":3,"file":"tree-control.js","sourceRoot":"","sources":["../../../../../../src/cdk/tree/control/tree-control.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {Observable} from 'rxjs';\r\n\r\n/**\r\n * Tree control interface. User can implement TreeControl to expand/collapse dataNodes in the tree.\r\n * The CDKTree will use this TreeControl to expand/collapse a node.\r\n * User can also use it outside the `<cdk-tree>` to control the expansion status of the tree.\r\n */\r\nexport interface TreeControl<T> {\r\n  /** The saved tree nodes data for `expandAll` action. */\r\n  dataNodes: T[];\r\n\r\n  /** The expansion model */\r\n  expansionModel: SelectionModel<T>;\r\n\r\n  /** Whether the data node is expanded or collapsed. Return true if it's expanded. */\r\n  isExpanded(dataNode: T): boolean;\r\n\r\n  /** Get all descendants of a data node */\r\n  getDescendants(dataNode: T): any[];\r\n\r\n  /** Expand or collapse data node */\r\n  toggle(dataNode: T): void;\r\n\r\n  /** Expand one data node */\r\n  expand(dataNode: T): void;\r\n\r\n  /** Collapse one data node */\r\n  collapse(dataNode: T): void;\r\n\r\n  /** Expand all the dataNodes in the tree */\r\n  expandAll(): void;\r\n\r\n  /** Collapse all the dataNodes in the tree */\r\n  collapseAll(): void;\r\n\r\n  /** Toggle a data node by expand/collapse it and all its descendants */\r\n  toggleDescendants(dataNode: T): void;\r\n\r\n  /** Expand a data node and all its descendants */\r\n  expandDescendants(dataNode: T): void;\r\n\r\n  /** Collapse a data node and all its descendants */\r\n  collapseDescendants(dataNode: T): void;\r\n\r\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\r\n  readonly getLevel: (dataNode: T) => number;\r\n\r\n  /**\r\n   * Whether the data node is expandable. Returns true if expandable.\r\n   * This is for flat tree node.\r\n   */\r\n  readonly isExpandable: (dataNode: T) => boolean;\r\n\r\n  /** Gets a stream that emits whenever the given data node's children change. */\r\n  readonly getChildren: (dataNode: T) => Observable<T[]> | T[];\r\n}\r\n"]}