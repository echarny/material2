{"version":3,"file":"nested-node.js","sourceRoot":"","sources":["../../../../../src/cdk/tree/nested-node.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AfterContentInit,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  IterableDiffers,\r\n  IterableDiffer,\r\n  OnDestroy,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\r\n\r\n/**\r\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\r\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\r\n * be added in the `cdkTreeNodeOutlet` in tree node template.\r\n * For example:\r\n *   ```html\r\n *   <cdk-mested-tree-node>\r\n *     {{node.name}}\r\n *     <ng-template cdkTreeNodeOutlet></ng-template>\r\n *   </cdk-tree-node>\r\n *   ```\r\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\r\n * like this:\r\n *   ```html\r\n *   <cdk-nested-tree-node>\r\n *     {{node.name}}\r\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\r\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\r\n *   </cdk-tree-node>\r\n *   ```\r\n */\r\n@Directive({\r\n  selector: 'cdk-nested-tree-node',\r\n  exportAs: 'cdkNestedTreeNode',\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.role]': 'role',\r\n    'class': 'cdk-tree-node cdk-nested-tree-node',\r\n  },\r\n  providers: [{provide: CdkTreeNode, useExisting: CdkNestedTreeNode}]\r\n})\r\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<T>;\r\n\r\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\r\n  protected _children: T[];\r\n\r\n  /** The children node placeholder. */\r\n  @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              protected _tree: CdkTree<T>,\r\n              protected _differs: IterableDiffers) {\r\n    super(_elementRef, _tree);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\r\n    if (!this._tree.treeControl.getChildren) {\r\n      throw getTreeControlFunctionsMissingError();\r\n    }\r\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\r\n    if (Array.isArray(childrenNodes)) {\r\n      this.updateChildrenNodes(childrenNodes as T[]);\r\n    } else if (childrenNodes instanceof Observable) {\r\n      childrenNodes.pipe(takeUntil(this._destroyed))\r\n        .subscribe(result => this.updateChildrenNodes(result));\r\n    }\r\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\r\n        .subscribe(() => this.updateChildrenNodes());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._clear();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  /** Add children dataNodes to the NodeOutlet */\r\n  protected updateChildrenNodes(children?: T[]): void {\r\n    if (children) {\r\n      this._children = children;\r\n    }\r\n    if (this.nodeOutlet.length && this._children) {\r\n      const viewContainer = this.nodeOutlet.first.viewContainer;\r\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\r\n    } else {\r\n      // Reset the data differ if there's no children nodes displayed\r\n      this._dataDiffer.diff([]);\r\n    }\r\n  }\r\n\r\n  /** Clear the children dataNodes. */\r\n  protected _clear(): void {\r\n    if (this.nodeOutlet && this.nodeOutlet.first) {\r\n      this.nodeOutlet.first.viewContainer.clear();\r\n      this._dataDiffer.diff([]);\r\n    }\r\n  }\r\n}\r\n"]}