{"version":3,"file":"node.js","sourceRoot":"","sources":["../../../../../src/cdk/tree/node.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,SAAS,EAAE,WAAW,EAAC,MAAM,eAAe,CAAC;;;;;AAIrD;;;;AAAA;IAaE,kCAAY,IAAO;QACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACvB;mCA3BH;IA4BC,CAAA;;;;;AAhBD,oCAgBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAsBC,oBAAoB;IACpB,wBAAmB,QAA0B;QAA1B,aAAQ,GAAR,QAAQ,CAAkB;KAAI;;gBAjBlD,SAAS,SAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,MAAM,EAAE;wBACN,0BAA0B;qBAC3B;iBACF;;;;gBA/BkB,WAAW;;yBAR9B;;SAwCa,cAAc","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n\r\n/** Context provided to the tree node component. */\r\nexport class CdkTreeNodeOutletContext<T> {\r\n  /** Data for the node. */\r\n  $implicit: T;\r\n\r\n  /** Depth of the node. */\r\n  level: number;\r\n\r\n  /** Index location of the node. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total dataNodes. */\r\n  count?: number;\r\n\r\n  constructor(data: T) {\r\n    this.$implicit = data;\r\n  }\r\n}\r\n\r\n/**\r\n * Data node definition for the CdkTree.\r\n * Captures the node's template and a when predicate that describes when this node should be used.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodeDef]',\r\n  inputs: [\r\n    'when: cdkTreeNodeDefWhen'\r\n  ],\r\n})\r\nexport class CdkTreeNodeDef<T> {\r\n  /**\r\n   * Function that should return true if this node template should be used for the provided node\r\n   * data and index. If left undefined, this node will be considered the default node template to\r\n   * use when no other when functions return true for the data.\r\n   * For every node, there must be at least one when function that passes or an undefined to\r\n   * default.\r\n   */\r\n  when: (index: number, nodeData: T) => boolean;\r\n\r\n  /** @docs-private */\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n"]}