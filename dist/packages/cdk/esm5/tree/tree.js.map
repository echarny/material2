{"version":3,"file":"tree.js","sourceRoot":"","sources":["../../../../../src/cdk/tree/tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  IterableChangeRecord,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  OnInit,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n  TrackByFunction\r\n} from '@angular/core';\r\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {TreeControl} from './control/tree-control';\r\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {\r\n  getTreeControlFunctionsMissingError,\r\n  getTreeControlMissingError,\r\n  getTreeMissingMatchingNodeDefError,\r\n  getTreeMultipleDefaultNodeDefsError,\r\n  getTreeNoValidDataSourceError\r\n} from './tree-errors';\r\n\r\n/**\r\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\r\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-tree',\r\n  exportAs: 'cdkTree',\r\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\r\n  host: {\r\n    'class': 'cdk-tree',\r\n    'role': 'tree',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CdkTree<T>\r\n    implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<T>;\r\n\r\n  /** Stores the node definition that does not have a when predicate. */\r\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\r\n\r\n  /** Data subscription */\r\n  private _dataSubscription: Subscription | null;\r\n\r\n  /** Level of nodes */\r\n  private _levels: Map<T, number> = new Map<T, number>();\r\n\r\n  /**\r\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\r\n   * stream of view window (what dataNodes are currently on screen).\r\n   * Data source can be an observable of data array, or a dara array to render.\r\n   */\r\n  @Input()\r\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\r\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\r\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\r\n\r\n  /** The tree controller */\r\n  @Input() treeControl: TreeControl<T>;\r\n\r\n  /**\r\n   * Tracking function that will be used to check the differences in data changes. Used similarly\r\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\r\n   * relative to the function to know if a node should be added/removed/moved.\r\n   * Accepts a function that takes two parameters, `index` and `item`.\r\n   */\r\n  @Input() trackBy: TrackByFunction<T>;\r\n\r\n  // Outlets within the tree's template where the dataNodes will be inserted.\r\n  @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\r\n\r\n  /** The tree node template for the tree */\r\n  @ContentChildren(CdkTreeNodeDef) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\r\n\r\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\r\n  //     Remove the MAX_VALUE in viewChange\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   */\r\n  viewChange =\r\n    new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  constructor(private _differs: IterableDiffers,\r\n              private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\r\n    if (!this.treeControl) {\r\n      throw getTreeControlMissingError();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._nodeOutlet.viewContainer.clear();\r\n\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\r\n      (this.dataSource as DataSource<T>).disconnect(this);\r\n    }\r\n\r\n    if (this._dataSubscription) {\r\n      this._dataSubscription.unsubscribe();\r\n      this._dataSubscription = null;\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\r\n    if (defaultNodeDefs.length > 1) {\r\n      throw getTreeMultipleDefaultNodeDefsError();\r\n    }\r\n    this._defaultNodeDef = defaultNodeDefs[0];\r\n\r\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\r\n      this._observeRenderChanges();\r\n    }\r\n  }\r\n\r\n\r\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\r\n  //     and nested trees.\r\n\r\n  /**\r\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n   * render change subscription if one exists. If the data source is null, interpret this by\r\n   * clearing the node outlet. Otherwise start listening for new data.\r\n   */\r\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\r\n      (this.dataSource as DataSource<T>).disconnect(this);\r\n    }\r\n\r\n    if (this._dataSubscription) {\r\n      this._dataSubscription.unsubscribe();\r\n      this._dataSubscription = null;\r\n    }\r\n\r\n    // Remove the all dataNodes if there is now no data source\r\n    if (!dataSource) {\r\n      this._nodeOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._dataSource = dataSource;\r\n    if (this._nodeDefs) {\r\n      this._observeRenderChanges();\r\n    }\r\n  }\r\n\r\n  /** Set up a subscription for the data provided by the data source. */\r\n  private _observeRenderChanges() {\r\n    let dataStream: Observable<T[]> | undefined;\r\n\r\n    // Cannot use `instanceof DataSource` since the data source could be a literal with\r\n    // `connect` function and may not extends DataSource.\r\n    if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\r\n      dataStream = (this._dataSource as DataSource<T>).connect(this);\r\n    } else if (this._dataSource instanceof Observable) {\r\n      dataStream = this._dataSource;\r\n    } else if (Array.isArray(this._dataSource)) {\r\n      dataStream = observableOf(this._dataSource);\r\n    }\r\n\r\n    if (dataStream) {\r\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\r\n        .subscribe(data => this.renderNodeChanges(data));\r\n    } else {\r\n      throw getTreeNoValidDataSourceError();\r\n    }\r\n  }\r\n\r\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\r\n  renderNodeChanges(data: T[], dataDiffer: IterableDiffer<T> = this._dataDiffer,\r\n                    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\r\n                    parentData?: T) {\r\n    const changes = dataDiffer.diff(data);\r\n    if (!changes) { return; }\r\n\r\n    changes.forEachOperation(\r\n      (item: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\r\n        if (item.previousIndex == null) {\r\n          this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\r\n        } else if (currentIndex == null) {\r\n          viewContainer.remove(adjustedPreviousIndex);\r\n          this._levels.delete(item.item);\r\n        } else {\r\n          const view = viewContainer.get(adjustedPreviousIndex);\r\n          viewContainer.move(view!, currentIndex);\r\n        }\r\n      });\r\n\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Finds the matching node definition that should be used for this node data. If there is only\r\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\r\n   * predicate that returns true with the data. If none return true, return the default node\r\n   * definition.\r\n   */\r\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\r\n    if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\r\n\r\n    const nodeDef =\r\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\r\n    if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\r\n\r\n    return nodeDef;\r\n  }\r\n\r\n  /**\r\n   * Create the embedded view for the data node template and place it in the correct index location\r\n   * within the data node view container.\r\n   */\r\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\r\n    const node = this._getNodeDef(nodeData, index);\r\n\r\n    // Node context that will be provided to created embedded view\r\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\r\n\r\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\r\n    // Otherwise, use the level of parent node.\r\n    if (this.treeControl.getLevel) {\r\n      context.level = this.treeControl.getLevel(nodeData);\r\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\r\n      context.level = this._levels.get(parentData)! + 1;\r\n    } else {\r\n      context.level = 0;\r\n    }\r\n    this._levels.set(nodeData, context.level);\r\n\r\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\r\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\r\n    container.createEmbeddedView(node.template, context, index);\r\n\r\n    // Set the data to just created `CdkTreeNode`.\r\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\r\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\r\n    if (CdkTreeNode.mostRecentTreeNode) {\r\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Tree node for CdkTree. It contains the data in the tree node.\r\n */\r\n@Directive({\r\n  selector: 'cdk-tree-node',\r\n  exportAs: 'cdkTreeNode',\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n    '[attr.role]': 'role',\r\n    'class': 'cdk-tree-node',\r\n  },\r\n})\r\nexport class CdkTreeNode<T> implements FocusableOption, OnDestroy {\r\n  /**\r\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\r\n   * in `CdkTree` and set the data to it.\r\n   */\r\n  static mostRecentTreeNode: CdkTreeNode<{}> | null = null;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _destroyed = new Subject<void>();\r\n\r\n  /** The tree node's data. */\r\n  get data(): T { return this._data; }\r\n  set data(value: T) {\r\n    this._data = value;\r\n    this._setRoleFromData();\r\n  }\r\n  protected _data: T;\r\n\r\n  get isExpanded(): boolean {\r\n    return this._tree.treeControl.isExpanded(this._data);\r\n  }\r\n\r\n  get level(): number {\r\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\r\n  }\r\n\r\n  /**\r\n   * The role of the node should be 'group' if it's an internal node,\r\n   * and 'treeitem' if it's a leaf node.\r\n   */\r\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              protected _tree: CdkTree<T>) {\r\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // If this is the last tree node being destroyed,\r\n    // clear out the reference to avoid leaking memory.\r\n    if (CdkTreeNode.mostRecentTreeNode === this) {\r\n      CdkTreeNode.mostRecentTreeNode = null;\r\n    }\r\n\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Focuses the menu item. Implements for FocusableOption. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  protected _setRoleFromData(): void {\r\n    if (this._tree.treeControl.isExpandable) {\r\n      this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\r\n    } else {\r\n      if (!this._tree.treeControl.getChildren) {\r\n        throw getTreeControlFunctionsMissingError();\r\n      }\r\n      const childrenNodes = this._tree.treeControl.getChildren(this._data);\r\n      if (Array.isArray(childrenNodes)) {\r\n        this._setRoleFromChildren(childrenNodes as T[]);\r\n      } else if (childrenNodes instanceof Observable) {\r\n        childrenNodes.pipe(takeUntil(this._destroyed))\r\n            .subscribe(children => this._setRoleFromChildren(children));\r\n      }\r\n    }\r\n  }\r\n\r\n  protected _setRoleFromChildren(children: T[]) {\r\n    this.role = children && children.length ? 'group' : 'treeitem';\r\n  }\r\n}\r\n"]}