{"version":3,"file":"media-matcher.js","sourceRoot":"","sources":["../../../../../src/cdk/layout/media-matcher.ts"],"names":[],"mappings":";;;;AAOA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,QAAQ,EAAC,MAAM,uBAAuB,CAAC;;;;;;AAG/C,qBAAM,kCAAkC,GAAgB,IAAI,GAAG,EAAU,CAAC;;;;AAG1E,qBAAI,mBAAiD,CAAC;;;;;IAQpD,sBAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;;;YAG/D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChC,cAAc,CAAC;KAClB;IAED;;;;;OAKG;;;;;;;;;IACH,iCAAU;;;;;;;;IAAV,UAAW,KAAa;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YACzB,oBAAoB,CAAC,KAAK,CAAC,CAAC;SAC7B;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAChC;;gBAxBF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;gBATxB,QAAQ;;;uBARhB;;SAkBa,YAAY;;;;;;;;;;;;;;;;;;;;;;;AA8BzB,8BAA8B,KAAa;IACzC,EAAE,CAAC,CAAC,kCAAkC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC;KACR;IAED,IAAI,CAAC;QACH,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACzB,mBAAmB,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACtD,mBAAmB,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACrD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;SAChD;QAED,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;YAC9B,mBAAC,mBAAmB,CAAC,KAAsB,EAAC;iBACvC,UAAU,CAAC,YAAU,KAAK,yBAAsB,EAAE,CAAC,CAAC,CAAC;YAC1D,kCAAkC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC/C;KACF;IAAC,KAAK,CAAC,CAAC,iBAAA,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAClB;CACF;;;;;;AAGD,wBAAwB,KAAa;IACnC,MAAM,CAAC;QACL,OAAO,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,EAAE;QACxC,KAAK,EAAE,KAAK;QACZ,WAAW,EAAE,eAAQ;QACrB,cAAc,EAAE,eAAQ;KACzB,CAAC;CACH","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Injectable} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\n\r\n/** Global registry for all dynamically-created, injected media queries. */\r\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\r\n\r\n/** Style tag that holds all of the dynamically-created media queries. */\r\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\r\n\r\n/** A utility for calling matchMedia queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class MediaMatcher {\r\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\r\n  private _matchMedia: (query: string) => MediaQueryList;\r\n\r\n  constructor(private platform: Platform) {\r\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ?\r\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\r\n      // call it from a different scope.\r\n      window.matchMedia.bind(window) :\r\n      noopMatchMedia;\r\n  }\r\n\r\n  /**\r\n   * Evaluates the given media query and returns the native MediaQueryList from which results\r\n   * can be retrieved.\r\n   * Confirms the layout engine will trigger for the selector query provided and returns the\r\n   * MediaQueryList for the query provided.\r\n   */\r\n  matchMedia(query: string): MediaQueryList {\r\n    if (this.platform.WEBKIT) {\r\n      createEmptyStyleRule(query);\r\n    }\r\n    return this._matchMedia(query);\r\n  }\r\n}\r\n\r\n/**\r\n * For Webkit engines that only trigger the MediaQueryListListener when\r\n * there is at least one CSS selector for the respective media query.\r\n */\r\nfunction createEmptyStyleRule(query: string) {\r\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    if (!mediaQueryStyleNode) {\r\n      mediaQueryStyleNode = document.createElement('style');\r\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\r\n      document.head.appendChild(mediaQueryStyleNode);\r\n    }\r\n\r\n    if (mediaQueryStyleNode.sheet) {\r\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\r\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\r\n      mediaQueriesForWebkitCompatibility.add(query);\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n/** No-op matchMedia replacement for non-browser platforms. */\r\nfunction noopMatchMedia(query: string): MediaQueryList {\r\n  return {\r\n    matches: query === 'all' || query === '',\r\n    media: query,\r\n    addListener: () => {},\r\n    removeListener: () => {}\r\n  };\r\n}\r\n"]}