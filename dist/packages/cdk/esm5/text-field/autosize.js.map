{"version":3,"file":"autosize.js","sourceRoot":"","sources":["../../../../../src/cdk/text-field/autosize.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  AfterViewInit,\r\n  DoCheck,\r\n  OnDestroy,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {auditTime, takeUntil} from 'rxjs/operators';\r\nimport {fromEvent, Subject} from 'rxjs';\r\n\r\n\r\n/** Directive to automatically resize a textarea to fit its content. */\r\n@Directive({\r\n  selector: 'textarea[cdkTextareaAutosize]',\r\n  exportAs: 'cdkTextareaAutosize',\r\n  host: {\r\n    'class': 'cdk-textarea-autosize',\r\n    // Textarea elements that have the directive applied should have a single row by default.\r\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n    'rows': '1',\r\n    '(input)': '_noopInputHandler()',\r\n  },\r\n})\r\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\r\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\r\n  private _previousValue: string;\r\n  private _initialHeight: string | null;\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  private _minRows: number;\r\n  private _maxRows: number;\r\n  private _enabled: boolean = true;\r\n\r\n  private _textareaElement: HTMLTextAreaElement;\r\n\r\n  /** Minimum amount of rows in the textarea. */\r\n  @Input('cdkAutosizeMinRows')\r\n  get minRows(): number { return this._minRows; }\r\n  set minRows(value: number) {\r\n    this._minRows = value;\r\n    this._setMinHeight();\r\n  }\r\n\r\n  /** Maximum amount of rows in the textarea. */\r\n  @Input('cdkAutosizeMaxRows')\r\n  get maxRows(): number { return this._maxRows; }\r\n  set maxRows(value: number) {\r\n    this._maxRows = value;\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  /** Whether autosizing is enabled or not */\r\n  @Input('cdkTextareaAutosize')\r\n  get enabled(): boolean { return this._enabled; }\r\n  set enabled(value: boolean) {\r\n    value = coerceBooleanProperty(value);\r\n\r\n    // Only act if the actual value changed. This specifically helps to not run\r\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\r\n    if (this._enabled !== value) {\r\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\r\n    }\r\n  }\r\n\r\n  /** Cached height of a textarea with a single row. */\r\n  private _cachedLineHeight: number;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _platform: Platform,\r\n    private _ngZone: NgZone) {\r\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n  }\r\n\r\n  /** Sets the minimum height of the textarea as determined by minRows. */\r\n  _setMinHeight(): void {\r\n    const minHeight = this.minRows && this._cachedLineHeight ?\r\n        `${this.minRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (minHeight)  {\r\n      this._setTextareaStyle('minHeight', minHeight);\r\n    }\r\n  }\r\n\r\n  /** Sets the maximum height of the textarea as determined by maxRows. */\r\n  _setMaxHeight(): void {\r\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\r\n        `${this.maxRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (maxHeight) {\r\n      this._setTextareaStyle('maxHeight', maxHeight);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._platform.isBrowser) {\r\n      // Remember the height which we started with in case autosizing is disabled\r\n      this._initialHeight = this._textareaElement.style.height;\r\n\r\n      this.resizeToFitContent();\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        fromEvent(window, 'resize')\r\n          .pipe(auditTime(16), takeUntil(this._destroyed))\r\n          .subscribe(() => this.resizeToFitContent(true));\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Sets a style property on the textarea element. */\r\n  private _setTextareaStyle(property: string, value: string): void {\r\n    this._textareaElement.style[property] = value;\r\n  }\r\n\r\n  /**\r\n   * Cache the height of a single-row textarea if it has not already been cached.\r\n   *\r\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\r\n   * maxRows. For the initial version, we will assume that the height of a single line in the\r\n   * textarea does not ever change.\r\n   */\r\n  private _cacheTextareaLineHeight(): void {\r\n    if (this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    // Use a clone element because we have to override some styles.\r\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\r\n    textareaClone.rows = 1;\r\n\r\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\r\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\r\n    // would affect the height.\r\n    textareaClone.style.position = 'absolute';\r\n    textareaClone.style.visibility = 'hidden';\r\n    textareaClone.style.border = 'none';\r\n    textareaClone.style.padding = '0';\r\n    textareaClone.style.height = '';\r\n    textareaClone.style.minHeight = '';\r\n    textareaClone.style.maxHeight = '';\r\n\r\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\r\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\r\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\r\n    // to hidden. This ensures that there is no invalid calculation of the line height.\r\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\r\n    textareaClone.style.overflow = 'hidden';\r\n\r\n    this._textareaElement.parentNode!.appendChild(textareaClone);\r\n    this._cachedLineHeight = textareaClone.clientHeight;\r\n    this._textareaElement.parentNode!.removeChild(textareaClone);\r\n\r\n    // Min and max heights have to be re-calculated if the cached line height changes\r\n    this._setMinHeight();\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this._platform.isBrowser) {\r\n      this.resizeToFitContent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize the textarea to fit its content.\r\n   * @param force Whether to force a height recalculation. By default the height will be\r\n   *    recalculated only if the value changed since the last call.\r\n   */\r\n  resizeToFitContent(force: boolean = false) {\r\n    // If autosizing is disabled, just skip everything else\r\n    if (!this._enabled) {\r\n      return;\r\n    }\r\n\r\n    this._cacheTextareaLineHeight();\r\n\r\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\r\n    // in checking the height of the textarea.\r\n    if (!this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n    const value = textarea.value;\r\n\r\n    // Only resize of the value changed since these calculations can be expensive.\r\n    if (value === this._previousValue && !force) {\r\n      return;\r\n    }\r\n\r\n    const placeholderText = textarea.placeholder;\r\n\r\n    // Reset the textarea height to auto in order to shrink back to its default size.\r\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\r\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\r\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\r\n    // need to be removed temporarily.\r\n    textarea.classList.add('cdk-textarea-autosize-measuring');\r\n    textarea.placeholder = '';\r\n\r\n    // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\r\n    // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\r\n    const height = textarea.scrollHeight - 4;\r\n\r\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\r\n    textarea.style.height = `${height}px`;\r\n    textarea.classList.remove('cdk-textarea-autosize-measuring');\r\n    textarea.placeholder = placeholderText;\r\n\r\n    // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\r\n    // We need to re-set the selection in order for it to scroll to the proper position.\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => requestAnimationFrame(() => {\r\n        const {selectionStart, selectionEnd} = textarea;\r\n\r\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\r\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\r\n        // between the time we requested the animation frame and when it was executed.\r\n        // Also note that we have to assert that the textarea is focused before we set the\r\n        // selection range. Setting the selection range on a non-focused textarea will cause\r\n        // it to receive focus on IE and Edge.\r\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\r\n          textarea.setSelectionRange(selectionStart, selectionEnd);\r\n        }\r\n      }));\r\n    }\r\n\r\n    this._previousValue = value;\r\n  }\r\n\r\n  /**\r\n   * Resets the textarea to it's original size\r\n   */\r\n  reset() {\r\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\r\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\r\n    if (this._initialHeight === undefined) {\r\n      return;\r\n    }\r\n    this._textareaElement.style.height = this._initialHeight;\r\n  }\r\n\r\n  _noopInputHandler() {\r\n    // no-op handler that ensures we're running change detection on input events.\r\n  }\r\n}\r\n"]}