{"version":3,"file":"row.js","sourceRoot":"","sources":["../../../../../src/cdk/table/row.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EACL,uBAAuB,EACvB,SAAS,EACT,SAAS,EAGT,eAAe,EAIf,WAAW,EACX,gBAAgB,EAChB,iBAAiB,GAClB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAW,mBAAmB,EAAC,MAAM,aAAa,CAAC;;;;;AAM1D,MAAM,CAAC,qBAAM,gBAAgB,GAAG,6CAA6C,CAAC;;;;;;AAM9E;;;;;AAAA;IAOE,oBAAwC,UAClB,QAAyB;QADP,aAAQ,GAAR,QAAQ;QAC1B,aAAQ,GAAR,QAAQ,CAAiB;KAAK;;;;;IAEpD,gCAAW;;;;IAAX,UAAY,OAAsB;;;QAGhC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACzB,qBAAM,OAAO,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YAC9E,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;YAC3D,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACnC;KACF;IAED;;;OAGG;;;;;;IACH,mCAAc;;;;;IAAd;QACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC/C;IAED,+EAA+E;;;;;;IAC/E,wCAAmB;;;;;IAAnB,UAAoB,MAAoB;QACtC,EAAE,CAAC,CAAC,IAAI,YAAY,eAAe,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;SACnC;QAAC,EAAE,CAAC,CAAC,IAAI,YAAY,eAAe,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;SACnC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC7B;KACF;qBAxEH;IAyEC,CAAA;;;;;;AAtCD,sBAsCC;;;;;;;;;;;;;;;;;;;;;;;AAID;;;AAAA;IAAyC,+CAAU;;;;8BA7EnD;EA6EyC,UAAU,EAAG,CAAA;;;;AAAtD,+BAAsD;AACtD,MAAM,CAAC,qBAAM,oBAAoB,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;;;;;;IAUxC,2CAAoB;IACvD,yBAAY,QAA0B,EAAE,QAAyB;eAC/D,kBAAM,QAAQ,EAAE,QAAQ,CAAC;KAC1B;IAED,6FAA6F;IAC7F,sFAAsF;;;;;IACtF,qCAAW;;;;IAAX,UAAY,OAAsB;QAChC,iBAAM,WAAW,YAAC,OAAO,CAAC,CAAC;KAC5B;;gBAbF,SAAS,SAAC;oBACT,QAAQ,EAAE,mBAAmB;oBAC7B,MAAM,EAAE,CAAC,0BAA0B,EAAE,+BAA+B,CAAC;iBACtE;;;;gBArEC,WAAW;gBAJX,eAAe;;0BAdjB;EAwFqC,oBAAoB;SAA5C,eAAe;;;;;;;;;;;;;AAc5B;;;AAAA;IAAyC,+CAAU;;;;8BAtGnD;EAsGyC,UAAU,EAAG,CAAA;;;;AAAtD,+BAAsD;AACtD,MAAM,CAAC,qBAAM,oBAAoB,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;;;;;;IAUxC,2CAAoB;IACvD,yBAAY,QAA0B,EAAE,QAAyB;eAC/D,kBAAM,QAAQ,EAAE,QAAQ,CAAC;KAC1B;IAED,6FAA6F;IAC7F,sFAAsF;;;;;IACtF,qCAAW;;;;IAAX,UAAY,OAAsB;QAChC,iBAAM,WAAW,YAAC,OAAO,CAAC,CAAC;KAC5B;;gBAbF,SAAS,SAAC;oBACT,QAAQ,EAAE,mBAAmB;oBAC7B,MAAM,EAAE,CAAC,0BAA0B,EAAE,+BAA+B,CAAC;iBACtE;;;;gBA9FC,WAAW;gBAJX,eAAe;;0BAdjB;EAiHqC,oBAAoB;SAA5C,eAAe;;;;;;;;;;;;;;;;;IAqBM,qCAAU;IAS1C,gFAAgF;IAChF,qCAAqC;IACrC,mBAAY,QAA0B,EAAE,QAAyB;eAC/D,kBAAM,QAAQ,EAAE,QAAQ,CAAC;KAC1B;;gBAjBF,SAAS,SAAC;oBACT,QAAQ,EAAE,aAAa;oBACvB,MAAM,EAAE,CAAC,2BAA2B,EAAE,qBAAqB,CAAC;iBAC7D;;;;gBAnHC,WAAW;gBAJX,eAAe;;oBAdjB;EAsIkC,UAAU;SAA/B,SAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4FpB,uBAAmB,cAAgC;QAAhC,mBAAc,GAAd,cAAc,CAAkB;QACjD,aAAa,CAAC,oBAAoB,GAAG,IAAI,CAAC;KAC3C;;;;IAED,mCAAW;;;IAAX;;;QAGE,EAAE,CAAC,CAAC,aAAa,CAAC,oBAAoB,KAAK,IAAI,CAAC,CAAC,CAAC;YAChD,aAAa,CAAC,oBAAoB,GAAG,IAAI,CAAC;SAC3C;KACF;;;;;;;;yCAZmD,IAAI;;gBAfzD,SAAS,SAAC,EAAC,QAAQ,EAAE,iBAAiB,EAAC;;;;gBA9LtC,gBAAgB;;wBAnBlB;;SAkNa,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBA8BzB,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,oCAAoC;oBAC9C,QAAQ,EAAE,gBAAgB;oBAC1B,IAAI,EAAE;wBACJ,OAAO,EAAE,gBAAgB;wBACzB,MAAM,EAAE,KAAK;qBACd;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;iBACtC;;uBA1PD;;SA2Pa,YAAY;;;;;;;;;;;;;;;;;gBAIxB,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,oCAAoC;oBAC9C,QAAQ,EAAE,gBAAgB;oBAC1B,IAAI,EAAE;wBACJ,OAAO,EAAE,gBAAgB;wBACzB,MAAM,EAAE,KAAK;qBACd;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;iBACtC;;uBAzQD;;SA0Qa,YAAY;;;;;;;;;;;;;;;;;gBAGxB,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,sBAAsB;oBAChC,QAAQ,EAAE,gBAAgB;oBAC1B,IAAI,EAAE;wBACJ,OAAO,EAAE,SAAS;wBAClB,MAAM,EAAE,KAAK;qBACd;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;iBACtC;;iBAvRD;;SAwRa,MAAM","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CdkCellDef, CdkColumnDef} from './cell';\r\nimport {CanStick, mixinHasStickyInput} from './can-stick';\r\n\r\n/**\r\n * The row template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n */\r\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\r\n\r\n/**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n */\r\nexport abstract class BaseRowDef implements OnChanges {\r\n  /** The columns to be displayed on this row. */\r\n  columns: Iterable<string>;\r\n\r\n  /** Differ used to check if any changes were made to the columns. */\r\n  protected _columnsDiffer: IterableDiffer<any>;\r\n\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>,\r\n              protected _differs: IterableDiffers) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\r\n    // of the columns property or an empty array if none is provided.\r\n    if (!this._columnsDiffer) {\r\n      const columns = (changes['columns'] && changes['columns'].currentValue) || [];\r\n      this._columnsDiffer = this._differs.find(columns).create();\r\n      this._columnsDiffer.diff(columns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the difference between the current columns and the columns from the last diff, or null\r\n   * if there is no difference.\r\n   */\r\n  getColumnsDiff(): IterableChanges<any> | null {\r\n    return this._columnsDiffer.diff(this.columns);\r\n  }\r\n\r\n  /** Gets this row def's relevant cell template from the provided column def. */\r\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\r\n    if (this instanceof CdkHeaderRowDef) {\r\n      return column.headerCell.template;\r\n    } if (this instanceof CdkFooterRowDef) {\r\n      return column.footerCell.template;\r\n    } else {\r\n      return column.cell.template;\r\n    }\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkHeaderRowDef.\r\n/** @docs-private */\r\nexport class CdkHeaderRowDefBase extends BaseRowDef {}\r\nexport const _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\r\n\r\n/**\r\n * Header row definition for the CDK table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkHeaderRowDef]',\r\n  inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\r\n})\r\nexport class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkFooterRowDef.\r\n/** @docs-private */\r\nexport class CdkFooterRowDefBase extends BaseRowDef {}\r\nexport const _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\r\n\r\n/**\r\n * Footer row definition for the CDK table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkFooterRowDef]',\r\n  inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\r\n})\r\nexport class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n}\r\n\r\n/**\r\n * Data row definition for the CDK table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\n@Directive({\r\n  selector: '[cdkRowDef]',\r\n  inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\r\n})\r\nexport class CdkRowDef<T> extends BaseRowDef {\r\n  /**\r\n   * Function that should return true if this row template should be used for the provided index\r\n   * and row data. If left undefined, this row will be considered the default row template to use\r\n   * when no other when functions return true for the data.\r\n   * For every row, there must be at least one when function that passes or an undefined to default.\r\n   */\r\n  when: (index: number, rowData: T) => boolean;\r\n\r\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\r\n  //   if this template should be used.\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n}\r\n\r\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\r\nexport interface CdkCellOutletRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\r\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\r\n * `renderIndex`.\r\n */\r\nexport interface CdkCellOutletMultiRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  dataIndex?: number;\r\n\r\n  /** Index location of the rendered row that this cell is located within. */\r\n  renderIndex?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Outlet for rendering cells inside of a row or header row.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[cdkCellOutlet]'})\r\nexport class CdkCellOutlet implements OnDestroy {\r\n  /** The ordered list of cells to render within this outlet's view container */\r\n  cells: CdkCellDef[];\r\n\r\n  /** The data context to be provided to each cell */\r\n  context: any;\r\n\r\n  /**\r\n   * Static property containing the latest constructed instance of this class.\r\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\r\n   * createEmbeddedView. After one of these components are created, this property will provide\r\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\r\n   * construct the cells with the provided context.\r\n   */\r\n  static mostRecentCellOutlet: CdkCellOutlet | null = null;\r\n\r\n  constructor(public _viewContainer: ViewContainerRef) {\r\n    CdkCellOutlet.mostRecentCellOutlet = this;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // If this was the last outlet being rendered in the view, remove the reference\r\n    // from the static property after it has been destroyed to avoid leaking memory.\r\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\r\n      CdkCellOutlet.mostRecentCellOutlet = null;\r\n    }\r\n  }\r\n}\r\n\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-header-row, tr[cdk-header-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-header-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkHeaderRow { }\r\n\r\n\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-footer-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkFooterRow { }\r\n\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-row, tr[cdk-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkRow { }\r\n"]}