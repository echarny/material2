{"version":3,"file":"portal.js","sourceRoot":"","sources":["../../../../../src/cdk/portal/portal.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    ElementRef,\r\n    ComponentRef,\r\n    EmbeddedViewRef,\r\n    Injector\r\n} from '@angular/core';\r\nimport {\r\n    throwNullPortalOutletError,\r\n    throwPortalAlreadyAttachedError,\r\n    throwNoPortalAttachedError,\r\n    throwNullPortalError,\r\n    throwPortalOutletAlreadyDisposedError,\r\n    throwUnknownPortalTypeError\r\n} from './portal-errors';\r\n\r\n/** Interface that can be used to generically type a class. */\r\nexport interface ComponentType<T> {\r\n  new (...args: any[]): T;\r\n}\r\n\r\n/**\r\n * A `Portal` is something that you want to render somewhere else.\r\n * It can be attach to / detached from a `PortalOutlet`.\r\n */\r\nexport abstract class Portal<T> {\r\n  private _attachedHost: PortalOutlet | null;\r\n\r\n  /** Attach this portal to a host. */\r\n  attach(host: PortalOutlet): T {\r\n    if (host == null) {\r\n      throwNullPortalOutletError();\r\n    }\r\n\r\n    if (host.hasAttached()) {\r\n      throwPortalAlreadyAttachedError();\r\n    }\r\n\r\n    this._attachedHost = host;\r\n    return <T> host.attach(this);\r\n  }\r\n\r\n  /** Detach this portal from its host */\r\n  detach(): void {\r\n    let host = this._attachedHost;\r\n\r\n    if (host == null) {\r\n      throwNoPortalAttachedError();\r\n    } else {\r\n      this._attachedHost = null;\r\n      host.detach();\r\n    }\r\n  }\r\n\r\n  /** Whether this portal is attached to a host. */\r\n  get isAttached(): boolean {\r\n    return this._attachedHost != null;\r\n  }\r\n\r\n  /**\r\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\r\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\r\n   */\r\n  setAttachedHost(host: PortalOutlet | null) {\r\n    this._attachedHost = host;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n */\r\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\r\n  /** The type of the component that will be instantiated for attachment. */\r\n  component: ComponentType<T>;\r\n\r\n  /**\r\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\r\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\r\n   * The origin is necessary when the host is outside of the Angular application context.\r\n   */\r\n  viewContainerRef?: ViewContainerRef | null;\r\n\r\n  /** [Optional] Injector used for the instantiation of the component. */\r\n  injector?: Injector | null;\r\n\r\n  constructor(\r\n      component: ComponentType<T>,\r\n      viewContainerRef?: ViewContainerRef | null,\r\n      injector?: Injector | null) {\r\n    super();\r\n    this.component = component;\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.injector = injector;\r\n  }\r\n}\r\n\r\n/**\r\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n */\r\nexport class TemplatePortal<C = any> extends Portal<C> {\r\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\r\n  templateRef: TemplateRef<C>;\r\n\r\n  /** Reference to the ViewContainer into which the template will be stamped out. */\r\n  viewContainerRef: ViewContainerRef;\r\n\r\n  /** Contextual data to be passed in to the embedded view. */\r\n  context: C | undefined;\r\n\r\n  constructor(template: TemplateRef<C>, viewContainerRef: ViewContainerRef, context?: C) {\r\n    super();\r\n    this.templateRef = template;\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.context = context;\r\n  }\r\n\r\n  get origin(): ElementRef {\r\n    return this.templateRef.elementRef;\r\n  }\r\n\r\n  /**\r\n   * Attach the the portal to the provided `PortalOutlet`.\r\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\r\n   * instance.\r\n   */\r\n  attach(host: PortalOutlet, context: C | undefined = this.context): C {\r\n    this.context = context;\r\n    return super.attach(host);\r\n  }\r\n\r\n  detach(): void {\r\n    this.context = undefined;\r\n    return super.detach();\r\n  }\r\n}\r\n\r\n\r\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\r\nexport interface PortalOutlet {\r\n  /** Attaches a portal to this outlet. */\r\n  attach(portal: Portal<any>): any;\r\n\r\n  /** Detaches the currently attached portal from this outlet. */\r\n  detach(): any;\r\n\r\n  /** Performs cleanup before the outlet is destroyed. */\r\n  dispose(): void;\r\n\r\n  /** Whether there is currently a portal attached to this outlet. */\r\n  hasAttached(): boolean;\r\n}\r\n\r\n\r\n/**\r\n * Partial implementation of PortalOutlet that handles attaching\r\n * ComponentPortal and TemplatePortal.\r\n */\r\nexport abstract class BasePortalOutlet implements PortalOutlet {\r\n  /** The portal currently attached to the host. */\r\n  protected _attachedPortal: Portal<any> | null;\r\n\r\n  /** A function that will permanently dispose this host. */\r\n  private _disposeFn: (() => void) | null;\r\n\r\n  /** Whether this host has already been permanently disposed. */\r\n  private _isDisposed: boolean = false;\r\n\r\n  /** Whether this host has an attached portal. */\r\n  hasAttached(): boolean {\r\n    return !!this._attachedPortal;\r\n  }\r\n\r\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\r\n  attach(portal: any): any;\r\n\r\n  /** Attaches a portal. */\r\n  attach(portal: Portal<any>): any {\r\n    if (!portal) {\r\n      throwNullPortalError();\r\n    }\r\n\r\n    if (this.hasAttached()) {\r\n      throwPortalAlreadyAttachedError();\r\n    }\r\n\r\n    if (this._isDisposed) {\r\n      throwPortalOutletAlreadyDisposedError();\r\n    }\r\n\r\n    if (portal instanceof ComponentPortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachComponentPortal(portal);\r\n    } else if (portal instanceof TemplatePortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachTemplatePortal(portal);\r\n    }\r\n\r\n    throwUnknownPortalTypeError();\r\n  }\r\n\r\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n\r\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\r\n\r\n  /** Detaches a previously attached portal. */\r\n  detach(): void {\r\n    if (this._attachedPortal) {\r\n      this._attachedPortal.setAttachedHost(null);\r\n      this._attachedPortal = null;\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n  }\r\n\r\n  /** Permanently dispose of this portal host. */\r\n  dispose(): void {\r\n    if (this.hasAttached()) {\r\n      this.detach();\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n    this._isDisposed = true;\r\n  }\r\n\r\n  /** @docs-private */\r\n  setDisposeFn(fn: () => void) {\r\n    this._disposeFn = fn;\r\n  }\r\n\r\n  private _invokeDisposeFn() {\r\n    if (this._disposeFn) {\r\n      this._disposeFn();\r\n      this._disposeFn = null;\r\n    }\r\n  }\r\n}\r\n"]}