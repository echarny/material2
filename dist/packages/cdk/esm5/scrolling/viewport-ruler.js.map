{"version":3,"file":"viewport-ruler.js","sourceRoot":"","sources":["../../../../../src/cdk/scrolling/viewport-ruler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {Injectable, NgZone, OnDestroy, Optional, SkipSelf} from '@angular/core';\r\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\r\nimport {auditTime} from 'rxjs/operators';\r\n\r\n/** Time in ms to throttle the resize events by default. */\r\nexport const DEFAULT_RESIZE_TIME = 20;\r\n\r\n/**\r\n * Simple utility for getting the bounds of the browser viewport.\r\n * @docs-private\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class ViewportRuler implements OnDestroy {\r\n  /** Cached viewport dimensions. */\r\n  private _viewportSize: {width: number; height: number};\r\n\r\n  /** Stream of viewport change events. */\r\n  private _change: Observable<Event>;\r\n\r\n  /** Subscription to streams that invalidate the cached viewport dimensions. */\r\n  private _invalidateCache: Subscription;\r\n\r\n  constructor(private _platform: Platform, ngZone: NgZone) {\r\n    this._change = _platform.isBrowser ? ngZone.runOutsideAngular(() => {\r\n      return merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange'));\r\n    }) : observableOf();\r\n\r\n    this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._invalidateCache.unsubscribe();\r\n  }\r\n\r\n  /** Returns the viewport's width and height. */\r\n  getViewportSize(): Readonly<{width: number, height: number}> {\r\n    if (!this._viewportSize) {\r\n      this._updateViewportSize();\r\n    }\r\n\r\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\r\n\r\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\r\n    if (!this._platform.isBrowser) {\r\n      this._viewportSize = null!;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /** Gets a ClientRect for the viewport's bounds. */\r\n  getViewportRect(): ClientRect {\r\n    // Use the document element's bounding rect rather than the window scroll properties\r\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\r\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\r\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\r\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\r\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\r\n    // We use the documentElement instead of the body because, by default (without a css reset)\r\n    // browsers typically give the document body an 8px margin, which is not included in\r\n    // getBoundingClientRect().\r\n    const scrollPosition = this.getViewportScrollPosition();\r\n    const {width, height} = this.getViewportSize();\r\n\r\n    return {\r\n      top: scrollPosition.top,\r\n      left: scrollPosition.left,\r\n      bottom: scrollPosition.top + height,\r\n      right: scrollPosition.left + width,\r\n      height,\r\n      width,\r\n    };\r\n  }\r\n\r\n  /** Gets the (top, left) scroll position of the viewport. */\r\n  getViewportScrollPosition() {\r\n    // While we can get a reference to the fake document\r\n    // during SSR, it doesn't have getBoundingClientRect.\r\n    if (!this._platform.isBrowser) {\r\n      return {top: 0, left: 0};\r\n    }\r\n\r\n    // The top-left-corner of the viewport is determined by the scroll position of the document\r\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\r\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\r\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\r\n    // `document.documentElement` works consistently, where the `top` and `left` values will\r\n    // equal negative the scroll position.\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n\r\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\r\n                 document.documentElement.scrollTop || 0;\r\n\r\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\r\n                  document.documentElement.scrollLeft || 0;\r\n\r\n    return {top, left};\r\n  }\r\n\r\n  /**\r\n   * Returns a stream that emits whenever the size of the viewport changes.\r\n   * @param throttleTime Time in milliseconds to throttle the stream.\r\n   */\r\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\r\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\r\n  }\r\n\r\n  /** Updates the cached viewport size. */\r\n  private _updateViewportSize() {\r\n    this._viewportSize = this._platform.isBrowser ?\r\n        {width: window.innerWidth, height: window.innerHeight} :\r\n        {width: 0, height: 0};\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\r\n                                                platform: Platform,\r\n                                                ngZone: NgZone) {\r\n  return parentRuler || new ViewportRuler(platform, ngZone);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const VIEWPORT_RULER_PROVIDER = {\r\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\r\n  provide: ViewportRuler,\r\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\r\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\r\n};\r\n"]}