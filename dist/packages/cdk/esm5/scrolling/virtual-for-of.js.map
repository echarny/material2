{"version":3,"file":"virtual-for-of.js","sourceRoot":"","sources":["../../../../../src/cdk/scrolling/virtual-for-of.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ArrayDataSource, CollectionViewer, DataSource, ListRange} from '@angular/cdk/collections';\r\nimport {\r\n  Directive,\r\n  DoCheck,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  IterableChangeRecord,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  NgIterable,\r\n  OnDestroy,\r\n  SkipSelf,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n\r\n/** The context for an item rendered by `CdkVirtualForOf` */\r\nexport type CdkVirtualForOfContext<T> = {\r\n  /** The item value. */\r\n  $implicit: T;\r\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\r\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\r\n  /** The index of the item in the DataSource. */\r\n  index: number;\r\n  /** The number of items in the DataSource. */\r\n  count: number;\r\n  /** Whether this is the first item in the DataSource. */\r\n  first: boolean;\r\n  /** Whether this is the last item in the DataSource. */\r\n  last: boolean;\r\n  /** Whether the index is even. */\r\n  even: boolean;\r\n  /** Whether the index is odd. */\r\n  odd: boolean;\r\n};\r\n\r\n\r\n/** Helper to extract size from a DOM Node. */\r\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\r\n  const el = node as Element;\r\n  if (!el.getBoundingClientRect) {\r\n    return 0;\r\n  }\r\n  const rect = el.getBoundingClientRect();\r\n  return orientation == 'horizontal' ? rect.width : rect.height;\r\n}\r\n\r\n\r\n/**\r\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\r\n * container.\r\n */\r\n@Directive({\r\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\r\n})\r\nexport class CdkVirtualForOf<T> implements CollectionViewer, DoCheck, OnDestroy {\r\n  /** Emits when the rendered view of the data changes. */\r\n  viewChange = new Subject<ListRange>();\r\n\r\n  /** Subject that emits when a new DataSource instance is given. */\r\n  private _dataSourceChanges = new Subject<DataSource<T>>();\r\n\r\n  /** The DataSource to display. */\r\n  @Input()\r\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> {\r\n    return this._cdkVirtualForOf;\r\n  }\r\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T>) {\r\n    this._cdkVirtualForOf = value;\r\n    const ds = value instanceof DataSource ? value :\r\n        // Slice the value if its an NgIterable to ensure we're working with an array.\r\n        new ArrayDataSource<T>(\r\n            value instanceof Observable ? value : Array.prototype.slice.call(value || []));\r\n    this._dataSourceChanges.next(ds);\r\n  }\r\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\r\n\r\n  /**\r\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\r\n   * the item and produces a value to be used as the item's identity when tracking changes.\r\n   */\r\n  @Input()\r\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\r\n    return this._cdkVirtualForTrackBy;\r\n  }\r\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\r\n    this._needsUpdate = true;\r\n    this._cdkVirtualForTrackBy = fn ?\r\n        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\r\n        undefined;\r\n  }\r\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\r\n\r\n  /** The template used to stamp out new elements. */\r\n  @Input()\r\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\r\n    if (value) {\r\n      this._needsUpdate = true;\r\n      this._template = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The size of the cache used to store templates that are not being used for re-use later.\r\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\r\n   */\r\n  @Input() cdkVirtualForTemplateCacheSize: number = 20;\r\n\r\n  /** Emits whenever the data in the current DataSource changes. */\r\n  dataStream: Observable<T[]> = this._dataSourceChanges\r\n      .pipe(\r\n          // Start off with null `DataSource`.\r\n          startWith(null!),\r\n          // Bundle up the previous and current data sources so we can work with both.\r\n          pairwise(),\r\n          // Use `_changeDataSource` to disconnect from the previous data source and connect to the\r\n          // new one, passing back a stream of data changes which we run through `switchMap` to give\r\n          // us a data stream that emits the latest data from whatever the current `DataSource` is.\r\n          switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\r\n          // Replay the last emitted data when someone subscribes.\r\n          shareReplay(1));\r\n\r\n  /** The differ used to calculate changes to the data. */\r\n  private _differ: IterableDiffer<T> | null = null;\r\n\r\n  /** The most recent data emitted from the DataSource. */\r\n  private _data: T[];\r\n\r\n  /** The currently rendered items. */\r\n  private _renderedItems: T[];\r\n\r\n  /** The currently rendered range of indices. */\r\n  private _renderedRange: ListRange;\r\n\r\n  /**\r\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\r\n   * currently need to be rendered. These instances will be reused in the future rather than\r\n   * stamping out brand new ones.\r\n   */\r\n  private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\r\n\r\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\r\n  private _needsUpdate = false;\r\n\r\n  private _destroyed = new Subject<void>();\r\n\r\n  constructor(\r\n      /** The view container to add items to. */\r\n      private _viewContainerRef: ViewContainerRef,\r\n      /** The template to use when stamping out new items. */\r\n      private _template: TemplateRef<CdkVirtualForOfContext<T>>,\r\n      /** The set of available differs. */\r\n      private _differs: IterableDiffers,\r\n      /** The virtual scrolling viewport that these items are being rendered in. */\r\n      @SkipSelf() private _viewport: CdkVirtualScrollViewport) {\r\n    this.dataStream.subscribe(data => {\r\n      this._data = data;\r\n      this._onRenderedDataChange();\r\n    });\r\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\r\n      this._renderedRange = range;\r\n      this.viewChange.next(this._renderedRange);\r\n      this._onRenderedDataChange();\r\n    });\r\n    this._viewport.attach(this);\r\n  }\r\n\r\n  /**\r\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\r\n   * in the specified range. Throws an error if the range includes items that are not currently\r\n   * rendered.\r\n   */\r\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\r\n    if (range.start >= range.end) {\r\n      return 0;\r\n    }\r\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\r\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\r\n    }\r\n\r\n    // The index into the list of rendered views for the first item in the range.\r\n    const renderedStartIndex = range.start - this._renderedRange.start;\r\n    // The length of the range we're measuring.\r\n    const rangeLen = range.end - range.start;\r\n\r\n    // Loop over all root nodes for all items in the range and sum up their size.\r\n    let totalSize = 0;\r\n    let i = rangeLen;\r\n    while (i--) {\r\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as\r\n          EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\r\n      let j = view ? view.rootNodes.length : 0;\r\n      while (j--) {\r\n        totalSize += getSize(orientation, view!.rootNodes[j]);\r\n      }\r\n    }\r\n\r\n    return totalSize;\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this._differ && this._needsUpdate) {\r\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\r\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\r\n      // changing (need to do this diff).\r\n      const changes = this._differ.diff(this._renderedItems);\r\n      if (!changes) {\r\n        this._updateContext();\r\n      } else {\r\n        this._applyChanges(changes);\r\n      }\r\n      this._needsUpdate = false;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._viewport.detach();\r\n\r\n    this._dataSourceChanges.complete();\r\n    this.viewChange.complete();\r\n\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n\r\n    for (let view of this._templateCache) {\r\n      view.destroy();\r\n    }\r\n  }\r\n\r\n  /** React to scroll state changes in the viewport. */\r\n  private _onRenderedDataChange() {\r\n    if (!this._renderedRange) {\r\n      return;\r\n    }\r\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\r\n    if (!this._differ) {\r\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\r\n    }\r\n    this._needsUpdate = true;\r\n  }\r\n\r\n  /** Swap out one `DataSource` for another. */\r\n  private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T>): Observable<T[]> {\r\n    if (oldDs) {\r\n      oldDs.disconnect(this);\r\n    }\r\n    this._needsUpdate = true;\r\n    return newDs.connect(this);\r\n  }\r\n\r\n  /** Update the `CdkVirtualForOfContext` for all views. */\r\n  private _updateContext() {\r\n    const count = this._data.length;\r\n    let i = this._viewContainerRef.length;\r\n    while (i--) {\r\n      let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n      view.context.index = this._renderedRange.start + i;\r\n      view.context.count = count;\r\n      this._updateComputedContextProperties(view.context);\r\n      view.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Apply changes to the DOM. */\r\n  private _applyChanges(changes: IterableChanges<T>) {\r\n    // Rearrange the views to put them in the right location.\r\n    changes.forEachOperation(\r\n        (record: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\r\n          if (record.previousIndex == null) {  // Item added.\r\n            const view = this._getViewForNewItem();\r\n            this._viewContainerRef.insert(view, currentIndex);\r\n            view.context.$implicit = record.item;\r\n          } else if (currentIndex == null) {  // Item removed.\r\n            this._cacheView(this._viewContainerRef.detach(adjustedPreviousIndex) as\r\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>);\r\n          } else {  // Item moved.\r\n            const view = this._viewContainerRef.get(adjustedPreviousIndex) as\r\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n            this._viewContainerRef.move(view, currentIndex);\r\n            view.context.$implicit = record.item;\r\n          }\r\n        });\r\n\r\n    // Update $implicit for any items that had an identity change.\r\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\r\n      const view = this._viewContainerRef.get(record.currentIndex!) as\r\n          EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n      view.context.$implicit = record.item;\r\n    });\r\n\r\n    // Update the context variables on all items.\r\n    const count = this._data.length;\r\n    let i = this._viewContainerRef.length;\r\n    while (i--) {\r\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n      view.context.index = this._renderedRange.start + i;\r\n      view.context.count = count;\r\n      this._updateComputedContextProperties(view.context);\r\n    }\r\n  }\r\n\r\n  /** Cache the given detached view. */\r\n  private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\r\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\r\n      this._templateCache.push(view);\r\n    } else {\r\n      view.destroy();\r\n    }\r\n  }\r\n\r\n  /** Get a view for a new item, either from the cache or by creating a new one. */\r\n  private _getViewForNewItem(): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\r\n    return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\r\n      $implicit: null!,\r\n      cdkVirtualForOf: this._cdkVirtualForOf,\r\n      index: -1,\r\n      count: -1,\r\n      first: false,\r\n      last: false,\r\n      odd: false,\r\n      even: false\r\n    });\r\n  }\r\n\r\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\r\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\r\n    context.first = context.index === 0;\r\n    context.last = context.index === context.count - 1;\r\n    context.even = context.index % 2 === 0;\r\n    context.odd = !context.even;\r\n  }\r\n}\r\n"]}