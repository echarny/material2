{"version":3,"file":"connected-position-strategy.js","sourceRoot":"","sources":["../../../../../../src/cdk/overlay/position/connected-position-strategy.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {ElementRef} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {\r\n  ConnectedOverlayPositionChange,\r\n  ConnectionPositionPair,\r\n  OriginConnectionPosition,\r\n  OverlayConnectionPosition,\r\n} from './connected-position';\r\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\r\nimport {PositionStrategy} from './position-strategy';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative to some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\r\n * @breaking-change 7.0.0\r\n */\r\nexport class ConnectedPositionStrategy implements PositionStrategy {\r\n  /**\r\n   * Reference to the underlying position strategy to which all the API calls are proxied.\r\n   * @docs-private\r\n   */\r\n  _positionStrategy: FlexibleConnectedPositionStrategy;\r\n\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n\r\n  private _direction: Direction | null;\r\n\r\n  /** Whether the we're dealing with an RTL context */\r\n  get _isRtl() {\r\n    return this._overlayRef.getDirection() === 'rtl';\r\n  }\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  _preferredPositions: ConnectionPositionPair[] = [];\r\n\r\n  /** Emits an event when the connection point changes. */\r\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\r\n    return this._positionStrategy.positionChanges;\r\n  }\r\n\r\n  constructor(\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition,\r\n      connectedTo: ElementRef,\r\n      viewportRuler: ViewportRuler,\r\n      document: Document,\r\n      // @breaking-change 7.0.0 `platform` parameter to be made required.\r\n      platform?: Platform) {\r\n\r\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\r\n    // the extra logic, we create an instance of the positioning strategy that has some\r\n    // defaults that make it behave as the old position strategy and to which we'll\r\n    // proxy all of the API calls.\r\n    this._positionStrategy =\r\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\r\n        .withFlexibleDimensions(false)\r\n        .withPush(false)\r\n        .withViewportMargin(0);\r\n\r\n    this.withFallbackPosition(originPos, overlayPos);\r\n  }\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  get positions(): ConnectionPositionPair[] {\r\n    return this._preferredPositions;\r\n  }\r\n\r\n  /** Attach this position strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference): void {\r\n    this._overlayRef = overlayRef;\r\n    this._positionStrategy.attach(overlayRef);\r\n\r\n    if (this._direction) {\r\n      overlayRef.setDirection(this._direction);\r\n      this._direction = null;\r\n    }\r\n  }\r\n\r\n  /** Disposes all resources used by the position strategy. */\r\n  dispose() {\r\n    this._positionStrategy.dispose();\r\n  }\r\n\r\n  /** @docs-private */\r\n  detach() {\r\n    this._positionStrategy.detach();\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the overlay element, using whichever preferred position relative\r\n   * to the origin fits on-screen.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    this._positionStrategy.apply();\r\n  }\r\n\r\n  /**\r\n   * Re-positions the overlay element with the trigger in its last calculated position,\r\n   * even if a position higher in the \"preferred positions\" list would now fit. This\r\n   * allows one to re-align the panel without changing the orientation of the panel.\r\n   */\r\n  recalculateLastPosition(): void {\r\n    this._positionStrategy.reapplyLastPosition();\r\n  }\r\n\r\n  /**\r\n   * Sets the list of Scrollable containers that host the origin element so that\r\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n   * Scrollable must be an ancestor element of the strategy's origin element.\r\n   */\r\n  withScrollableContainers(scrollables: CdkScrollable[]) {\r\n    this._positionStrategy.withScrollableContainers(scrollables);\r\n  }\r\n\r\n  /**\r\n   * Adds a new preferred fallback position.\r\n   * @param originPos\r\n   * @param overlayPos\r\n   */\r\n  withFallbackPosition(\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition,\r\n      offsetX?: number,\r\n      offsetY?: number): this {\r\n\r\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\r\n    this._preferredPositions.push(position);\r\n    this._positionStrategy.withPositions(this._preferredPositions);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the layout direction so the overlay's position can be adjusted to match.\r\n   * @param dir New layout direction.\r\n   */\r\n  withDirection(dir: 'ltr' | 'rtl'): this {\r\n    // Since the direction might be declared before the strategy is attached,\r\n    // we save the value in a temporary property and we'll transfer it to the\r\n    // overlay ref on attachment.\r\n    if (this._overlayRef) {\r\n      this._overlayRef.setDirection(dir);\r\n    } else {\r\n      this._direction = dir;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an offset for the overlay's connection point on the x-axis\r\n   * @param offset New offset in the X axis.\r\n   */\r\n  withOffsetX(offset: number): this {\r\n    this._positionStrategy.withDefaultOffsetX(offset);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an offset for the overlay's connection point on the y-axis\r\n   * @param  offset New offset in the Y axis.\r\n   */\r\n  withOffsetY(offset: number): this {\r\n    this._positionStrategy.withDefaultOffsetY(offset);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the overlay's position should be locked in after it is positioned\r\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n   * when the position is re-applied (e.g. when the user scrolls away).\r\n   * @param isLocked Whether the overlay should locked in.\r\n   */\r\n  withLockedPosition(isLocked: boolean): this {\r\n    this._positionStrategy.withLockedPosition(isLocked);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Overwrites the current set of positions with an array of new ones.\r\n   * @param positions Position pairs to be set on the strategy.\r\n   */\r\n  withPositions(positions: ConnectionPositionPair[]): this {\r\n    this._preferredPositions = positions.slice();\r\n    this._positionStrategy.withPositions(this._preferredPositions);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the origin element, relative to which to position the overlay.\r\n   * @param origin Reference to the new origin element.\r\n   */\r\n  setOrigin(origin: ElementRef): this {\r\n    this._positionStrategy.setOrigin(origin);\r\n    return this;\r\n  }\r\n}\r\n"]}