{"version":3,"file":"connected-position.js","sourceRoot":"","sources":["../../../../../../src/cdk/overlay/position/connected-position.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBvC;;;AAAA;IAUE,gCACE,MAAgC,EAChC,OAAkC,EAC3B,SACA;QADA,YAAO,GAAP,OAAO;QACP,YAAO,GAAP,OAAO;QAEd,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;KAClC;iCAjDH;IAkDC,CAAA;;;;AArBD,kCAqBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BD;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;8BA7EA;IAkFC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AALD,+BAKC;;;;;;;;;;;;;;;IAIC,wCAEW;IAEY;QAFZ,mBAAc,GAAd,cAAc;QAEF,6BAAwB,GAAxB,wBAAwB;KAAyB;;;gBA7D7D,sBAAsB;gBAgDtB,mBAAmB,uBAazB,QAAQ;;yCA1Ff;;SAqFa,8BAA8B;;;;;;;;;;;;;;;;;;;;;;;;;AAc3C,MAAM,mCAAmC,QAAgB,EAAE,KAA4B;IACrF,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;QAChE,MAAM,KAAK,CAAC,gCAA8B,QAAQ,WAAK,KAAK,SAAK;YACrD,6CAAuC,CAAC,CAAC;KACtD;CACF;;;;;;;;AAQD,MAAM,qCAAqC,QAAgB,EAAE,KAA8B;IACzF,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC/D,MAAM,KAAK,CAAC,gCAA8B,QAAQ,WAAK,KAAK,SAAK;YACrD,4CAAsC,CAAC,CAAC;KACrD;CACF","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\r\nimport {Optional} from '@angular/core';\r\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\r\n\r\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\r\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\r\n\r\n\r\n/** A connection point on the origin element. */\r\nexport interface OriginConnectionPosition {\r\n  originX: HorizontalConnectionPos;\r\n  originY: VerticalConnectionPos;\r\n}\r\n\r\n/** A connection point on the overlay element. */\r\nexport interface OverlayConnectionPosition {\r\n  overlayX: HorizontalConnectionPos;\r\n  overlayY: VerticalConnectionPos;\r\n}\r\n\r\n/** The points of the origin element and the overlay element to connect. */\r\nexport class ConnectionPositionPair {\r\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\r\n  originX: HorizontalConnectionPos;\r\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\r\n  originY: VerticalConnectionPos;\r\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\r\n  overlayX: HorizontalConnectionPos;\r\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\r\n  overlayY: VerticalConnectionPos;\r\n\r\n  constructor(\r\n    origin: OriginConnectionPosition,\r\n    overlay: OverlayConnectionPosition,\r\n    public offsetX?: number,\r\n    public offsetY?: number) {\r\n\r\n    this.originX = origin.originX;\r\n    this.originY = origin.originY;\r\n    this.overlayX = overlay.overlayX;\r\n    this.overlayY = overlay.overlayY;\r\n  }\r\n}\r\n\r\n/**\r\n * Set of properties regarding the position of the origin and overlay relative to the viewport\r\n * with respect to the containing Scrollable elements.\r\n *\r\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\r\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n * The overlay and origin are outside view if there is no overlap between their bounding client\r\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n *       -----------                    -----------\r\n *       | outside |                    | clipped |\r\n *       |  view   |              --------------------------\r\n *       |         |              |     |         |        |\r\n *       ----------               |     -----------        |\r\n *  --------------------------    |                        |\r\n *  |                        |    |      Scrollable        |\r\n *  |                        |    |                        |\r\n *  |                        |     --------------------------\r\n *  |      Scrollable        |\r\n *  |                        |\r\n *  --------------------------\r\n *\r\n *  @docs-private\r\n */\r\nexport class ScrollingVisibility {\r\n  isOriginClipped: boolean;\r\n  isOriginOutsideView: boolean;\r\n  isOverlayClipped: boolean;\r\n  isOverlayOutsideView: boolean;\r\n}\r\n\r\n/** The change event emitted by the strategy when a fallback position is used. */\r\nexport class ConnectedOverlayPositionChange {\r\n  constructor(\r\n      /** The position used as a result of this change. */\r\n      public connectionPair: ConnectionPositionPair,\r\n      /** @docs-private */\r\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\r\n}\r\n\r\n/**\r\n * Validates whether a vertical position property matches the expected values.\r\n * @param property Name of the property being validated.\r\n * @param value Value of the property being validated.\r\n * @docs-private\r\n */\r\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\r\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\r\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\r\n                `Expected \"top\", \"bottom\" or \"center\".`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates whether a horizontal position property matches the expected values.\r\n * @param property Name of the property being validated.\r\n * @param value Value of the property being validated.\r\n * @docs-private\r\n */\r\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\r\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\r\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\r\n                `Expected \"start\", \"end\" or \"center\".`);\r\n  }\r\n}\r\n"]}