{"version":3,"file":"overlay-keyboard-dispatcher.js","sourceRoot":"","sources":["../../../../../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EACL,MAAM,EACN,UAAU,EAGV,QAAQ,EACR,QAAQ,GACT,MAAM,eAAe,CAAC;;;;;;;;;IAkBrB,mCAA8B;QAA9B,iBAEC;;;;iCAPiC,EAAE;;;;gCAkDT,UAAC,KAAoB;YAC9C,qBAAM,QAAQ,GAAG,KAAI,CAAC,iBAAiB,CAAC;YAExC,GAAG,CAAC,CAAC,qBAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;;;;;;;gBAO9C,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,0BAA0B,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC/C,QAAQ,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACvC,KAAK,CAAC;iBACP;aACF;SACF;QA3DC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;KAC3B;;;;IAED,+CAAW;;;IAAX;QACE,IAAI,CAAC,OAAO,EAAE,CAAC;KAChB;IAED,8DAA8D;;;;;;IAC9D,uCAAG;;;;;IAAH,UAAI,UAAsB;;QAExB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;;QAGxB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAC7E,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB;QAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACzC;IAED,gEAAgE;;;;;;IAChE,0CAAM;;;;;IAAN,UAAO,UAAsB;QAC3B,qBAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzD,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACzC;;QAGD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;KACF;;;;;IAGO,2CAAO;;;;;QACb,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAChF,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC1B;;;gBAlDJ,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;gDASjB,MAAM,SAAC,QAAQ;;;oCAlC9B;;SA0Ba,yBAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEtC,MAAM,uDACF,UAAqC,EAAE,SAAc;IACvD,MAAM,CAAC,UAAU,IAAI,IAAI,yBAAyB,CAAC,SAAS,CAAC,CAAC;CAC/D;;;;AAGD,MAAM,CAAC,qBAAM,oCAAoC,GAAG;;;IAGlD,OAAO,EAAE,yBAAyB;IAClC,IAAI,EAAE;QACJ,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,yBAAyB,CAAC;;QAE3D,kEAAkE;QAClE,kCAAkC;QAClC,QAA+B;KAChC;IACD,UAAU,EAAE,4CAA4C;CACzD,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {OverlayRef} from '../overlay-ref';\r\n\r\n\r\n/**\r\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\r\n * if any. It maintains a list of attached overlays to determine best suited overlay based\r\n * on event target and order of overlay opens.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayKeyboardDispatcher implements OnDestroy {\r\n\r\n  /** Currently attached overlays in the order they were attached. */\r\n  _attachedOverlays: OverlayRef[] = [];\r\n\r\n  private _document: Document;\r\n  private _isAttached: boolean;\r\n\r\n  constructor(@Inject(DOCUMENT) document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._detach();\r\n  }\r\n\r\n  /** Add a new overlay to the list of attached overlay refs. */\r\n  add(overlayRef: OverlayRef): void {\r\n    // Ensure that we don't get the same overlay multiple times.\r\n    this.remove(overlayRef);\r\n\r\n    // Lazily start dispatcher once first overlay is added\r\n    if (!this._isAttached) {\r\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\r\n      this._isAttached = true;\r\n    }\r\n\r\n    this._attachedOverlays.push(overlayRef);\r\n  }\r\n\r\n  /** Remove an overlay from the list of attached overlay refs. */\r\n  remove(overlayRef: OverlayRef): void {\r\n    const index = this._attachedOverlays.indexOf(overlayRef);\r\n\r\n    if (index > -1) {\r\n      this._attachedOverlays.splice(index, 1);\r\n    }\r\n\r\n    // Remove the global listener once there are no more overlays.\r\n    if (this._attachedOverlays.length === 0) {\r\n      this._detach();\r\n    }\r\n  }\r\n\r\n  /** Detaches the global keyboard event listener. */\r\n  private _detach() {\r\n    if (this._isAttached) {\r\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\r\n      this._isAttached = false;\r\n    }\r\n  }\r\n\r\n  /** Keyboard event listener that will be attached to the body. */\r\n  private _keydownListener = (event: KeyboardEvent) => {\r\n    const overlays = this._attachedOverlays;\r\n\r\n    for (let i = overlays.length - 1; i > -1; i--) {\r\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\r\n      // We want to target the most recent overlay, rather than trying to match where the event came\r\n      // from, because some components might open an overlay, but keep focus on a trigger element\r\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\r\n      // because we don't want overlays that don't handle keyboard events to block the ones below\r\n      // them that do.\r\n      if (overlays[i]._keydownEventSubscriptions > 0) {\r\n        overlays[i]._keydownEvents.next(event);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\r\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\r\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\r\n  // If there is already an OverlayKeyboardDispatcher available, use that.\r\n  // Otherwise, provide a new one.\r\n  provide: OverlayKeyboardDispatcher,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\r\n\r\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\r\n    // of the type expected by Angular\r\n    DOCUMENT as InjectionToken<any>\r\n  ],\r\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n"]}