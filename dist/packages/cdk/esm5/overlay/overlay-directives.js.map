{"version":3,"file":"overlay-directives.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/overlay-directives.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAY,cAAc,EAAC,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAC,MAAM,EAAC,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,cAAc,EAAC,MAAM,qBAAqB,CAAC;AACnD,OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,MAAM,EACN,cAAc,EACd,KAAK,EAGL,QAAQ,EACR,MAAM,EAEN,WAAW,EACX,gBAAgB,GACjB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,YAAY,EAAC,MAAM,MAAM,CAAC;AAClC,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW,CAAC;AAClC,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;;;;AAe/C,qBAAM,mBAAmB,GAAwB;IAC/C;QACE,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE,QAAQ;QACjB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,KAAK;KAChB;IACD;QACE,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE,KAAK;QACd,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,QAAQ;KACnB;IACD;QACE,OAAO,EAAE,KAAK;QACd,OAAO,EAAE,KAAK;QACd,QAAQ,EAAE,KAAK;QACf,QAAQ,EAAE,QAAQ;KACnB;IACD;QACE,OAAO,EAAE,KAAK;QACd,OAAO,EAAE,QAAQ;QACjB,QAAQ,EAAE,KAAK;QACf,QAAQ,EAAE,KAAK;KAChB;CACF,CAAC;;;;AAGF,MAAM,CAAC,qBAAM,qCAAqC,GAC9C,IAAI,cAAc,CAAuB,uCAAuC,CAAC,CAAC;;;;;;AAGtF,MAAM,wDAAwD,OAAgB;IAE5E,MAAM,CAAC,UAAC,MAAuC,IAAK,OAAA,OAAO,CAAC,gBAAgB,CAAC,UAAU,CAAC,MAAM,CAAC,EAA3C,CAA2C,CAAC;CACjG;;;;;;IAWC,0BAEW;QAAA,eAAU,GAAV,UAAU;KAAiB;;gBAPvC,SAAS,SAAC;oBACT,QAAQ,EAAE,4DAA4D;oBACtE,QAAQ,EAAE,kBAAkB;iBAC7B;;;;gBA1EC,UAAU;;2BAdZ;;SAyFa,gBAAgB;;;;;;;;;;;;;;;;;;;;IAyH3B,oEAAoE;IAEpE,6BACY,UACR,WAA6B,EAC7B,gBAAkC,EACqB,iBACnC;QAJZ,aAAQ,GAAR,QAAQ;QAGuC,oBAAe,GAAf,eAAe;QAClD,SAAI,GAAJ,IAAI;4BA9GL,KAAK;6BACJ,KAAK;8BACJ,KAAK;mCACA,KAAK;qBACnB,KAAK;qCACW,YAAY,CAAC,KAAK;;;;8BAiDmB,CAAC;;;;8BAIlE,IAAI,CAAC,eAAe,EAAE;;;;oBAGwB,KAAK;;;;6BA4B7B,IAAI,YAAY,EAAc;;;;8BAG7B,IAAI,YAAY,EAAkC;;;;sBAG1D,IAAI,YAAY,EAAQ;;;;sBAGxB,IAAI,YAAY,EAAQ;;;;8BAGhB,IAAI,YAAY,EAAiB;QAU1D,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;KAC1E;0BA9FG,wCAAO;;;;;sBAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;;;;;QAC7C,UAAY,OAAe;YACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YAExB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACpC;SACF;;;;0BAIG,wCAAO;;;;;sBAAK,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;;;;;QACrC,UAAY,OAAe;YACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YAExB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACpC;SACF;;;;0BA6BG,4CAAW;;;;;sBAAK,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;;;;;QAC7C,UAAgB,KAAU,IAAI,IAAI,CAAC,YAAY,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;0BAI7E,6CAAY;;;;;sBAAK,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;;;;;QAC/C,UAAiB,KAAU,IAAI,IAAI,CAAC,aAAa,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;0BAI/E,kDAAiB;;;;;sBAAK,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC;;;;;QAC1D,UAAsB,KAAc,IAAI,IAAI,CAAC,mBAAmB,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;0BAI9F,8CAAa;;;;;sBAAK,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;;;;;QACjD,UAAkB,KAAc,IAAI,IAAI,CAAC,cAAc,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;0BAIrF,qCAAI;;;;;sBAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;;;;;QAC/B,UAAS,KAAc,IAAI,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;IA6BvE,sBAAI,2CAAU;QADd,wCAAwC;;;;;QACxC;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;SACzB;;;OAAA;IAGD,sBAAI,oCAAG;QADP,sCAAsC;;;;;QACtC;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;SAC5C;;;OAAA;;;;IAED,yCAAW;;;IAAX;QACE,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;;;;;IAED,yCAAW;;;;IAAX,UAAY,OAAsB;QAChC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC9C;YAED,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACtD;YAED,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAEjD,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACd,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;iBACxB;aACF;SACF;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;SAC3D;KACF;;;;;IAGO,4CAAc;;;;;QACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,SAAS,GAAG,mBAAmB,CAAC;SACtC;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;;;;;;IAIvD,0CAAY;;;;;QAClB,qBAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACzE,qBAAM,aAAa,GAAG,IAAI,aAAa,CAAC;YACtC,SAAS,EAAE,IAAI,CAAC,IAAI;YACpB,gBAAgB,kBAAA;YAChB,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SAClC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACrC,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;SACpC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;YACzC,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;SACxC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3C,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;SAC1C;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvB,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;SAClD;QAED,MAAM,CAAC,aAAa,CAAC;;;;;;IAIf,qDAAuB;;;;;;QAC7B,qBAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;aACtC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;aAC3C,sBAAsB,CAAC,IAAI,CAAC,iBAAiB,CAAC;aAC9C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;aACnB,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC;aACrC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC;aACvC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEzC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC7B,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAA3B,CAA2B,CAAC,CAAC;QAErE,MAAM,CAAC,QAAQ,CAAC;;;;;;;;IAOV,2CAAa;;;;;;cAAC,gBAAmD;;QACvE,qBAAM,SAAS,GAAwB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,GAAG;YAAI,OAAA,CAAC;gBAChE,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,QAAQ,EAAE,GAAG,CAAC,QAAQ;gBACtB,QAAQ,EAAE,GAAG,CAAC,QAAQ;gBACtB,OAAO,EAAE,GAAG,CAAC,OAAO,IAAI,KAAI,CAAC,OAAO;gBACpC,OAAO,EAAE,GAAG,CAAC,OAAO,IAAI,KAAI,CAAC,OAAO;aACrC,CAAC;QAP+D,CAO/D,CAAC,CAAC;QAEJ,gBAAgB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;;;;;;IAIpC,4CAAc;;;;;;QACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,cAAc,EAAE,CAAC;cAEtB,IAAI,CAAC,WAAW,GAAE,aAAa,GAAG,SAAS,CAAC,UAAC,KAAoB;gBAC/D,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAEhC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC;oBAC7B,KAAI,CAAC,cAAc,EAAE,CAAC;iBACvB;aACF;SACF;QAAC,IAAI,CAAC,CAAC;;YAEN,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC1B,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,SAAS,EAAE,IAAI,CAAC,SAAS;aAC1B,CAAC,CAAC;SACJ;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SACpB;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,UAAA,KAAK;gBAC3E,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAChC,CAAC,CAAC;SACJ;;;;;;IAIK,4CAAc;;;;;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SACpB;QAED,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;;;;;;IAInC,6CAAe;;;;;QACrB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;SAC5B;QAED,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;;;gBA5R5C,SAAS,SAAC;oBACT,QAAQ,EAAE,qEAAqE;oBAC/E,QAAQ,EAAE,qBAAqB;iBAChC;;;;gBA3EO,OAAO;gBAJb,WAAW;gBACX,gBAAgB;gDA+LX,MAAM,SAAC,qCAAqC;gBAhNhC,cAAc,uBAiN1B,QAAQ;;;2BAnGZ,KAAK,SAAC,2BAA2B;8BAGjC,KAAK,SAAC,8BAA8B;4BAGpC,KAAK,SAAC,4BAA4B;4BAWlC,KAAK,SAAC,4BAA4B;0BAWlC,KAAK,SAAC,0BAA0B;2BAGhC,KAAK,SAAC,2BAA2B;6BAGjC,KAAK,SAAC,6BAA6B;8BAGnC,KAAK,SAAC,8BAA8B;kCAGpC,KAAK,SAAC,kCAAkC;mCAGxC,KAAK,SAAC,mCAAmC;mCAGzC,KAAK,SAAC,mCAAmC;yBAIzC,KAAK,SAAC,yBAAyB;gCAG/B,KAAK,SAAC,gCAAgC;iCAKtC,KAAK,SAAC,iCAAiC;sCAKvC,KAAK,SAAC,uCAAuC;kCAK7C,KAAK,SAAC,kCAAkC;yBAKxC,KAAK,SAAC,yBAAyB;kCAK/B,MAAM;mCAGN,MAAM;2BAGN,MAAM;2BAGN,MAAM;mCAGN,MAAM;;8BAhNT;;SAwGa,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8RhC,MAAM,iEAAiE,OAAgB;IAErF,MAAM,CAAC,cAAM,OAAA,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,EAArC,CAAqC,CAAC;CACpD;;;;AAGD,MAAM,CAAC,qBAAM,8CAA8C,GAAG;IAC5D,OAAO,EAAE,qCAAqC;IAC9C,IAAI,EAAE,CAAC,OAAO,CAAC;IACf,UAAU,EAAE,sDAAsD;CACnE,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {Overlay} from './overlay';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\r\nimport {\r\n  ConnectedPosition,\r\n  FlexibleConnectedPositionStrategy,\r\n} from './position/flexible-connected-position-strategy';\r\nimport {\r\n  RepositionScrollStrategy,\r\n  RepositionScrollStrategyConfig,\r\n  ScrollStrategy,\r\n} from './scroll/index';\r\n\r\n\r\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\r\nconst defaultPositionList: ConnectedPosition[] = [\r\n  {\r\n    originX: 'start',\r\n    originY: 'bottom',\r\n    overlayX: 'start',\r\n    overlayY: 'top'\r\n  },\r\n  {\r\n    originX: 'start',\r\n    originY: 'top',\r\n    overlayX: 'start',\r\n    overlayY: 'bottom'\r\n  },\r\n  {\r\n    originX: 'end',\r\n    originY: 'top',\r\n    overlayX: 'end',\r\n    overlayY: 'bottom'\r\n  },\r\n  {\r\n    originX: 'end',\r\n    originY: 'bottom',\r\n    overlayX: 'end',\r\n    overlayY: 'top'\r\n  }\r\n];\r\n\r\n/** Injection token that determines the scroll handling while the connected overlay is open. */\r\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\r\n  () => ScrollStrategy {\r\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\r\n}\r\n\r\n/**\r\n * Directive applied to an element to make it usable as an origin for an Overlay using a\r\n * ConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\r\n  exportAs: 'cdkOverlayOrigin',\r\n})\r\nexport class CdkOverlayOrigin {\r\n  constructor(\r\n      /** Reference to the element on which the directive is applied. */\r\n      public elementRef: ElementRef) { }\r\n}\r\n\r\n\r\n/**\r\n * Directive to facilitate declarative creation of an\r\n * Overlay using a FlexibleConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\r\n  exportAs: 'cdkConnectedOverlay'\r\n})\r\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\r\n  private _overlayRef: OverlayRef;\r\n  private _templatePortal: TemplatePortal;\r\n  private _hasBackdrop = false;\r\n  private _lockPosition = false;\r\n  private _growAfterOpen = false;\r\n  private _flexibleDimensions = false;\r\n  private _push = false;\r\n  private _backdropSubscription = Subscription.EMPTY;\r\n  private _offsetX: number;\r\n  private _offsetY: number;\r\n  private _position: FlexibleConnectedPositionStrategy;\r\n\r\n  /** Origin for the connected overlay. */\r\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\r\n\r\n  /** Registered connected position pairs. */\r\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\r\n\r\n  /** The offset in pixels for the overlay connection point on the x-axis */\r\n  @Input('cdkConnectedOverlayOffsetX')\r\n  get offsetX(): number { return this._offsetX; }\r\n  set offsetX(offsetX: number) {\r\n    this._offsetX = offsetX;\r\n\r\n    if (this._position) {\r\n      this._setPositions(this._position);\r\n    }\r\n  }\r\n\r\n  /** The offset in pixels for the overlay connection point on the y-axis */\r\n  @Input('cdkConnectedOverlayOffsetY')\r\n  get offsetY() { return this._offsetY; }\r\n  set offsetY(offsetY: number) {\r\n    this._offsetY = offsetY;\r\n\r\n    if (this._position) {\r\n      this._setPositions(this._position);\r\n    }\r\n  }\r\n\r\n  /** The width of the overlay panel. */\r\n  @Input('cdkConnectedOverlayWidth') width: number | string;\r\n\r\n  /** The height of the overlay panel. */\r\n  @Input('cdkConnectedOverlayHeight') height: number | string;\r\n\r\n  /** The min width of the overlay panel. */\r\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\r\n\r\n  /** The min height of the overlay panel. */\r\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\r\n\r\n  /** The custom class to be set on the backdrop element. */\r\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\r\n\r\n  /** Margin between the overlay and the viewport edges. */\r\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\r\n\r\n  /** Strategy to be used when handling scroll events while the overlay is open. */\r\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy =\r\n      this._scrollStrategy();\r\n\r\n  /** Whether the overlay is open. */\r\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\r\n\r\n  /** Whether or not the overlay should attach a backdrop. */\r\n  @Input('cdkConnectedOverlayHasBackdrop')\r\n  get hasBackdrop() { return this._hasBackdrop; }\r\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\r\n\r\n  /** Whether or not the overlay should be locked when scrolling. */\r\n  @Input('cdkConnectedOverlayLockPosition')\r\n  get lockPosition() { return this._lockPosition; }\r\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  @Input('cdkConnectedOverlayFlexibleDimensions')\r\n  get flexibleDiemsions() { return this._flexibleDimensions; }\r\n  set flexibleDiemsions(value: boolean) { this._flexibleDimensions = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\r\n  @Input('cdkConnectedOverlayGrowAfterOpen')\r\n  get growAfterOpen() { return this._growAfterOpen; }\r\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n  @Input('cdkConnectedOverlayPush')\r\n  get push() { return this._push; }\r\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\r\n\r\n  /** Event emitted when the backdrop is clicked. */\r\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\r\n\r\n  /** Event emitted when the position has changed. */\r\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\r\n\r\n  /** Event emitted when the overlay has been attached. */\r\n  @Output() attach = new EventEmitter<void>();\r\n\r\n  /** Event emitted when the overlay has been detached. */\r\n  @Output() detach = new EventEmitter<void>();\r\n\r\n  /** Emits when there are keyboard events that are targeted at the overlay. */\r\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\r\n\r\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      templateRef: TemplateRef<any>,\r\n      viewContainerRef: ViewContainerRef,\r\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\r\n      @Optional() private _dir: Directionality) {\r\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\r\n  }\r\n\r\n  /** The associated overlay reference. */\r\n  get overlayRef(): OverlayRef {\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /** The element's layout direction. */\r\n  get dir(): Direction {\r\n    return this._dir ? this._dir.value : 'ltr';\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyOverlay();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (this._position) {\r\n      if (changes['positions']) {\r\n        this._position.withPositions(this.positions);\r\n      }\r\n\r\n      if (changes['lockPosition']) {\r\n        this._position.withLockedPosition(this.lockPosition);\r\n      }\r\n\r\n      if (changes['origin']) {\r\n        this._position.setOrigin(this.origin.elementRef);\r\n\r\n        if (this.open) {\r\n          this._position.apply();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (changes['open']) {\r\n      this.open ? this._attachOverlay() : this._detachOverlay();\r\n    }\r\n  }\r\n\r\n  /** Creates an overlay */\r\n  private _createOverlay() {\r\n    if (!this.positions || !this.positions.length) {\r\n      this.positions = defaultPositionList;\r\n    }\r\n\r\n    this._overlayRef = this._overlay.create(this._buildConfig());\r\n  }\r\n\r\n  /** Builds the overlay config based on the directive's inputs */\r\n  private _buildConfig(): OverlayConfig {\r\n    const positionStrategy = this._position = this._createPositionStrategy();\r\n    const overlayConfig = new OverlayConfig({\r\n      direction: this._dir,\r\n      positionStrategy,\r\n      scrollStrategy: this.scrollStrategy,\r\n      hasBackdrop: this.hasBackdrop\r\n    });\r\n\r\n    if (this.width || this.width === 0) {\r\n      overlayConfig.width = this.width;\r\n    }\r\n\r\n    if (this.height || this.height === 0) {\r\n      overlayConfig.height = this.height;\r\n    }\r\n\r\n    if (this.minWidth || this.minWidth === 0) {\r\n      overlayConfig.minWidth = this.minWidth;\r\n    }\r\n\r\n    if (this.minHeight || this.minHeight === 0) {\r\n      overlayConfig.minHeight = this.minHeight;\r\n    }\r\n\r\n    if (this.backdropClass) {\r\n      overlayConfig.backdropClass = this.backdropClass;\r\n    }\r\n\r\n    return overlayConfig;\r\n  }\r\n\r\n  /** Returns the position strategy of the overlay to be set on the overlay config */\r\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\r\n    const strategy = this._overlay.position()\r\n      .flexibleConnectedTo(this.origin.elementRef)\r\n      .withFlexibleDimensions(this.flexibleDiemsions)\r\n      .withPush(this.push)\r\n      .withGrowAfterOpen(this.growAfterOpen)\r\n      .withViewportMargin(this.viewportMargin)\r\n      .withLockedPosition(this.lockPosition);\r\n\r\n    this._setPositions(strategy);\r\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\r\n\r\n    return strategy;\r\n  }\r\n\r\n  /**\r\n   * Sets the primary and fallback positions of a positions strategy,\r\n   * based on the current directive inputs.\r\n   */\r\n  private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\r\n    const positions: ConnectedPosition[] = this.positions.map(pos => ({\r\n      originX: pos.originX,\r\n      originY: pos.originY,\r\n      overlayX: pos.overlayX,\r\n      overlayY: pos.overlayY,\r\n      offsetX: pos.offsetX || this.offsetX,\r\n      offsetY: pos.offsetY || this.offsetY\r\n    }));\r\n\r\n    positionStrategy.withPositions(positions);\r\n  }\r\n\r\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\r\n  private _attachOverlay() {\r\n    if (!this._overlayRef) {\r\n      this._createOverlay();\r\n\r\n      this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n        this.overlayKeydown.next(event);\r\n\r\n        if (event.keyCode === ESCAPE) {\r\n          this._detachOverlay();\r\n        }\r\n      });\r\n    } else {\r\n      // Update the overlay size, in case the directive's inputs have changed\r\n      this._overlayRef.updateSize({\r\n        width: this.width,\r\n        minWidth: this.minWidth,\r\n        height: this.height,\r\n        minHeight: this.minHeight,\r\n      });\r\n    }\r\n\r\n    if (!this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._templatePortal);\r\n      this.attach.emit();\r\n    }\r\n\r\n    if (this.hasBackdrop) {\r\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\r\n        this.backdropClick.emit(event);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\r\n  private _detachOverlay() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.detach();\r\n      this.detach.emit();\r\n    }\r\n\r\n    this._backdropSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Destroys the overlay created by this directive. */\r\n  private _destroyOverlay() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n    }\r\n\r\n    this._backdropSubscription.unsubscribe();\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private */\r\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n"]}