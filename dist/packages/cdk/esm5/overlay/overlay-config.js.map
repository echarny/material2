{"version":3,"file":"overlay-config.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/overlay-config.ts"],"names":[],"mappings":";;;;;;;;;;;AAWA,OAAO,EAAC,kBAAkB,EAAC,MAAM,+BAA+B,CAAC;;;;AAIjE;;;AAAA;IAwCE,uBAAY,MAAsB;QAAlC,iBAMC;;;;8BAzCiC,IAAI,kBAAkB,EAAE;;;;0BAGzB,EAAE;;;;2BAGX,KAAK;;;;6BAGO,2BAA2B;QA2B7D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;iBAChB,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,WAAW,EAAlC,CAAkC,CAAC;iBACjD,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,EAAvB,CAAuB,CAAC,CAAC;SAC5C;KACF;wBA7DH;IA8DC,CAAA;;;;AA/CD,yBA+CC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position/position-strategy';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ScrollStrategy} from './scroll/scroll-strategy';\r\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\r\n\r\n\r\n/** Initial configuration used when creating an overlay. */\r\nexport class OverlayConfig {\r\n  /** Strategy with which to position the overlay. */\r\n  positionStrategy?: PositionStrategy;\r\n\r\n  /** Strategy to be used when handling scroll events while the overlay is open. */\r\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\r\n\r\n  /** Custom class to add to the overlay pane. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the overlay has a backdrop. */\r\n  hasBackdrop?: boolean = false;\r\n\r\n  /** Custom class to add to the backdrop */\r\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\r\n\r\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  width?: number | string;\r\n\r\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  height?: number | string;\r\n\r\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  minWidth?: number | string;\r\n\r\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  minHeight?: number | string;\r\n\r\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  maxWidth?: number | string;\r\n\r\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  maxHeight?: number | string;\r\n\r\n  /**\r\n   * Direction of the text in the overlay panel. If a `Directionality` instance\r\n   * is passed in, the overlay will handle changes to its value automatically.\r\n   */\r\n  direction?: Direction | Directionality;\r\n\r\n  constructor(config?: OverlayConfig) {\r\n    if (config) {\r\n      Object.keys(config)\r\n        .filter(key => typeof config[key] !== 'undefined')\r\n        .forEach(key => this[key] = config[key]);\r\n    }\r\n  }\r\n}\r\n"]}