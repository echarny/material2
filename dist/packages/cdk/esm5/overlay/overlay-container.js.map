{"version":3,"file":"overlay-container.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/overlay-container.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EACL,MAAM,EACN,UAAU,EAGV,QAAQ,EACR,QAAQ,GACT,MAAM,eAAe,CAAC;;;;;;;IAQrB,0BAAwC;QAAA,cAAS,GAAT,SAAS;KAAS;;;;IAE1D,sCAAW;;;IAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACvE;KACF;IAED;;;;;OAKG;;;;;;;IACH,8CAAmB;;;;;;IAAnB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAAE;QACzD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;KAC/B;IAED;;;OAGG;;;;;;IACO,2CAAgB;;;;;IAA1B;QACE,qBAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEtD,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC3C,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;KACpC;;gBAjCF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;gDAIjB,MAAM,SAAC,QAAQ;;;2BAxB9B;;SAqBa,gBAAgB;;;;;;;;;;;;;;;;;;;;AAqC7B,MAAM,6CAA6C,eAAiC,EAClF,SAAc;IACd,MAAM,CAAC,eAAe,IAAI,IAAI,gBAAgB,CAAC,SAAS,CAAC,CAAC;CAC3D;;;;AAGD,MAAM,CAAC,qBAAM,0BAA0B,GAAG;;IAExC,OAAO,EAAE,gBAAgB;IACzB,IAAI,EAAE;QACJ,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,gBAAgB,CAAC;0BAClD,QAA+B,CAAC,+DAA+D;;KAChG;IACD,UAAU,EAAE,kCAAkC;CAC/C,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\n\r\n\r\n/** Container inside which all overlays will render. */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayContainer implements OnDestroy {\r\n  protected _containerElement: HTMLElement;\r\n\r\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\r\n\r\n  ngOnDestroy() {\r\n    if (this._containerElement && this._containerElement.parentNode) {\r\n      this._containerElement.parentNode.removeChild(this._containerElement);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method returns the overlay container element. It will lazily\r\n   * create the element the first time  it is called to facilitate using\r\n   * the container in non-browser environments.\r\n   * @returns the container element\r\n   */\r\n  getContainerElement(): HTMLElement {\r\n    if (!this._containerElement) { this._createContainer(); }\r\n    return this._containerElement;\r\n  }\r\n\r\n  /**\r\n   * Create the overlay container element, which is simply a div\r\n   * with the 'cdk-overlay-container' class on the document body.\r\n   */\r\n  protected _createContainer(): void {\r\n    const container = this._document.createElement('div');\r\n\r\n    container.classList.add('cdk-overlay-container');\r\n    this._document.body.appendChild(container);\r\n    this._containerElement = container;\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\r\n  _document: any) {\r\n  return parentContainer || new OverlayContainer(_document);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 7.0.0 */\r\nexport const OVERLAY_CONTAINER_PROVIDER = {\r\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\r\n  provide: OverlayContainer,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), OverlayContainer],\r\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\r\n  ],\r\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\r\n};\r\n"]}