{"version":3,"file":"overlay-ref.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/overlay-ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\r\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\r\nimport {Observable, Subject, merge} from 'rxjs';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\r\nimport {OverlayReference} from './overlay-reference';\r\n\r\n\r\n/** An object where all of its properties cannot be written. */\r\nexport type ImmutableObject<T> = {\r\n  readonly [P in keyof T]: T[P];\r\n};\r\n\r\n/**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nexport class OverlayRef implements PortalOutlet, OverlayReference {\r\n  private _backdropElement: HTMLElement | null = null;\r\n  private _backdropClick: Subject<MouseEvent> = new Subject();\r\n  private _attachments = new Subject<void>();\r\n  private _detachments = new Subject<void>();\r\n\r\n  /**\r\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\r\n   * the `_host` to its original position in the DOM when it gets re-attached.\r\n   */\r\n  private _previousHostParent: HTMLElement;\r\n  private _keydownEventsObservable: Observable<KeyboardEvent> = Observable.create(observer => {\r\n    const subscription = this._keydownEvents.subscribe(observer);\r\n    this._keydownEventSubscriptions++;\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      this._keydownEventSubscriptions--;\r\n    };\r\n  });\r\n\r\n  /** Stream of keydown events dispatched to this overlay. */\r\n  _keydownEvents = new Subject<KeyboardEvent>();\r\n\r\n  /** Amount of subscriptions to the keydown events. */\r\n  _keydownEventSubscriptions = 0;\r\n\r\n  constructor(\r\n      private _portalOutlet: PortalOutlet,\r\n      private _host: HTMLElement,\r\n      private _pane: HTMLElement,\r\n      private _config: ImmutableObject<OverlayConfig>,\r\n      private _ngZone: NgZone,\r\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\r\n      private _document: Document) {\r\n\r\n    if (_config.scrollStrategy) {\r\n      _config.scrollStrategy.attach(this);\r\n    }\r\n  }\r\n\r\n  /** The overlay's HTML element */\r\n  get overlayElement(): HTMLElement {\r\n    return this._pane;\r\n  }\r\n\r\n  /** The overlay's backdrop HTML element. */\r\n  get backdropElement(): HTMLElement | null {\r\n    return this._backdropElement;\r\n  }\r\n\r\n  /**\r\n   * Wrapper around the panel element. Can be used for advanced\r\n   * positioning where a wrapper with specific styling is\r\n   * required around the overlay pane.\r\n   */\r\n  get hostElement(): HTMLElement {\r\n    return this._host;\r\n  }\r\n\r\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\r\n  attach(portal: any): any;\r\n\r\n  /**\r\n   * Attaches content, given via a Portal, to the overlay.\r\n   * If the overlay is configured to have a backdrop, it will be created.\r\n   *\r\n   * @param portal Portal instance to which to attach the overlay.\r\n   * @returns The portal attachment result.\r\n   */\r\n  attach(portal: Portal<any>): any {\r\n    let attachResult = this._portalOutlet.attach(portal);\r\n\r\n    if (this._config.positionStrategy) {\r\n      this._config.positionStrategy.attach(this);\r\n    }\r\n\r\n    // Update the pane element with the given configuration.\r\n    if (!this._host.parentElement && this._previousHostParent) {\r\n      this._previousHostParent.appendChild(this._host);\r\n    }\r\n\r\n    this._updateStackingOrder();\r\n    this._updateElementSize();\r\n    this._updateElementDirection();\r\n\r\n    if (this._config.scrollStrategy) {\r\n      this._config.scrollStrategy.enable();\r\n    }\r\n\r\n    // Update the position once the zone is stable so that the overlay will be fully rendered\r\n    // before attempting to position it, as the position may depend on the size of the rendered\r\n    // content.\r\n    this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        // The overlay could've been detached before the zone has stabilized.\r\n        if (this.hasAttached()) {\r\n          this.updatePosition();\r\n        }\r\n      });\r\n\r\n    // Enable pointer events for the overlay pane element.\r\n    this._togglePointerEvents(true);\r\n\r\n    if (this._config.hasBackdrop) {\r\n      this._attachBackdrop();\r\n    }\r\n\r\n    if (this._config.panelClass) {\r\n      this._toggleClasses(this._pane, this._config.panelClass, true);\r\n    }\r\n\r\n    // Only emit the `attachments` event once all other setup is done.\r\n    this._attachments.next();\r\n\r\n    // Track this overlay by the keyboard dispatcher\r\n    this._keyboardDispatcher.add(this);\r\n\r\n    return attachResult;\r\n  }\r\n\r\n  /**\r\n   * Detaches an overlay from a portal.\r\n   * @returns The portal detachment result.\r\n   */\r\n  detach(): any {\r\n    if (!this.hasAttached()) {\r\n      return;\r\n    }\r\n\r\n    this.detachBackdrop();\r\n\r\n    // When the overlay is detached, the pane element should disable pointer events.\r\n    // This is necessary because otherwise the pane element will cover the page and disable\r\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\r\n    this._togglePointerEvents(false);\r\n\r\n    if (this._config.positionStrategy && this._config.positionStrategy.detach) {\r\n      this._config.positionStrategy.detach();\r\n    }\r\n\r\n    if (this._config.scrollStrategy) {\r\n      this._config.scrollStrategy.disable();\r\n    }\r\n\r\n    if (this._config.panelClass) {\r\n      this._toggleClasses(this._pane, this._config.panelClass, false);\r\n    }\r\n\r\n    const detachmentResult = this._portalOutlet.detach();\r\n\r\n    // Only emit after everything is detached.\r\n    this._detachments.next();\r\n\r\n    // Remove this overlay from keyboard dispatcher tracking.\r\n    this._keyboardDispatcher.remove(this);\r\n\r\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets rendered,\r\n    // even though it's transparent and unclickable. We can't remove the host here immediately,\r\n    // because the overlay pane's content might still be animating. This stream helps us avoid\r\n    // interrupting the animation by waiting for the pane to become empty.\r\n    const subscription = this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(takeUntil(merge(this._attachments, this._detachments)))\r\n      .subscribe(() => {\r\n        // Needs a couple of checks for the pane and host, because\r\n        // they may have been removed by the time the zone stabilizes.\r\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\r\n          if (this._host && this._host.parentElement) {\r\n            this._previousHostParent = this._host.parentElement;\r\n            this._previousHostParent.removeChild(this._host);\r\n          }\r\n\r\n          subscription.unsubscribe();\r\n        }\r\n      });\r\n\r\n    return detachmentResult;\r\n  }\r\n\r\n  /** Cleans up the overlay from the DOM. */\r\n  dispose(): void {\r\n    const isAttached = this.hasAttached();\r\n\r\n    if (this._config.positionStrategy) {\r\n      this._config.positionStrategy.dispose();\r\n    }\r\n\r\n    if (this._config.scrollStrategy) {\r\n      this._config.scrollStrategy.disable();\r\n    }\r\n\r\n    this.detachBackdrop();\r\n    this._keyboardDispatcher.remove(this);\r\n    this._portalOutlet.dispose();\r\n    this._attachments.complete();\r\n    this._backdropClick.complete();\r\n    this._keydownEvents.complete();\r\n\r\n    if (this._host && this._host.parentNode) {\r\n      this._host.parentNode.removeChild(this._host);\r\n      this._host = null!;\r\n    }\r\n\r\n    this._previousHostParent = this._pane = null!;\r\n\r\n    if (isAttached) {\r\n      this._detachments.next();\r\n    }\r\n\r\n    this._detachments.complete();\r\n  }\r\n\r\n  /** Whether the overlay has attached content. */\r\n  hasAttached(): boolean {\r\n    return this._portalOutlet.hasAttached();\r\n  }\r\n\r\n  /** Gets an observable that emits when the backdrop has been clicked. */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._backdropClick.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been attached. */\r\n  attachments(): Observable<void> {\r\n    return this._attachments.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been detached. */\r\n  detachments(): Observable<void> {\r\n    return this._detachments.asObservable();\r\n  }\r\n\r\n  /** Gets an observable of keydown events targeted to this overlay. */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._keydownEventsObservable;\r\n  }\r\n\r\n  /** Gets the the current overlay configuration, which is immutable. */\r\n  getConfig(): OverlayConfig {\r\n    return this._config;\r\n  }\r\n\r\n  /** Updates the position of the overlay based on the position strategy. */\r\n  updatePosition() {\r\n    if (this._config.positionStrategy) {\r\n      this._config.positionStrategy.apply();\r\n    }\r\n  }\r\n\r\n  /** Update the size properties of the overlay. */\r\n  updateSize(sizeConfig: OverlaySizeConfig) {\r\n    this._config = {...this._config, ...sizeConfig};\r\n    this._updateElementSize();\r\n  }\r\n\r\n  /** Sets the LTR/RTL direction for the overlay. */\r\n  setDirection(dir: Direction | Directionality) {\r\n    this._config = {...this._config, direction: dir};\r\n    this._updateElementDirection();\r\n  }\r\n\r\n  /**\r\n   * Returns the layout direction of the overlay panel.\r\n   */\r\n  getDirection(): Direction {\r\n    const direction = this._config.direction;\r\n\r\n    if (!direction) {\r\n      return 'ltr';\r\n    }\r\n\r\n    return typeof direction === 'string' ? direction : direction.value;\r\n  }\r\n\r\n  /** Updates the text direction of the overlay panel. */\r\n  private _updateElementDirection() {\r\n    this._host.setAttribute('dir', this.getDirection());\r\n  }\r\n\r\n  /** Updates the size of the overlay element based on the overlay config. */\r\n  private _updateElementSize() {\r\n    const style = this._pane.style;\r\n\r\n    style.width = coerceCssPixelValue(this._config.width);\r\n    style.height = coerceCssPixelValue(this._config.height);\r\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\r\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\r\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\r\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\r\n  }\r\n\r\n  /** Toggles the pointer events for the overlay pane element. */\r\n  private _togglePointerEvents(enablePointer: boolean) {\r\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\r\n  }\r\n\r\n  /** Attaches a backdrop for this overlay. */\r\n  private _attachBackdrop() {\r\n    const showingClass = 'cdk-overlay-backdrop-showing';\r\n\r\n    this._backdropElement = this._document.createElement('div');\r\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\r\n\r\n    if (this._config.backdropClass) {\r\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\r\n    }\r\n\r\n    // Insert the backdrop before the pane in the DOM order,\r\n    // in order to handle stacked overlays properly.\r\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\r\n\r\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\r\n    // action desired when such a click occurs (usually closing the overlay).\r\n    this._backdropElement.addEventListener('click',\r\n        (event: MouseEvent) => this._backdropClick.next(event));\r\n\r\n    // Add class to fade-in the backdrop after one frame.\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => {\r\n          if (this._backdropElement) {\r\n            this._backdropElement.classList.add(showingClass);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      this._backdropElement.classList.add(showingClass);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the stacking order of the element, moving it to the top if necessary.\r\n   * This is required in cases where one overlay was detached, while another one,\r\n   * that should be behind it, was destroyed. The next time both of them are opened,\r\n   * the stacking will be wrong, because the detached element's pane will still be\r\n   * in its original DOM position.\r\n   */\r\n  private _updateStackingOrder() {\r\n    if (this._host.nextSibling) {\r\n      this._host.parentNode!.appendChild(this._host);\r\n    }\r\n  }\r\n\r\n  /** Detaches the backdrop (if any) associated with the overlay. */\r\n  detachBackdrop(): void {\r\n    let backdropToDetach = this._backdropElement;\r\n\r\n    if (backdropToDetach) {\r\n      let timeoutId: number;\r\n      let finishDetach = () => {\r\n        // It may not be attached to anything in certain cases (e.g. unit tests).\r\n        if (backdropToDetach && backdropToDetach.parentNode) {\r\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\r\n        }\r\n\r\n        // It is possible that a new portal has been attached to this overlay since we started\r\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\r\n        // is still the same instance that we started to remove.\r\n        if (this._backdropElement == backdropToDetach) {\r\n          this._backdropElement = null;\r\n        }\r\n\r\n        clearTimeout(timeoutId);\r\n      };\r\n\r\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\r\n\r\n      if (this._config.backdropClass) {\r\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\r\n      }\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        backdropToDetach!.addEventListener('transitionend', finishDetach);\r\n      });\r\n\r\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\r\n      // In this case we make it unclickable and we try to remove it after a delay.\r\n      backdropToDetach.style.pointerEvents = 'none';\r\n\r\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\r\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\r\n      // either async or fakeAsync.\r\n      timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\r\n    }\r\n  }\r\n\r\n  /** Toggles a single CSS class or an array of classes on an element. */\r\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\r\n    const classList = element.classList;\r\n\r\n    coerceArray(cssClasses).forEach(cssClass => {\r\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\r\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/** Size properties for an overlay. */\r\nexport interface OverlaySizeConfig {\r\n  width?: number | string;\r\n  height?: number | string;\r\n  minWidth?: number | string;\r\n  minHeight?: number | string;\r\n  maxWidth?: number | string;\r\n  maxHeight?: number | string;\r\n}\r\n"]}