{"version":3,"file":"block-scroll-strategy.js","sourceRoot":"","sources":["../../../../../../src/cdk/overlay/scroll/block-scroll-strategy.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollStrategy} from './scroll-strategy';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\r\n\r\n/**\r\n * Strategy that will prevent the user from scrolling while the overlay is visible.\r\n */\r\nexport class BlockScrollStrategy implements ScrollStrategy {\r\n  private _previousHTMLStyles = { top: '', left: '' };\r\n  private _previousScrollPosition: { top: number, left: number };\r\n  private _isEnabled = false;\r\n  private _document: Document;\r\n\r\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach() { }\r\n\r\n  /** Blocks page-level scroll while the attached overlay is open. */\r\n  enable() {\r\n    if (this._canBeEnabled()) {\r\n      const root = this._document.documentElement;\r\n\r\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n      // Cache the previous inline styles in case the user had set them.\r\n      this._previousHTMLStyles.left = root.style.left || '';\r\n      this._previousHTMLStyles.top = root.style.top || '';\r\n\r\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\r\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\r\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\r\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\r\n      root.classList.add('cdk-global-scrollblock');\r\n      this._isEnabled = true;\r\n    }\r\n  }\r\n\r\n  /** Unblocks page-level scroll while the attached overlay is open. */\r\n  disable() {\r\n    if (this._isEnabled) {\r\n      const html = this._document.documentElement;\r\n      const body = this._document.body;\r\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\r\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\r\n\r\n      this._isEnabled = false;\r\n\r\n      html.style.left = this._previousHTMLStyles.left;\r\n      html.style.top = this._previousHTMLStyles.top;\r\n      html.classList.remove('cdk-global-scrollblock');\r\n\r\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\r\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\r\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\r\n\r\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\r\n\r\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior;\r\n      body.style['scrollBehavior'] = previousBodyScrollBehavior;\r\n    }\r\n  }\r\n\r\n  private _canBeEnabled(): boolean {\r\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\r\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\r\n    // scrolling multiple times.\r\n    const html = this._document.documentElement;\r\n\r\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\r\n      return false;\r\n    }\r\n\r\n    const body = this._document.body;\r\n    const viewport = this._viewportRuler.getViewportSize();\r\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\r\n  }\r\n}\r\n"]}