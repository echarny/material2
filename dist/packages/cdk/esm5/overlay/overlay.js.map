{"version":3,"file":"overlay.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/overlay.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DomPortalOutlet} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  Inject,\r\n  Injectable,\r\n  Injector,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\nimport {ScrollStrategyOptions} from './scroll/index';\r\n\r\n\r\n/** Next overlay unique ID. */\r\nlet nextUniqueId = 0;\r\n\r\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\r\n// it needs is different based on where OverlayModule is imported.\r\n\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\r\n */\r\n@Injectable()\r\nexport class Overlay {\r\n  private _appRef: ApplicationRef;\r\n\r\n  constructor(\r\n              /** Scrolling strategies that can be used when creating an overlay. */\r\n              public scrollStrategies: ScrollStrategyOptions,\r\n              private _overlayContainer: OverlayContainer,\r\n              private _componentFactoryResolver: ComponentFactoryResolver,\r\n              private _positionBuilder: OverlayPositionBuilder,\r\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\r\n              private _injector: Injector,\r\n              private _ngZone: NgZone,\r\n              @Inject(DOCUMENT) private _document: any,\r\n              private _directionality: Directionality) { }\r\n\r\n  /**\r\n   * Creates an overlay.\r\n   * @param config Configuration applied to the overlay.\r\n   * @returns Reference to the created overlay.\r\n   */\r\n  create(config?: OverlayConfig): OverlayRef {\r\n    const host = this._createHostElement();\r\n    const pane = this._createPaneElement(host);\r\n    const portalOutlet = this._createPortalOutlet(pane);\r\n    const overlayConfig = new OverlayConfig(config);\r\n\r\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\r\n\r\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\r\n      this._keyboardDispatcher, this._document);\r\n  }\r\n\r\n  /**\r\n   * Gets a position builder that can be used, via fluent API,\r\n   * to construct and configure a position strategy.\r\n   * @returns An overlay position builder.\r\n   */\r\n  position(): OverlayPositionBuilder {\r\n    return this._positionBuilder;\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n   * @returns Newly-created pane element\r\n   */\r\n  private _createPaneElement(host: HTMLElement): HTMLElement {\r\n    const pane = this._document.createElement('div');\r\n\r\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\r\n    pane.classList.add('cdk-overlay-pane');\r\n    host.appendChild(pane);\r\n\r\n    return pane;\r\n  }\r\n\r\n  /**\r\n   * Creates the host element that wraps around an overlay\r\n   * and can be used for advanced positioning.\r\n   * @returns Newly-create host element.\r\n   */\r\n  private _createHostElement(): HTMLElement {\r\n    const host = this._document.createElement('div');\r\n    this._overlayContainer.getContainerElement().appendChild(host);\r\n    return host;\r\n  }\r\n\r\n  /**\r\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\r\n   * @param pane The DOM element to turn into a portal outlet.\r\n   * @returns A portal outlet for the given DOM element.\r\n   */\r\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\r\n    // We have to resolve the ApplicationRef later in order to allow people\r\n    // to use overlay-based providers during app initialization.\r\n    if (!this._appRef) {\r\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\r\n    }\r\n\r\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\r\n  }\r\n}\r\n"]}