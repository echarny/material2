{"version":3,"file":"aria-reference.js","sourceRoot":"","sources":["../../../../../../src/cdk/a11y/aria-describer/aria-reference.ts"],"names":[],"mappings":";;;;;;;AASA,qBAAM,cAAc,GAAG,GAAG,CAAC;;;;;;;;;AAM3B,MAAM,8BAA8B,EAAW,EAAE,IAAY,EAAE,EAAU;IACvE,qBAAM,GAAG,GAAG,mBAAmB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAC1C,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAA9B,CAA8B,CAAC,CAAC,CAAC,CAAC;QAAC,MAAM,CAAC;KAAE;IACvE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;IAEpB,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;CACjD;;;;;;;;;AAMD,MAAM,iCAAiC,EAAW,EAAE,IAAY,EAAE,EAAU;IAC1E,qBAAM,GAAG,GAAG,mBAAmB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAC1C,qBAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,IAAI,EAAE,CAAC,IAAI,EAAE,EAAhB,CAAgB,CAAC,CAAC;IAExD,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;CACzD;;;;;;;;AAMD,MAAM,8BAA8B,EAAW,EAAE,IAAY;;IAE3D,MAAM,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;CAC1D","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** IDs are deliminated by an empty space, as per the spec. */\r\nconst ID_DELIMINATOR = ' ';\r\n\r\n/**\r\n * Adds the given ID to the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\r\n  const ids = getAriaReferenceIds(el, attr);\r\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\r\n  ids.push(id.trim());\r\n\r\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\r\n}\r\n\r\n/**\r\n * Removes the given ID from the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\r\n  const ids = getAriaReferenceIds(el, attr);\r\n  const filteredIds = ids.filter(val => val != id.trim());\r\n\r\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\r\n}\r\n\r\n/**\r\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\r\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\r\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\r\n}\r\n"]}