{"version":3,"file":"activedescendant-key-manager.js","sourceRoot":"","sources":["../../../../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,cAAc,EAAuB,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAexE;;;AAAA;IAAmD,sDAAiC;;;;;;;;IAkBlF,kDAAa;;;;IAAb,UAAc,KAAU;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;SACrC;QACD,iBAAM,aAAa,YAAC,KAAK,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;SACnC;KACF;qCAjDH;EAuBmD,cAAc,EA4BhE,CAAA;;;;AA5BD,sCA4BC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\r\n\r\n/**\r\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\r\n * Each item must know how to style itself as active or inactive and whether or not it is\r\n * currently disabled.\r\n */\r\nexport interface Highlightable extends ListKeyManagerOption {\r\n  /** Applies the styles for an active item to this item. */\r\n  setActiveStyles(): void;\r\n\r\n  /** Applies the styles for an inactive item to this item. */\r\n  setInactiveStyles(): void;\r\n}\r\n\r\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\r\n\r\n  /**\r\n   * Sets the active item to the item at the specified index and adds the\r\n   * active styles to the newly active item. Also removes active styles\r\n   * from the previously active item.\r\n   * @param index Index of the item to be set as active.\r\n   */\r\n  setActiveItem(index: number): void;\r\n\r\n  /**\r\n   * Sets the active item to the item to the specified one and adds the\r\n   * active styles to the it. Also removes active styles from the\r\n   * previously active item.\r\n   * @param item Item to be set as active.\r\n   */\r\n  setActiveItem(item: T): void;\r\n\r\n  setActiveItem(index: any): void {\r\n    if (this.activeItem) {\r\n      this.activeItem.setInactiveStyles();\r\n    }\r\n    super.setActiveItem(index);\r\n    if (this.activeItem) {\r\n      this.activeItem.setActiveStyles();\r\n    }\r\n  }\r\n\r\n}\r\n"]}