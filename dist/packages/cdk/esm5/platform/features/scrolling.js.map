{"version":3,"file":"scrolling.js","sourceRoot":"","sources":["../../../../../../src/cdk/platform/features/scrolling.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,qBAAI,iBAAoC,CAAC;;;;;AAGzC,MAAM;IACJ,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,QAAQ,IAAI,QAAQ,IAAI,gBAAgB,IAAI,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;CAC9F;;;;;;AAMD,MAAM;;IAEJ,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,QAAQ,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC;KACjC;IAED,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;;QAEvB,qBAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACtD,qBAAM,cAAc,GAAG,eAAe,CAAC,KAAK,CAAC;QAC7C,eAAe,CAAC,GAAG,GAAG,KAAK,CAAC;QAC5B,cAAc,CAAC,MAAM,GAAG,KAAK,CAAC;QAC9B,cAAc,CAAC,KAAK,GAAG,KAAK,CAAC;QAC7B,cAAc,CAAC,QAAQ,GAAG,MAAM,CAAC;QACjC,cAAc,CAAC,UAAU,GAAG,QAAQ,CAAC;QACrC,cAAc,CAAC,aAAa,GAAG,MAAM,CAAC;QACtC,cAAc,CAAC,QAAQ,GAAG,UAAU,CAAC;QAErC,qBAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,qBAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC;QACnC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;QAC3B,YAAY,CAAC,MAAM,GAAG,KAAK,CAAC;QAE5B,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACrC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;QAE3C,iBAAiB,GAAG,iBAAiB,CAAC,MAAM,CAAC;;;;QAK7C,EAAE,CAAC,CAAC,eAAe,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;;;;;YAKrC,eAAe,CAAC,UAAU,GAAG,CAAC,CAAC;YAC/B,iBAAiB;gBACb,eAAe,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC;SAC/F;UAED,eAAe,CAAC,UAAU,GAAE,WAAW,CAAC,eAAe;KACxD;IACD,MAAM,CAAC,iBAAiB,CAAC;CAC1B","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\r\nexport enum RtlScrollAxisType {\r\n  /**\r\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\r\n   * all the way right.\r\n   */\r\n  NORMAL,\r\n  /**\r\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\r\n   * all the way right.\r\n   */\r\n  NEGATED,\r\n  /**\r\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\r\n   * all the way right.\r\n   */\r\n  INVERTED\r\n}\r\n\r\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\r\nlet rtlScrollAxisType: RtlScrollAxisType;\r\n\r\n/** Check whether the browser supports scroll behaviors. */\r\nexport function supportsScrollBehavior(): boolean {\r\n  return !!(typeof document == 'object' && 'scrollBehavior' in document.documentElement.style);\r\n}\r\n\r\n/**\r\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\r\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\r\n */\r\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\r\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\r\n  if (typeof document !== 'object' || !document) {\r\n    return RtlScrollAxisType.NORMAL;\r\n  }\r\n\r\n  if (!rtlScrollAxisType) {\r\n    // Create a 1px wide scrolling container and a 2px wide content element.\r\n    const scrollContainer = document.createElement('div');\r\n    const containerStyle = scrollContainer.style;\r\n    scrollContainer.dir = 'rtl';\r\n    containerStyle.height = '1px';\r\n    containerStyle.width = '1px';\r\n    containerStyle.overflow = 'auto';\r\n    containerStyle.visibility = 'hidden';\r\n    containerStyle.pointerEvents = 'none';\r\n    containerStyle.position = 'absolute';\r\n\r\n    const content = document.createElement('div');\r\n    const contentStyle = content.style;\r\n    contentStyle.width = '2px';\r\n    contentStyle.height = '1px';\r\n\r\n    scrollContainer.appendChild(content);\r\n    document.body.appendChild(scrollContainer);\r\n\r\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\r\n\r\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\r\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\r\n    // dealing with one of the other two types of browsers.\r\n    if (scrollContainer.scrollLeft === 0) {\r\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\r\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\r\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\r\n      // return 0 when we read it again.\r\n      scrollContainer.scrollLeft = 1;\r\n      rtlScrollAxisType =\r\n          scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\r\n    }\r\n\r\n    scrollContainer.parentNode!.removeChild(scrollContainer);\r\n  }\r\n  return rtlScrollAxisType;\r\n}\r\n"]}