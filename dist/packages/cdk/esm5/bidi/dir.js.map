{"version":3,"file":"dir.js","sourceRoot":"","sources":["../../../../../src/cdk/bidi/dir.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EACL,SAAS,EACT,MAAM,EACN,KAAK,EACL,YAAY,GAGb,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAY,cAAc,EAAC,MAAM,kBAAkB,CAAC;;;;;;;;;oBAevC,KAAK;;;;8BAGW,KAAK;;;;sBAGT,IAAI,YAAY,EAAa;;0BAIvD,oBAAG;;;;;sBAAgB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;;;;;QACxC,UAAQ,KAAgB;YACtB,qBAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;YACtB,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;YACjE,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC7B;SACF;;;;IAGD,sBAAI,sBAAK;QADT,+CAA+C;;;;;QAC/C,cAAyB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;;;OAAA;IAE3C,kDAAkD;;;;;IAClD,gCAAkB;;;;IAAlB;QACE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;KAC5B;;;;IAED,yBAAW;;;IAAX;QACE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;KACxB;;gBApCF,SAAS,SAAC;oBACT,QAAQ,EAAE,OAAO;oBACjB,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,GAAG,EAAC,CAAC;oBACxD,IAAI,EAAE,EAAC,OAAO,EAAE,KAAK,EAAC;oBACtB,QAAQ,EAAE,KAAK;iBAChB;;;;2BAQE,MAAM,SAAC,WAAW;wBAGlB,KAAK;;cAzCR;;SA+Ba,GAAG","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  Output,\r\n  Input,\r\n  EventEmitter,\r\n  AfterContentInit,\r\n  OnDestroy,\r\n} from '@angular/core';\r\n\r\nimport {Direction, Directionality} from './directionality';\r\n\r\n/**\r\n * Directive to listen for changes of direction of part of the DOM.\r\n *\r\n * Provides itself as Directionality such that descendant directives only need to ever inject\r\n * Directionality to get the closest direction.\r\n */\r\n@Directive({\r\n  selector: '[dir]',\r\n  providers: [{provide: Directionality, useExisting: Dir}],\r\n  host: {'[dir]': 'dir'},\r\n  exportAs: 'dir',\r\n})\r\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\r\n  _dir: Direction = 'ltr';\r\n\r\n  /** Whether the `value` has been set to its initial value. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  /** Event emitted when the direction changes. */\r\n  @Output('dirChange') change = new EventEmitter<Direction>();\r\n\r\n  /** @docs-private */\r\n  @Input()\r\n  get dir(): Direction { return this._dir; }\r\n  set dir(value: Direction) {\r\n    const old = this._dir;\r\n    this._dir = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\r\n    if (old !== this._dir && this._isInitialized) {\r\n      this.change.emit(this._dir);\r\n    }\r\n  }\r\n\r\n  /** Current layout direction of the element. */\r\n  get value(): Direction { return this.dir; }\r\n\r\n  /** Initialize once default value has been set. */\r\n  ngAfterContentInit() {\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.change.complete();\r\n  }\r\n}\r\n\r\n"]}