{"version":3,"file":"tree-adapter.js","sourceRoot":"","sources":["../../../../../src/cdk/collections/tree-adapter.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {SelectionModel} from './selection';\r\n\r\n\r\n/**\r\n * Interface for a class that can flatten hierarchical structured data and re-expand the flattened\r\n * data back into its original structure. Should be used in conjunction with the cdk-tree.\r\n */\r\nexport interface TreeDataNodeFlattener<T> {\r\n  /** Transforms a set of hierarchical structured data into a flattened data array. */\r\n  flattenNodes(structuredData: any[]): T[];\r\n\r\n  /**\r\n   * Expands a flattened array of data into its hierarchical form using the provided expansion\r\n   * model.\r\n   */\r\n  expandFlattenedNodes(nodes: T[], expansionModel: SelectionModel<T>): T[];\r\n\r\n  /**\r\n   * Put node descendants of node in array.\r\n   * If `onlyExpandable` is true, then only process expandable descendants.\r\n   */\r\n  nodeDescendents(node: T, nodes: T[], onlyExpandable: boolean);\r\n}\r\n"]}