{"version":3,"file":"selection.js","sourceRoot":"","sources":["../../../../../src/cdk/collections/selection.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Subject} from 'rxjs';\r\n\r\n/**\r\n * Class to be used to power selecting one or more options from a list.\r\n */\r\nexport class SelectionModel<T> {\r\n  /** Currently-selected values. */\r\n  private _selection = new Set<T>();\r\n\r\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\r\n  private _deselectedToEmit: T[] = [];\r\n\r\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\r\n  private _selectedToEmit: T[] = [];\r\n\r\n  /** Cache for the array value of the selected items. */\r\n  private _selected: T[] | null;\r\n\r\n  /** Selected values. */\r\n  get selected(): T[] {\r\n    if (!this._selected) {\r\n      this._selected = Array.from(this._selection.values());\r\n    }\r\n\r\n    return this._selected;\r\n  }\r\n\r\n  /** Event emitted when the value has changed. */\r\n  onChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\r\n\r\n  constructor(\r\n    private _multiple = false,\r\n    initiallySelectedValues?: T[],\r\n    private _emitChanges = true) {\r\n\r\n    if (initiallySelectedValues && initiallySelectedValues.length) {\r\n      if (_multiple) {\r\n        initiallySelectedValues.forEach(value => this._markSelected(value));\r\n      } else {\r\n        this._markSelected(initiallySelectedValues[0]);\r\n      }\r\n\r\n      // Clear the array in order to avoid firing the change event for preselected values.\r\n      this._selectedToEmit.length = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects a value or an array of values.\r\n   */\r\n  select(...values: T[]): void {\r\n    this._verifyValueAssignment(values);\r\n    values.forEach(value => this._markSelected(value));\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Deselects a value or an array of values.\r\n   */\r\n  deselect(...values: T[]): void {\r\n    this._verifyValueAssignment(values);\r\n    values.forEach(value => this._unmarkSelected(value));\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Toggles a value between selected and deselected.\r\n   */\r\n  toggle(value: T): void {\r\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\r\n  }\r\n\r\n  /**\r\n   * Clears all of the selected values.\r\n   */\r\n  clear(): void {\r\n    this._unmarkAll();\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Determines whether a value is selected.\r\n   */\r\n  isSelected(value: T): boolean {\r\n    return this._selection.has(value);\r\n  }\r\n\r\n  /**\r\n   * Determines whether the model does not have a value.\r\n   */\r\n  isEmpty(): boolean {\r\n    return this._selection.size === 0;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the model has a value.\r\n   */\r\n  hasValue(): boolean {\r\n    return !this.isEmpty();\r\n  }\r\n\r\n  /**\r\n   * Sorts the selected values based on a predicate function.\r\n   */\r\n  sort(predicate?: (a: T, b: T) => number): void {\r\n    if (this._multiple && this.selected) {\r\n      this._selected!.sort(predicate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets whether multiple values can be selected.\r\n   */\r\n  isMultipleSelection() {\r\n    return this._multiple;\r\n  }\r\n\r\n  /** Emits a change event and clears the records of selected and deselected values. */\r\n  private _emitChangeEvent() {\r\n    // Clear the selected values so they can be re-cached.\r\n    this._selected = null;\r\n\r\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\r\n      if (this.onChange) {\r\n        this.onChange.next({\r\n          source: this,\r\n          added: this._selectedToEmit,\r\n          removed: this._deselectedToEmit\r\n        });\r\n      }\r\n\r\n      this._deselectedToEmit = [];\r\n      this._selectedToEmit = [];\r\n    }\r\n  }\r\n\r\n  /** Selects a value. */\r\n  private _markSelected(value: T) {\r\n    if (!this.isSelected(value)) {\r\n      if (!this._multiple) {\r\n        this._unmarkAll();\r\n      }\r\n\r\n      this._selection.add(value);\r\n\r\n      if (this._emitChanges) {\r\n        this._selectedToEmit.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Deselects a value. */\r\n  private _unmarkSelected(value: T) {\r\n    if (this.isSelected(value)) {\r\n      this._selection.delete(value);\r\n\r\n      if (this._emitChanges) {\r\n        this._deselectedToEmit.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clears out the selected values. */\r\n  private _unmarkAll() {\r\n    if (!this.isEmpty()) {\r\n      this._selection.forEach(value => this._unmarkSelected(value));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifies the value assignment and throws an error if the specified value array is\r\n   * including multiple values while the selection model is not supporting multiple values.\r\n   */\r\n  private _verifyValueAssignment(values: T[]) {\r\n    if (values.length > 1 && !this._multiple) {\r\n      throw getMultipleValuesInSingleSelectionError();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Event emitted when the value of a MatSelectionModel has changed.\r\n * @docs-private\r\n */\r\nexport interface SelectionChange<T> {\r\n  /** Model that dispatched the event. */\r\n  source: SelectionModel<T>;\r\n  /** Options that were added to the model. */\r\n  added: T[];\r\n  /** Options that were removed from the model. */\r\n  removed: T[];\r\n}\r\n\r\n/**\r\n * Returns an error that reports that multiple values are passed into a selection model\r\n * with a single value.\r\n */\r\nexport function getMultipleValuesInSingleSelectionError() {\r\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\r\n}\r\n"]}