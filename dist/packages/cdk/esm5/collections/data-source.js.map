{"version":3,"file":"data-source.js","sourceRoot":"","sources":["../../../../../src/cdk/collections/data-source.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAWA;;;;AAAA;;;qBAXA;IA8BC,CAAA;;;;;AAnBD,sBAmBC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {CollectionViewer} from './collection-viewer';\r\n\r\nexport abstract class DataSource<T> {\r\n  /**\r\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\r\n   * the stream provided will be accessed during change detection and should not directly change\r\n   * values that are bound in template views.\r\n   * @param collectionViewer The component that exposes a view over the data provided by this\r\n   *     data source.\r\n   * @returns Observable that emits a new value when the data changes.\r\n   */\r\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[]>;\r\n\r\n  /**\r\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\r\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\r\n   *\r\n   * @param collectionViewer The component that exposes a view over the data provided by this\r\n   *     data source.\r\n   */\r\n  abstract disconnect(collectionViewer: CollectionViewer): void;\r\n}\r\n"]}