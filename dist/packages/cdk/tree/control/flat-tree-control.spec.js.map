{"version":3,"file":"flat-tree-control.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/tree/control/flat-tree-control.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {FlatTreeControl} from './flat-tree-control';\r\n\r\ndescribe('CdkFlatTreeControl', () => {\r\n  let treeControl: FlatTreeControl<TestData>;\r\n  let getLevel = (node: TestData) => node.level;\r\n  let isExpandable = (node: TestData) => node.children && node.children.length > 0;\r\n\r\n  beforeEach(() => {\r\n    treeControl = new FlatTreeControl<TestData>(getLevel, isExpandable);\r\n  });\r\n\r\n  describe('base tree control actions', () => {\r\n    it('should be able to expand and collapse dataNodes', () => {\r\n      const nodes = generateData(10, 4);\r\n      const secondNode = nodes[1];\r\n      const sixthNode = nodes[5];\r\n      treeControl.dataNodes = nodes;\r\n\r\n      treeControl.expand(secondNode);\r\n\r\n\r\n      expect(treeControl.isExpanded(secondNode))\r\n          .toBeTruthy('Expect second node to be expanded');\r\n      expect(treeControl.expansionModel.selected)\r\n          .toContain(secondNode, 'Expect second node in expansionModel');\r\n      expect(treeControl.expansionModel.selected.length)\r\n          .toBe(1, 'Expect only second node in expansionModel');\r\n\r\n      treeControl.toggle(sixthNode);\r\n\r\n      expect(treeControl.isExpanded(secondNode))\r\n          .toBeTruthy('Expect second node to stay expanded');\r\n      expect(treeControl.isExpanded(sixthNode))\r\n          .toBeTruthy('Expect sixth node to be expanded');\r\n      expect(treeControl.expansionModel.selected)\r\n          .toContain(sixthNode, 'Expect sixth node in expansionModel');\r\n      expect(treeControl.expansionModel.selected)\r\n          .toContain(secondNode, 'Expect second node in expansionModel');\r\n      expect(treeControl.expansionModel.selected.length)\r\n          .toBe(2, 'Expect two dataNodes in expansionModel');\r\n\r\n      treeControl.collapse(secondNode);\r\n\r\n      expect(treeControl.isExpanded(secondNode))\r\n          .toBeFalsy('Expect second node to be collapsed');\r\n      expect(treeControl.expansionModel.selected.length)\r\n          .toBe(1, 'Expect one node in expansionModel');\r\n      expect(treeControl.isExpanded(sixthNode)).toBeTruthy('Expect sixth node to stay expanded');\r\n      expect(treeControl.expansionModel.selected)\r\n          .toContain(sixthNode, 'Expect sixth node in expansionModel');\r\n    });\r\n\r\n    it('should return correct expandable values', () => {\r\n      const nodes = generateData(10, 4);\r\n      treeControl.dataNodes = nodes;\r\n\r\n      for (let i = 0; i < 10; i++) {\r\n        expect(treeControl.isExpandable(nodes[i]))\r\n          .toBeTruthy(`Expect node[${i}] to be expandable`);\r\n\r\n        for (let j = 0; j < 4; j++) {\r\n          expect(treeControl.isExpandable(nodes[i].children[j]))\r\n            .toBeFalsy(`Expect node[${i}]'s child[${j}] to be not expandable`);\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should return correct levels', () => {\r\n      const numNodes = 10;\r\n      const numChildren = 4;\r\n      const numGrandChildren = 2;\r\n      const nodes = generateData(numNodes, numChildren, numGrandChildren);\r\n      treeControl.dataNodes = nodes;\r\n\r\n      for (let i = 0; i < numNodes; i++) {\r\n        expect(treeControl.getLevel(nodes[i]))\r\n          .toBe(1, `Expec node[${i}]'s level to be 1`);\r\n\r\n        for (let j = 0; j < numChildren; j++) {\r\n          expect(treeControl.getLevel(nodes[i].children[j]))\r\n            .toBe(2, `Expect node[${i}]'s child[${j}] to be not expandable`);\r\n\r\n          for (let k = 0; k < numGrandChildren; k++) {\r\n            expect(treeControl.getLevel(nodes[i].children[j].children[k]))\r\n              .toBe(3, `Expect node[${i}]'s child[${j}] to be not expandable`);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should toggle descendants correctly', () => {\r\n      const numNodes = 10;\r\n      const numChildren = 4;\r\n      const numGrandChildren = 2;\r\n      const nodes = generateData(numNodes, numChildren, numGrandChildren);\r\n\r\n      let data = [];\r\n      flatten(nodes, data);\r\n      treeControl.dataNodes = data;\r\n\r\n      treeControl.expandDescendants(nodes[1]);\r\n\r\n      const expandedNodesNum = 1 + numChildren + numChildren * numGrandChildren;\r\n      expect(treeControl.expansionModel.selected.length)\r\n          .toBe(expandedNodesNum, `Expect expanded ${expandedNodesNum} nodes`);\r\n\r\n      expect(treeControl.isExpanded(nodes[1])).toBeTruthy('Expect second node to be expanded');\r\n      for (let i = 0; i < numChildren; i++) {\r\n\r\n        expect(treeControl.isExpanded(nodes[1].children[i]))\r\n          .toBeTruthy(`Expect second node's children to be expanded`);\r\n        for (let j = 0; j < numGrandChildren; j++) {\r\n          expect(treeControl.isExpanded(nodes[1].children[i].children[j]))\r\n              .toBeTruthy(`Expect second node grand children to be not expanded`);\r\n        }\r\n      }\r\n\r\n    });\r\n\r\n    it('should be able to expand/collapse all the dataNodes', () => {\r\n      const numNodes = 10;\r\n      const numChildren = 4;\r\n      const numGrandChildren = 2;\r\n      const nodes = generateData(numNodes, numChildren, numGrandChildren);\r\n      let data = [];\r\n      flatten(nodes, data);\r\n      treeControl.dataNodes = data;\r\n\r\n      treeControl.expandDescendants(nodes[1]);\r\n\r\n      treeControl.collapseAll();\r\n\r\n      expect(treeControl.expansionModel.selected.length).toBe(0, `Expect no expanded nodes`);\r\n\r\n      treeControl.expandAll();\r\n\r\n      const totalNumber = numNodes + numNodes * numChildren\r\n          + numNodes * numChildren * numGrandChildren;\r\n      expect(treeControl.expansionModel.selected.length)\r\n        .toBe(totalNumber, `Expect ${totalNumber} expanded nodes`);\r\n    });\r\n  });\r\n});\r\n\r\nexport class TestData {\r\n  a: string;\r\n  b: string;\r\n  c: string;\r\n  level: number;\r\n  children: TestData[];\r\n\r\n  constructor(a: string, b: string, c: string, level: number = 1, children: TestData[] = []) {\r\n    this.a = a;\r\n    this.b = b;\r\n    this.c = c;\r\n    this.level = level;\r\n    this.children = children;\r\n  }\r\n}\r\n\r\nfunction generateData(dataLength: number, childLength: number, grandChildLength: number = 0)\r\n    : TestData[] {\r\n  let data = <any>[];\r\n  let nextIndex = 0;\r\n  for (let i = 0; i < dataLength; i++) {\r\n    let children = <any>[];\r\n    for (let j = 0; j < childLength; j++) {\r\n      let grandChildren = <any>[];\r\n      for (let k = 0; k < grandChildLength; k++) {\r\n        grandChildren.push(new TestData(`a_${nextIndex}`, `b_${nextIndex}`, `c_${nextIndex++}`, 3));\r\n      }\r\n      children.push(\r\n          new TestData(`a_${nextIndex}`, `b_${nextIndex}`, `c_${nextIndex++}`, 2, grandChildren));\r\n    }\r\n    data.push(new TestData(`a_${nextIndex}`, `b_${nextIndex}`, `c_${nextIndex++}`, 1, children));\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction flatten(nodes: TestData[], data: TestData[]) {\r\n  for (let node of nodes) {\r\n    data.push(node);\r\n\r\n    if (node.children && node.children.length > 0) {\r\n      flatten(node.children, data);\r\n    }\r\n  }\r\n}\r\n"]}