{"version":3,"file":"nested-tree-control.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/tree/control/nested-tree-control.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {of as observableOf} from 'rxjs';\r\nimport {NestedTreeControl} from './nested-tree-control';\r\n\r\n\r\ndescribe('CdkNestedTreeControl', () => {\r\n  let treeControl: NestedTreeControl<TestData>;\r\n  let getChildren = (node: TestData) => observableOf(node.children);\r\n\r\n  beforeEach(() => {\r\n    treeControl = new NestedTreeControl<TestData>(getChildren);\r\n  });\r\n\r\n  describe('base tree control actions', () => {\r\n    it('should be able to expand and collapse dataNodes', () => {\r\n      const nodes = generateData(10, 4);\r\n      const node = nodes[1];\r\n      const sixthNode = nodes[5];\r\n      treeControl.dataNodes = nodes;\r\n\r\n      treeControl.expand(node);\r\n\r\n\r\n      expect(treeControl.isExpanded(node)).toBeTruthy('Expect second node to be expanded');\r\n      expect(treeControl.expansionModel.selected)\r\n        .toContain(node, 'Expect second node in expansionModel');\r\n      expect(treeControl.expansionModel.selected.length)\r\n        .toBe(1, 'Expect only second node in expansionModel');\r\n\r\n      treeControl.toggle(sixthNode);\r\n\r\n      expect(treeControl.isExpanded(node)).toBeTruthy('Expect second node to stay expanded');\r\n      expect(treeControl.expansionModel.selected)\r\n        .toContain(sixthNode, 'Expect sixth node in expansionModel');\r\n      expect(treeControl.expansionModel.selected)\r\n        .toContain(node, 'Expect second node in expansionModel');\r\n      expect(treeControl.expansionModel.selected.length)\r\n        .toBe(2, 'Expect two dataNodes in expansionModel');\r\n\r\n      treeControl.collapse(node);\r\n\r\n      expect(treeControl.isExpanded(node)).toBeFalsy('Expect second node to be collapsed');\r\n      expect(treeControl.expansionModel.selected.length)\r\n        .toBe(1, 'Expect one node in expansionModel');\r\n      expect(treeControl.isExpanded(sixthNode)).toBeTruthy('Expect sixth node to stay expanded');\r\n      expect(treeControl.expansionModel.selected)\r\n        .toContain(sixthNode, 'Expect sixth node in expansionModel');\r\n    });\r\n\r\n    it('should toggle descendants correctly', () => {\r\n      const numNodes = 10;\r\n      const numChildren = 4;\r\n      const numGrandChildren = 2;\r\n      const nodes = generateData(numNodes, numChildren, numGrandChildren);\r\n      treeControl.dataNodes = nodes;\r\n\r\n      treeControl.expandDescendants(nodes[1]);\r\n\r\n      const expandedNodesNum = 1 + numChildren + numChildren * numGrandChildren;\r\n      expect(treeControl.expansionModel.selected.length)\r\n        .toBe(expandedNodesNum, `Expect expanded ${expandedNodesNum} nodes`);\r\n\r\n      expect(treeControl.isExpanded(nodes[1])).toBeTruthy('Expect second node to be expanded');\r\n      for (let i = 0; i < numChildren; i++) {\r\n\r\n        expect(treeControl.isExpanded(nodes[1].children[i]))\r\n          .toBeTruthy(`Expect second node's children to be expanded`);\r\n        for (let j = 0; j < numGrandChildren; j++) {\r\n          expect(treeControl.isExpanded(nodes[1].children[i].children[j]))\r\n            .toBeTruthy(`Expect second node grand children to be expanded`);\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should be able to expand/collapse all the dataNodes', () => {\r\n      const numNodes = 10;\r\n      const numChildren = 4;\r\n      const numGrandChildren = 2;\r\n      const nodes = generateData(numNodes, numChildren, numGrandChildren);\r\n      treeControl.dataNodes = nodes;\r\n\r\n      treeControl.expandDescendants(nodes[1]);\r\n\r\n      treeControl.collapseAll();\r\n\r\n      expect(treeControl.expansionModel.selected.length).toBe(0, `Expect no expanded nodes`);\r\n\r\n      treeControl.expandAll();\r\n\r\n      const totalNumber = numNodes + numNodes * numChildren\r\n        + numNodes * numChildren * numGrandChildren;\r\n      expect(treeControl.expansionModel.selected.length)\r\n        .toBe(totalNumber, `Expect ${totalNumber} expanded nodes`);\r\n    });\r\n\r\n    describe('with children array', () => {\r\n      let getStaticChildren = (node: TestData) => node.children;\r\n\r\n      beforeEach(() => {\r\n        treeControl = new NestedTreeControl<TestData>(getStaticChildren);\r\n      });\r\n\r\n      it('should be able to expand and collapse dataNodes', () => {\r\n        const nodes = generateData(10, 4);\r\n        const node = nodes[1];\r\n        const sixthNode = nodes[5];\r\n        treeControl.dataNodes = nodes;\r\n\r\n        treeControl.expand(node);\r\n\r\n\r\n        expect(treeControl.isExpanded(node)).toBeTruthy('Expect second node to be expanded');\r\n        expect(treeControl.expansionModel.selected)\r\n          .toContain(node, 'Expect second node in expansionModel');\r\n        expect(treeControl.expansionModel.selected.length)\r\n          .toBe(1, 'Expect only second node in expansionModel');\r\n\r\n        treeControl.toggle(sixthNode);\r\n\r\n        expect(treeControl.isExpanded(node)).toBeTruthy('Expect second node to stay expanded');\r\n        expect(treeControl.expansionModel.selected)\r\n          .toContain(sixthNode, 'Expect sixth node in expansionModel');\r\n        expect(treeControl.expansionModel.selected)\r\n          .toContain(node, 'Expect second node in expansionModel');\r\n        expect(treeControl.expansionModel.selected.length)\r\n          .toBe(2, 'Expect two dataNodes in expansionModel');\r\n\r\n        treeControl.collapse(node);\r\n\r\n        expect(treeControl.isExpanded(node)).toBeFalsy('Expect second node to be collapsed');\r\n        expect(treeControl.expansionModel.selected.length)\r\n          .toBe(1, 'Expect one node in expansionModel');\r\n        expect(treeControl.isExpanded(sixthNode)).toBeTruthy('Expect sixth node to stay expanded');\r\n        expect(treeControl.expansionModel.selected)\r\n          .toContain(sixthNode, 'Expect sixth node in expansionModel');\r\n      });\r\n\r\n      it('should toggle descendants correctly', () => {\r\n        const numNodes = 10;\r\n        const numChildren = 4;\r\n        const numGrandChildren = 2;\r\n        const nodes = generateData(numNodes, numChildren, numGrandChildren);\r\n        treeControl.dataNodes = nodes;\r\n\r\n        treeControl.expandDescendants(nodes[1]);\r\n\r\n        const expandedNodesNum = 1 + numChildren + numChildren * numGrandChildren;\r\n        expect(treeControl.expansionModel.selected.length)\r\n          .toBe(expandedNodesNum, `Expect expanded ${expandedNodesNum} nodes`);\r\n\r\n        expect(treeControl.isExpanded(nodes[1])).toBeTruthy('Expect second node to be expanded');\r\n        for (let i = 0; i < numChildren; i++) {\r\n\r\n          expect(treeControl.isExpanded(nodes[1].children[i]))\r\n            .toBeTruthy(`Expect second node's children to be expanded`);\r\n          for (let j = 0; j < numGrandChildren; j++) {\r\n            expect(treeControl.isExpanded(nodes[1].children[i].children[j]))\r\n              .toBeTruthy(`Expect second node grand children to be expanded`);\r\n          }\r\n        }\r\n      });\r\n\r\n      it('should be able to expand/collapse all the dataNodes', () => {\r\n        const numNodes = 10;\r\n        const numChildren = 4;\r\n        const numGrandChildren = 2;\r\n        const nodes = generateData(numNodes, numChildren, numGrandChildren);\r\n        treeControl.dataNodes = nodes;\r\n\r\n        treeControl.expandDescendants(nodes[1]);\r\n\r\n        treeControl.collapseAll();\r\n\r\n        expect(treeControl.expansionModel.selected.length).toBe(0, `Expect no expanded nodes`);\r\n\r\n        treeControl.expandAll();\r\n\r\n        const totalNumber = numNodes + (numNodes * numChildren)\r\n          + (numNodes * numChildren * numGrandChildren);\r\n        expect(treeControl.expansionModel.selected.length)\r\n          .toBe(totalNumber, `Expect ${totalNumber} expanded nodes`);\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\nexport class TestData {\r\n  a: string;\r\n  b: string;\r\n  c: string;\r\n  level: number;\r\n  children: TestData[];\r\n\r\n  constructor(a: string, b: string, c: string, level: number = 1, children: TestData[] = []) {\r\n    this.a = a;\r\n    this.b = b;\r\n    this.c = c;\r\n    this.level = level;\r\n    this.children = children;\r\n  }\r\n}\r\n\r\nfunction generateData(dataLength: number, childLength: number, grandChildLength: number = 0)\r\n    : TestData[] {\r\n  let data = <any>[];\r\n  let nextIndex = 0;\r\n  for (let i = 0; i < dataLength; i++) {\r\n    let children = <any>[];\r\n    for (let j = 0; j < childLength; j++) {\r\n      let grandChildren = <any>[];\r\n      for (let k = 0; k < grandChildLength; k++) {\r\n        grandChildren.push(new TestData(`a_${nextIndex}`, `b_${nextIndex}`, `c_${nextIndex++}`, 3));\r\n      }\r\n      children.push(\r\n        new TestData(`a_${nextIndex}`, `b_${nextIndex}`, `c_${nextIndex++}`, 2, grandChildren));\r\n    }\r\n    data.push(new TestData(`a_${nextIndex}`, `b_${nextIndex}`, `c_${nextIndex++}`, 1, children));\r\n  }\r\n  return data;\r\n}\r\n"]}