{"version":3,"file":"base-tree-control.js","sourceRoot":"","sources":["../../../../../src/cdk/tree/control/base-tree-control.ts"],"names":[],"mappings":";;AAOA,wDAAwD;;AAKxD;AAAA;;;8BAYsC,IAAI,4BAAc,CAAI,IAAI,CAAC;;IAc/D,+DAA+D;;IAC/D,gCAAM;IAAN,UAAO,QAAW;QAChB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KACtC;IAED,oCAAoC;;IACpC,gCAAM;IAAN,UAAO,QAAW;QAChB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KACtC;IAED,sCAAsC;;IACtC,kCAAQ;IAAR,UAAS,QAAW;QAClB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KACxC;IAED,+FAA+F;;IAC/F,oCAAU;IAAV,UAAW,QAAW;QACpB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KACjD;IAED,sDAAsD;;IACtD,2CAAiB;IAAjB,UAAkB,QAAW;QAC3B,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC;YACpC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;YACpC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KACxC;IAED,0CAA0C;;IAC1C,qCAAW;IAAX;QACE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;KAC7B;IAED,+DAA+D;;IAC/D,2CAAiB;IAAjB,UAAkB,QAAW;QAC3B,IAAI,aAAa,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/B,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;QACrD,CAAA,KAAA,IAAI,CAAC,cAAc,CAAA,CAAC,MAAM,WAAI,aAAa,EAAE;;KAC9C;IAED,iEAAiE;;IACjE,6CAAmB;IAAnB,UAAoB,QAAW;QAC7B,IAAI,aAAa,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/B,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;QACrD,CAAA,KAAA,IAAI,CAAC,cAAc,CAAA,CAAC,QAAQ,WAAI,aAAa,EAAE;;KAChD;0BAlFH;IAmFC,CAAA;AAvEqB,0CAAe","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {Observable} from 'rxjs';\r\nimport {TreeControl} from './tree-control';\r\n\r\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\r\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\r\n\r\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\r\n  abstract getDescendants(dataNode: T): T[];\r\n\r\n  /** Expands all data nodes in the tree. */\r\n  abstract expandAll(): void;\r\n\r\n  /** Saved data node for `expandAll` action. */\r\n  dataNodes: T[];\r\n\r\n  /** A selection model with multi-selection to track expansion status. */\r\n  expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\r\n\r\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\r\n  getLevel: (dataNode: T) => number;\r\n\r\n  /**\r\n   * Whether the data node is expandable. Returns true if expandable.\r\n   * This is for flat tree node.\r\n   */\r\n  isExpandable: (dataNode: T) => boolean;\r\n\r\n  /** Gets a stream that emits whenever the given data node's children change. */\r\n  getChildren: (dataNode: T) => (Observable<T[]> | T[]);\r\n\r\n  /** Toggles one single data node's expanded/collapsed state. */\r\n  toggle(dataNode: T): void {\r\n    this.expansionModel.toggle(dataNode);\r\n  }\r\n\r\n  /** Expands one single data node. */\r\n  expand(dataNode: T): void {\r\n    this.expansionModel.select(dataNode);\r\n  }\r\n\r\n  /** Collapses one single data node. */\r\n  collapse(dataNode: T): void {\r\n    this.expansionModel.deselect(dataNode);\r\n  }\r\n\r\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\r\n  isExpanded(dataNode: T): boolean {\r\n    return this.expansionModel.isSelected(dataNode);\r\n  }\r\n\r\n  /** Toggles a subtree rooted at `node` recursively. */\r\n  toggleDescendants(dataNode: T): void {\r\n    this.expansionModel.isSelected(dataNode)\r\n        ? this.collapseDescendants(dataNode)\r\n        : this.expandDescendants(dataNode);\r\n  }\r\n\r\n  /** Collapse all dataNodes in the tree. */\r\n  collapseAll(): void {\r\n    this.expansionModel.clear();\r\n  }\r\n\r\n  /** Expands a subtree rooted at given data node recursively. */\r\n  expandDescendants(dataNode: T): void {\r\n    let toBeProcessed = [dataNode];\r\n    toBeProcessed.push(...this.getDescendants(dataNode));\r\n    this.expansionModel.select(...toBeProcessed);\r\n  }\r\n\r\n  /** Collapses a subtree rooted at given data node recursively. */\r\n  collapseDescendants(dataNode: T): void {\r\n    let toBeProcessed = [dataNode];\r\n    toBeProcessed.push(...this.getDescendants(dataNode));\r\n    this.expansionModel.deselect(...toBeProcessed);\r\n  }\r\n}\r\n"]}