{"version":3,"file":"fixed-size-virtual-scroll.js","sourceRoot":"","sources":["../../../../src/cdk/scrolling/fixed-size-virtual-scroll.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {distinctUntilChanged} from 'rxjs/operators';\r\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n\r\n/** Virtual scrolling strategy for lists with items of known fixed size. */\r\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\r\n  private _scrolledIndexChange = new Subject<number>();\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\r\n\r\n  /** The attached viewport. */\r\n  private _viewport: CdkVirtualScrollViewport | null = null;\r\n\r\n  /** The size of the items in the virtually scrolling list. */\r\n  private _itemSize: number;\r\n\r\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\r\n  private _minBufferPx: number;\r\n\r\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\r\n  private _maxBufferPx: number;\r\n\r\n  /**\r\n   * @param itemSize The size of the items in the virtually scrolling list.\r\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\r\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\r\n   */\r\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\r\n    this._itemSize = itemSize;\r\n    this._minBufferPx = minBufferPx;\r\n    this._maxBufferPx = maxBufferPx;\r\n  }\r\n\r\n  /**\r\n   * Attaches this scroll strategy to a viewport.\r\n   * @param viewport The viewport to attach this strategy to.\r\n   */\r\n  attach(viewport: CdkVirtualScrollViewport) {\r\n    this._viewport = viewport;\r\n    this._updateTotalContentSize();\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** Detaches this scroll strategy from the currently attached viewport. */\r\n  detach() {\r\n    this._scrolledIndexChange.complete();\r\n    this._viewport = null;\r\n  }\r\n\r\n  /**\r\n   * Update the item size and buffer size.\r\n   * @param itemSize The size of the items in the virtually scrolling list.\r\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\r\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\r\n   */\r\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\r\n    if (maxBufferPx < minBufferPx) {\r\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\r\n    }\r\n    this._itemSize = itemSize;\r\n    this._minBufferPx = minBufferPx;\r\n    this._maxBufferPx = maxBufferPx;\r\n    this._updateTotalContentSize();\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onContentScrolled() {\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onDataLengthChanged() {\r\n    this._updateTotalContentSize();\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onContentRendered() { /* no-op */ }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onRenderedOffsetChanged() { /* no-op */ }\r\n\r\n  /**\r\n   * Scroll to the offset for the given index.\r\n   * @param index The index of the element to scroll to.\r\n   * @param behavior The ScrollBehavior to use when scrolling.\r\n   */\r\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\r\n    if (this._viewport) {\r\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\r\n    }\r\n  }\r\n\r\n  /** Update the viewport's total content size. */\r\n  private _updateTotalContentSize() {\r\n    if (!this._viewport) {\r\n      return;\r\n    }\r\n\r\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\r\n  }\r\n\r\n  /** Update the viewport's rendered range. */\r\n  private _updateRenderedRange() {\r\n    if (!this._viewport) {\r\n      return;\r\n    }\r\n\r\n    const scrollOffset = this._viewport.measureScrollOffset();\r\n    const firstVisibleIndex = scrollOffset / this._itemSize;\r\n    const renderedRange = this._viewport.getRenderedRange();\r\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\r\n    const viewportSize = this._viewport.getViewportSize();\r\n    const dataLength = this._viewport.getDataLength();\r\n\r\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\r\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\r\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\r\n      newRange.start = Math.max(0, newRange.start - expandStart);\r\n      newRange.end = Math.min(dataLength,\r\n          Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\r\n    } else {\r\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\r\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\r\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\r\n        if (expandEnd > 0) {\r\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\r\n          newRange.start = Math.max(0,\r\n              Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\r\n        }\r\n      }\r\n    }\r\n\r\n    this._viewport.setRenderedRange(newRange);\r\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\r\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\r\n * `FixedSizeVirtualScrollStrategy` from the given directive.\r\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\r\n *     `FixedSizeVirtualScrollStrategy` from.\r\n */\r\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\r\n  return fixedSizeDir._scrollStrategy;\r\n}\r\n\r\n\r\n/** A virtual scroll strategy that supports fixed-size items. */\r\n@Directive({\r\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\r\n  providers: [{\r\n    provide: VIRTUAL_SCROLL_STRATEGY,\r\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\r\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\r\n  }],\r\n})\r\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\r\n  /** The size of the items in the list (in pixels). */\r\n  @Input()\r\n  get itemSize(): number { return this._itemSize; }\r\n  set itemSize(value: number) { this._itemSize = coerceNumberProperty(value); }\r\n  _itemSize = 20;\r\n\r\n  /**\r\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\r\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\r\n   */\r\n  @Input()\r\n  get minBufferPx(): number { return this._minBufferPx; }\r\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\r\n  _minBufferPx = 100;\r\n\r\n  /**\r\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\r\n   */\r\n  @Input()\r\n  get maxBufferPx(): number { return this._maxBufferPx; }\r\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\r\n  _maxBufferPx = 200;\r\n\r\n  /** The scroll strategy used by this directive. */\r\n  _scrollStrategy =\r\n      new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\r\n\r\n  ngOnChanges() {\r\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\r\n  }\r\n}\r\n"]}