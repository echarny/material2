{"version":3,"file":"portal.spec.js","sourceRoot":"","sources":["../../../../src/cdk/portal/portal.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {inject, ComponentFixture, TestBed} from '@angular/core/testing';\r\nimport {\r\n  NgModule,\r\n  Component,\r\n  ViewChild,\r\n  ViewChildren,\r\n  QueryList,\r\n  ViewContainerRef,\r\n  ComponentFactoryResolver,\r\n  Optional,\r\n  Injector,\r\n  ApplicationRef,\r\n  TemplateRef,\r\n  ComponentRef,\r\n} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {CdkPortal, CdkPortalOutlet, PortalModule} from './portal-directives';\r\nimport {Portal, ComponentPortal, TemplatePortal} from './portal';\r\nimport {DomPortalOutlet} from './dom-portal-outlet';\r\n\r\n\r\ndescribe('Portals', () => {\r\n\r\n  beforeEach(() => {\r\n    TestBed\r\n      .configureTestingModule({imports: [PortalModule, PortalTestModule]})\r\n      .compileComponents();\r\n  });\r\n\r\n  describe('CdkPortalOutlet', () => {\r\n    let fixture: ComponentFixture<PortalTestApp>;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(PortalTestApp);\r\n    });\r\n\r\n    it('should load a component into the portal', () => {\r\n      // Set the selectedHost to be a ComponentPortal.\r\n      let testAppComponent = fixture.componentInstance;\r\n      let componentPortal = new ComponentPortal(PizzaMsg);\r\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\r\n\r\n      testAppComponent.selectedPortal = componentPortal;\r\n      fixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      expect(hostContainer.textContent).toContain('Pizza');\r\n      expect(testAppComponent.portalOutlet.portal).toBe(componentPortal);\r\n      expect(testAppComponent.portalOutlet.attachedRef instanceof ComponentRef).toBe(true);\r\n      expect(testAppComponent.attachedSpy)\r\n          .toHaveBeenCalledWith(testAppComponent.portalOutlet.attachedRef);\r\n    });\r\n\r\n    it('should load a template into the portal', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\r\n      let templatePortal = new TemplatePortal(testAppComponent.templateRef, null!);\r\n\r\n      testAppComponent.selectedPortal = templatePortal;\r\n      fixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present and no context is projected\r\n      expect(hostContainer.textContent).toContain('Banana');\r\n      expect(testAppComponent.portalOutlet.portal).toBe(templatePortal);\r\n\r\n      // We can't test whether it's an instance of an `EmbeddedViewRef` so\r\n      // we verify that it's defined and that it's not a ComponentRef.\r\n      expect(testAppComponent.portalOutlet.attachedRef instanceof ComponentRef).toBe(false);\r\n      expect(testAppComponent.portalOutlet.attachedRef).toBeTruthy();\r\n      expect(testAppComponent.attachedSpy)\r\n          .toHaveBeenCalledWith(testAppComponent.portalOutlet.attachedRef);\r\n    });\r\n\r\n    it('should project template context bindings in the portal', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\r\n\r\n      // TemplatePortal without context:\r\n      let templatePortal = new TemplatePortal(testAppComponent.templateRef, null!);\r\n      testAppComponent.selectedPortal = templatePortal;\r\n      fixture.detectChanges();\r\n      // Expect that the content of the attached portal is present and NO context is projected\r\n      expect(hostContainer.textContent).toContain('Banana - !');\r\n\r\n      // using TemplatePortal.attach method to set context\r\n      testAppComponent.selectedPortal = undefined;\r\n      fixture.detectChanges();\r\n      templatePortal.attach(testAppComponent.portalOutlet, {$implicit: {status: 'rotten'}});\r\n      fixture.detectChanges();\r\n      // Expect that the content of the attached portal is present and context given via the\r\n      // attach method is projected\r\n      expect(hostContainer.textContent).toContain('Banana - rotten!');\r\n\r\n      // using TemplatePortal constructor to set the context\r\n      templatePortal =\r\n        new TemplatePortal(testAppComponent.templateRef, null!, {$implicit: {status: 'fresh'}});\r\n      testAppComponent.selectedPortal = templatePortal;\r\n      fixture.detectChanges();\r\n      // Expect that the content of the attached portal is present and context given via the\r\n      // constructor is projected\r\n      expect(hostContainer.textContent).toContain('Banana - fresh!');\r\n\r\n      // using TemplatePortal constructor to set the context but also calling attach method with\r\n      // context, the latter should take precedence:\r\n      testAppComponent.selectedPortal = undefined;\r\n      fixture.detectChanges();\r\n      templatePortal.attach(testAppComponent.portalOutlet, {$implicit: {status: 'rotten'}});\r\n      fixture.detectChanges();\r\n      // Expect that the content of the attached portal is present and and context given via the\r\n      // attach method is projected and get precedence over constructor context\r\n      expect(hostContainer.textContent).toContain('Banana - rotten!');\r\n    });\r\n\r\n    it('should dispose the host when destroyed', () => {\r\n      // Set the selectedHost to be a ComponentPortal.\r\n      let testAppComponent = fixture.componentInstance;\r\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\r\n\r\n      fixture.detectChanges();\r\n      expect(testAppComponent.selectedPortal.isAttached).toBe(true);\r\n\r\n      fixture.destroy();\r\n      expect(testAppComponent.selectedPortal.isAttached).toBe(false);\r\n    });\r\n\r\n    it('should load a component into the portal with a given injector', () => {\r\n      // Create a custom injector for the component.\r\n      let chocolateInjector = new ChocolateInjector(fixture.componentInstance.injector);\r\n\r\n      // Set the selectedHost to be a ComponentPortal.\r\n      let testAppComponent = fixture.componentInstance;\r\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg, undefined, chocolateInjector);\r\n      fixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Pizza');\r\n      expect(hostContainer.textContent).toContain('Chocolate');\r\n    });\r\n\r\n    it('should load a <ng-template> portal', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      fixture.detectChanges();\r\n\r\n      // Set the selectedHost to be a TemplatePortal.\r\n      testAppComponent.selectedPortal = testAppComponent.cakePortal;\r\n      fixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Cake');\r\n    });\r\n\r\n    it('should load a <ng-template> portal with the `*` sugar', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      fixture.detectChanges();\r\n\r\n      // Set the selectedHost to be a TemplatePortal (with the `*` syntax).\r\n      testAppComponent.selectedPortal = testAppComponent.piePortal;\r\n      fixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Pie');\r\n    });\r\n\r\n    it('should load a <ng-template> portal with a binding', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      fixture.detectChanges();\r\n\r\n      // Set the selectedHost to be a TemplatePortal.\r\n      testAppComponent.selectedPortal = testAppComponent.portalWithBinding;\r\n      fixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Banana');\r\n\r\n      // When updating the binding value.\r\n      testAppComponent.fruit = 'Mango';\r\n      fixture.detectChanges();\r\n\r\n      // Expect the new value to be reflected in the rendered output.\r\n      expect(hostContainer.textContent).toContain('Mango');\r\n    });\r\n\r\n    it('should load a <ng-template> portal with an inner template', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      fixture.detectChanges();\r\n\r\n      // Set the selectedHost to be a TemplatePortal.\r\n      testAppComponent.selectedPortal = testAppComponent.portalWithTemplate;\r\n      fixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Pineapple');\r\n\r\n      // When updating the binding value.\r\n      testAppComponent.fruits = ['Mangosteen'];\r\n      fixture.detectChanges();\r\n\r\n      // Expect the new value to be reflected in the rendered output.\r\n      expect(hostContainer.textContent).toContain('Mangosteen');\r\n    });\r\n\r\n    it('should change the attached portal', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      fixture.detectChanges();\r\n\r\n      // Set the selectedHost to be a ComponentPortal.\r\n      testAppComponent.selectedPortal = testAppComponent.piePortal;\r\n      fixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Pie');\r\n\r\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\r\n      fixture.detectChanges();\r\n\r\n      expect(hostContainer.textContent).toContain('Pizza');\r\n    });\r\n\r\n    it('should detach the portal when it is set to null', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\r\n\r\n      fixture.detectChanges();\r\n      expect(testAppComponent.portalOutlet.hasAttached()).toBe(true);\r\n      expect(testAppComponent.portalOutlet.portal).toBe(testAppComponent.selectedPortal);\r\n\r\n      testAppComponent.selectedPortal = null!;\r\n      fixture.detectChanges();\r\n\r\n      expect(testAppComponent.portalOutlet.hasAttached()).toBe(false);\r\n      expect(testAppComponent.portalOutlet.portal).toBeNull();\r\n    });\r\n\r\n    it('should set the `portal` when attaching a component portal programmatically', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n      let portal = new ComponentPortal(PizzaMsg);\r\n\r\n      testAppComponent.portalOutlet.attachComponentPortal(portal);\r\n\r\n      expect(testAppComponent.portalOutlet.portal).toBe(portal);\r\n    });\r\n\r\n    it('should set the `portal` when attaching a template portal programmatically', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n      fixture.detectChanges();\r\n\r\n      testAppComponent.portalOutlet.attachTemplatePortal(testAppComponent.cakePortal);\r\n\r\n      expect(testAppComponent.portalOutlet.portal).toBe(testAppComponent.cakePortal);\r\n    });\r\n\r\n    it('should clear the portal reference on destroy', () => {\r\n      let testAppComponent = fixture.componentInstance;\r\n\r\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\r\n      fixture.detectChanges();\r\n\r\n      expect(testAppComponent.portalOutlet.portal).toBeTruthy();\r\n\r\n      fixture.destroy();\r\n\r\n      expect(testAppComponent.portalOutlet.portal).toBeNull();\r\n    });\r\n\r\n    it('should not clear programmatically-attached portals on init', () => {\r\n      fixture.destroy();\r\n\r\n      const unboundFixture = TestBed.createComponent(UnboundPortalTestApp);\r\n\r\n      // Note: calling `detectChanges` here will cause a false positive.\r\n      // What we're testing is attaching before the first CD cycle.\r\n      unboundFixture.componentInstance.portalOutlet.attach(new ComponentPortal(PizzaMsg));\r\n      unboundFixture.detectChanges();\r\n\r\n      expect(unboundFixture.nativeElement.querySelector('.portal-container').textContent)\r\n        .toContain('Pizza');\r\n    });\r\n\r\n    it('should be considered attached when attaching using `attach`', () => {\r\n      expect(fixture.componentInstance.portalOutlet.hasAttached()).toBe(false);\r\n      fixture.componentInstance.portalOutlet.attach(new ComponentPortal(PizzaMsg));\r\n      expect(fixture.componentInstance.portalOutlet.hasAttached()).toBe(true);\r\n    });\r\n\r\n    it('should be considered attached when attaching using `attachComponentPortal`', () => {\r\n      expect(fixture.componentInstance.portalOutlet.hasAttached()).toBe(false);\r\n      fixture.componentInstance.portalOutlet.attachComponentPortal(new ComponentPortal(PizzaMsg));\r\n      expect(fixture.componentInstance.portalOutlet.hasAttached()).toBe(true);\r\n    });\r\n\r\n    it('should be considered attached when attaching using `attachTemplatePortal`', () => {\r\n      const instance = fixture.componentInstance;\r\n      expect(instance.portalOutlet.hasAttached()).toBe(false);\r\n      instance.portalOutlet.attachTemplatePortal(new TemplatePortal(instance.templateRef, null!));\r\n      expect(instance.portalOutlet.hasAttached()).toBe(true);\r\n    });\r\n\r\n  });\r\n\r\n  describe('DomPortalOutlet', () => {\r\n    let componentFactoryResolver: ComponentFactoryResolver;\r\n    let someViewContainerRef: ViewContainerRef;\r\n    let someInjector: Injector;\r\n    let someFixture: ComponentFixture<any>;\r\n    let someDomElement: HTMLElement;\r\n    let host: DomPortalOutlet;\r\n    let injector: Injector;\r\n    let appRef: ApplicationRef;\r\n\r\n    let deps = [ComponentFactoryResolver, Injector, ApplicationRef];\r\n    beforeEach(inject(deps, (dcl: ComponentFactoryResolver, i: Injector, ar: ApplicationRef) => {\r\n      componentFactoryResolver = dcl;\r\n      injector = i;\r\n      appRef = ar;\r\n    }));\r\n\r\n    beforeEach(() => {\r\n      someDomElement = document.createElement('div');\r\n      host = new DomPortalOutlet(someDomElement, componentFactoryResolver, appRef, injector);\r\n\r\n      someFixture = TestBed.createComponent(ArbitraryViewContainerRefComponent);\r\n      someViewContainerRef = someFixture.componentInstance.viewContainerRef;\r\n      someInjector = someFixture.componentInstance.injector;\r\n    });\r\n\r\n    it('should attach and detach a component portal', () => {\r\n      let portal = new ComponentPortal(PizzaMsg, someViewContainerRef);\r\n\r\n      let componentInstance: PizzaMsg = portal.attach(host).instance;\r\n\r\n      expect(componentInstance instanceof PizzaMsg).toBe(true);\r\n      expect(someDomElement.textContent).toContain('Pizza');\r\n\r\n      host.detach();\r\n\r\n      expect(someDomElement.innerHTML).toBe('');\r\n    });\r\n\r\n    it('should attach and detach a component portal with a given injector', () => {\r\n      let fixture = TestBed.createComponent(ArbitraryViewContainerRefComponent);\r\n      someViewContainerRef = fixture.componentInstance.viewContainerRef;\r\n      someInjector = fixture.componentInstance.injector;\r\n\r\n      let chocolateInjector = new ChocolateInjector(someInjector);\r\n      let portal = new ComponentPortal(PizzaMsg, someViewContainerRef, chocolateInjector);\r\n\r\n      let componentInstance: PizzaMsg = portal.attach(host).instance;\r\n      fixture.detectChanges();\r\n\r\n      expect(componentInstance instanceof PizzaMsg).toBe(true);\r\n      expect(someDomElement.textContent).toContain('Pizza');\r\n      expect(someDomElement.textContent).toContain('Chocolate');\r\n\r\n      host.detach();\r\n\r\n      expect(someDomElement.innerHTML).toBe('');\r\n    });\r\n\r\n    it('should attach and detach a template portal', () => {\r\n      let fixture = TestBed.createComponent(PortalTestApp);\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.cakePortal.attach(host);\r\n\r\n      expect(someDomElement.textContent).toContain('Cake');\r\n    });\r\n\r\n    it('should render a template portal with an inner template', () => {\r\n      let fixture = TestBed.createComponent(PortalTestApp);\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.portalWithTemplate.attach(host);\r\n\r\n      expect(someDomElement.textContent).toContain('Durian');\r\n    });\r\n\r\n    it('should attach and detach a template portal with a binding', () => {\r\n      let fixture = TestBed.createComponent(PortalTestApp);\r\n\r\n      let testAppComponent = fixture.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      fixture.detectChanges();\r\n\r\n      // Attach the TemplatePortal.\r\n      testAppComponent.portalWithBinding.attach(host, {$implicit: {status: 'fresh'}});\r\n      fixture.detectChanges();\r\n\r\n      // Now that the portal is attached, change detection has to happen again in order\r\n      // for the bindings to update.\r\n      fixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      expect(someDomElement.textContent).toContain('Banana - fresh');\r\n\r\n      // When updating the binding value.\r\n      testAppComponent.fruit = 'Mango';\r\n      fixture.detectChanges();\r\n\r\n      // Expect the new value to be reflected in the rendered output.\r\n      expect(someDomElement.textContent).toContain('Mango');\r\n\r\n      host.detach();\r\n      expect(someDomElement.innerHTML).toBe('');\r\n    });\r\n\r\n    it('should change the attached portal', () => {\r\n      let fixture = TestBed.createComponent(ArbitraryViewContainerRefComponent);\r\n      someViewContainerRef = fixture.componentInstance.viewContainerRef;\r\n\r\n      let appFixture = TestBed.createComponent(PortalTestApp);\r\n      appFixture.detectChanges();\r\n\r\n      appFixture.componentInstance.piePortal.attach(host);\r\n\r\n      expect(someDomElement.textContent).toContain('Pie');\r\n\r\n      host.detach();\r\n      host.attach(new ComponentPortal(PizzaMsg, someViewContainerRef));\r\n\r\n      expect(someDomElement.textContent).toContain('Pizza');\r\n    });\r\n\r\n    it('should attach and detach a component portal without a ViewContainerRef', () => {\r\n      let portal = new ComponentPortal(PizzaMsg);\r\n\r\n      let componentInstance: PizzaMsg = portal.attach(host).instance;\r\n\r\n      expect(componentInstance instanceof PizzaMsg)\r\n          .toBe(true, 'Expected a PizzaMsg component to be created');\r\n      expect(someDomElement.textContent)\r\n          .toContain('Pizza', 'Expected the static string \"Pizza\" in the DomPortalOutlet.');\r\n\r\n      componentInstance.snack = new Chocolate();\r\n      someFixture.detectChanges();\r\n      expect(someDomElement.textContent)\r\n          .toContain('Chocolate', 'Expected the bound string \"Chocolate\" in the DomPortalOutlet');\r\n\r\n      host.detach();\r\n\r\n      expect(someDomElement.innerHTML)\r\n          .toBe('', 'Expected the DomPortalOutlet to be empty after detach');\r\n    });\r\n\r\n    it('should call the dispose function even if the host has no attached content', () => {\r\n      let spy = jasmine.createSpy('host dispose spy');\r\n\r\n      expect(host.hasAttached()).toBe(false, 'Expected host not to have attached content.');\r\n\r\n      host.setDisposeFn(spy);\r\n      host.dispose();\r\n\r\n      expect(spy).toHaveBeenCalled();\r\n    });\r\n  });\r\n});\r\n\r\n\r\nclass Chocolate {\r\n  toString() {\r\n    return 'Chocolate';\r\n  }\r\n}\r\n\r\nclass ChocolateInjector {\r\n  constructor(public parentInjector: Injector) { }\r\n\r\n  get(token: any) {\r\n    return token === Chocolate ? new Chocolate() : this.parentInjector.get<any>(token);\r\n  }\r\n}\r\n\r\n/** Simple component for testing ComponentPortal. */\r\n@Component({\r\n  selector: 'pizza-msg',\r\n  template: '<p>Pizza</p><p>{{snack}}</p>',\r\n})\r\nclass PizzaMsg {\r\n  constructor(@Optional() public snack: Chocolate) { }\r\n}\r\n\r\n/** Simple component to grab an arbitrary ViewContainerRef */\r\n@Component({\r\n  selector: 'some-placeholder',\r\n  template: '<p>Hello</p>'\r\n})\r\nclass ArbitraryViewContainerRefComponent {\r\n  constructor(public viewContainerRef: ViewContainerRef, public injector: Injector) { }\r\n}\r\n\r\n\r\n/** Test-bed component that contains a portal outlet and a couple of template portals. */\r\n@Component({\r\n  selector: 'portal-test',\r\n  template: `\r\n  <div class=\"portal-container\">\r\n    <ng-template [cdkPortalOutlet]=\"selectedPortal\" (attached)=\"attachedSpy($event)\"></ng-template>\r\n  </div>\r\n\r\n  <ng-template cdk-portal>Cake</ng-template>\r\n\r\n  <div *cdk-portal>Pie</div>\r\n  <ng-template cdk-portal let-data> {{fruit}} - {{ data?.status }} </ng-template>\r\n\r\n  <ng-template cdk-portal>\r\n    <ul>\r\n      <li *ngFor=\"let fruitName of fruits\"> {{fruitName}} </li>\r\n    </ul>\r\n  </ng-template>\r\n\r\n  <ng-template #templateRef let-data> {{fruit}} - {{ data?.status }}!</ng-template>\r\n  `,\r\n})\r\nclass PortalTestApp {\r\n  @ViewChildren(CdkPortal) portals: QueryList<CdkPortal>;\r\n  @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\r\n  @ViewChild('templateRef', { read: TemplateRef }) templateRef: TemplateRef<any>;\r\n\r\n  selectedPortal: Portal<any>|undefined;\r\n  fruit: string = 'Banana';\r\n  fruits = ['Apple', 'Pineapple', 'Durian'];\r\n  attachedSpy = jasmine.createSpy('attached spy');\r\n\r\n  constructor(public injector: Injector) { }\r\n\r\n  get cakePortal() {\r\n    return this.portals.first;\r\n  }\r\n\r\n  get piePortal() {\r\n    return this.portals.toArray()[1];\r\n  }\r\n\r\n  get portalWithBinding() {\r\n    return this.portals.toArray()[2];\r\n  }\r\n\r\n  get portalWithTemplate() {\r\n    return this.portals.toArray()[3];\r\n  }\r\n\r\n}\r\n\r\n/** Test-bed component that contains a portal outlet and a couple of template portals. */\r\n@Component({\r\n  template: `\r\n    <div class=\"portal-container\">\r\n      <ng-template cdkPortalOutlet></ng-template>\r\n    </div>\r\n  `,\r\n})\r\nclass UnboundPortalTestApp {\r\n  @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\r\n}\r\n\r\n// Create a real (non-test) NgModule as a workaround for\r\n// https://github.com/angular/angular/issues/10760\r\nconst TEST_COMPONENTS = [\r\n  PortalTestApp,\r\n  UnboundPortalTestApp,\r\n  ArbitraryViewContainerRefComponent,\r\n  PizzaMsg\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule, PortalModule],\r\n  exports: TEST_COMPONENTS,\r\n  declarations: TEST_COMPONENTS,\r\n  entryComponents: TEST_COMPONENTS,\r\n})\r\nclass PortalTestModule { }\r\n"]}