{"version":3,"file":"portal-errors.js","sourceRoot":"","sources":["../../../../src/cdk/portal/portal-errors.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAYA;IACE,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAC;CAChD;AAFD,oDAEC;;;;;AAMD;IACE,MAAM,KAAK,CAAC,oCAAoC,CAAC,CAAC;CACnD;AAFD,0EAEC;;;;;AAMD;IACE,MAAM,KAAK,CAAC,6CAA6C,CAAC,CAAC;CAC5D;AAFD,sFAEC;;;;;AAMD;IACE,MAAM,KAAK,CAAC,+EAA+E;QAC/E,wCAAwC,CAAC,CAAC;CACvD;AAHD,kEAGC;;;;;AAMD;IACE,MAAM,KAAK,CAAC,sDAAsD,CAAC,CAAC;CACrE;AAFD,gEAEC;;;;;AAMD;IACE,MAAM,KAAK,CAAC,8DAA8D,CAAC,CAAC;CAC7E;AAFD,gEAEC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Throws an exception when attempting to attach a null portal to a host.\r\n * @docs-private\r\n */\r\nexport function throwNullPortalError() {\r\n  throw Error('Must provide a portal to attach');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach a portal to a host that is already attached.\r\n * @docs-private\r\n */\r\nexport function throwPortalAlreadyAttachedError() {\r\n  throw Error('Host already has a portal attached');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach a portal to an already-disposed host.\r\n * @docs-private\r\n */\r\nexport function throwPortalOutletAlreadyDisposedError() {\r\n  throw Error('This PortalOutlet has already been disposed');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach an unknown portal type.\r\n * @docs-private\r\n */\r\nexport function throwUnknownPortalTypeError() {\r\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\r\n              'a ComponentPortal or a TemplatePortal.');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach a portal to a null host.\r\n * @docs-private\r\n */\r\nexport function throwNullPortalOutletError() {\r\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to detach a portal that is not attached.\r\n * @docs-private\r\n */\r\nexport function throwNoPortalAttachedError() {\r\n  throw Error('Attempting to detach a portal that is not attached to a host');\r\n}\r\n"]}