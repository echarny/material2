{"version":3,"file":"dom-portal-outlet.js","sourceRoot":"","sources":["../../../../src/cdk/portal/dom-portal-outlet.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ApplicationRef,\r\n  Injector,\r\n} from '@angular/core';\r\nimport {BasePortalOutlet, ComponentPortal, TemplatePortal} from './portal';\r\n\r\n\r\n/**\r\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n */\r\nexport class DomPortalOutlet extends BasePortalOutlet {\r\n  constructor(\r\n      /** Element into which the content is projected. */\r\n      public outletElement: Element,\r\n      private _componentFactoryResolver: ComponentFactoryResolver,\r\n      private _appRef: ApplicationRef,\r\n      private _defaultInjector: Injector) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\n   * @param portal Portal to be attached\r\n   * @returns Reference to the created component.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    let componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    let componentRef: ComponentRef<T>;\r\n\r\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n    // for the component (in terms of Angular's component tree, not rendering).\r\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n    // and then manually attach the view to the application.\r\n    if (portal.viewContainerRef) {\r\n      componentRef = portal.viewContainerRef.createComponent(\r\n          componentFactory,\r\n          portal.viewContainerRef.length,\r\n          portal.injector || portal.viewContainerRef.parentInjector);\r\n\r\n      this.setDisposeFn(() => componentRef.destroy());\r\n    } else {\r\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\r\n      this._appRef.attachView(componentRef.hostView);\r\n      this.setDisposeFn(() => {\r\n        this._appRef.detachView(componentRef.hostView);\r\n        componentRef.destroy();\r\n      });\r\n    }\r\n    // At this point the component has been instantiated, so we move it to the location in the DOM\r\n    // where we want it to be rendered.\r\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\r\n\r\n    return componentRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches a template portal to the DOM as an embedded view.\r\n   * @param portal Portal to be attached.\r\n   * @returns Reference to the created embedded view.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    let viewContainer = portal.viewContainerRef;\r\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\r\n    viewRef.detectChanges();\r\n\r\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\r\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\r\n    // (e.g Overlay Container) To move the view to the specified host element. We just\r\n    // re-append the existing root nodes.\r\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\r\n\r\n    this.setDisposeFn((() => {\r\n      let index = viewContainer.indexOf(viewRef);\r\n      if (index !== -1) {\r\n        viewContainer.remove(index);\r\n      }\r\n    }));\r\n\r\n    // TODO(jelbourn): Return locals from view.\r\n    return viewRef;\r\n  }\r\n\r\n  /**\r\n   * Clears out a portal from the DOM.\r\n   */\r\n  dispose(): void {\r\n    super.dispose();\r\n    if (this.outletElement.parentNode != null) {\r\n      this.outletElement.parentNode.removeChild(this.outletElement);\r\n    }\r\n  }\r\n\r\n  /** Gets the root HTMLElement for an instantiated component. */\r\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n  }\r\n}\r\n"]}