{"version":3,"file":"portal-directives.js","sourceRoot":"","sources":["../../../../src/cdk/portal/portal-directives.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  NgModule,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal} from './portal';\r\n\r\n\r\n/**\r\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\r\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\r\n */\r\n@Directive({\r\n  selector: '[cdk-portal], [cdkPortal], [portal]',\r\n  exportAs: 'cdkPortal',\r\n})\r\nexport class CdkPortal extends TemplatePortal {\r\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\n}\r\n\r\n/**\r\n * Possible attached references to the CdkPortalOutlet.\r\n */\r\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\r\n\r\n\r\n/**\r\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\r\n * directly attached to it, enabling declarative use.\r\n *\r\n * Usage:\r\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\r\n */\r\n@Directive({\r\n  selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\r\n  exportAs: 'cdkPortalOutlet, cdkPortalHost',\r\n  inputs: ['portal: cdkPortalOutlet']\r\n})\r\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\r\n  /** Whether the portal component is initialized. */\r\n  private _isInitialized = false;\r\n\r\n  /** Reference to the currently-attached component/view ref. */\r\n  private _attachedRef: CdkPortalOutletAttachedRef;\r\n\r\n  constructor(\r\n      private _componentFactoryResolver: ComponentFactoryResolver,\r\n      private _viewContainerRef: ViewContainerRef) {\r\n    super();\r\n  }\r\n\r\n  /** Portal associated with the Portal outlet. */\r\n  get portal(): Portal<any> | null {\r\n    return this._attachedPortal;\r\n  }\r\n\r\n  set portal(portal: Portal<any> | null) {\r\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\r\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\r\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\r\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\r\n    if (this.hasAttached() && !portal && !this._isInitialized) {\r\n      return;\r\n    }\r\n\r\n    if (this.hasAttached()) {\r\n      super.detach();\r\n    }\r\n\r\n    if (portal) {\r\n      super.attach(portal);\r\n    }\r\n\r\n    this._attachedPortal = portal;\r\n  }\r\n\r\n  @Output() attached: EventEmitter<CdkPortalOutletAttachedRef> =\r\n      new EventEmitter<CdkPortalOutletAttachedRef>();\r\n\r\n  /** Component or view reference that is attached to the portal. */\r\n  get attachedRef(): CdkPortalOutletAttachedRef {\r\n    return this._attachedRef;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.dispose();\r\n    this._attachedPortal = null;\r\n    this._attachedRef = null;\r\n  }\r\n\r\n  /**\r\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\r\n   *\r\n   * @param portal Portal to be attached to the portal outlet.\r\n   * @returns Reference to the created component.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    portal.setAttachedHost(this);\r\n\r\n    // If the portal specifies an origin, use that as the logical location of the component\r\n    // in the application tree. Otherwise use the location of this PortalOutlet.\r\n    const viewContainerRef = portal.viewContainerRef != null ?\r\n        portal.viewContainerRef :\r\n        this._viewContainerRef;\r\n\r\n    const componentFactory =\r\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    const ref = viewContainerRef.createComponent(\r\n        componentFactory, viewContainerRef.length,\r\n        portal.injector || viewContainerRef.parentInjector);\r\n\r\n    super.setDisposeFn(() => ref.destroy());\r\n    this._attachedPortal = portal;\r\n    this._attachedRef = ref;\r\n    this.attached.emit(ref);\r\n\r\n    return ref;\r\n  }\r\n\r\n  /**\r\n   * Attach the given TemplatePortal to this PortlHost as an embedded View.\r\n   * @param portal Portal to be attached.\r\n   * @returns Reference to the created embedded view.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    portal.setAttachedHost(this);\r\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\r\n    super.setDisposeFn(() => this._viewContainerRef.clear());\r\n\r\n    this._attachedPortal = portal;\r\n    this._attachedRef = viewRef;\r\n    this.attached.emit(viewRef);\r\n\r\n    return viewRef;\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  exports: [CdkPortal, CdkPortalOutlet],\r\n  declarations: [CdkPortal, CdkPortalOutlet],\r\n})\r\nexport class PortalModule {}\r\n"]}