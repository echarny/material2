{"version":3,"file":"cell.js","sourceRoot":"","sources":["../../../../src/cdk/table/cell.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ContentChild, Directive, ElementRef, Input, TemplateRef} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CanStick, mixinHasStickyInput} from './can-stick';\r\n\r\n/** Base interface for a cell definition. Captures a column's cell template definition. */\r\nexport interface CellDef {\r\n  template: TemplateRef<any>;\r\n}\r\n\r\n/**\r\n * Cell definition for a CDK table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkCellDef]'})\r\nexport class CdkCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n\r\n/**\r\n * Header cell definition for a CDK table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkHeaderCellDef]'})\r\nexport class CdkHeaderCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n\r\n/**\r\n * Footer cell definition for a CDK table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkFooterCellDef]'})\r\nexport class CdkFooterCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkColumnDef.\r\n/** @docs-private */\r\nexport class CdkColumnDefBase {}\r\nexport const _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\r\n\r\n/**\r\n * Column definition for the CDK table.\r\n * Defines a set of cells available for a table column.\r\n */\r\n@Directive({\r\n  selector: '[cdkColumnDef]',\r\n  inputs: ['sticky']\r\n})\r\nexport class CdkColumnDef extends _CdkColumnDefBase implements CanStick {\r\n  /** Unique name for this column. */\r\n  @Input('cdkColumnDef')\r\n  get name(): string { return this._name; }\r\n  set name(name: string) {\r\n    // If the directive is set without a name (updated programatically), then this setter will\r\n    // trigger with an empty string and should not overwrite the programatically set value.\r\n    if (!name) { return; }\r\n\r\n    this._name = name;\r\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\r\n  }\r\n  _name: string;\r\n\r\n  /**\r\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\r\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\r\n   * has been changed.\r\n   */\r\n  @Input('stickyEnd')\r\n  get stickyEnd(): boolean { return this._stickyEnd; }\r\n  set stickyEnd(v: boolean) {\r\n    const prevValue = this._stickyEnd;\r\n    this._stickyEnd = coerceBooleanProperty(v);\r\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\r\n  }\r\n  _stickyEnd: boolean = false;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkCellDef) cell: CdkCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkHeaderCellDef) headerCell: CdkHeaderCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkFooterCellDef) footerCell: CdkFooterCellDef;\r\n\r\n  /**\r\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\r\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\r\n   * do not match are replaced by the '-' character.\r\n   */\r\n  cssClassFriendlyName: string;\r\n}\r\n\r\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\r\nexport class BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\r\n    elementRef.nativeElement.classList.add(columnClassName);\r\n  }\r\n}\r\n\r\n/** Header cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\r\n  host: {\r\n    'class': 'cdk-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n})\r\nexport class CdkHeaderCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Footer cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\r\n  host: {\r\n    'class': 'cdk-footer-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkFooterCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-cell, td[cdk-cell]',\r\n  host: {\r\n    'class': 'cdk-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n"]}