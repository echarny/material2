{"version":3,"file":"autosize.spec.js","sourceRoot":"","sources":["../../../../src/cdk/text-field/autosize.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {dispatchFakeEvent} from '@angular/cdk/testing';\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {async, ComponentFixture, fakeAsync, flush, TestBed, tick} from '@angular/core/testing';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {By} from '@angular/platform-browser';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {CdkTextareaAutosize} from './autosize';\r\nimport {TextFieldModule} from './text-field-module';\r\n\r\n\r\ndescribe('CdkTextareaAutosize', () => {\r\n  let fixture: ComponentFixture<AutosizeTextAreaWithContent>;\r\n  let textarea: HTMLTextAreaElement;\r\n  let autosize: CdkTextareaAutosize;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        FormsModule,\r\n        TextFieldModule,\r\n        NoopAnimationsModule,\r\n      ],\r\n      declarations: [\r\n        AutosizeTextAreaWithContent,\r\n        AutosizeTextAreaWithValue,\r\n        AutosizeTextareaWithNgModel,\r\n        AutosizeTextareaWithoutAutosize,\r\n      ],\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(AutosizeTextAreaWithContent);\r\n    fixture.detectChanges();\r\n\r\n    textarea = fixture.nativeElement.querySelector('textarea');\r\n    autosize = fixture.debugElement.query(\r\n        By.directive(CdkTextareaAutosize)).injector.get<CdkTextareaAutosize>(CdkTextareaAutosize);\r\n  });\r\n\r\n  it('should resize the textarea based on its content', () => {\r\n    let previousHeight = textarea.clientHeight;\r\n\r\n    fixture.componentInstance.content = `\r\n    Once upon a midnight dreary, while I pondered, weak and weary,\r\n    Over many a quaint and curious volume of forgotten lore—\r\n        While I nodded, nearly napping, suddenly there came a tapping,\r\n    As of some one gently rapping, rapping at my chamber door.\r\n    “’Tis some visitor,” I muttered, “tapping at my chamber door—\r\n                Only this and nothing more.”`;\r\n\r\n    // Manually call resizeToFitContent instead of faking an `input` event.\r\n    fixture.detectChanges();\r\n    autosize.resizeToFitContent();\r\n\r\n    expect(textarea.clientHeight)\r\n        .toBeGreaterThan(previousHeight, 'Expected textarea to have grown with added content.');\r\n    expect(textarea.clientHeight)\r\n        .toBe(textarea.scrollHeight, 'Expected textarea height to match its scrollHeight');\r\n\r\n    previousHeight = textarea.clientHeight;\r\n    fixture.componentInstance.content += `\r\n        Ah, distinctly I remember it was in the bleak December;\r\n    And each separate dying ember wrought its ghost upon the floor.\r\n        Eagerly I wished the morrow;—vainly I had sought to borrow\r\n        From my books surcease of sorrow—sorrow for the lost Lenore—\r\n    For the rare and radiant maiden whom the angels name Lenore—\r\n                Nameless here for evermore.`;\r\n\r\n    fixture.detectChanges();\r\n    autosize.resizeToFitContent();\r\n\r\n    expect(textarea.clientHeight)\r\n        .toBeGreaterThan(previousHeight, 'Expected textarea to have grown with added content.');\r\n    expect(textarea.clientHeight)\r\n        .toBe(textarea.scrollHeight, 'Expected textarea height to match its scrollHeight');\r\n  });\r\n\r\n  it('should set a min-height based on minRows', () => {\r\n    expect(textarea.style.minHeight).toBeFalsy();\r\n\r\n    fixture.componentInstance.minRows = 4;\r\n    fixture.detectChanges();\r\n\r\n    expect(textarea.style.minHeight).toBeDefined('Expected a min-height to be set via minRows.');\r\n\r\n    let previousMinHeight = parseInt(textarea.style.minHeight as string);\r\n    fixture.componentInstance.minRows = 6;\r\n    fixture.detectChanges();\r\n\r\n    expect(parseInt(textarea.style.minHeight as string))\r\n        .toBeGreaterThan(previousMinHeight, 'Expected increased min-height with minRows increase.');\r\n  });\r\n\r\n  it('should set a max-height based on maxRows', () => {\r\n    expect(textarea.style.maxHeight).toBeFalsy();\r\n\r\n    fixture.componentInstance.maxRows = 4;\r\n    fixture.detectChanges();\r\n\r\n    expect(textarea.style.maxHeight).toBeDefined('Expected a max-height to be set via maxRows.');\r\n\r\n    let previousMaxHeight = parseInt(textarea.style.maxHeight as string);\r\n    fixture.componentInstance.maxRows = 6;\r\n    fixture.detectChanges();\r\n\r\n    expect(parseInt(textarea.style.maxHeight as string))\r\n        .toBeGreaterThan(previousMaxHeight, 'Expected increased max-height with maxRows increase.');\r\n  });\r\n\r\n  it('should export the cdkAutosize reference', () => {\r\n    expect(fixture.componentInstance.autosize).toBeTruthy();\r\n    expect(fixture.componentInstance.autosize.resizeToFitContent).toBeTruthy();\r\n  });\r\n\r\n  it('should initially set the rows of a textarea to one', () => {\r\n    expect(textarea.rows)\r\n      .toBe(1, 'Expected the directive to initially set the rows property to one.');\r\n\r\n    fixture.componentInstance.minRows = 1;\r\n    fixture.detectChanges();\r\n\r\n    expect(textarea.rows)\r\n      .toBe(1, 'Expected the textarea to have the rows property set to one.');\r\n\r\n    const previousMinHeight = parseInt(textarea.style.minHeight as string);\r\n\r\n    fixture.componentInstance.minRows = 2;\r\n    fixture.detectChanges();\r\n\r\n    expect(textarea.rows).toBe(1, 'Expected the rows property to be set to one. ' +\r\n      'The amount of rows will be specified using CSS.');\r\n\r\n    expect(parseInt(textarea.style.minHeight as string))\r\n      .toBeGreaterThan(previousMinHeight, 'Expected the textarea to grow to two rows.');\r\n  });\r\n\r\n  it('should calculate the proper height based on the specified amount of max rows', () => {\r\n    fixture.componentInstance.content = [1, 2, 3, 4, 5, 6, 7, 8].join('\\n');\r\n    fixture.detectChanges();\r\n    autosize.resizeToFitContent();\r\n\r\n    expect(textarea.clientHeight)\r\n      .toBe(textarea.scrollHeight, 'Expected textarea to not have a vertical scrollbar.');\r\n\r\n    fixture.componentInstance.maxRows = 5;\r\n    fixture.detectChanges();\r\n\r\n    expect(textarea.clientHeight)\r\n      .toBeLessThan(textarea.scrollHeight, 'Expected textarea to have a vertical scrollbar.');\r\n  });\r\n\r\n  it('should properly resize to content on init', () => {\r\n    // Manually create the test component in this test, because in this test the first change\r\n    // detection should be triggered after a multiline content is set.\r\n    fixture = TestBed.createComponent(AutosizeTextAreaWithContent);\r\n    textarea = fixture.nativeElement.querySelector('textarea');\r\n    autosize = fixture.debugElement.query(By.css('textarea')).injector.get(CdkTextareaAutosize);\r\n\r\n    fixture.componentInstance.content = `\r\n      Line\r\n      Line\r\n      Line\r\n      Line\r\n      Line`;\r\n\r\n    fixture.detectChanges();\r\n\r\n    expect(textarea.clientHeight)\r\n      .toBe(textarea.scrollHeight, 'Expected textarea height to match its scrollHeight');\r\n  });\r\n\r\n  it('should resize when an associated form control value changes', fakeAsync(() => {\r\n    const fixtureWithForms = TestBed.createComponent(AutosizeTextareaWithNgModel);\r\n    textarea = fixtureWithForms.nativeElement.querySelector('textarea');\r\n    fixtureWithForms.detectChanges();\r\n\r\n    const previousHeight = textarea.clientHeight;\r\n\r\n    fixtureWithForms.componentInstance.model = `\r\n        And the silken, sad, uncertain rustling of each purple curtain\r\n    Thrilled me—filled me with fantastic terrors never felt before;\r\n        So that now, to still the beating of my heart, I stood repeating\r\n        “’Tis some visitor entreating entrance at my chamber door—\r\n    Some late visitor entreating entrance at my chamber door;—\r\n                This it is and nothing more.” `;\r\n    fixtureWithForms.detectChanges();\r\n    flush();\r\n    fixtureWithForms.detectChanges();\r\n\r\n    expect(textarea.clientHeight)\r\n        .toBeGreaterThan(previousHeight, 'Expected increased height when ngModel is updated.');\r\n  }));\r\n\r\n  it('should resize when the textarea value is changed programmatically', fakeAsync(() => {\r\n    const previousHeight = textarea.clientHeight;\r\n\r\n    textarea.value = `\r\n      How much wood would a woodchuck chuck\r\n      if a woodchuck could chuck wood?\r\n    `;\r\n\r\n    fixture.detectChanges();\r\n    flush();\r\n    fixture.detectChanges();\r\n\r\n    expect(textarea.clientHeight)\r\n        .toBeGreaterThan(previousHeight, 'Expected the textarea height to have increased.');\r\n  }));\r\n\r\n  it('should trigger a resize when the window is resized', fakeAsync(() => {\r\n    spyOn(autosize, 'resizeToFitContent');\r\n\r\n    dispatchFakeEvent(window, 'resize');\r\n    tick(16);\r\n\r\n    expect(autosize.resizeToFitContent).toHaveBeenCalled();\r\n  }));\r\n\r\n  it('should not trigger a resize when it is disabled', fakeAsync(() => {\r\n    const fixtureWithoutAutosize = TestBed.createComponent(AutosizeTextareaWithoutAutosize);\r\n    textarea = fixtureWithoutAutosize.nativeElement.querySelector('textarea');\r\n    autosize = fixtureWithoutAutosize.debugElement.query(By.css('textarea'))\r\n        .injector.get(CdkTextareaAutosize);\r\n\r\n    fixtureWithoutAutosize.detectChanges();\r\n\r\n    const previousHeight = textarea.clientHeight;\r\n\r\n    fixtureWithoutAutosize.componentInstance.content = `\r\n    Line\r\n    Line\r\n    Line\r\n    Line\r\n    Line`;\r\n\r\n    // Manually call resizeToFitContent instead of faking an `input` event.\r\n    fixtureWithoutAutosize.detectChanges();\r\n\r\n    expect(textarea.clientHeight)\r\n        .toEqual(previousHeight, 'Expected textarea to still have the same size.');\r\n    expect(textarea.clientHeight)\r\n        .toBeLessThan(textarea.scrollHeight, 'Expected textarea to a have scrollbar.');\r\n\r\n    autosize.enabled = true;\r\n    fixtureWithoutAutosize.detectChanges();\r\n\r\n    expect(textarea.clientHeight)\r\n        .toBeGreaterThan(previousHeight,\r\n            'Expected textarea to have grown after enabling autosize.');\r\n    expect(textarea.clientHeight)\r\n        .toBe(textarea.scrollHeight, 'Expected textarea not to have a scrollbar');\r\n\r\n    autosize.enabled = false;\r\n    fixtureWithoutAutosize.detectChanges();\r\n\r\n    expect(textarea.clientHeight)\r\n        .toEqual(previousHeight, 'Expected textarea to have the original size.');\r\n    expect(textarea.clientHeight)\r\n        .toBeLessThan(textarea.scrollHeight, 'Expected textarea to have a scrollbar.');\r\n  }));\r\n});\r\n\r\n// Styles to reset padding and border to make measurement comparisons easier.\r\nconst textareaStyleReset = `\r\n    textarea {\r\n      padding: 0;\r\n      border: none;\r\n      overflow: auto;\r\n    }`;\r\n\r\n@Component({\r\n  template: `\r\n    <textarea cdkTextareaAutosize [cdkAutosizeMinRows]=\"minRows\" [cdkAutosizeMaxRows]=\"maxRows\"\r\n        #autosize=\"cdkTextareaAutosize\">\r\n      {{content}}\r\n    </textarea>`,\r\n  styles: [textareaStyleReset],\r\n})\r\nclass AutosizeTextAreaWithContent {\r\n  @ViewChild('autosize') autosize: CdkTextareaAutosize;\r\n  minRows: number | null = null;\r\n  maxRows: number | null = null;\r\n  content: string = '';\r\n}\r\n\r\n@Component({\r\n  template: `<textarea cdkTextareaAutosize [value]=\"value\"></textarea>`,\r\n  styles: [textareaStyleReset],\r\n})\r\nclass AutosizeTextAreaWithValue {\r\n  value: string = '';\r\n}\r\n\r\n@Component({\r\n  template: `<textarea cdkTextareaAutosize [(ngModel)]=\"model\"></textarea>`,\r\n  styles: [textareaStyleReset],\r\n})\r\nclass AutosizeTextareaWithNgModel {\r\n  model = '';\r\n}\r\n\r\n@Component({\r\n  template: `<textarea [cdkTextareaAutosize]=\"false\">{{content}}</textarea>`,\r\n  styles: [textareaStyleReset],\r\n})\r\nclass AutosizeTextareaWithoutAutosize {\r\n  content: string = '';\r\n}\r\n\r\n"]}