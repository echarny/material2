{"version":3,"file":"accordion.js","sourceRoot":"","sources":["../../../../src/cdk/accordion/accordion.ts"],"names":[],"mappings":";;;;;;;;;AAQA,sCAA+C;AAC/C,kDAA4D;AAC5D,6BAA6B;;AAG7B,IAAI,MAAM,GAAG,CAAC,CAAC;;;;;;;oCAWqC,IAAI,cAAO,EAAW;;kBAG1D,mBAAiB,MAAM,EAAI;sBAMf,KAAK;;0BAF3B,+BAAK;;sBAAc,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;aAC1C,UAAU,KAAc,IAAI,IAAI,CAAC,MAAM,GAAG,gCAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;IAGzE,gFAAgF;;IAChF,8BAAO;IAAP;QACE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;KAC1B;IAED,iFAAiF;;IACjF,+BAAQ;IAAR;QACE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KAC3B;IAEO,oCAAa,GAArB,UAAsB,QAAiB;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC1C;KACF;;gBA/BF,gBAAS,SAAC;oBACT,QAAQ,EAAE,+BAA+B;oBACzC,QAAQ,EAAE,cAAc;iBACzB;;;;0BASE,YAAK;;uBA9BR;;AAsBa,oCAAY","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Used to generate unique ID for each accordion. */\r\nlet nextId = 0;\r\n\r\n/**\r\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\r\n */\r\n@Directive({\r\n  selector: 'cdk-accordion, [cdkAccordion]',\r\n  exportAs: 'cdkAccordion',\r\n})\r\nexport class CdkAccordion {\r\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\r\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\r\n\r\n  /** A readonly id value to use for unique selection coordination. */\r\n  readonly id = `cdk-accordion-${nextId++}`;\r\n\r\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\r\n  @Input()\r\n  get multi(): boolean { return this._multi; }\r\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\r\n  private _multi: boolean = false;\r\n\r\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\r\n  openAll(): void {\r\n    this._openCloseAll(true);\r\n  }\r\n\r\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\r\n  closeAll(): void {\r\n    this._openCloseAll(false);\r\n  }\r\n\r\n  private _openCloseAll(expanded: boolean): void {\r\n    if (this.multi) {\r\n      this._openCloseAllActions.next(expanded);\r\n    }\r\n  }\r\n}\r\n"]}