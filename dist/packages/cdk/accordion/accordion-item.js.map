{"version":3,"file":"accordion-item.js","sourceRoot":"","sources":["../../../../src/cdk/accordion/accordion-item.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Output,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {CdkAccordion} from './accordion';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subscription} from 'rxjs';\r\n\r\n/** Used to generate unique ID for each accordion item. */\r\nlet nextId = 0;\r\n\r\n/**\r\n * An basic directive expected to be extended and decorated as a component.  Sets up all\r\n * events and attributes needed to be managed by a CdkAccordion parent.\r\n */\r\n@Directive({\r\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\r\n  exportAs: 'cdkAccordionItem',\r\n  providers: [\r\n    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\r\n    // to the same accordion.\r\n    {provide: CdkAccordion, useValue: undefined},\r\n  ],\r\n})\r\nexport class CdkAccordionItem implements OnDestroy {\r\n  /** Subscription to openAll/closeAll events. */\r\n  private _openCloseAllSubscription = Subscription.EMPTY;\r\n  /** Event emitted every time the AccordionItem is closed. */\r\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Event emitted every time the AccordionItem is opened. */\r\n  @Output() opened: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Event emitted when the AccordionItem is destroyed. */\r\n  @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Emits whenever the expanded state of the accordion changes.\r\n   * Primarily used to facilitate two-way binding.\r\n   * @docs-private\r\n   */\r\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** The unique AccordionItem id. */\r\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\r\n\r\n  /** Whether the AccordionItem is expanded. */\r\n  @Input()\r\n  get expanded(): any { return this._expanded; }\r\n  set expanded(expanded: any) {\r\n    expanded = coerceBooleanProperty(expanded);\r\n\r\n    // Only emit events and update the internal value if the value changes.\r\n    if (this._expanded !== expanded) {\r\n      this._expanded = expanded;\r\n      this.expandedChange.emit(expanded);\r\n\r\n      if (expanded) {\r\n        this.opened.emit();\r\n        /**\r\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\r\n         * the name value is the id of the accordion.\r\n         */\r\n        const accordionId = this.accordion ? this.accordion.id : this.id;\r\n        this._expansionDispatcher.notify(this.id, accordionId);\r\n      } else {\r\n        this.closed.emit();\r\n      }\r\n\r\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\r\n      // This includes cases like the open, close and toggle methods.\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _expanded = false;\r\n\r\n  /** Whether the AccordionItem is disabled. */\r\n  @Input()\r\n  get disabled() { return this._disabled; }\r\n  set disabled(disabled: any) { this._disabled = coerceBooleanProperty(disabled); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Unregister function for _expansionDispatcher. */\r\n  private _removeUniqueSelectionListener: () => void = () => {};\r\n\r\n  constructor(@Optional() @SkipSelf() public accordion: CdkAccordion,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\r\n    this._removeUniqueSelectionListener =\r\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\r\n        if (this.accordion && !this.accordion.multi &&\r\n            this.accordion.id === accordionId && this.id !== id) {\r\n          this.expanded = false;\r\n        }\r\n      });\r\n\r\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\r\n    if (this.accordion) {\r\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\r\n    }\r\n  }\r\n\r\n  /** Emits an event for the accordion item being destroyed. */\r\n  ngOnDestroy() {\r\n    this.opened.complete();\r\n    this.closed.complete();\r\n    this.destroyed.emit();\r\n    this.destroyed.complete();\r\n    this._removeUniqueSelectionListener();\r\n    this._openCloseAllSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Toggles the expanded state of the accordion item. */\r\n  toggle(): void {\r\n    if (!this.disabled) {\r\n      this.expanded = !this.expanded;\r\n    }\r\n  }\r\n\r\n  /** Sets the expanded state of the accordion item to false. */\r\n  close(): void {\r\n    if (!this.disabled) {\r\n      this.expanded = false;\r\n    }\r\n  }\r\n\r\n  /** Sets the expanded state of the accordion item to true. */\r\n  open(): void {\r\n    if (!this.disabled) {\r\n      this.expanded = true;\r\n    }\r\n  }\r\n\r\n  private _subscribeToOpenCloseAllActions(): Subscription {\r\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\r\n      // Only change expanded state if item is enabled\r\n      if (!this.disabled) {\r\n        this.expanded = expanded;\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}