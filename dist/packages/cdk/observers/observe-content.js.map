{"version":3,"file":"observe-content.js","sourceRoot":"","sources":["../../../../src/cdk/observers/observe-content.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  Input,\r\n  NgModule,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n} from '@angular/core';\r\nimport {Observable, Subject, Subscription} from 'rxjs';\r\nimport {debounceTime} from 'rxjs/operators';\r\n\r\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MutationObserverFactory {\r\n  create(callback: MutationCallback): MutationObserver | null {\r\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\r\n  }\r\n}\r\n\r\n\r\n/** An injectable service that allows watching elements for changes to their content. */\r\n@Injectable({providedIn: 'root'})\r\nexport class ContentObserver implements OnDestroy {\r\n  /** Keeps track of the existing MutationObservers so they can be reused. */\r\n  private _observedElements = new Map<Element, {\r\n    observer: MutationObserver | null,\r\n    stream: Subject<MutationRecord[]>,\r\n    count: number\r\n  }>();\r\n\r\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\r\n\r\n  ngOnDestroy() {\r\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\r\n  }\r\n\r\n  /**\r\n   * Observe content changes on an element.\r\n   * @param element The element to observe for content changes.\r\n   */\r\n  observe(element: Element): Observable<MutationRecord[]> {\r\n    return Observable.create(observer => {\r\n      const stream = this._observeElement(element);\r\n      const subscription = stream.subscribe(observer);\r\n\r\n      return () => {\r\n        subscription.unsubscribe();\r\n        this._unobserveElement(element);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Observes the given element by using the existing MutationObserver if available, or creating a\r\n   * new one if not.\r\n   */\r\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\r\n    if (!this._observedElements.has(element)) {\r\n      const stream = new Subject<MutationRecord[]>();\r\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\r\n      if (observer) {\r\n        observer.observe(element, {\r\n          characterData: true,\r\n          childList: true,\r\n          subtree: true\r\n        });\r\n      }\r\n      this._observedElements.set(element, {observer, stream, count: 1});\r\n    } else {\r\n      this._observedElements.get(element)!.count++;\r\n    }\r\n    return this._observedElements.get(element)!.stream;\r\n  }\r\n\r\n  /**\r\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\r\n   * observing this element.\r\n   */\r\n  private _unobserveElement(element: Element) {\r\n    if (this._observedElements.has(element)) {\r\n      this._observedElements.get(element)!.count--;\r\n      if (!this._observedElements.get(element)!.count) {\r\n        this._cleanupObserver(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clean up the underlying MutationObserver for the specified element. */\r\n  private _cleanupObserver(element: Element) {\r\n    if (this._observedElements.has(element)) {\r\n      const {observer, stream} = this._observedElements.get(element)!;\r\n      if (observer) {\r\n        observer.disconnect();\r\n      }\r\n      stream.complete();\r\n      this._observedElements.delete(element);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\n@Directive({\r\n  selector: '[cdkObserveContent]',\r\n  exportAs: 'cdkObserveContent',\r\n})\r\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\r\n  /** Event emitted for each change in the element's content. */\r\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\r\n\r\n  /**\r\n   * Whether observing content is disabled. This option can be used\r\n   * to disconnect the underlying MutationObserver until it is needed.\r\n   */\r\n  @Input('cdkObserveContentDisabled')\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: any) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    if (this._disabled) {\r\n      this._unsubscribe();\r\n    } else {\r\n      this._subscribe();\r\n    }\r\n  }\r\n  private _disabled = false;\r\n\r\n  /** Debounce interval for emitting the changes. */\r\n  @Input()\r\n  get debounce(): number { return this._debounce; }\r\n  set debounce(value: number) {\r\n    this._debounce = coerceNumberProperty(value);\r\n    this._subscribe();\r\n  }\r\n  private _debounce: number;\r\n\r\n  private _currentSubscription: Subscription | null = null;\r\n\r\n  constructor(private _contentObserver: ContentObserver, private _elementRef: ElementRef,\r\n              private _ngZone: NgZone) {}\r\n\r\n  ngAfterContentInit() {\r\n    if (!this._currentSubscription && !this.disabled) {\r\n      this._subscribe();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._unsubscribe();\r\n  }\r\n\r\n  private _subscribe() {\r\n    this._unsubscribe();\r\n    const stream = this._contentObserver.observe(this._elementRef.nativeElement);\r\n\r\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\r\n    // Consider brining it back inside the zone next time we're making breaking changes.\r\n    // Bringing it back inside can cause things like infinite change detection loops and changed\r\n    // after checked errors if people's code isn't handling it properly.\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._currentSubscription =\r\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\r\n    });\r\n  }\r\n\r\n  private _unsubscribe() {\r\n    if (this._currentSubscription) {\r\n      this._currentSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  exports: [CdkObserveContent],\r\n  declarations: [CdkObserveContent],\r\n  providers: [MutationObserverFactory]\r\n})\r\nexport class ObserversModule {}\r\n"]}