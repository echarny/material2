{"version":3,"file":"observe-content.spec.js","sourceRoot":"","sources":["../../../../src/cdk/observers/observe-content.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, ElementRef, ViewChild} from '@angular/core';\r\nimport {async, ComponentFixture, fakeAsync, inject, TestBed, tick} from '@angular/core/testing';\r\nimport {ContentObserver, MutationObserverFactory, ObserversModule} from './observe-content';\r\n\r\n// TODO(elad): `ProxyZone` doesn't seem to capture the events raised by\r\n// `MutationObserver` and needs to be investigated\r\n\r\ndescribe('Observe content directive', () => {\r\n  describe('basic usage', () => {\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [ObserversModule],\r\n        declarations: [ComponentWithTextContent, ComponentWithChildTextContent]\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n    }));\r\n\r\n    it('should trigger the callback when the content of the element changes', done => {\r\n      let fixture = TestBed.createComponent(ComponentWithTextContent);\r\n      fixture.detectChanges();\r\n\r\n      // If the hint label is empty, expect no label.\r\n      const spy = spyOn(fixture.componentInstance, 'doSomething').and.callFake(() => {\r\n        expect(spy).toHaveBeenCalled();\r\n        done();\r\n      });\r\n\r\n      expect(spy).not.toHaveBeenCalled();\r\n\r\n      fixture.componentInstance.text = 'text';\r\n      fixture.detectChanges();\r\n    });\r\n\r\n    it('should trigger the callback when the content of the children changes', done => {\r\n      let fixture = TestBed.createComponent(ComponentWithChildTextContent);\r\n      fixture.detectChanges();\r\n\r\n      // If the hint label is empty, expect no label.\r\n      const spy = spyOn(fixture.componentInstance, 'doSomething').and.callFake(() => {\r\n        expect(spy).toHaveBeenCalled();\r\n        done();\r\n      });\r\n\r\n      expect(spy).not.toHaveBeenCalled();\r\n\r\n      fixture.componentInstance.text = 'text';\r\n      fixture.detectChanges();\r\n    });\r\n\r\n    it('should disconnect the MutationObserver when the directive is disabled', () => {\r\n      const observeSpy = jasmine.createSpy('observe spy');\r\n      const disconnectSpy = jasmine.createSpy('disconnect spy');\r\n\r\n      // Note: since we can't know exactly when the native MutationObserver will emit, we can't\r\n      // test this scenario reliably without risking flaky tests, which is why we supply a mock\r\n      // MutationObserver and check that the methods are called at the right time.\r\n      TestBed.overrideProvider(MutationObserverFactory, {\r\n        deps: [],\r\n        useFactory: () => ({\r\n          create: () => ({observe: observeSpy, disconnect: disconnectSpy})\r\n        })\r\n      });\r\n\r\n      const fixture = TestBed.createComponent(ComponentWithTextContent);\r\n      fixture.detectChanges();\r\n\r\n      expect(observeSpy).toHaveBeenCalledTimes(1);\r\n      expect(disconnectSpy).not.toHaveBeenCalled();\r\n\r\n      fixture.componentInstance.disabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(observeSpy).toHaveBeenCalledTimes(1);\r\n      expect(disconnectSpy).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n  });\r\n\r\n  describe('debounced', () => {\r\n    let fixture: ComponentFixture<ComponentWithDebouncedListener>;\r\n    let callbacks: Function[];\r\n    let invokeCallbacks = (args?: any) => callbacks.forEach(callback => callback(args));\r\n\r\n    beforeEach(async(() => {\r\n      callbacks = [];\r\n\r\n      TestBed.configureTestingModule({\r\n        imports: [ObserversModule],\r\n        declarations: [ComponentWithDebouncedListener],\r\n        providers: [{\r\n          provide: MutationObserverFactory,\r\n          useValue: {\r\n            create: function(callback: Function) {\r\n              callbacks.push(callback);\r\n\r\n              return {\r\n                observe: () => {},\r\n                disconnect: () => {}\r\n              };\r\n            }\r\n          }\r\n        }]\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n\r\n      fixture = TestBed.createComponent(ComponentWithDebouncedListener);\r\n      fixture.detectChanges();\r\n    }));\r\n\r\n    it('should debounce the content changes', fakeAsync(() => {\r\n      invokeCallbacks();\r\n      invokeCallbacks();\r\n      invokeCallbacks();\r\n\r\n      tick(500);\r\n      expect(fixture.componentInstance.spy).toHaveBeenCalledTimes(1);\r\n    }));\r\n  });\r\n});\r\n\r\ndescribe('ContentObserver injectable', () => {\r\n  describe('basic usage', () => {\r\n    let callbacks: Function[];\r\n    let invokeCallbacks = (args?: any) => callbacks.forEach(callback => callback(args));\r\n    let contentObserver: ContentObserver;\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      callbacks = [];\r\n\r\n      TestBed.configureTestingModule({\r\n        imports: [ObserversModule],\r\n        declarations: [UnobservedComponentWithTextContent],\r\n        providers: [{\r\n          provide: MutationObserverFactory,\r\n          useValue: {\r\n            create: function(callback: Function) {\r\n              callbacks.push(callback);\r\n\r\n              return {\r\n                observe: () => {},\r\n                disconnect: () => {}\r\n              };\r\n            }\r\n          }\r\n        }]\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n    }));\r\n\r\n    beforeEach(inject([ContentObserver], (co: ContentObserver) => {\r\n      contentObserver = co;\r\n    }));\r\n\r\n    it('should trigger the callback when the content of the element changes', fakeAsync(() => {\r\n      const spy = jasmine.createSpy('content observer');\r\n      const fixture = TestBed.createComponent(UnobservedComponentWithTextContent);\r\n      fixture.detectChanges();\r\n\r\n      contentObserver.observe(fixture.componentInstance.contentEl.nativeElement)\r\n          .subscribe(() => spy());\r\n\r\n      expect(spy).not.toHaveBeenCalled();\r\n\r\n      fixture.componentInstance.text = 'text';\r\n      invokeCallbacks();\r\n\r\n      expect(spy).toHaveBeenCalled();\r\n    }));\r\n\r\n    it('should only create one MutationObserver when observing the same element twice',\r\n        fakeAsync(inject([MutationObserverFactory], (mof: MutationObserverFactory) => {\r\n          const spy = jasmine.createSpy('content observer');\r\n          spyOn(mof, 'create').and.callThrough();\r\n          const fixture = TestBed.createComponent(UnobservedComponentWithTextContent);\r\n          fixture.detectChanges();\r\n\r\n          const sub1 = contentObserver.observe(fixture.componentInstance.contentEl.nativeElement)\r\n              .subscribe(() => spy());\r\n          contentObserver.observe(fixture.componentInstance.contentEl.nativeElement)\r\n              .subscribe(() => spy());\r\n\r\n          expect(mof.create).toHaveBeenCalledTimes(1);\r\n\r\n          fixture.componentInstance.text = 'text';\r\n          invokeCallbacks();\r\n\r\n          expect(spy).toHaveBeenCalledTimes(2);\r\n\r\n          spy.calls.reset();\r\n          sub1.unsubscribe();\r\n          fixture.componentInstance.text = 'text text';\r\n          invokeCallbacks();\r\n\r\n          expect(spy).toHaveBeenCalledTimes(1);\r\n        })));\r\n  });\r\n});\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <div\r\n      (cdkObserveContent)=\"doSomething()\"\r\n      [cdkObserveContentDisabled]=\"disabled\">{{text}}</div>\r\n  `\r\n})\r\nclass ComponentWithTextContent {\r\n  text = '';\r\n  disabled = false;\r\n  doSomething() {}\r\n}\r\n\r\n@Component({ template: `<div (cdkObserveContent)=\"doSomething()\"><div>{{text}}</div></div>` })\r\nclass ComponentWithChildTextContent {\r\n  text = '';\r\n  doSomething() {}\r\n}\r\n\r\n@Component({\r\n  template: `<div (cdkObserveContent)=\"spy($event)\" [debounce]=\"debounce\">{{text}}</div>`\r\n})\r\nclass ComponentWithDebouncedListener {\r\n  debounce = 500;\r\n  spy = jasmine.createSpy('MutationObserver callback');\r\n}\r\n\r\n@Component({\r\n  template: `<div #contentEl>{{text}}</div>`\r\n})\r\nclass UnobservedComponentWithTextContent {\r\n  @ViewChild('contentEl') contentEl: ElementRef;\r\n  text = '';\r\n}\r\n"]}