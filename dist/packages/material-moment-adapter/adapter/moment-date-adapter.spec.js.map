{"version":3,"file":"moment-date-adapter.spec.js","sourceRoot":"","sources":["../../../../src/material-moment-adapter/adapter/moment-date-adapter.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {LOCALE_ID} from '@angular/core';\r\nimport {async, inject, TestBed} from '@angular/core/testing';\r\nimport {DateAdapter, DEC, FEB, JAN, MAR, MAT_DATE_LOCALE} from '@angular/material/core';\r\nimport * as moment from 'moment';\r\nimport {MomentDateModule} from './index';\r\nimport {MomentDateAdapter, MAT_MOMENT_DATE_ADAPTER_OPTIONS} from './moment-date-adapter';\r\n\r\n\r\ndescribe('MomentDateAdapter', () => {\r\n  let adapter: MomentDateAdapter;\r\n  let assertValidDate: (d: moment.Moment | null, valid: boolean) => void;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MomentDateModule]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(inject([DateAdapter], (dateAdapter: MomentDateAdapter) => {\r\n    moment.locale('en');\r\n    adapter = dateAdapter;\r\n    adapter.setLocale('en');\r\n\r\n    assertValidDate = (d: moment.Moment | null, valid: boolean) => {\r\n      expect(adapter.isDateInstance(d)).not.toBeNull(`Expected ${d} to be a date instance`);\r\n      expect(adapter.isValid(d!)).toBe(valid,\r\n          `Expected ${d} to be ${valid ? 'valid' : 'invalid'},` +\r\n          ` but was ${valid ? 'invalid' : 'valid'}`);\r\n    };\r\n  }));\r\n\r\n  it('should get year', () => {\r\n    expect(adapter.getYear(moment([2017,  JAN,  1]))).toBe(2017);\r\n  });\r\n\r\n  it('should get month', () => {\r\n    expect(adapter.getMonth(moment([2017,  JAN,  1]))).toBe(0);\r\n  });\r\n\r\n  it('should get date', () => {\r\n    expect(adapter.getDate(moment([2017,  JAN,  1]))).toBe(1);\r\n  });\r\n\r\n  it('should get day of week', () => {\r\n    expect(adapter.getDayOfWeek(moment([2017,  JAN,  1]))).toBe(0);\r\n  });\r\n\r\n  it('should get same day of week in a locale with a different first day of the week', () => {\r\n    adapter.setLocale('fr');\r\n    expect(adapter.getDayOfWeek(moment([2017,  JAN,  1]))).toBe(0);\r\n  });\r\n\r\n  it('should get long month names', () => {\r\n    expect(adapter.getMonthNames('long')).toEqual([\r\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n      'October', 'November', 'December'\r\n    ]);\r\n  });\r\n\r\n  it('should get long month names', () => {\r\n    expect(adapter.getMonthNames('short')).toEqual([\r\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n    ]);\r\n  });\r\n\r\n  it('should get narrow month names', () => {\r\n    expect(adapter.getMonthNames('narrow')).toEqual([\r\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n    ]);\r\n  });\r\n\r\n  it('should get month names in a different locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    expect(adapter.getMonthNames('long')).toEqual([\r\n      '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'\r\n    ]);\r\n  });\r\n\r\n  it('should get date names', () => {\r\n    expect(adapter.getDateNames()).toEqual([\r\n      '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17',\r\n      '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'\r\n    ]);\r\n  });\r\n\r\n  it('should get date names in a different locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    expect(adapter.getDateNames()).toEqual([\r\n      '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17',\r\n      '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'\r\n    ]);\r\n  });\r\n\r\n  it('should get long day of week names', () => {\r\n    expect(adapter.getDayOfWeekNames('long')).toEqual([\r\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\r\n    ]);\r\n  });\r\n\r\n  it('should get short day of week names', () => {\r\n    expect(adapter.getDayOfWeekNames('short')).toEqual([\r\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'\r\n    ]);\r\n  });\r\n\r\n  it('should get narrow day of week names', () => {\r\n    expect(adapter.getDayOfWeekNames('narrow')).toEqual([\r\n      'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'\r\n    ]);\r\n  });\r\n\r\n  it('should get day of week names in a different locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    expect(adapter.getDayOfWeekNames('long')).toEqual([\r\n      '日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'\r\n    ]);\r\n  });\r\n\r\n  it('should get year name', () => {\r\n    expect(adapter.getYearName(moment([2017,  JAN,  1]))).toBe('2017');\r\n  });\r\n\r\n  it('should get year name in a different locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    expect(adapter.getYearName(moment([2017,  JAN,  1]))).toBe('2017');\r\n  });\r\n\r\n  it('should get first day of week', () => {\r\n    expect(adapter.getFirstDayOfWeek()).toBe(0);\r\n  });\r\n\r\n  it('should get first day of week in a different locale', () => {\r\n    adapter.setLocale('fr');\r\n    expect(adapter.getFirstDayOfWeek()).toBe(1);\r\n  });\r\n\r\n  it('should create Moment date', () => {\r\n    expect(adapter.createDate(2017, JAN, 1).format())\r\n      .toEqual(moment([2017,  JAN,  1]).format());\r\n  });\r\n\r\n  it('should not create Moment date with month over/under-flow', () => {\r\n    expect(() => adapter.createDate(2017, DEC + 1, 1)).toThrow();\r\n    expect(() => adapter.createDate(2017, JAN - 1, 1)).toThrow();\r\n  });\r\n\r\n  it('should not create Moment date with date over/under-flow', () => {\r\n    expect(() => adapter.createDate(2017, JAN, 32)).toThrow();\r\n    expect(() => adapter.createDate(2017, JAN, 0)).toThrow();\r\n  });\r\n\r\n  it('should create Moment date with low year number', () => {\r\n    expect(adapter.createDate(-1, JAN, 1).year()).toBe(-1);\r\n    expect(adapter.createDate(0, JAN, 1).year()).toBe(0);\r\n    expect(adapter.createDate(50, JAN, 1).year()).toBe(50);\r\n    expect(adapter.createDate(99, JAN, 1).year()).toBe(99);\r\n    expect(adapter.createDate(100, JAN, 1).year()).toBe(100);\r\n  });\r\n\r\n  it('should not create Moment date in utc format', () => {\r\n    expect(adapter.createDate(2017, JAN, 5).isUTC()).toEqual(false);\r\n  });\r\n\r\n  it(\"should get today's date\", () => {\r\n    expect(adapter.sameDate(adapter.today(), moment()))\r\n        .toBe(true, \"should be equal to today's date\");\r\n  });\r\n\r\n  it('should parse string according to given format', () => {\r\n    expect(adapter.parse('1/2/2017', 'MM/DD/YYYY')!.format())\r\n        .toEqual(moment([2017,  JAN,  2]).format());\r\n    expect(adapter.parse('1/2/2017', 'DD/MM/YYYY')!.format())\r\n        .toEqual(moment([2017,  FEB,  1]).format());\r\n  });\r\n\r\n  it('should parse number', () => {\r\n    let timestamp = new Date().getTime();\r\n    expect(adapter.parse(timestamp, 'MM/DD/YYYY')!.format()).toEqual(moment(timestamp).format());\r\n  });\r\n\r\n  it ('should parse Date', () => {\r\n    let date = new Date(2017, JAN, 1);\r\n    expect(adapter.parse(date, 'MM/DD/YYYY')!.format()).toEqual(moment(date).format());\r\n  });\r\n\r\n  it ('should parse Moment date', () => {\r\n    let date = moment([2017,  JAN,  1]);\r\n    let parsedDate = adapter.parse(date, 'MM/DD/YYYY');\r\n    expect(parsedDate!.format()).toEqual(date.format());\r\n    expect(parsedDate).not.toBe(date);\r\n  });\r\n\r\n  it('should parse empty string as null', () => {\r\n    expect(adapter.parse('', 'MM/DD/YYYY')).toBeNull();\r\n  });\r\n\r\n  it('should parse invalid value as invalid', () => {\r\n    let d = adapter.parse('hello', 'MM/DD/YYYY');\r\n    expect(d).not.toBeNull();\r\n    expect(adapter.isDateInstance(d))\r\n        .toBe(true, 'Expected string to have been fed through Date.parse');\r\n    expect(adapter.isValid(d as moment.Moment))\r\n        .toBe(false, 'Expected to parse as \"invalid date\" object');\r\n  });\r\n\r\n  it('should format date according to given format', () => {\r\n    expect(adapter.format(moment([2017,  JAN,  2]), 'MM/DD/YYYY')).toEqual('01/02/2017');\r\n    expect(adapter.format(moment([2017,  JAN,  2]), 'DD/MM/YYYY')).toEqual('02/01/2017');\r\n  });\r\n\r\n  it('should format with a different locale', () => {\r\n    expect(adapter.format(moment([2017,  JAN,  2]), 'll')).toEqual('Jan 2, 2017');\r\n    adapter.setLocale('ja-JP');\r\n    expect(adapter.format(moment([2017,  JAN,  2]), 'll')).toEqual('2017年1月2日');\r\n  });\r\n\r\n  it('should throw when attempting to format invalid date', () => {\r\n    expect(() => adapter.format(moment(NaN), 'MM/DD/YYYY'))\r\n        .toThrowError(/MomentDateAdapter: Cannot format invalid date\\./);\r\n  });\r\n\r\n  it('should add years', () => {\r\n    expect(adapter.addCalendarYears(moment([2017, JAN, 1]), 1).format())\r\n        .toEqual(moment([2018, JAN, 1]).format());\r\n    expect(adapter.addCalendarYears(moment([2017, JAN, 1]), -1).format())\r\n        .toEqual(moment([2016, JAN, 1]).format());\r\n  });\r\n\r\n  it('should respect leap years when adding years', () => {\r\n    expect(adapter.addCalendarYears(moment([2016, FEB, 29]), 1).format())\r\n        .toEqual(moment([2017, FEB, 28]).format());\r\n    expect(adapter.addCalendarYears(moment([2016, FEB, 29]), -1).format())\r\n        .toEqual(moment([2015, FEB, 28]).format());\r\n  });\r\n\r\n  it('should add months', () => {\r\n    expect(adapter.addCalendarMonths(moment([2017, JAN, 1]), 1).format())\r\n        .toEqual(moment([2017, FEB, 1]).format());\r\n    expect(adapter.addCalendarMonths(moment([2017, JAN, 1]), -1).format())\r\n        .toEqual(moment([2016, DEC, 1]).format());\r\n  });\r\n\r\n  it('should respect month length differences when adding months', () => {\r\n    expect(adapter.addCalendarMonths(moment([2017, JAN, 31]), 1).format())\r\n        .toEqual(moment([2017, FEB, 28]).format());\r\n    expect(adapter.addCalendarMonths(moment([2017, MAR, 31]), -1).format())\r\n        .toEqual(moment([2017, FEB, 28]).format());\r\n  });\r\n\r\n  it('should add days', () => {\r\n    expect(adapter.addCalendarDays(moment([2017, JAN, 1]), 1).format())\r\n        .toEqual(moment([2017, JAN, 2]).format());\r\n    expect(adapter.addCalendarDays(moment([2017, JAN, 1]), -1).format())\r\n        .toEqual(moment([2016, DEC, 31]).format());\r\n  });\r\n\r\n  it('should clone', () => {\r\n    let date = moment([2017, JAN, 1]);\r\n    expect(adapter.clone(date).format()).toEqual(date.format());\r\n    expect(adapter.clone(date)).not.toBe(date);\r\n  });\r\n\r\n  it('should compare dates', () => {\r\n    expect(adapter.compareDate(moment([2017, JAN, 1]), moment([2017, JAN, 2]))).toBeLessThan(0);\r\n    expect(adapter.compareDate(moment([2017, JAN, 1]), moment([2017, FEB, 1]))).toBeLessThan(0);\r\n    expect(adapter.compareDate(moment([2017, JAN, 1]), moment([2018, JAN, 1]))).toBeLessThan(0);\r\n    expect(adapter.compareDate(moment([2017, JAN, 1]), moment([2017, JAN, 1]))).toBe(0);\r\n    expect(adapter.compareDate(moment([2018, JAN, 1]), moment([2017, JAN, 1]))).toBeGreaterThan(0);\r\n    expect(adapter.compareDate(moment([2017, FEB, 1]), moment([2017, JAN, 1]))).toBeGreaterThan(0);\r\n    expect(adapter.compareDate(moment([2017, JAN, 2]), moment([2017, JAN, 1]))).toBeGreaterThan(0);\r\n  });\r\n\r\n  it('should clamp date at lower bound', () => {\r\n    expect(adapter.clampDate(\r\n        moment([2017, JAN, 1]), moment([2018, JAN, 1]), moment([2019, JAN, 1])))\r\n        .toEqual(moment([2018, JAN, 1]));\r\n  });\r\n\r\n  it('should clamp date at upper bound', () => {\r\n    expect(adapter.clampDate(\r\n        moment([2020, JAN, 1]), moment([2018, JAN, 1]), moment([2019, JAN, 1])))\r\n        .toEqual(moment([2019, JAN, 1]));\r\n  });\r\n\r\n  it('should clamp date already within bounds', () => {\r\n    expect(adapter.clampDate(\r\n        moment([2018, FEB, 1]), moment([2018, JAN, 1]), moment([2019, JAN, 1])))\r\n        .toEqual(moment([2018, FEB, 1]));\r\n  });\r\n\r\n  it('should count today as a valid date instance', () => {\r\n    let d = moment();\r\n    expect(adapter.isValid(d)).toBe(true);\r\n    expect(adapter.isDateInstance(d)).toBe(true);\r\n  });\r\n\r\n  it('should count an invalid date as an invalid date instance', () => {\r\n    let d = moment(NaN);\r\n    expect(adapter.isValid(d)).toBe(false);\r\n    expect(adapter.isDateInstance(d)).toBe(true);\r\n  });\r\n\r\n  it('should count a string as not a date instance', () => {\r\n    let d = '1/1/2017';\r\n    expect(adapter.isDateInstance(d)).toBe(false);\r\n  });\r\n\r\n  it('should count a Date as not a date instance', () => {\r\n    let d = new Date();\r\n    expect(adapter.isDateInstance(d)).toBe(false);\r\n  });\r\n\r\n  it('should create valid dates from valid ISO strings', () => {\r\n    assertValidDate(adapter.deserialize('1985-04-12T23:20:50.52Z'), true);\r\n    assertValidDate(adapter.deserialize('1996-12-19T16:39:57-08:00'), true);\r\n    assertValidDate(adapter.deserialize('1937-01-01T12:00:27.87+00:20'), true);\r\n    assertValidDate(adapter.deserialize('1990-13-31T23:59:00Z'), false);\r\n    assertValidDate(adapter.deserialize('1/1/2017'), false);\r\n    expect(adapter.deserialize('')).toBeNull();\r\n    expect(adapter.deserialize(null)).toBeNull();\r\n    assertValidDate(adapter.deserialize(new Date()), true);\r\n    assertValidDate(adapter.deserialize(new Date(NaN)), false);\r\n    assertValidDate(adapter.deserialize(moment()), true);\r\n    assertValidDate(adapter.deserialize(moment.invalid()), false);\r\n  });\r\n\r\n  it('setLocale should not modify global moment locale', () => {\r\n    expect(moment.locale()).toBe('en');\r\n    adapter.setLocale('ja-JP');\r\n    expect(moment.locale()).toBe('en');\r\n  });\r\n\r\n  it('returned Moments should have correct locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    expect(adapter.createDate(2017, JAN, 1).locale()).toBe('ja');\r\n    expect(adapter.today().locale()).toBe('ja');\r\n    expect(adapter.clone(moment()).locale()).toBe('ja');\r\n    expect(adapter.parse('1/1/2017', 'MM/DD/YYYY')!.locale()).toBe('ja');\r\n    expect(adapter.addCalendarDays(moment(), 1).locale()).toBe('ja');\r\n    expect(adapter.addCalendarMonths(moment(), 1).locale()).toBe('ja');\r\n    expect(adapter.addCalendarYears(moment(), 1).locale()).toBe('ja');\r\n  });\r\n\r\n  it('should not change locale of Moments passed as params', () => {\r\n    let date = moment();\r\n    expect(date.locale()).toBe('en');\r\n    adapter.setLocale('ja-JP');\r\n    adapter.getYear(date);\r\n    adapter.getMonth(date);\r\n    adapter.getDate(date);\r\n    adapter.getDayOfWeek(date);\r\n    adapter.getYearName(date);\r\n    adapter.getNumDaysInMonth(date);\r\n    adapter.clone(date);\r\n    adapter.parse(date, 'MM/DD/YYYY');\r\n    adapter.format(date, 'MM/DD/YYYY');\r\n    adapter.addCalendarDays(date, 1);\r\n    adapter.addCalendarMonths(date, 1);\r\n    adapter.addCalendarYears(date, 1);\r\n    adapter.toIso8601(date);\r\n    adapter.isDateInstance(date);\r\n    adapter.isValid(date);\r\n    expect(date.locale()).toBe('en');\r\n  });\r\n\r\n  it('should create invalid date', () => {\r\n    assertValidDate(adapter.invalid(), false);\r\n  });\r\n});\r\n\r\ndescribe('MomentDateAdapter with MAT_DATE_LOCALE override', () => {\r\n  let adapter: MomentDateAdapter;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MomentDateModule],\r\n      providers: [{provide: MAT_DATE_LOCALE, useValue: 'ja-JP'}]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(inject([DateAdapter], (d: MomentDateAdapter) => {\r\n    adapter = d;\r\n  }));\r\n\r\n  it('should take the default locale id from the MAT_DATE_LOCALE injection token', () => {\r\n    expect(adapter.format(moment([2017,  JAN,  2]), 'll')).toEqual('2017年1月2日');\r\n  });\r\n});\r\n\r\ndescribe('MomentDateAdapter with LOCALE_ID override', () => {\r\n  let adapter: MomentDateAdapter;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MomentDateModule],\r\n      providers: [{provide: LOCALE_ID, useValue: 'fr'}]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(inject([DateAdapter], (d: MomentDateAdapter) => {\r\n    adapter = d;\r\n  }));\r\n\r\n  it('should take the default locale id from the LOCALE_ID injection token', () => {\r\n    expect(adapter.format(moment([2017,  JAN,  2]), 'll')).toEqual('2 janv. 2017');\r\n  });\r\n});\r\n\r\ndescribe('MomentDateAdapter with MAT_MOMENT_DATE_ADAPTER_OPTIONS override', () => {\r\n  let adapter: MomentDateAdapter;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MomentDateModule],\r\n      providers: [{\r\n        provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS,\r\n        useValue: {useUtc: true}\r\n      }]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(inject([DateAdapter], (d: MomentDateAdapter) => {\r\n    adapter = d;\r\n  }));\r\n\r\n  describe('use UTC', () => {\r\n    it('should create Moment date in UTC', () => {\r\n      expect(adapter.createDate(2017, JAN, 5).isUtc()).toBe(true);\r\n    });\r\n\r\n    it('should create today in UTC', () => {\r\n      expect(adapter.today().isUtc()).toBe(true);\r\n    });\r\n\r\n    it('should parse dates to UTC', () => {\r\n      expect(adapter.parse('1/2/2017', 'MM/DD/YYYY')!.isUtc()).toBe(true);\r\n    });\r\n\r\n    it('should return UTC date when deserializing', () => {\r\n      expect(adapter.deserialize('1985-04-12T23:20:50.52Z')!.isUtc()).toBe(true);\r\n    });\r\n  });\r\n\r\n});\r\n"]}