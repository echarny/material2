{"version":3,"file":"autocomplete-display-example.js","sourceRoot":"","sources":["../../../../src/material-examples/autocomplete-display/autocomplete-display-example.ts"],"names":[],"mappings":";;AAAA,sCAAgD;AAChD,wCAA2C;AAE3C,4CAA8C;;;;;;yBAehC,IAAI,mBAAW,EAAE;uBACX;YAChB,EAAC,IAAI,EAAE,MAAM,EAAC;YACd,EAAC,IAAI,EAAE,SAAS,EAAC;YACjB,EAAC,IAAI,EAAE,MAAM,EAAC;SACf;;IAGD,6CAAQ,GAAR;QAAA,iBAOC;QANC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY;aAC/C,IAAI,CACH,qBAAS,CAAgB,EAAE,CAAC,EAC5B,eAAG,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAA9C,CAA8C,CAAC,EAC5D,eAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAhD,CAAgD,CAAC,CAC9D,CAAC;KACL;IAED,8CAAS,GAAT,UAAU,IAAW;QACnB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;KACrC;IAEO,4CAAO,GAAf,UAAgB,IAAY;QAC1B,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAEvC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAApD,CAAoD,CAAC,CAAC;KAC5F;;gBA/BF,gBAAS,SAAC;oBACT,QAAQ,EAAE,8BAA8B;oBACxC,WAAW,EAAE,mCAAmC;oBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;iBAChD;;qCAhBD;;AAiBa,gEAA0B","sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface User {\r\n  name: string;\r\n}\r\n\r\n/**\r\n * @title Display value autocomplete\r\n */\r\n@Component({\r\n  selector: 'autocomplete-display-example',\r\n  templateUrl: 'autocomplete-display-example.html',\r\n  styleUrls: ['autocomplete-display-example.css'],\r\n})\r\nexport class AutocompleteDisplayExample implements OnInit {\r\n  myControl = new FormControl();\r\n  options: User[] = [\r\n    {name: 'Mary'},\r\n    {name: 'Shelley'},\r\n    {name: 'Igor'}\r\n  ];\r\n  filteredOptions: Observable<User[]>;\r\n\r\n  ngOnInit() {\r\n    this.filteredOptions = this.myControl.valueChanges\r\n      .pipe(\r\n        startWith<string | User>(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filter(name) : this.options.slice())\r\n      );\r\n  }\r\n\r\n  displayFn(user?: User): string | undefined {\r\n    return user ? user.name : undefined;\r\n  }\r\n\r\n  private _filter(name: string): User[] {\r\n    const filterValue = name.toLowerCase();\r\n\r\n    return this.options.filter(option => option.name.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n}\r\n"]}