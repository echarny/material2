{"version":3,"file":"table-http-example.js","sourceRoot":"","sources":["../../../../src/material-examples/table-http/table-http-example.ts"],"names":[],"mappings":";;AAAA,6CAAgD;AAChD,sCAA2D;AAC3D,8CAAwD;AACxD,6BAA2D;AAC3D,4CAAqE;;;;;IAsBnE,0BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;gCAXP,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;oBAE9C,EAAE;6BAER,CAAC;gCACE,IAAI;kCACF,KAAK;KAKc;IAExC,mCAAQ,GAAR;QAAA,iBA6BC;QA5BC,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;QAGrD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,SAAS,GAAG,CAAC,EAA5B,CAA4B,CAAC,CAAC;QAEnE,YAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aAC7C,IAAI,CACH,qBAAS,CAAC,EAAE,CAAC,EACb,qBAAS,CAAC;YACR,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,MAAM,CAAC,KAAI,CAAC,eAAgB,CAAC,aAAa,CACxC,KAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;SACpE,CAAC,EACF,eAAG,CAAC,UAAA,IAAI;;YAEN,AADA,+CAA+C;YAC/C,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;YAEtC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;SACnB,CAAC,EACF,sBAAU,CAAC;YACT,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;;YAE9B,AADA,yEAAyE;YACzE,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,MAAM,CAAC,SAAY,CAAC,EAAE,CAAC,CAAC;SACzB,CAAC,CACH,CAAC,SAAS,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,IAAI,GAAG,IAAI,EAAhB,CAAgB,CAAC,CAAC;KACzC;;gBAhDF,gBAAS,SAAC;oBACT,QAAQ,EAAE,oBAAoB;oBAC9B,SAAS,EAAE,CAAC,wBAAwB,CAAC;oBACrC,WAAW,EAAE,yBAAyB;iBACvC;;;;gBAbO,iBAAU;;;8BAuBf,gBAAS,SAAC,uBAAY;yBACtB,gBAAS,SAAC,kBAAO;;2BAxBpB;;AAca,4CAAgB;;AA2D7B;AAAA;IACE,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;KAAI;IAExC,sCAAa,GAAb,UAAc,IAAY,EAAE,KAAa,EAAE,IAAY;QACrD,IAAM,IAAI,GAAG,sCAAsC,CAAC;QACpD,IAAM,UAAU,GACT,IAAI,uCAAkC,IAAI,eAAU,KAAK,eAAS,IAAI,GAAG,CAAC,CAAE,CAAC;QAEpF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,UAAU,CAAC,CAAC;KAC7C;yBAlFH;IAmFC,CAAA;AAVY,wCAAc","sourcesContent":["import {HttpClient} from '@angular/common/http';\r\nimport {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\n\r\n/**\r\n * @title Table retrieving data through HTTP\r\n */\r\n@Component({\r\n  selector: 'table-http-example',\r\n  styleUrls: ['table-http-example.css'],\r\n  templateUrl: 'table-http-example.html',\r\n})\r\nexport class TableHttpExample implements OnInit {\r\n  displayedColumns: string[] = ['created', 'state', 'number', 'title'];\r\n  exampleDatabase: ExampleHttpDao | null;\r\n  data: GithubIssue[] = [];\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit() {\r\n    this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.sort.sortChange, this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n        switchMap(() => {\r\n          this.isLoadingResults = true;\r\n          return this.exampleDatabase!.getRepoIssues(\r\n            this.sort.active, this.sort.direction, this.paginator.pageIndex);\r\n        }),\r\n        map(data => {\r\n          // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n          this.resultsLength = data.total_count;\r\n\r\n          return data.items;\r\n        }),\r\n        catchError(() => {\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n          return observableOf([]);\r\n        })\r\n      ).subscribe(data => this.data = data);\r\n  }\r\n}\r\n\r\nexport interface GithubApi {\r\n  items: GithubIssue[];\r\n  total_count: number;\r\n}\r\n\r\nexport interface GithubIssue {\r\n  created_at: string;\r\n  number: string;\r\n  state: string;\r\n  title: string;\r\n}\r\n\r\n/** An example database that the data source uses to retrieve data for the table. */\r\nexport class ExampleHttpDao {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getRepoIssues(sort: string, order: string, page: number): Observable<GithubApi> {\r\n    const href = 'https://api.github.com/search/issues';\r\n    const requestUrl =\r\n        `${href}?q=repo:angular/material2&sort=${sort}&order=${order}&page=${page + 1}`;\r\n\r\n    return this.http.get<GithubApi>(requestUrl);\r\n  }\r\n}\r\n"]}