{"version":3,"file":"chips-autocomplete-example.js","sourceRoot":"","sources":["../../../../src/material-examples/chips-autocomplete/chips-autocomplete-example.ts"],"names":[],"mappings":";;AAAA,kDAAmD;AACnD,sCAA+D;AAC/D,wCAA2C;AAG3C,4CAA8C;;;;;IAuB5C;QAAA,iBAIC;uBAhBS,IAAI;0BACD,IAAI;yBACL,IAAI;yBACJ,KAAK;kCACc,CAAC,gBAAK,EAAE,gBAAK,CAAC;yBACjC,IAAI,mBAAW,EAAE;sBAEV,CAAC,OAAO,CAAC;yBACN,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,CAAC;QAKtE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAClD,qBAAS,CAAC,IAAI,CAAC,EACf,eAAG,CAAC,UAAC,KAAoB,IAAK,OAAA,KAAK,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,EAApD,CAAoD,CAAC,CAAC,CAAC;KAC1F;IAED,sCAAG,GAAH,UAAI,KAAwB;QAC1B,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAC1B,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;;QAG1B,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;SAChC;;QAGD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;SAClB;QAED,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC/B;IAED,yCAAM,GAAN,UAAO,KAAa;QAClB,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEzC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC9B;KACF;IAED,2CAAQ,GAAR,UAAS,KAAmC;QAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,GAAG,EAAE,CAAC;QACzC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC/B;IAEO,0CAAO,GAAf,UAAgB,KAAa;QAC3B,IAAM,WAAW,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAExC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAA9C,CAA8C,CAAC,CAAC;KACvF;;gBA3DF,gBAAS,SAAC;oBACT,QAAQ,EAAE,4BAA4B;oBACtC,WAAW,EAAE,iCAAiC;oBAC9C,SAAS,EAAE,CAAC,gCAAgC,CAAC;iBAC9C;;;;;+BAYE,gBAAS,SAAC,YAAY;;mCA1BzB;;AAea,4DAAwB","sourcesContent":["import {COMMA, ENTER} from '@angular/cdk/keycodes';\r\nimport {Component, ElementRef, ViewChild} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {MatAutocompleteSelectedEvent, MatChipInputEvent} from '@angular/material';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\n/**\r\n * @title Chips Autocomplete\r\n */\r\n@Component({\r\n  selector: 'chips-autocomplete-example',\r\n  templateUrl: 'chips-autocomplete-example.html',\r\n  styleUrls: ['chips-autocomplete-example.css'],\r\n})\r\nexport class ChipsAutocompleteExample {\r\n  visible = true;\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = false;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  fruitCtrl = new FormControl();\r\n  filteredFruits: Observable<string[]>;\r\n  fruits: string[] = ['Lemon'];\r\n  allFruits: string[] = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\r\n\r\n  @ViewChild('fruitInput') fruitInput: ElementRef;\r\n\r\n  constructor() {\r\n    this.filteredFruits = this.fruitCtrl.valueChanges.pipe(\r\n        startWith(null),\r\n        map((fruit: string | null) => fruit ? this._filter(fruit) : this.allFruits.slice()));\r\n  }\r\n\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n\r\n    // Add our fruit\r\n    if ((value || '').trim()) {\r\n      this.fruits.push(value.trim());\r\n    }\r\n\r\n    // Reset the input value\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n\r\n    this.fruitCtrl.setValue(null);\r\n  }\r\n\r\n  remove(fruit: string): void {\r\n    const index = this.fruits.indexOf(fruit);\r\n\r\n    if (index >= 0) {\r\n      this.fruits.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  selected(event: MatAutocompleteSelectedEvent): void {\r\n    this.fruits.push(event.option.viewValue);\r\n    this.fruitInput.nativeElement.value = '';\r\n    this.fruitCtrl.setValue(null);\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.allFruits.filter(fruit => fruit.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n}\r\n"]}