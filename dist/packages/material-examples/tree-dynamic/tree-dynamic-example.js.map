{"version":3,"file":"tree-dynamic-example.js","sourceRoot":"","sources":["../../../../src/material-examples/tree-dynamic/tree-dynamic-example.ts"],"names":[],"mappings":"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","sourcesContent":["import {CollectionViewer, SelectionChange} from '@angular/cdk/collections';\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {Component, Injectable} from '@angular/core';\r\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\n\r\n/** Flat node with expandable and level information */\r\nexport class DynamicFlatNode {\r\n  constructor(public item: string, public level = 1, public expandable = false,\r\n              public isLoading = false) {}\r\n}\r\n\r\n/**\r\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\r\n * the descendants data from the database.\r\n */\r\nexport class DynamicDatabase {\r\n  dataMap = new Map<string, string[]>([\r\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\r\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n    ['Apple', ['Fuji', 'Macintosh']],\r\n    ['Onion', ['Yellow', 'White', 'Purple']]\r\n  ]);\r\n\r\n  rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\r\n\r\n  /** Initial data from database */\r\n  initialData(): DynamicFlatNode[] {\r\n    return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\r\n  }\r\n\r\n  getChildren(node: string): string[] | undefined {\r\n    return this.dataMap.get(node);\r\n  }\r\n\r\n  isExpandable(node: string): boolean {\r\n    return this.dataMap.has(node);\r\n  }\r\n}\r\n/**\r\n * File database, it can build a tree structured Json object from string.\r\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\r\n * For a directory, it has filename and children (a list of files or directories).\r\n * The input will be a json object string, and the output is a list of `FileNode` with nested\r\n * structure.\r\n */\r\n@Injectable()\r\nexport class DynamicDataSource {\r\n\r\n  dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\r\n\r\n  get data(): DynamicFlatNode[] { return this.dataChange.value; }\r\n  set data(value: DynamicFlatNode[]) {\r\n    this.treeControl.dataNodes = value;\r\n    this.dataChange.next(value);\r\n  }\r\n\r\n  constructor(private treeControl: FlatTreeControl<DynamicFlatNode>,\r\n              private database: DynamicDatabase) {}\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\r\n    this.treeControl.expansionModel.onChange!.subscribe(change => {\r\n      if ((change as SelectionChange<DynamicFlatNode>).added ||\r\n        (change as SelectionChange<DynamicFlatNode>).removed) {\r\n        this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\r\n      }\r\n    });\r\n\r\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\r\n  }\r\n\r\n  /** Handle expand/collapse behaviors */\r\n  handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\r\n    if (change.added) {\r\n      change.added.forEach(node => this.toggleNode(node, true));\r\n    }\r\n    if (change.removed) {\r\n      change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the node, remove from display list\r\n   */\r\n  toggleNode(node: DynamicFlatNode, expand: boolean) {\r\n    const children = this.database.getChildren(node.item);\r\n    const index = this.data.indexOf(node);\r\n    if (!children || index < 0) { // If no children, or cannot find the node, no op\r\n      return;\r\n    }\r\n\r\n    node.isLoading = true;\r\n\r\n    setTimeout(() => {\r\n      if (expand) {\r\n        const nodes = children.map(name =>\r\n          new DynamicFlatNode(name, node.level + 1, this.database.isExpandable(name)));\r\n        this.data.splice(index + 1, 0, ...nodes);\r\n      } else {\r\n        let count = 0;\r\n        for (let i = index + 1; i < this.data.length\r\n          && this.data[i].level > node.level; i++, count++) {}\r\n        this.data.splice(index + 1, count);\r\n      }\r\n\r\n      // notify the change\r\n      this.dataChange.next(this.data);\r\n      node.isLoading = false;\r\n    }, 1000);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Tree with dynamic data\r\n */\r\n@Component({\r\n  selector: 'tree-dynamic-example',\r\n  templateUrl: 'tree-dynamic-example.html',\r\n  styleUrls: ['tree-dynamic-example.css'],\r\n  providers: [DynamicDatabase]\r\n})\r\nexport class TreeDynamicExample {\r\n  constructor(database: DynamicDatabase) {\r\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\r\n    this.dataSource = new DynamicDataSource(this.treeControl, database);\r\n\r\n    this.dataSource.data = database.initialData();\r\n  }\r\n\r\n  treeControl: FlatTreeControl<DynamicFlatNode>;\r\n\r\n  dataSource: DynamicDataSource;\r\n\r\n  getLevel = (node: DynamicFlatNode) => node.level;\r\n\r\n  isExpandable = (node: DynamicFlatNode) => node.expandable;\r\n\r\n  hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\r\n}\r\n"]}