{"version":3,"file":"datepicker-custom-header-example.js","sourceRoot":"","sources":["../../../../src/material-examples/datepicker-custom-header/datepicker-custom-header-example.ts"],"names":[],"mappings":";;AAAA,sCAOuB;AACvB,8CAA8C;AAC9C,+CAAqF;AACrF,6BAA6B;AAC7B,4CAAyC;;;;6BASvB,aAAa;;;gBAN9B,gBAAS,SAAC;oBACT,QAAQ,EAAE,kCAAkC;oBAC5C,WAAW,EAAE,uCAAuC;oBACpD,eAAe,EAAE,8BAAuB,CAAC,MAAM;iBAChD;;wCAlBD;;AAmBa,sEAA6B;;;IAiDxC,uBAA4B,UACR,WAA2B,EACD,aAClC,GAAsB;QAHN,aAAQ,GAAR,QAAQ;QAChB,gBAAW,GAAX,WAAW,CAAgB;QACD,gBAAW,GAAX,WAAW;yBAJrC,IAAI,cAAO,EAAQ;QAMrC,QAAQ,CAAC,YAAY;aAChB,IAAI,CAAC,qBAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/B,SAAS,CAAC,cAAM,OAAA,GAAG,CAAC,YAAY,EAAE,EAAlB,CAAkB,CAAC,CAAC;KAC1C;IAED,mCAAW,GAAX;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;KAC3B;IAED,sBAAI,sCAAW;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,WAAW;iBAClB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC;iBACzE,iBAAiB,EAAE,CAAC;SAC1B;;;OAAA;IAED,uCAAe,GAAf,UAAgB,IAAsB;QACpC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,KAAK,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;KACrE;IAED,mCAAW,GAAX,UAAY,IAAsB;QAChC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,KAAK,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;KACpE;;gBA1EF,gBAAS,SAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,MAAM,EAAE,CAAC,gTAiBR,CAAC;oBACF,QAAQ,EAAE,ozBAkBT;oBACD,eAAe,EAAE,8BAAuB,CAAC,MAAM;iBAChD;;;;gBAxDO,sBAAW,uBA4DJ,WAAI;gBA3DX,kBAAW;gDA6DJ,aAAM,SAAC,uBAAgB;gBApEpC,wBAAiB;;wBAFnB;;AAiEa,sCAAa","sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  Inject,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport {MatCalendar} from '@angular/material';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\n/** @title Datepicker with custom calendar header */\r\n@Component({\r\n  selector: 'datepicker-custom-header-example',\r\n  templateUrl: 'datepicker-custom-header-example.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DatepickerCustomHeaderExample {\r\n  exampleHeader = ExampleHeader;\r\n}\r\n\r\n/** Custom header component for datepicker. */\r\n@Component({\r\n  selector: 'example-header',\r\n  styles: [`\r\n    .example-header {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 0.5em;\r\n    }\r\n\r\n    .example-header-label {\r\n      flex: 1;\r\n      height: 1em;\r\n      font-weight: 500;\r\n      text-align: center;\r\n    }\r\n\r\n    .example-double-arrow .mat-icon {\r\n      margin: -22%;\r\n    }\r\n  `],\r\n  template: `\r\n    <div class=\"example-header\">\r\n      <button mat-icon-button class=\"example-double-arrow\" (click)=\"previousClicked('year')\">\r\n        <mat-icon>keyboard_arrow_left</mat-icon>\r\n        <mat-icon>keyboard_arrow_left</mat-icon>\r\n      </button>\r\n      <button mat-icon-button (click)=\"previousClicked('month')\">\r\n        <mat-icon>keyboard_arrow_left</mat-icon>\r\n      </button>\r\n      <span class=\"example-header-label\">{{periodLabel}}</span>\r\n      <button mat-icon-button (click)=\"nextClicked('month')\">\r\n        <mat-icon>keyboard_arrow_right</mat-icon>\r\n      </button>\r\n      <button mat-icon-button class=\"example-double-arrow\" (click)=\"nextClicked('year')\">\r\n        <mat-icon>keyboard_arrow_right</mat-icon>\r\n        <mat-icon>keyboard_arrow_right</mat-icon>\r\n      </button>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ExampleHeader<D> implements OnDestroy {\r\n  private destroyed = new Subject<void>();\r\n\r\n  constructor(@Host() private calendar: MatCalendar<D>,\r\n              private dateAdapter: DateAdapter<D>,\r\n              @Inject(MAT_DATE_FORMATS) private dateFormats: MatDateFormats,\r\n              cdr: ChangeDetectorRef) {\r\n    calendar.stateChanges\r\n        .pipe(takeUntil(this.destroyed))\r\n        .subscribe(() => cdr.markForCheck());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.next();\r\n    this.destroyed.complete();\r\n  }\r\n\r\n  get periodLabel() {\r\n    return this.dateAdapter\r\n        .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel)\r\n        .toLocaleUpperCase();\r\n  }\r\n\r\n  previousClicked(mode: 'month' | 'year') {\r\n    this.calendar.activeDate = mode === 'month' ?\r\n        this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\r\n        this.dateAdapter.addCalendarYears(this.calendar.activeDate, -1);\r\n  }\r\n\r\n  nextClicked(mode: 'month' | 'year') {\r\n    this.calendar.activeDate = mode === 'month' ?\r\n        this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\r\n        this.dateAdapter.addCalendarYears(this.calendar.activeDate, 1);\r\n  }\r\n}\r\n"]}