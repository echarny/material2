{"version":3,"file":"tree-loadmore-example.js","sourceRoot":"","sources":["../../../../src/material-examples/tree-loadmore/tree-loadmore-example.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {Component, Injectable} from '@angular/core';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\n\r\nconst LOAD_MORE = 'LOAD_MORE';\r\n\r\n/** Nested node */\r\nexport class LoadmoreNode {\r\n  childrenChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n\r\n  get children(): LoadmoreNode[] {\r\n    return this.childrenChange.value;\r\n  }\r\n\r\n  constructor(public item: string,\r\n              public hasChildren = false,\r\n              public loadMoreParentItem: string | null = null) {}\r\n}\r\n\r\n/** Flat node with expandable and level information */\r\nexport class LoadmoreFlatNode {\r\n  constructor(public item: string,\r\n              public level = 1,\r\n              public expandable = false,\r\n              public loadMoreParentItem: string | null = null) {}\r\n}\r\n\r\n/**\r\n * A database that only load part of the data initially. After user clicks on the `Load more`\r\n * button, more data will be loaded.\r\n */\r\n@Injectable()\r\nexport class LoadmoreDatabase {\r\n  batchNumber = 5;\r\n  dataChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n  nodeMap = new Map<string, LoadmoreNode>();\r\n\r\n  /** The data */\r\n  rootLevelNodes: string[] = ['Vegetables', 'Fruits'];\r\n  dataMap = new Map<string, string[]>([\r\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\r\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n    ['Apple', ['Fuji', 'Macintosh']],\r\n    ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\r\n  ]);\r\n\r\n  initialize() {\r\n    const data = this.rootLevelNodes.map(name => this._generateNode(name));\r\n    this.dataChange.next(data);\r\n  }\r\n\r\n  /** Expand a node whose children are not loaded */\r\n  loadMore(item: string, onlyFirstTime = false) {\r\n    if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\r\n      return;\r\n    }\r\n    const parent = this.nodeMap.get(item)!;\r\n    const children = this.dataMap.get(item)!;\r\n    if (onlyFirstTime && parent.children!.length > 0) {\r\n      return;\r\n    }\r\n    const newChildrenNumber = parent.children!.length + this.batchNumber;\r\n    const nodes = children.slice(0, newChildrenNumber)\r\n      .map(name => this._generateNode(name));\r\n    if (newChildrenNumber < children.length) {\r\n      // Need a new load more node\r\n      nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\r\n    }\r\n\r\n    parent.childrenChange.next(nodes);\r\n    this.dataChange.next(this.dataChange.value);\r\n  }\r\n\r\n  private _generateNode(item: string): LoadmoreNode {\r\n    if (this.nodeMap.has(item)) {\r\n      return this.nodeMap.get(item)!;\r\n    }\r\n    const result = new LoadmoreNode(item, this.dataMap.has(item));\r\n    this.nodeMap.set(item, result);\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Tree with partially loaded data\r\n */\r\n@Component({\r\n  selector: 'tree-loadmore-example',\r\n  templateUrl: 'tree-loadmore-example.html',\r\n  styleUrls: ['tree-loadmore-example.css'],\r\n  providers: [LoadmoreDatabase]\r\n})\r\nexport class TreeLoadmoreExample {\r\n  nodeMap = new Map<string, LoadmoreFlatNode>();\r\n  treeControl: FlatTreeControl<LoadmoreFlatNode>;\r\n  treeFlattener: MatTreeFlattener<LoadmoreNode, LoadmoreFlatNode>;\r\n  // Flat tree data source\r\n  dataSource: MatTreeFlatDataSource<LoadmoreNode, LoadmoreFlatNode>;\r\n\r\n  constructor(private database: LoadmoreDatabase) {\r\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\r\n      this.isExpandable, this.getChildren);\r\n\r\n    this.treeControl = new FlatTreeControl<LoadmoreFlatNode>(this.getLevel, this.isExpandable);\r\n\r\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n    database.dataChange.subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n\r\n    database.initialize();\r\n  }\r\n\r\n  getChildren = (node: LoadmoreNode): Observable<LoadmoreNode[]> => node.childrenChange;\r\n\r\n  transformer = (node: LoadmoreNode, level: number) => {\r\n    const existingNode = this.nodeMap.get(node.item);\r\n\r\n    if (existingNode) {\r\n      return existingNode;\r\n    }\r\n\r\n    const newNode =\r\n        new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\r\n    this.nodeMap.set(node.item, newNode);\r\n    return newNode;\r\n  }\r\n\r\n  getLevel = (node: LoadmoreFlatNode) => node.level;\r\n\r\n  isExpandable = (node: LoadmoreFlatNode) => node.expandable;\r\n\r\n  hasChild = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.expandable;\r\n\r\n  isLoadMore = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.item === LOAD_MORE;\r\n\r\n  /** Load more nodes from data source */\r\n  loadMore(item: string) {\r\n    this.database.loadMore(item);\r\n  }\r\n\r\n  loadChildren(node: LoadmoreFlatNode) {\r\n    this.database.loadMore(node.item, true);\r\n  }\r\n}\r\n"]}