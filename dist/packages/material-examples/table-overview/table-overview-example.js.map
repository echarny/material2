{"version":3,"file":"table-overview-example.js","sourceRoot":"","sources":["../../../../src/material-examples/table-overview/table-overview-example.ts"],"names":[],"mappings":";;AAAA,sCAA2D;AAC3D,8CAA4E;;AAU5E,IAAM,MAAM,GAAa,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ;IACvF,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AACtE,IAAM,KAAK,GAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM;IAC7E,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ;IAC/D,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;;;;;IAiBlE;gCAN6B,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC;;QAQ9D,IAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,GAAG,EAAC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC;;QAGxE,IAAI,CAAC,UAAU,GAAG,IAAI,6BAAkB,CAAC,KAAK,CAAC,CAAC;KACjD;IAED,uCAAQ,GAAR;QACE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;KAClC;IAED,0CAAW,GAAX,UAAY,WAAmB;QAC7B,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE1D,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;SACvC;KACF;;gBA/BF,gBAAS,SAAC;oBACT,QAAQ,EAAE,wBAAwB;oBAClC,SAAS,EAAE,CAAC,4BAA4B,CAAC;oBACzC,WAAW,EAAE,6BAA6B;iBAC3C;;;;;8BAKE,gBAAS,SAAC,uBAAY;yBACtB,gBAAS,SAAC,kBAAO;;+BA9BpB;;AAyBa,oDAAoB;;AA8BjC,uBAAuB,EAAU;IAC/B,IAAM,IAAI,GACN,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;QAC3D,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IAE1E,MAAM,CAAC;QACL,EAAE,EAAE,EAAE,CAAC,QAAQ,EAAE;QACjB,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE;QACpD,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KAC/D,CAAC;CACH","sourcesContent":["import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\r\n\r\nexport interface UserData {\r\n  id: string;\r\n  name: string;\r\n  progress: string;\r\n  color: string;\r\n}\r\n\r\n/** Constants used to fill up our data base. */\r\nconst COLORS: string[] = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\r\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\r\nconst NAMES: string[] = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\r\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\r\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'table-overview-example',\r\n  styleUrls: ['table-overview-example.css'],\r\n  templateUrl: 'table-overview-example.html',\r\n})\r\nexport class TableOverviewExample implements OnInit {\r\n  displayedColumns: string[] = ['id', 'name', 'progress', 'color'];\r\n  dataSource: MatTableDataSource<UserData>;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor() {\r\n    // Create 100 users\r\n    const users = Array.from({length: 100}, (_, k) => createNewUser(k + 1));\r\n\r\n    // Assign the data to the data source for the table to render\r\n    this.dataSource = new MatTableDataSource(users);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n}\r\n\r\n/** Builds and returns a new User. */\r\nfunction createNewUser(id: number): UserData {\r\n  const name =\r\n      NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\r\n      NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\r\n\r\n  return {\r\n    id: id.toString(),\r\n    name: name,\r\n    progress: Math.round(Math.random() * 100).toString(),\r\n    color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\r\n  };\r\n}\r\n"]}