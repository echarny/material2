{"version":3,"file":"tree-nested-overview-example.js","sourceRoot":"","sources":["../../../../src/material-examples/tree-nested-overview/tree-nested-overview-example.ts"],"names":[],"mappings":"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","sourcesContent":["import {NestedTreeControl} from '@angular/cdk/tree';\r\nimport {Component, Injectable} from '@angular/core';\r\nimport {MatTreeNestedDataSource} from '@angular/material/tree';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\n/**\r\n * Json node data with nested structure. Each node has a filename and a value or a list of children\r\n */\r\nexport class FileNode {\r\n  children: FileNode[];\r\n  filename: string;\r\n  type: any;\r\n}\r\n\r\n/**\r\n * The Json tree data in string. The data could be parsed into Json object\r\n */\r\nconst TREE_DATA = JSON.stringify({\r\n  Applications: {\r\n    Calendar: 'app',\r\n    Chrome: 'app',\r\n    Webstorm: 'app'\r\n  },\r\n  Documents: {\r\n    angular: {\r\n      src: {\r\n        compiler: 'ts',\r\n        core: 'ts'\r\n      }\r\n    },\r\n    material2: {\r\n      src: {\r\n        button: 'ts',\r\n        checkbox: 'ts',\r\n        input: 'ts'\r\n      }\r\n    }\r\n  },\r\n  Downloads: {\r\n    October: 'pdf',\r\n    November: 'pdf',\r\n    Tutorial: 'html'\r\n  },\r\n  Pictures: {\r\n    'Photo Booth Library': {\r\n      Contents: 'dir',\r\n      Pictures: 'dir'\r\n    },\r\n    Sun: 'png',\r\n    Woods: 'jpg'\r\n  }\r\n});\r\n\r\n/**\r\n * File database, it can build a tree structured Json object from string.\r\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\r\n * For a directory, it has filename and children (a list of files or directories).\r\n * The input will be a json object string, and the output is a list of `FileNode` with nested\r\n * structure.\r\n */\r\n@Injectable()\r\nexport class FileDatabase {\r\n  dataChange = new BehaviorSubject<FileNode[]>([]);\r\n\r\n  get data(): FileNode[] { return this.dataChange.value; }\r\n\r\n  constructor() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    // Parse the string to json object.\r\n    const dataObject = JSON.parse(TREE_DATA);\r\n\r\n    // Build the tree nodes from Json object. The result is a list of `FileNode` with nested\r\n    //     file node as children.\r\n    const data = this.buildFileTree(dataObject, 0);\r\n\r\n    // Notify the change.\r\n    this.dataChange.next(data);\r\n  }\r\n\r\n  /**\r\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n   * The return value is the list of `FileNode`.\r\n   */\r\n  buildFileTree(obj: object, level: number): FileNode[] {\r\n    return Object.keys(obj).reduce<FileNode[]>((accumulator, key) => {\r\n      const value = obj[key];\r\n      const node = new FileNode();\r\n      node.filename = key;\r\n\r\n      if (value != null) {\r\n        if (typeof value === 'object') {\r\n          node.children = this.buildFileTree(value, level + 1);\r\n        } else {\r\n          node.type = value;\r\n        }\r\n      }\r\n\r\n      return accumulator.concat(node);\r\n    }, []);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Tree with nested nodes\r\n */\r\n@Component({\r\n  selector: 'tree-nested-overview-example',\r\n  templateUrl: 'tree-nested-overview-example.html',\r\n  styleUrls: ['tree-nested-overview-example.css'],\r\n  providers: [FileDatabase]\r\n})\r\nexport class TreeNestedOverviewExample {\r\n  nestedTreeControl: NestedTreeControl<FileNode>;\r\n  nestedDataSource: MatTreeNestedDataSource<FileNode>;\r\n\r\n  constructor(database: FileDatabase) {\r\n    this.nestedTreeControl = new NestedTreeControl<FileNode>(this._getChildren);\r\n    this.nestedDataSource = new MatTreeNestedDataSource();\r\n\r\n    database.dataChange.subscribe(data => this.nestedDataSource.data = data);\r\n  }\r\n\r\n  hasNestedChild = (_: number, nodeData: FileNode) => !nodeData.type;\r\n\r\n  private _getChildren = (node: FileNode) => node.children;\r\n}\r\n"]}