{"version":3,"file":"test-gesture-config.js","sourceRoot":"","sources":["../../../../src/lib/slider/test-gesture-config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAQA,sCAAyC;AACzC,+CAAoE;;;;;;IAO7B,qCAAa;;;;;;;gCAKG,IAAI,GAAG,EAAgC;;;IAE5F;;OAEG;;;;IACH,uCAAW;;;IAAX,UAAY,OAAoB;QAC9B,IAAI,EAAE,GAAG,iBAAM,WAAW,YAAC,OAAO,CAAkB,CAAC;QACrD,IAAI,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAEjD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACnB;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACzC;QAED,MAAM,CAAC,EAAE,CAAC;KACX;IAED;;;OAGG;;;;;IACH,+CAAmB;;;;IAAnB,UAAoB,SAAiB,EAAE,OAAoB,EAAE,SAAc;QAAd,0BAAA,EAAA,cAAc;QACzE,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAElD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,EAAnC,CAAmC,CAAC,CAAC;SACpE;KACF;;gBAlCF,iBAAU;;4BAfX;EAgBuC,oBAAa;AAAvC,8CAAiB","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {GestureConfig, HammerManager} from '@angular/material/core';\r\n\r\n/**\r\n * An extension of GestureConfig that exposes the underlying HammerManager instances.\r\n * Tests can use these instances to emit fake gesture events.\r\n */\r\n@Injectable()\r\nexport class TestGestureConfig extends GestureConfig {\r\n  /**\r\n   * A map of Hammer instances to element.\r\n   * Used to emit events over instances for an element.\r\n   */\r\n  hammerInstances: Map<HTMLElement, HammerManager[]> = new Map<HTMLElement, HammerManager[]>();\r\n\r\n  /**\r\n   * Create a mapping of Hammer instances to element so that events can be emitted during testing.\r\n   */\r\n  buildHammer(element: HTMLElement) {\r\n    let mc = super.buildHammer(element) as HammerManager;\r\n    let instance = this.hammerInstances.get(element);\r\n\r\n    if (instance) {\r\n      instance.push(mc);\r\n    } else {\r\n      this.hammerInstances.set(element, [mc]);\r\n    }\r\n\r\n    return mc;\r\n  }\r\n\r\n  /**\r\n   * The Angular event plugin for Hammer creates a new HammerManager instance for each listener,\r\n   * so we need to apply our event on all instances to hit the correct listener.\r\n   */\r\n  emitEventForElement(eventType: string, element: HTMLElement, eventData = {}) {\r\n    let instances = this.hammerInstances.get(element);\r\n\r\n    if (instances) {\r\n      instances.forEach(instance => instance.emit(eventType, eventData));\r\n    }\r\n  }\r\n}\r\n"]}