{"version":3,"file":"slider.spec.js","sourceRoot":"","sources":["../../../../src/lib/slider/slider.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {BidiModule} from '@angular/cdk/bidi';\r\nimport {\r\n  BACKSPACE,\r\n  DOWN_ARROW,\r\n  END,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {dispatchFakeEvent, dispatchKeyboardEvent, dispatchMouseEvent} from '@angular/cdk/testing';\r\nimport {Component, DebugElement, ViewChild, Type} from '@angular/core';\r\nimport {ComponentFixture, TestBed, fakeAsync, flush} from '@angular/core/testing';\r\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {By, HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {MatSlider, MatSliderModule} from './index';\r\nimport {TestGestureConfig} from './test-gesture-config';\r\n\r\ndescribe('MatSlider', () => {\r\n  let gestureConfig: TestGestureConfig;\r\n\r\n  function createComponent<T>(component: Type<T>): ComponentFixture<T> {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatSliderModule, ReactiveFormsModule, FormsModule, BidiModule],\r\n      declarations: [component],\r\n      providers: [\r\n        {provide: HAMMER_GESTURE_CONFIG, useFactory: () => {\r\n          gestureConfig = new TestGestureConfig();\r\n          return gestureConfig;\r\n        }}\r\n      ]\r\n    }).compileComponents();\r\n\r\n    return TestBed.createComponent<T>(component);\r\n  }\r\n\r\n  describe('standard slider', () => {\r\n    let fixture: ComponentFixture<StandardSlider>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let trackFillElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(StandardSlider);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.componentInstance;\r\n\r\n      trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-track-fill');\r\n    });\r\n\r\n    it('should set the default values', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n      expect(sliderInstance.min).toBe(0);\r\n      expect(sliderInstance.max).toBe(100);\r\n    });\r\n\r\n    it('should update the value on a click', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.19);\r\n\r\n      expect(sliderInstance.value).toBe(19);\r\n    });\r\n\r\n    it('should update the value on a slide', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.89, gestureConfig);\r\n\r\n      expect(sliderInstance.value).toBe(89);\r\n    });\r\n\r\n    it('should set the value as min when sliding before the track', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, -1.33, gestureConfig);\r\n\r\n      expect(sliderInstance.value).toBe(0);\r\n    });\r\n\r\n    it('should set the value as max when sliding past the track', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 1.75, gestureConfig);\r\n\r\n      expect(sliderInstance.value).toBe(100);\r\n    });\r\n\r\n    it('should update the track fill on click', () => {\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0, 1, 1)');\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.39);\r\n      fixture.detectChanges();\r\n\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0.39, 1, 1)');\r\n    });\r\n\r\n    it('should update the track fill on slide', () => {\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0, 1, 1)');\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.86, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0.86, 1, 1)');\r\n    });\r\n\r\n    it('should add and remove the mat-slider-sliding class when sliding', () => {\r\n      expect(sliderNativeElement.classList).not.toContain('mat-slider-sliding');\r\n\r\n      dispatchSlideStartEvent(sliderNativeElement, 0, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderNativeElement.classList).toContain('mat-slider-sliding');\r\n\r\n      dispatchSlideEndEvent(sliderNativeElement, 0.34, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderNativeElement.classList).not.toContain('mat-slider-sliding');\r\n    });\r\n\r\n    it('should not change value without emitting a change event', () => {\r\n      const onChangeSpy = jasmine.createSpy('slider onChange');\r\n\r\n      sliderInstance.change.subscribe(onChangeSpy);\r\n      sliderInstance.value = 50;\r\n      fixture.detectChanges();\r\n\r\n      dispatchSlideStartEvent(sliderNativeElement, 0, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      dispatchSlideEvent(sliderNativeElement, 10, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      // In some situations, HammerJS will fire a second \"slidestart\" event because the user\r\n      // holds the thumb and drags it around. This would mean that the `_valueOnSlideStart`\r\n      // value will be updated to the actual end value. Causing the slider to think that the value\r\n      // didn't change at all.\r\n      dispatchSlideStartEvent(sliderNativeElement, 10, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      dispatchSlideEndEvent(sliderNativeElement, 10, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderNativeElement.classList).not.toContain('mat-slider-sliding');\r\n      expect(onChangeSpy).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should reset active state upon blur', () => {\r\n      sliderInstance._isActive = true;\r\n\r\n      dispatchFakeEvent(sliderNativeElement, 'blur');\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance._isActive).toBe(false);\r\n    });\r\n\r\n    it('should reset thumb gap when blurred on min value', () => {\r\n      sliderInstance._isActive = true;\r\n      sliderInstance.value = 0;\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance._thumbGap).toBe(10);\r\n\r\n      dispatchFakeEvent(sliderNativeElement, 'blur');\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance._thumbGap).toBe(7);\r\n    });\r\n\r\n    it('should have thumb gap when at min value', () => {\r\n      expect(trackFillElement.style.transform).toContain('translateX(-7px)');\r\n    });\r\n\r\n    it('should not have thumb gap when not at min value', () => {\r\n      dispatchClickEventSequence(sliderNativeElement, 1);\r\n      fixture.detectChanges();\r\n\r\n      // Some browsers use '0' and some use '0px', so leave off the closing paren.\r\n      expect(trackFillElement.style.transform).toContain('translateX(0');\r\n    });\r\n\r\n    it('should have aria-orientation horizontal', () => {\r\n      expect(sliderNativeElement.getAttribute('aria-orientation')).toEqual('horizontal');\r\n    });\r\n\r\n    it('should slide to the max value when the steps do not divide evenly into it', () => {\r\n      sliderInstance.min = 5;\r\n      sliderInstance.max = 100;\r\n      sliderInstance.step = 15;\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 1, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(100);\r\n    });\r\n\r\n  });\r\n\r\n  describe('disabled slider', () => {\r\n    let fixture: ComponentFixture<StandardSlider>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let trackFillElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(DisabledSlider);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.componentInstance;\r\n      trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-track-fill');\r\n    });\r\n\r\n    it('should be disabled', () => {\r\n      expect(sliderInstance.disabled).toBeTruthy();\r\n    });\r\n\r\n    it('should not change the value on click when disabled', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.63);\r\n\r\n      expect(sliderInstance.value).toBe(0);\r\n    });\r\n\r\n    it('should not change the value on slide when disabled', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.5, gestureConfig);\r\n\r\n      expect(sliderInstance.value).toBe(0);\r\n    });\r\n\r\n    it('should not emit change when disabled', () => {\r\n      const onChangeSpy = jasmine.createSpy('slider onChange');\r\n      sliderInstance.change.subscribe(onChangeSpy);\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.5, gestureConfig);\r\n\r\n      expect(onChangeSpy).toHaveBeenCalledTimes(0);\r\n    });\r\n\r\n    it('should not add the mat-slider-active class on click when disabled', () => {\r\n      expect(sliderNativeElement.classList).not.toContain('mat-slider-active');\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.43);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderNativeElement.classList).not.toContain('mat-slider-active');\r\n    });\r\n\r\n    it('should not add the mat-slider-sliding class on slide when disabled', () => {\r\n      expect(sliderNativeElement.classList).not.toContain('mat-slider-sliding');\r\n\r\n      dispatchSlideStartEvent(sliderNativeElement, 0.46, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderNativeElement.classList).not.toContain('mat-slider-sliding');\r\n    });\r\n\r\n    it ('should leave thumb gap', () => {\r\n      expect(trackFillElement.style.transform).toContain('translateX(-7px)');\r\n    });\r\n\r\n    it('should disable tabbing to the slider', () => {\r\n      expect(sliderNativeElement.tabIndex).toBe(-1);\r\n    });\r\n  });\r\n\r\n  describe('slider with set min and max', () => {\r\n    let fixture: ComponentFixture<SliderWithMinAndMax>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let trackFillElement: HTMLElement;\r\n    let ticksContainerElement: HTMLElement;\r\n    let ticksElement: HTMLElement;\r\n    let testComponent: SliderWithMinAndMax;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithMinAndMax);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.injector.get<MatSlider>(MatSlider);\r\n      trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-track-fill');\r\n      ticksContainerElement =\r\n          <HTMLElement>sliderNativeElement.querySelector('.mat-slider-ticks-container');\r\n      ticksElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-ticks');\r\n    });\r\n\r\n    it('should set the default values from the attributes', () => {\r\n      expect(sliderInstance.value).toBe(4);\r\n      expect(sliderInstance.min).toBe(4);\r\n      expect(sliderInstance.max).toBe(6);\r\n    });\r\n\r\n    it('should set the correct value on click', () => {\r\n      dispatchClickEventSequence(sliderNativeElement, 0.09);\r\n      fixture.detectChanges();\r\n\r\n      // Computed by multiplying the difference between the min and the max by the percentage from\r\n      // the click and adding that to the minimum.\r\n      let value = Math.round(4 + (0.09 * (6 - 4)));\r\n      expect(sliderInstance.value).toBe(value);\r\n    });\r\n\r\n    it('should set the correct value on slide', () => {\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.62, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      // Computed by multiplying the difference between the min and the max by the percentage from\r\n      // the click and adding that to the minimum.\r\n      let value = Math.round(4 + (0.62 * (6 - 4)));\r\n      expect(sliderInstance.value).toBe(value);\r\n    });\r\n\r\n    it('should snap the fill to the nearest value on click', () => {\r\n      dispatchClickEventSequence(sliderNativeElement, 0.68);\r\n      fixture.detectChanges();\r\n\r\n      // The closest snap is halfway on the slider.\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0.5, 1, 1)');\r\n    });\r\n\r\n    it('should snap the fill to the nearest value on slide', () => {\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.74, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      // The closest snap is at the halfway point on the slider.\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0.5, 1, 1)');\r\n    });\r\n\r\n    it('should adjust fill and ticks on mouse enter when min changes', () => {\r\n      testComponent.min = -2;\r\n      fixture.detectChanges();\r\n\r\n      dispatchMouseenterEvent(sliderNativeElement);\r\n      fixture.detectChanges();\r\n\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0.75, 1, 1)');\r\n      expect(ticksElement.style.backgroundSize).toBe('75% 2px');\r\n      // Make sure it cuts off the last half tick interval.\r\n      expect(ticksElement.style.transform).toContain('translateX(37.5%)');\r\n      expect(ticksContainerElement.style.transform).toBe('translateX(-37.5%)');\r\n    });\r\n\r\n    it('should adjust fill and ticks on mouse enter when max changes', () => {\r\n      testComponent.min = -2;\r\n      fixture.detectChanges();\r\n\r\n      testComponent.max = 10;\r\n      fixture.detectChanges();\r\n\r\n      dispatchMouseenterEvent(sliderNativeElement);\r\n      fixture.detectChanges();\r\n\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0.5, 1, 1)');\r\n      expect(ticksElement.style.backgroundSize).toBe('50% 2px');\r\n      // Make sure it cuts off the last half tick interval.\r\n      expect(ticksElement.style.transform).toContain('translateX(25%)');\r\n      expect(ticksContainerElement.style.transform).toBe('translateX(-25%)');\r\n    });\r\n  });\r\n\r\n  describe('slider with set value', () => {\r\n    let fixture: ComponentFixture<SliderWithValue>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithValue);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.injector.get<MatSlider>(MatSlider);\r\n    });\r\n\r\n    it('should set the default value from the attribute', () => {\r\n      expect(sliderInstance.value).toBe(26);\r\n    });\r\n\r\n    it('should set the correct value on click', () => {\r\n      dispatchClickEventSequence(sliderNativeElement, 0.92);\r\n      fixture.detectChanges();\r\n\r\n      // On a slider with default max and min the value should be approximately equal to the\r\n      // percentage clicked. This should be the case regardless of what the original set value was.\r\n      expect(sliderInstance.value).toBe(92);\r\n    });\r\n\r\n    it('should set the correct value on slide', () => {\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.32, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(32);\r\n    });\r\n  });\r\n\r\n  describe('slider with set step', () => {\r\n    let fixture: ComponentFixture<SliderWithStep>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let trackFillElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithStep);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.injector.get<MatSlider>(MatSlider);\r\n      trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-track-fill');\r\n    });\r\n\r\n    it('should set the correct step value on click', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.13);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(25);\r\n    });\r\n\r\n    it('should snap the fill to a step on click', () => {\r\n      dispatchClickEventSequence(sliderNativeElement, 0.66);\r\n      fixture.detectChanges();\r\n\r\n      // The closest step is at 75% of the slider.\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0.75, 1, 1)');\r\n    });\r\n\r\n    it('should set the correct step value on slide', () => {\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.07, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(0);\r\n    });\r\n\r\n    it('should snap the thumb and fill to a step on slide', () => {\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.88, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      // The closest snap is at the end of the slider.\r\n      expect(trackFillElement.style.transform).toContain('scale3d(1, 1, 1)');\r\n    });\r\n\r\n    it('should round the value inside the label based on the provided step', () => {\r\n      let testStep = (step: number, expected: string) => {\r\n        fixture.componentInstance.step = step;\r\n        fixture.detectChanges();\r\n        dispatchSlideEventSequence(sliderNativeElement, 0, 0.333333, gestureConfig);\r\n        expect(sliderDebugElement.componentInstance.displayValue.toString()).toBe(expected);\r\n      };\r\n\r\n      testStep(1, '33');\r\n      testStep(0.1, '33.3');\r\n      testStep(0.01, '33.33');\r\n      testStep(0.001, '33.333');\r\n    });\r\n\r\n    it('should not add decimals to the value if it is a whole number', () => {\r\n      fixture.componentInstance.step = 0.1;\r\n      fixture.detectChanges();\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 1, gestureConfig);\r\n\r\n      expect(sliderDebugElement.componentInstance.displayValue).toBe(100);\r\n    });\r\n\r\n    it('should truncate long decimal values when using a decimal step', () => {\r\n      fixture.componentInstance.step = 0.1;\r\n      fixture.detectChanges();\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.333333, gestureConfig);\r\n\r\n      expect(sliderInstance.value).toBe(33.3);\r\n    });\r\n\r\n    it('should truncate long decimal values when using a decimal step and the arrow keys', () => {\r\n      fixture.componentInstance.step = 0.1;\r\n      fixture.detectChanges();\r\n\r\n      for (let i = 0; i < 3; i++) {\r\n        dispatchKeyboardEvent(sliderNativeElement, 'keydown', UP_ARROW);\r\n      }\r\n\r\n      expect(sliderInstance.value).toBe(0.3);\r\n    });\r\n\r\n  });\r\n\r\n  describe('slider with auto ticks', () => {\r\n    let fixture: ComponentFixture<SliderWithAutoTickInterval>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let ticksContainerElement: HTMLElement;\r\n    let ticksElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithAutoTickInterval);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      ticksContainerElement =\r\n          <HTMLElement>sliderNativeElement.querySelector('.mat-slider-ticks-container');\r\n      ticksElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-ticks');\r\n    });\r\n\r\n    it('should set the correct tick separation on mouse enter', () => {\r\n      dispatchMouseenterEvent(sliderNativeElement);\r\n      fixture.detectChanges();\r\n\r\n      // Ticks should be 30px apart (therefore 30% for a 100px long slider).\r\n      expect(ticksElement.style.backgroundSize).toBe('30% 2px');\r\n      // Make sure it cuts off the last half tick interval.\r\n      expect(ticksElement.style.transform).toContain('translateX(15%)');\r\n      expect(ticksContainerElement.style.transform).toBe('translateX(-15%)');\r\n    });\r\n  });\r\n\r\n  describe('slider with set tick interval', () => {\r\n    let fixture: ComponentFixture<SliderWithSetTickInterval>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let ticksContainerElement: HTMLElement;\r\n    let ticksElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithSetTickInterval);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      ticksContainerElement =\r\n          <HTMLElement>sliderNativeElement.querySelector('.mat-slider-ticks-container');\r\n      ticksElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-ticks');\r\n    });\r\n\r\n    it('should set the correct tick separation on mouse enter', () => {\r\n      dispatchMouseenterEvent(sliderNativeElement);\r\n      fixture.detectChanges();\r\n\r\n      // Ticks should be every 18 values (tickInterval of 6 * step size of 3). On a slider 100px\r\n      // long with 100 values, this is 18%.\r\n      expect(ticksElement.style.backgroundSize).toBe('18% 2px');\r\n      // Make sure it cuts off the last half tick interval.\r\n      expect(ticksElement.style.transform).toContain('translateX(9%)');\r\n      expect(ticksContainerElement.style.transform).toBe('translateX(-9%)');\r\n    });\r\n\r\n    it('should be able to reset the tick interval after it has been set', () => {\r\n      expect(sliderNativeElement.classList)\r\n          .toContain('mat-slider-has-ticks', 'Expected element to have ticks initially.');\r\n\r\n      fixture.componentInstance.tickInterval = 0;\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderNativeElement.classList)\r\n          .not.toContain('mat-slider-has-ticks', 'Expected element not to have ticks after reset.');\r\n    });\r\n  });\r\n\r\n  describe('slider with thumb label', () => {\r\n    let fixture: ComponentFixture<SliderWithThumbLabel>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let thumbLabelTextElement: Element;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithThumbLabel);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.componentInstance;\r\n      thumbLabelTextElement = sliderNativeElement.querySelector('.mat-slider-thumb-label-text')!;\r\n    });\r\n\r\n    it('should add the thumb label class to the slider container', () => {\r\n      expect(sliderNativeElement.classList).toContain('mat-slider-thumb-label-showing');\r\n    });\r\n\r\n    it('should update the thumb label text on click', () => {\r\n      expect(thumbLabelTextElement.textContent).toBe('0');\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.13);\r\n      fixture.detectChanges();\r\n\r\n      // The thumb label text is set to the slider's value. These should always be the same.\r\n      expect(thumbLabelTextElement.textContent).toBe('13');\r\n    });\r\n\r\n    it('should update the thumb label text on slide', () => {\r\n      expect(thumbLabelTextElement.textContent).toBe('0');\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.56, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      // The thumb label text is set to the slider's value. These should always be the same.\r\n      expect(thumbLabelTextElement.textContent).toBe(`${sliderInstance.value}`);\r\n    });\r\n  });\r\n\r\n  describe('slider with custom thumb label formatting', () => {\r\n    let fixture: ComponentFixture<SliderWithCustomThumbLabelFormatting>;\r\n    let sliderInstance: MatSlider;\r\n    let thumbLabelTextElement: Element;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithCustomThumbLabelFormatting);\r\n      fixture.detectChanges();\r\n\r\n      const sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      const sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.componentInstance;\r\n      thumbLabelTextElement = sliderNativeElement.querySelector('.mat-slider-thumb-label-text')!;\r\n    });\r\n\r\n    it('should invoke the passed-in `displayWith` function with the value', () => {\r\n      spyOn(fixture.componentInstance, 'displayWith').and.callThrough();\r\n\r\n      sliderInstance.value = 1337;\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.displayWith).toHaveBeenCalledWith(1337);\r\n    });\r\n\r\n    it('should format the thumb label based on the passed-in `displayWith` function', () => {\r\n      sliderInstance.value = 200000;\r\n      fixture.detectChanges();\r\n\r\n      expect(thumbLabelTextElement.textContent).toBe('200k');\r\n    });\r\n  });\r\n\r\n  describe('slider with value property binding', () => {\r\n    let fixture: ComponentFixture<SliderWithOneWayBinding>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let testComponent: SliderWithOneWayBinding;\r\n    let trackFillElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithOneWayBinding);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.injector.get<MatSlider>(MatSlider);\r\n      trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-track-fill');\r\n    });\r\n\r\n    it('should initialize based on bound value', () => {\r\n      expect(sliderInstance.value).toBe(50);\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0.5, 1, 1)');\r\n    });\r\n\r\n    it('should update when bound value changes', () => {\r\n      testComponent.val = 75;\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(75);\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0.75, 1, 1)');\r\n    });\r\n  });\r\n\r\n  describe('slider with set min and max and a value smaller than min', () => {\r\n    let fixture: ComponentFixture<SliderWithValueSmallerThanMin>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let trackFillElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithValueSmallerThanMin);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.componentInstance;\r\n      trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-track-fill');\r\n    });\r\n\r\n    it('should set the value smaller than the min value', () => {\r\n      expect(sliderInstance.value).toBe(3);\r\n      expect(sliderInstance.min).toBe(4);\r\n      expect(sliderInstance.max).toBe(6);\r\n    });\r\n\r\n    it('should set the fill to the min value', () => {\r\n      expect(trackFillElement.style.transform).toContain('scale3d(0, 1, 1)');\r\n    });\r\n  });\r\n\r\n  describe('slider with set min and max and a value greater than max', () => {\r\n    let fixture: ComponentFixture<SliderWithValueSmallerThanMin>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let trackFillElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithValueGreaterThanMax);\r\n      fixture.detectChanges();\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.componentInstance;\r\n      trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-track-fill');\r\n    });\r\n\r\n    it('should set the value greater than the max value', () => {\r\n      expect(sliderInstance.value).toBe(7);\r\n      expect(sliderInstance.min).toBe(4);\r\n      expect(sliderInstance.max).toBe(6);\r\n    });\r\n\r\n    it('should set the fill to the max value', () => {\r\n      expect(trackFillElement.style.transform).toContain('scale3d(1, 1, 1)');\r\n    });\r\n  });\r\n\r\n  describe('slider with change handler', () => {\r\n    let fixture: ComponentFixture<SliderWithChangeHandler>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let testComponent: SliderWithChangeHandler;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithChangeHandler);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      spyOn(testComponent, 'onChange');\r\n      spyOn(testComponent, 'onInput');\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n    });\r\n\r\n    it('should emit change on click', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.2);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should emit change on slide', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.4, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should not emit multiple changes for same value', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.6);\r\n      dispatchSlideEventSequence(sliderNativeElement, 0.6, 0.6, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should dispatch events when changing back to previously emitted value after ' +\r\n        'programmatically setting value', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n      expect(testComponent.onInput).not.toHaveBeenCalled();\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.2);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n\r\n      testComponent.slider.value = 0;\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.2);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(2);\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n\r\n  describe('slider with input event', () => {\r\n    let fixture: ComponentFixture<SliderWithChangeHandler>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let testComponent: SliderWithChangeHandler;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithChangeHandler);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      spyOn(testComponent, 'onInput');\r\n      spyOn(testComponent, 'onChange');\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n    });\r\n\r\n    it('should emit an input event while sliding', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchMouseenterEvent(sliderNativeElement);\r\n      dispatchSlideEvent(sliderNativeElement, 0.5, gestureConfig);\r\n      dispatchSlideEvent(sliderNativeElement, 1, gestureConfig);\r\n      dispatchSlideEndEvent(sliderNativeElement, 1, gestureConfig);\r\n\r\n      fixture.detectChanges();\r\n\r\n      // The input event should fire twice, because the slider changed two times.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(2);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should emit an input event when clicking', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.75);\r\n\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single click.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n  });\r\n\r\n  describe('keyboard support', () => {\r\n    let fixture: ComponentFixture<SliderWithChangeHandler>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let testComponent: SliderWithChangeHandler;\r\n    let sliderInstance: MatSlider;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithChangeHandler);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      spyOn(testComponent, 'onInput');\r\n      spyOn(testComponent, 'onChange');\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.injector.get<MatSlider>(MatSlider);\r\n    });\r\n\r\n    it('should increment slider by 1 on up arrow pressed', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', UP_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single keyboard press.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(sliderInstance.value).toBe(1);\r\n    });\r\n\r\n    it('should increment slider by 1 on right arrow pressed', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', RIGHT_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single keyboard press.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(sliderInstance.value).toBe(1);\r\n    });\r\n\r\n    it('should decrement slider by 1 on down arrow pressed', () => {\r\n      sliderInstance.value = 100;\r\n\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', DOWN_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single keyboard press.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(sliderInstance.value).toBe(99);\r\n    });\r\n\r\n    it('should decrement slider by 1 on left arrow pressed', () => {\r\n      sliderInstance.value = 100;\r\n\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', LEFT_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single keyboard press.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(sliderInstance.value).toBe(99);\r\n    });\r\n\r\n    it('should increment slider by 10 on page up pressed', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', PAGE_UP);\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single keyboard press.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(sliderInstance.value).toBe(10);\r\n    });\r\n\r\n    it('should decrement slider by 10 on page down pressed', () => {\r\n      sliderInstance.value = 100;\r\n\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', PAGE_DOWN);\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single keyboard press.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(sliderInstance.value).toBe(90);\r\n    });\r\n\r\n    it('should set slider to max on end pressed', () => {\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', END);\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single keyboard press.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(sliderInstance.value).toBe(100);\r\n    });\r\n\r\n    it('should set slider to min on home pressed', () => {\r\n      sliderInstance.value = 100;\r\n\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', HOME);\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single keyboard press.\r\n      expect(testComponent.onInput).toHaveBeenCalledTimes(1);\r\n      expect(testComponent.onChange).toHaveBeenCalledTimes(1);\r\n      expect(sliderInstance.value).toBe(0);\r\n    });\r\n\r\n    it(`should take not action for presses of keys it doesn't care about`, () => {\r\n      sliderInstance.value = 50;\r\n\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', BACKSPACE);\r\n      fixture.detectChanges();\r\n\r\n      // The `onInput` event should be emitted once due to a single keyboard press.\r\n      expect(testComponent.onInput).not.toHaveBeenCalled();\r\n      expect(testComponent.onChange).not.toHaveBeenCalled();\r\n      expect(sliderInstance.value).toBe(50);\r\n    });\r\n  });\r\n\r\n  describe('slider with direction and invert', () => {\r\n    let fixture: ComponentFixture<SliderWithDirAndInvert>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let testComponent: SliderWithDirAndInvert;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithDirAndInvert);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderInstance = sliderDebugElement.injector.get<MatSlider>(MatSlider);\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n    });\r\n\r\n    it('works in inverted mode', () => {\r\n      testComponent.invert = true;\r\n      fixture.detectChanges();\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.3);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(70);\r\n    });\r\n\r\n    it('works in RTL languages', () => {\r\n      testComponent.dir = 'rtl';\r\n      fixture.detectChanges();\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.3);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(70);\r\n    });\r\n\r\n    it('works in RTL languages in inverted mode', () => {\r\n      testComponent.dir = 'rtl';\r\n      testComponent.invert = true;\r\n      fixture.detectChanges();\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.3);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(30);\r\n    });\r\n\r\n    it('should re-render slider with updated style upon directionality change', () => {\r\n      testComponent.dir = 'rtl';\r\n      fixture.detectChanges();\r\n\r\n      let initialTrackFillStyles = sliderInstance._trackFillStyles;\r\n      let initialTicksContainerStyles = sliderInstance._ticksContainerStyles;\r\n      let initialTicksStyles = sliderInstance._ticksStyles;\r\n      let initialThumbContainerStyles = sliderInstance._thumbContainerStyles;\r\n\r\n      testComponent.dir = 'ltr';\r\n      fixture.detectChanges();\r\n\r\n      expect(initialTrackFillStyles).not.toEqual(sliderInstance._trackFillStyles);\r\n      expect(initialTicksContainerStyles).not.toEqual(sliderInstance._ticksContainerStyles);\r\n      expect(initialTicksStyles).not.toEqual(sliderInstance._ticksStyles);\r\n      expect(initialThumbContainerStyles).not.toEqual(sliderInstance._thumbContainerStyles);\r\n    });\r\n\r\n    it('should increment inverted slider by 1 on right arrow pressed', () => {\r\n      testComponent.invert = true;\r\n      fixture.detectChanges();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', RIGHT_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(1);\r\n    });\r\n\r\n    it('should decrement inverted slider by 1 on left arrow pressed', () => {\r\n      testComponent.invert = true;\r\n      sliderInstance.value = 100;\r\n      fixture.detectChanges();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', LEFT_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(99);\r\n    });\r\n\r\n    it('should decrement RTL slider by 1 on right arrow pressed', () => {\r\n      testComponent.dir = 'rtl';\r\n      sliderInstance.value = 100;\r\n      fixture.detectChanges();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', RIGHT_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(99);\r\n    });\r\n\r\n    it('should increment RTL slider by 1 on left arrow pressed', () => {\r\n      testComponent.dir = 'rtl';\r\n      fixture.detectChanges();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', LEFT_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(1);\r\n    });\r\n\r\n    it('should decrement inverted RTL slider by 1 on right arrow pressed', () => {\r\n      testComponent.dir = 'rtl';\r\n      testComponent.invert = true;\r\n      sliderInstance.value = 100;\r\n      fixture.detectChanges();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', RIGHT_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(99);\r\n    });\r\n\r\n    it('should increment inverted RTL slider by 1 on left arrow pressed', () => {\r\n      testComponent.dir = 'rtl';\r\n      testComponent.invert = true;\r\n      fixture.detectChanges();\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', LEFT_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(1);\r\n    });\r\n\r\n    it('should hide last tick when inverted and at min value', () => {\r\n      testComponent.invert = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderNativeElement.classList.contains('mat-slider-hide-last-tick'))\r\n          .toBe(true, 'last tick should be hidden');\r\n    });\r\n  });\r\n\r\n  describe('vertical slider', () => {\r\n    let fixture: ComponentFixture<VerticalSlider>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let trackFillElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let testComponent: VerticalSlider;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(VerticalSlider);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderInstance = sliderDebugElement.injector.get<MatSlider>(MatSlider);\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.mat-slider-track-fill');\r\n    });\r\n\r\n    it('updates value on click', () => {\r\n      dispatchClickEventSequence(sliderNativeElement, 0.3);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(70);\r\n    });\r\n\r\n    it('updates value on click in inverted mode', () => {\r\n      testComponent.invert = true;\r\n      fixture.detectChanges();\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.3);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(30);\r\n    });\r\n\r\n    it('should update the track fill on click', () => {\r\n      expect(trackFillElement.style.transform).toContain('scale3d(1, 0, 1)');\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.39);\r\n      fixture.detectChanges();\r\n\r\n      expect(trackFillElement.style.transform).toContain('scale3d(1, 0.61, 1)');\r\n    });\r\n\r\n    it('should update the track fill on click in inverted mode', () => {\r\n      testComponent.invert = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(trackFillElement.style.transform).toContain('scale3d(1, 0, 1)');\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.39);\r\n      fixture.detectChanges();\r\n\r\n      expect(trackFillElement.style.transform).toContain('scale3d(1, 0.39, 1)');\r\n    });\r\n\r\n    it('should have aria-orientation vertical', () => {\r\n      expect(sliderNativeElement.getAttribute('aria-orientation')).toEqual('vertical');\r\n    });\r\n  });\r\n\r\n  describe('tabindex', () => {\r\n\r\n    it('should allow setting the tabIndex through binding', () => {\r\n      const fixture = createComponent(SliderWithTabIndexBinding);\r\n      fixture.detectChanges();\r\n\r\n      const slider = fixture.debugElement.query(By.directive(MatSlider)).componentInstance;\r\n\r\n      expect(slider.tabIndex).toBe(0, 'Expected the tabIndex to be set to 0 by default.');\r\n\r\n      fixture.componentInstance.tabIndex = 3;\r\n      fixture.detectChanges();\r\n\r\n      expect(slider.tabIndex).toBe(3, 'Expected the tabIndex to have been changed.');\r\n    });\r\n\r\n    it('should detect the native tabindex attribute', () => {\r\n      const fixture = createComponent(SliderWithNativeTabindexAttr);\r\n      fixture.detectChanges();\r\n\r\n      const slider = fixture.debugElement.query(By.directive(MatSlider)).componentInstance;\r\n\r\n      expect(slider.tabIndex)\r\n        .toBe(5, 'Expected the tabIndex to be set to the value of the native attribute.');\r\n    });\r\n  });\r\n\r\n  describe('slider with ngModel', () => {\r\n    let fixture: ComponentFixture<SliderWithNgModel>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let testComponent: SliderWithNgModel;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithNgModel);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n    });\r\n\r\n    it('should update the model on click', () => {\r\n      expect(testComponent.val).toBe(0);\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.76);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.val).toBe(76);\r\n    });\r\n\r\n    it('should update the model on slide', () => {\r\n      expect(testComponent.val).toBe(0);\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.19, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.val).toBe(19);\r\n    });\r\n\r\n    it('should update the model on keydown', () => {\r\n      expect(testComponent.val).toBe(0);\r\n\r\n      dispatchKeyboardEvent(sliderNativeElement, 'keydown', UP_ARROW);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.val).toBe(1);\r\n    });\r\n\r\n    it('should be able to reset a slider by setting the model back to undefined', fakeAsync(() => {\r\n      expect(testComponent.slider.value).toBe(0);\r\n\r\n      testComponent.val = 5;\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      expect(testComponent.slider.value).toBe(5);\r\n\r\n      testComponent.val = undefined;\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      expect(testComponent.slider.value).toBe(0);\r\n    }));\r\n\r\n  });\r\n\r\n  describe('slider as a custom form control', () => {\r\n    let fixture: ComponentFixture<SliderWithFormControl>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MatSlider;\r\n    let testComponent: SliderWithFormControl;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithFormControl);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n\r\n      sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n      sliderInstance = sliderDebugElement.injector.get<MatSlider>(MatSlider);\r\n    });\r\n\r\n    it('should not update the control when the value is updated', () => {\r\n      expect(testComponent.control.value).toBe(0);\r\n\r\n      sliderInstance.value = 11;\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.control.value).toBe(0);\r\n    });\r\n\r\n    it('should update the control on click', () => {\r\n      expect(testComponent.control.value).toBe(0);\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.76);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.control.value).toBe(76);\r\n    });\r\n\r\n    it('should update the control on slide', () => {\r\n      expect(testComponent.control.value).toBe(0);\r\n\r\n      dispatchSlideEventSequence(sliderNativeElement, 0, 0.19, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.control.value).toBe(19);\r\n    });\r\n\r\n    it('should update the value when the control is set', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n\r\n      testComponent.control.setValue(7);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(7);\r\n    });\r\n\r\n    it('should update the disabled state when control is disabled', () => {\r\n      expect(sliderInstance.disabled).toBe(false);\r\n\r\n      testComponent.control.disable();\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.disabled).toBe(true);\r\n    });\r\n\r\n    it('should update the disabled state when the control is enabled', () => {\r\n      sliderInstance.disabled = true;\r\n\r\n      testComponent.control.enable();\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.disabled).toBe(false);\r\n    });\r\n\r\n    it('should have the correct control state initially and after interaction', () => {\r\n      let sliderControl = testComponent.control;\r\n\r\n      // The control should start off valid, pristine, and untouched.\r\n      expect(sliderControl.valid).toBe(true);\r\n      expect(sliderControl.pristine).toBe(true);\r\n      expect(sliderControl.touched).toBe(false);\r\n\r\n      // After changing the value, the control should become dirty (not pristine),\r\n      // but remain untouched.\r\n      dispatchClickEventSequence(sliderNativeElement, 0.5);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderControl.valid).toBe(true);\r\n      expect(sliderControl.pristine).toBe(false);\r\n      expect(sliderControl.touched).toBe(false);\r\n\r\n      // If the control has been visited due to interaction, the control should remain\r\n      // dirty and now also be touched.\r\n      sliderInstance._onBlur();\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderControl.valid).toBe(true);\r\n      expect(sliderControl.pristine).toBe(false);\r\n      expect(sliderControl.touched).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('slider with a two-way binding', () => {\r\n    let fixture: ComponentFixture<SliderWithTwoWayBinding>;\r\n    let testComponent: SliderWithTwoWayBinding;\r\n    let sliderNativeElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SliderWithTwoWayBinding);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.componentInstance;\r\n      let sliderDebugElement = fixture.debugElement.query(By.directive(MatSlider));\r\n      sliderNativeElement = sliderDebugElement.nativeElement;\r\n    });\r\n\r\n    it('should sync the value binding in both directions', () => {\r\n      expect(testComponent.value).toBe(0);\r\n      expect(testComponent.slider.value).toBe(0);\r\n\r\n      dispatchClickEventSequence(sliderNativeElement, 0.1);\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.value).toBe(10);\r\n      expect(testComponent.slider.value).toBe(10);\r\n\r\n      testComponent.value = 20;\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.value).toBe(20);\r\n      expect(testComponent.slider.value).toBe(20);\r\n    });\r\n  });\r\n\r\n});\r\n\r\n// Disable animations and make the slider an even 100px (+ 8px padding on either side)\r\n// so we get nice round values in tests.\r\nconst styles = `\r\n  .mat-slider-horizontal { min-width: 116px !important; }\r\n  .mat-slider-vertical { min-height: 116px !important; }\r\n  .mat-slider-track-fill { transition: none !important; }\r\n`;\r\n\r\n@Component({\r\n  template: `<mat-slider></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass StandardSlider { }\r\n\r\n@Component({\r\n  template: `<mat-slider disabled></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass DisabledSlider { }\r\n\r\n@Component({\r\n  template: `<mat-slider [min]=\"min\" [max]=\"max\" tickInterval=\"6\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithMinAndMax {\r\n  min = 4;\r\n  max = 6;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slider value=\"26\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithValue { }\r\n\r\n@Component({\r\n  template: `<mat-slider [step]=\"step\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithStep {\r\n  step = 25;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slider step=\"5\" tickInterval=\"auto\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithAutoTickInterval { }\r\n\r\n@Component({\r\n  template: `<mat-slider step=\"3\" [tickInterval]=\"tickInterval\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithSetTickInterval {\r\n  tickInterval = 6;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slider thumbLabel></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithThumbLabel { }\r\n\r\n\r\n@Component({\r\n  template: `<mat-slider min=\"1\" max=\"100000\" [displayWith]=\"displayWith\" thumbLabel></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithCustomThumbLabelFormatting {\r\n  displayWith(value: number | null) {\r\n    if (!value) {\r\n      return 0;\r\n    }\r\n\r\n    if (value >= 1000) {\r\n      return (value / 1000) + 'k';\r\n    }\r\n\r\n    return value;\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  template: `<mat-slider [value]=\"val\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithOneWayBinding {\r\n  val = 50;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slider [formControl]=\"control\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithFormControl {\r\n  control = new FormControl(0);\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slider [(ngModel)]=\"val\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithNgModel {\r\n  @ViewChild(MatSlider) slider: MatSlider;\r\n  val: number | undefined = 0;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slider value=\"3\" min=\"4\" max=\"6\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithValueSmallerThanMin { }\r\n\r\n@Component({\r\n  template: `<mat-slider value=\"7\" min=\"4\" max=\"6\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithValueGreaterThanMax { }\r\n\r\n@Component({\r\n  template: `<mat-slider (change)=\"onChange($event)\" (input)=\"onInput($event)\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithChangeHandler {\r\n  onChange() { }\r\n  onInput() { }\r\n\r\n  @ViewChild(MatSlider) slider: MatSlider;\r\n}\r\n\r\n@Component({\r\n  template: `<div [dir]=\"dir\"><mat-slider [invert]=\"invert\" tickInterval=\"5\"></mat-slider></div>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithDirAndInvert {\r\n  dir = 'ltr';\r\n  invert = false;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slider vertical [invert]=\"invert\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass VerticalSlider {\r\n  invert = false;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slider [tabIndex]=\"tabIndex\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithTabIndexBinding {\r\n  tabIndex: number;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slider tabindex=\"5\"></mat-slider>`,\r\n  styles: [styles],\r\n})\r\nclass SliderWithNativeTabindexAttr {\r\n  tabIndex: number;\r\n}\r\n\r\n@Component({\r\n  template: '<mat-slider [(value)]=\"value\"></mat-slider>',\r\n  styles: [styles],\r\n})\r\nclass SliderWithTwoWayBinding {\r\n  @ViewChild(MatSlider) slider: MatSlider;\r\n  value = 0;\r\n}\r\n\r\n/**\r\n * Dispatches a click event sequence (consisting of moueseenter, click) from an element.\r\n * Note: The mouse event truncates the position for the click.\r\n * @param sliderElement The mat-slider element from which the event will be dispatched.\r\n * @param percentage The percentage of the slider where the click should occur. Used to find the\r\n * physical location of the click.\r\n */\r\nfunction dispatchClickEventSequence(sliderElement: HTMLElement, percentage: number): void {\r\n  let trackElement = sliderElement.querySelector('.mat-slider-wrapper')!;\r\n  let dimensions = trackElement.getBoundingClientRect();\r\n  let x = dimensions.left + (dimensions.width * percentage);\r\n  let y = dimensions.top + (dimensions.height * percentage);\r\n\r\n  dispatchMouseenterEvent(sliderElement);\r\n  dispatchMouseEvent(sliderElement, 'click', x, y);\r\n}\r\n\r\n/**\r\n * Dispatches a slide event sequence (consisting of slidestart, slide, slideend) from an element.\r\n * @param sliderElement The mat-slider element from which the event will be dispatched.\r\n * @param startPercent The percentage of the slider where the slide will begin.\r\n * @param endPercent The percentage of the slider where the slide will end.\r\n * @param gestureConfig The gesture config for the test to handle emitting the slide events.\r\n */\r\nfunction dispatchSlideEventSequence(sliderElement: HTMLElement, startPercent: number,\r\n                                    endPercent: number, gestureConfig: TestGestureConfig): void {\r\n  dispatchMouseenterEvent(sliderElement);\r\n  dispatchSlideStartEvent(sliderElement, startPercent, gestureConfig);\r\n  dispatchSlideEvent(sliderElement, startPercent, gestureConfig);\r\n  dispatchSlideEvent(sliderElement, endPercent, gestureConfig);\r\n  dispatchSlideEndEvent(sliderElement, endPercent, gestureConfig);\r\n}\r\n\r\n/**\r\n * Dispatches a slide event from an element.\r\n * @param sliderElement The mat-slider element from which the event will be dispatched.\r\n * @param percent The percentage of the slider where the slide will happen.\r\n * @param gestureConfig The gesture config for the test to handle emitting the slide events.\r\n */\r\nfunction dispatchSlideEvent(sliderElement: HTMLElement, percent: number,\r\n                            gestureConfig: TestGestureConfig): void {\r\n  let trackElement = sliderElement.querySelector('.mat-slider-wrapper')!;\r\n  let dimensions = trackElement.getBoundingClientRect();\r\n  let x = dimensions.left + (dimensions.width * percent);\r\n  let y = dimensions.top + (dimensions.height * percent);\r\n\r\n  gestureConfig.emitEventForElement('slide', sliderElement, {\r\n    center: { x: x, y: y },\r\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\r\n  });\r\n}\r\n\r\n/**\r\n * Dispatches a slidestart event from an element.\r\n * @param sliderElement The mat-slider element from which the event will be dispatched.\r\n * @param percent The percentage of the slider where the slide will begin.\r\n * @param gestureConfig The gesture config for the test to handle emitting the slide events.\r\n */\r\nfunction dispatchSlideStartEvent(sliderElement: HTMLElement, percent: number,\r\n                                 gestureConfig: TestGestureConfig): void {\r\n  let trackElement = sliderElement.querySelector('.mat-slider-wrapper')!;\r\n  let dimensions = trackElement.getBoundingClientRect();\r\n  let x = dimensions.left + (dimensions.width * percent);\r\n  let y = dimensions.top + (dimensions.height * percent);\r\n\r\n  dispatchMouseenterEvent(sliderElement);\r\n\r\n  gestureConfig.emitEventForElement('slidestart', sliderElement, {\r\n    center: { x: x, y: y },\r\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\r\n  });\r\n}\r\n\r\n/**\r\n * Dispatches a slideend event from an element.\r\n * @param sliderElement The mat-slider element from which the event will be dispatched.\r\n * @param percent The percentage of the slider where the slide will end.\r\n * @param gestureConfig The gesture config for the test to handle emitting the slide events.\r\n */\r\nfunction dispatchSlideEndEvent(sliderElement: HTMLElement, percent: number,\r\n                               gestureConfig: TestGestureConfig): void {\r\n  let trackElement = sliderElement.querySelector('.mat-slider-wrapper')!;\r\n  let dimensions = trackElement.getBoundingClientRect();\r\n  let x = dimensions.left + (dimensions.width * percent);\r\n  let y = dimensions.top + (dimensions.height * percent);\r\n\r\n  gestureConfig.emitEventForElement('slideend', sliderElement, {\r\n    center: { x: x, y: y },\r\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\r\n  });\r\n}\r\n\r\n/**\r\n * Dispatches a mouseenter event from an element.\r\n * Note: The mouse event truncates the position for the click.\r\n * @param element The element from which the event will be dispatched.\r\n */\r\nfunction dispatchMouseenterEvent(element: HTMLElement): void {\r\n  let dimensions = element.getBoundingClientRect();\r\n  let y = dimensions.top;\r\n  let x = dimensions.left;\r\n\r\n  dispatchMouseEvent(element, 'mouseenter', x, y);\r\n}\r\n"]}