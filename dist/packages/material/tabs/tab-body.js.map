{"version":3,"file":"tab-body.js","sourceRoot":"","sources":["../../../../src/lib/tabs/tab-body.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ChangeDetectorRef,\r\n  Input,\r\n  Inject,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit,\r\n  ElementRef,\r\n  Directive,\r\n  Optional,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ComponentFactoryResolver,\r\n  ViewContainerRef,\r\n  forwardRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\r\nimport {Directionality, Direction} from '@angular/cdk/bidi';\r\nimport {Subscription} from 'rxjs';\r\nimport {matTabsAnimations} from './tabs-animations';\r\nimport {startWith} from 'rxjs/operators';\r\n\r\n/**\r\n * These position states are used internally as animation states for the tab body. Setting the\r\n * position state to left, right, or center will transition the tab body from its current\r\n * position to its respective state. If there is not current position (void, in the case of a new\r\n * tab body), then there will be no transition animation to its state.\r\n *\r\n * In the case of a new tab body that should immediately be centered with an animating transition,\r\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\r\n * psuedo-prior state.\r\n */\r\nexport type MatTabBodyPositionState =\r\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\r\n\r\n/**\r\n * The origin state is an internally used state that is set on a new tab body indicating if it\r\n * began to the left or right of the prior selected index. For example, if the selected index was\r\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\r\n * origin of right because its index was greater than the prior selected index.\r\n */\r\nexport type MatTabBodyOriginState = 'left' | 'right';\r\n\r\n/**\r\n * The portal host directive for the contents of the tab.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[matTabBodyHost]'\r\n})\r\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\r\n  /** Subscription to events for when the tab body begins centering. */\r\n  private _centeringSub = Subscription.EMPTY;\r\n  /** Subscription to events for when the tab body finishes leaving from center position. */\r\n  private _leavingSub = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    componentFactoryResolver: ComponentFactoryResolver,\r\n    viewContainerRef: ViewContainerRef,\r\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\r\n      super(componentFactoryResolver, viewContainerRef);\r\n  }\r\n\r\n  /** Set initial visibility or set up subscription for changing visibility. */\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n\r\n    this._centeringSub = this._host._beforeCentering\r\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\r\n      .subscribe((isCentering: boolean) => {\r\n        if (isCentering && !this.hasAttached()) {\r\n          this.attach(this._host._content);\r\n        }\r\n      });\r\n\r\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\r\n      this.detach();\r\n    });\r\n  }\r\n\r\n  /** Clean up centering subscription. */\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this._centeringSub.unsubscribe();\r\n    this._leavingSub.unsubscribe();\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper for the contents of a tab.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-body',\r\n  templateUrl: 'tab-body.html',\r\n  styleUrls: ['tab-body.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [matTabsAnimations.translateTab],\r\n  host: {\r\n    'class': 'mat-tab-body',\r\n  },\r\n})\r\nexport class MatTabBody implements OnInit, OnDestroy {\r\n\r\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\r\n  private _positionIndex: number;\r\n\r\n  /** Subscription to the directionality change observable. */\r\n  private _dirChangeSubscription = Subscription.EMPTY;\r\n\r\n  /** Tab body position state. Used by the animation trigger for the current state. */\r\n  _position: MatTabBodyPositionState;\r\n\r\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\r\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** Event emitted before the centering of the tab begins. */\r\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted before the centering of the tab begins. */\r\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted when the tab completes its animation towards the center. */\r\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\r\n\r\n   /** The portal host inside of this container into which the tab body content will be loaded. */\r\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\r\n\r\n  /** The tab body content to display. */\r\n  @Input('content') _content: TemplatePortal;\r\n\r\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\r\n  @Input() origin: number;\r\n\r\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\r\n  @Input()\r\n  set position(position: number) {\r\n    this._positionIndex = position;\r\n    this._computePositionAnimationState();\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              @Optional() private _dir: Directionality,\r\n              /**\r\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\r\n               */\r\n              changeDetectorRef?: ChangeDetectorRef) {\r\n\r\n    if (this._dir && changeDetectorRef) {\r\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\r\n        this._computePositionAnimationState(dir);\r\n        changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * After initialized, check if the content is centered and has an origin. If so, set the\r\n   * special position states that transition the tab from the left or right before centering.\r\n   */\r\n  ngOnInit() {\r\n    if (this._position == 'center' && this.origin != null) {\r\n      this._position = this._computePositionFromOrigin();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dirChangeSubscription.unsubscribe();\r\n  }\r\n\r\n  _onTranslateTabStarted(e: AnimationEvent): void {\r\n    const isCentering = this._isCenterPosition(e.toState);\r\n    this._beforeCentering.emit(isCentering);\r\n    if (isCentering) {\r\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\r\n    }\r\n  }\r\n\r\n  _onTranslateTabComplete(e: AnimationEvent): void {\r\n    // If the transition to the center is complete, emit an event.\r\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\r\n      this._onCentered.emit();\r\n    }\r\n\r\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\r\n      this._afterLeavingCenter.emit();\r\n    }\r\n  }\r\n\r\n  /** The text direction of the containing app. */\r\n  _getLayoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Whether the provided position state is considered center, regardless of origin. */\r\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\r\n    return position == 'center' ||\r\n        position == 'left-origin-center' ||\r\n        position == 'right-origin-center';\r\n  }\r\n\r\n  /** Computes the position state that will be used for the tab-body animation trigger. */\r\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\r\n    if (this._positionIndex < 0) {\r\n      this._position = dir == 'ltr' ? 'left' : 'right';\r\n    } else if (this._positionIndex > 0) {\r\n      this._position = dir == 'ltr' ? 'right' : 'left';\r\n    } else {\r\n      this._position = 'center';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Computes the position state based on the specified origin position. This is used if the\r\n   * tab is becoming visible immediately after creation.\r\n   */\r\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\r\n    const dir = this._getLayoutDirection();\r\n\r\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\r\n      return 'left-origin-center';\r\n    }\r\n\r\n    return 'right-origin-center';\r\n  }\r\n}\r\n"]}