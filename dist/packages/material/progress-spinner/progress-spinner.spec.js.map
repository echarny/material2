{"version":3,"file":"progress-spinner.spec.js","sourceRoot":"","sources":["../../../../src/lib/progress-spinner/progress-spinner.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {TestBed, async} from '@angular/core/testing';\r\nimport {Component} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {\r\n  MatProgressSpinnerModule,\r\n  MatProgressSpinner,\r\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\r\n} from './index';\r\n\r\n\r\ndescribe('MatProgressSpinner', () => {\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatProgressSpinnerModule],\r\n      declarations: [\r\n        BasicProgressSpinner,\r\n        IndeterminateProgressSpinner,\r\n        ProgressSpinnerWithValueAndBoundMode,\r\n        ProgressSpinnerWithColor,\r\n        ProgressSpinnerCustomStrokeWidth,\r\n        ProgressSpinnerCustomDiameter,\r\n        SpinnerWithColor,\r\n        ProgressSpinnerWithStringValues,\r\n      ],\r\n    }).compileComponents();\r\n  }));\r\n\r\n  it('should apply a mode of \"determinate\" if no mode is provided.', () => {\r\n    let fixture = TestBed.createComponent(BasicProgressSpinner);\r\n    fixture.detectChanges();\r\n\r\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\r\n    expect(progressElement.componentInstance.mode).toBe('determinate');\r\n  });\r\n\r\n  it('should not modify the mode if a valid mode is provided.', () => {\r\n    let fixture = TestBed.createComponent(IndeterminateProgressSpinner);\r\n    fixture.detectChanges();\r\n\r\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\r\n    expect(progressElement.componentInstance.mode).toBe('indeterminate');\r\n  });\r\n\r\n  it('should define a default value of zero for the value attribute', () => {\r\n    let fixture = TestBed.createComponent(BasicProgressSpinner);\r\n    fixture.detectChanges();\r\n\r\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\r\n    expect(progressElement.componentInstance.value).toBe(0);\r\n  });\r\n\r\n  it('should set the value to 0 when the mode is set to indeterminate', () => {\r\n    let fixture = TestBed.createComponent(ProgressSpinnerWithValueAndBoundMode);\r\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\r\n    fixture.componentInstance.mode = 'determinate';\r\n    fixture.detectChanges();\r\n\r\n    expect(progressElement.componentInstance.value).toBe(50);\r\n    fixture.componentInstance.mode = 'indeterminate';\r\n    fixture.detectChanges();\r\n    expect(progressElement.componentInstance.value).toBe(0);\r\n  });\r\n\r\n  it('should retain the value if it updates while indeterminate', () => {\r\n    let fixture = TestBed.createComponent(ProgressSpinnerWithValueAndBoundMode);\r\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\r\n\r\n    fixture.componentInstance.mode = 'determinate';\r\n    fixture.detectChanges();\r\n    expect(progressElement.componentInstance.value).toBe(50);\r\n\r\n    fixture.componentInstance.mode = 'indeterminate';\r\n    fixture.detectChanges();\r\n    expect(progressElement.componentInstance.value).toBe(0);\r\n\r\n    fixture.componentInstance.value = 75;\r\n    fixture.detectChanges();\r\n    expect(progressElement.componentInstance.value).toBe(0);\r\n\r\n    fixture.componentInstance.mode = 'determinate';\r\n    fixture.detectChanges();\r\n    expect(progressElement.componentInstance.value).toBe(75);\r\n  });\r\n\r\n  it('should use different `circle` elements depending on the mode', () => {\r\n    const fixture = TestBed.createComponent(ProgressSpinnerWithValueAndBoundMode);\r\n\r\n    fixture.componentInstance.mode = 'determinate';\r\n    fixture.detectChanges();\r\n\r\n    const determinateCircle = fixture.nativeElement.querySelector('circle');\r\n\r\n    fixture.componentInstance.mode = 'indeterminate';\r\n    fixture.detectChanges();\r\n\r\n    const indeterminateCircle = fixture.nativeElement.querySelector('circle');\r\n\r\n    expect(determinateCircle).toBeTruthy();\r\n    expect(indeterminateCircle).toBeTruthy();\r\n    expect(determinateCircle).not.toBe(indeterminateCircle);\r\n  });\r\n\r\n  it('should clamp the value of the progress between 0 and 100', () => {\r\n    let fixture = TestBed.createComponent(BasicProgressSpinner);\r\n    fixture.detectChanges();\r\n\r\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\r\n    let progressComponent = progressElement.componentInstance;\r\n\r\n    progressComponent.value = 50;\r\n    expect(progressComponent.value).toBe(50);\r\n\r\n    progressComponent.value = 0;\r\n    expect(progressComponent.value).toBe(0);\r\n\r\n    progressComponent.value = 100;\r\n    expect(progressComponent.value).toBe(100);\r\n\r\n    progressComponent.value = 999;\r\n    expect(progressComponent.value).toBe(100);\r\n\r\n    progressComponent.value = -10;\r\n    expect(progressComponent.value).toBe(0);\r\n  });\r\n\r\n  it('should default to a stroke width that is 10% of the diameter', () => {\r\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomDiameter);\r\n    const spinner = fixture.debugElement.query(By.directive(MatProgressSpinner));\r\n\r\n    fixture.componentInstance.diameter = 67;\r\n    fixture.detectChanges();\r\n\r\n    expect(spinner.componentInstance.strokeWidth).toBe(6.7);\r\n  });\r\n\r\n  it('should allow a custom diameter', () => {\r\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomDiameter);\r\n    const spinner = fixture.debugElement.query(By.css('mat-progress-spinner')).nativeElement;\r\n    const svgElement = fixture.nativeElement.querySelector('svg');\r\n\r\n    fixture.componentInstance.diameter = 32;\r\n    fixture.detectChanges();\r\n\r\n    expect(parseInt(spinner.style.width))\r\n        .toBe(32, 'Expected the custom diameter to be applied to the host element width.');\r\n    expect(parseInt(spinner.style.height))\r\n        .toBe(32, 'Expected the custom diameter to be applied to the host element height.');\r\n    expect(parseInt(svgElement.style.width))\r\n        .toBe(32, 'Expected the custom diameter to be applied to the svg element width.');\r\n    expect(parseInt(svgElement.style.height))\r\n        .toBe(32, 'Expected the custom diameter to be applied to the svg element height.');\r\n    expect(svgElement.getAttribute('viewBox'))\r\n        .toBe('0 0 25.2 25.2', 'Expected the custom diameter to be applied to the svg viewBox.');\r\n  });\r\n\r\n  it('should allow a custom stroke width', () => {\r\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomStrokeWidth);\r\n\r\n    fixture.componentInstance.strokeWidth = 40;\r\n    fixture.detectChanges();\r\n\r\n    const circleElement = fixture.nativeElement.querySelector('circle');\r\n    const svgElement = fixture.nativeElement.querySelector('svg');\r\n\r\n    expect(parseInt(circleElement.style.strokeWidth)).toBe(40, 'Expected the custom stroke ' +\r\n      'width to be applied to the circle element as a percentage of the element size.');\r\n    expect(svgElement.getAttribute('viewBox'))\r\n      .toBe('0 0 130 130', 'Expected the viewBox to be adjusted based on the stroke width.');\r\n  });\r\n\r\n  it('should expand the host element if the stroke width is greater than the default', () => {\r\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomStrokeWidth);\r\n    const element = fixture.debugElement.nativeElement.querySelector('.mat-progress-spinner');\r\n\r\n    fixture.componentInstance.strokeWidth = 40;\r\n    fixture.detectChanges();\r\n\r\n    expect(element.style.width).toBe('100px');\r\n    expect(element.style.height).toBe('100px');\r\n  });\r\n\r\n  it('should not collapse the host element if the stroke width is less than the default', () => {\r\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomStrokeWidth);\r\n    const element = fixture.debugElement.nativeElement.querySelector('.mat-progress-spinner');\r\n\r\n    fixture.componentInstance.strokeWidth = 5;\r\n    fixture.detectChanges();\r\n\r\n    expect(element.style.width).toBe('100px');\r\n    expect(element.style.height).toBe('100px');\r\n  });\r\n\r\n  it('should set the color class on the mat-spinner', () => {\r\n    let fixture = TestBed.createComponent(SpinnerWithColor);\r\n    fixture.detectChanges();\r\n\r\n    let progressElement = fixture.debugElement.query(By.css('mat-spinner'));\r\n\r\n    expect(progressElement.nativeElement.classList).toContain('mat-primary');\r\n\r\n    fixture.componentInstance.color = 'accent';\r\n    fixture.detectChanges();\r\n\r\n    expect(progressElement.nativeElement.classList).toContain('mat-accent');\r\n    expect(progressElement.nativeElement.classList).not.toContain('mat-primary');\r\n  });\r\n\r\n  it('should set the color class on the mat-progress-spinner', () => {\r\n    let fixture = TestBed.createComponent(ProgressSpinnerWithColor);\r\n    fixture.detectChanges();\r\n\r\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\r\n\r\n    expect(progressElement.nativeElement.classList).toContain('mat-primary');\r\n\r\n    fixture.componentInstance.color = 'accent';\r\n    fixture.detectChanges();\r\n\r\n    expect(progressElement.nativeElement.classList).toContain('mat-accent');\r\n    expect(progressElement.nativeElement.classList).not.toContain('mat-primary');\r\n  });\r\n\r\n  it('should remove the underlying SVG element from the tab order explicitly', () => {\r\n    const fixture = TestBed.createComponent(BasicProgressSpinner);\r\n\r\n    fixture.detectChanges();\r\n\r\n    expect(fixture.nativeElement.querySelector('svg').getAttribute('focusable')).toBe('false');\r\n  });\r\n\r\n  it('should handle the number inputs being passed in as strings', () => {\r\n    const fixture = TestBed.createComponent(ProgressSpinnerWithStringValues);\r\n    const spinner = fixture.debugElement.query(By.directive(MatProgressSpinner));\r\n    const svgElement = spinner.nativeElement.querySelector('svg');\r\n\r\n    fixture.detectChanges();\r\n\r\n    expect(spinner.componentInstance.diameter).toBe(37);\r\n    expect(spinner.componentInstance.strokeWidth).toBe(11);\r\n    expect(spinner.componentInstance.value).toBe(25);\r\n\r\n    expect(spinner.nativeElement.style.width).toBe('37px');\r\n    expect(spinner.nativeElement.style.height).toBe('37px');\r\n    expect(svgElement.style.width).toBe('37px');\r\n    expect(svgElement.style.height).toBe('37px');\r\n    expect(svgElement.getAttribute('viewBox')).toBe('0 0 38 38');\r\n  });\r\n\r\n  it('should update the element size when changed dynamically', () => {\r\n    let fixture = TestBed.createComponent(BasicProgressSpinner);\r\n    let spinner = fixture.debugElement.query(By.directive(MatProgressSpinner));\r\n    spinner.componentInstance.diameter = 32;\r\n    fixture.detectChanges();\r\n    expect(spinner.nativeElement.style.width).toBe('32px');\r\n    expect(spinner.nativeElement.style.height).toBe('32px');\r\n  });\r\n\r\n  it('should be able to set a default diameter', () => {\r\n    TestBed\r\n      .resetTestingModule()\r\n      .configureTestingModule({\r\n        imports: [MatProgressSpinnerModule],\r\n        declarations: [BasicProgressSpinner],\r\n        providers: [{\r\n          provide: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\r\n          useValue: {diameter: 23}\r\n        }]\r\n      })\r\n      .compileComponents();\r\n\r\n    const fixture = TestBed.createComponent(BasicProgressSpinner);\r\n    fixture.detectChanges();\r\n\r\n    const progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\r\n    expect(progressElement.componentInstance.diameter).toBe(23);\r\n  });\r\n\r\n  it('should be able to set a default stroke width', () => {\r\n    TestBed\r\n      .resetTestingModule()\r\n      .configureTestingModule({\r\n        imports: [MatProgressSpinnerModule],\r\n        declarations: [BasicProgressSpinner],\r\n        providers: [{\r\n          provide: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\r\n          useValue: {strokeWidth: 7}\r\n        }]\r\n      })\r\n      .compileComponents();\r\n\r\n    const fixture = TestBed.createComponent(BasicProgressSpinner);\r\n    fixture.detectChanges();\r\n\r\n    const progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\r\n    expect(progressElement.componentInstance.strokeWidth).toBe(7);\r\n  });\r\n\r\n});\r\n\r\n\r\n@Component({template: '<mat-progress-spinner></mat-progress-spinner>'})\r\nclass BasicProgressSpinner {}\r\n\r\n@Component({template: '<mat-progress-spinner [strokeWidth]=\"strokeWidth\"></mat-progress-spinner>'})\r\nclass ProgressSpinnerCustomStrokeWidth {\r\n  strokeWidth: number;\r\n}\r\n\r\n@Component({template: '<mat-progress-spinner [diameter]=\"diameter\"></mat-progress-spinner>'})\r\nclass ProgressSpinnerCustomDiameter {\r\n  diameter: number;\r\n}\r\n\r\n@Component({template: '<mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>'})\r\nclass IndeterminateProgressSpinner { }\r\n\r\n@Component({\r\n  template: '<mat-progress-spinner [value]=\"value\" [mode]=\"mode\"></mat-progress-spinner>'\r\n})\r\nclass ProgressSpinnerWithValueAndBoundMode {\r\n  mode = 'indeterminate';\r\n  value = 50;\r\n}\r\n\r\n@Component({template: `<mat-spinner [color]=\"color\"></mat-spinner>`})\r\nclass SpinnerWithColor { color: string = 'primary'; }\r\n\r\n@Component({template: `<mat-progress-spinner value=\"50\" [color]=\"color\"></mat-progress-spinner>`})\r\nclass ProgressSpinnerWithColor { color: string = 'primary'; }\r\n\r\n@Component({\r\n  template: `\r\n    <mat-progress-spinner value=\"25\" diameter=\"37\" strokeWidth=\"11\"></mat-progress-spinner>\r\n  `\r\n})\r\nclass ProgressSpinnerWithStringValues { }\r\n"]}