{"version":3,"file":"progress-spinner.js","sourceRoot":"","sources":["../../../../src/lib/progress-spinner/progress-spinner.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  Inject,\r\n  Input,\r\n  ElementRef,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  InjectionToken,\r\n} from '@angular/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\n\r\n/** Possible mode for a progress spinner. */\r\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n\r\n/**\r\n * Base reference size of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_SIZE = 100;\r\n\r\n/**\r\n * Base reference stroke width of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_STROKE_WIDTH = 10;\r\n\r\n// Boilerplate for applying mixins to MatProgressSpinner.\r\n/** @docs-private */\r\nexport class MatProgressSpinnerBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\r\n\r\n/** Default `mat-progress-spinner` options that can be overridden. */\r\nexport interface MatProgressSpinnerDefaultOptions {\r\n  /** Diameter of the spinner. */\r\n  diameter?: number;\r\n  /** Width of the spinner's stroke. */\r\n  strokeWidth?: number;\r\n  /**\r\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\r\n   * using NoopAnimationsModule.\r\n   */\r\n  _forceAnimations?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\r\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\r\n  return {diameter: BASE_SIZE};\r\n}\r\n\r\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\r\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\r\n// which are enough to see the flicker described in\r\n// https://github.com/angular/material2/issues/8984\r\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\r\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\r\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\r\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\r\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\r\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\r\n\r\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\r\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\r\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\r\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\r\n\r\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\r\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\r\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\r\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\r\n\r\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\r\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\r\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\r\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\r\n  }\r\n`;\r\n\r\n/**\r\n * `<mat-progress-spinner>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-spinner',\r\n  exportAs: 'matProgressSpinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'class': 'mat-progress-spinner',\r\n    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n    '[style.width.px]': 'diameter',\r\n    '[style.height.px]': 'diameter',\r\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\r\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\r\n\r\n  private _value = 0;\r\n  private _strokeWidth: number;\r\n  private _fallbackAnimation = false;\r\n\r\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\r\n  private static diameters = new Set<number>([BASE_SIZE]);\r\n\r\n  /**\r\n   * Used for storing all of the generated keyframe animations.\r\n   * @dynamic\r\n   */\r\n  private static styleTag: HTMLStyleElement|null = null;\r\n\r\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\r\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\r\n      !!this.defaults && !this.defaults._forceAnimations);\r\n\r\n  /** The diameter of the progress spinner (will set width and height of svg). */\r\n  @Input()\r\n  get diameter(): number { return this._diameter; }\r\n  set diameter(size: number) {\r\n    this._diameter = coerceNumberProperty(size);\r\n\r\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\r\n      this._attachStyleNode();\r\n    }\r\n  }\r\n  private _diameter = BASE_SIZE;\r\n\r\n  /** Stroke width of the progress spinner. */\r\n  @Input()\r\n  get strokeWidth(): number {\r\n    return this._strokeWidth || this.diameter / 10;\r\n  }\r\n  set strokeWidth(value: number) {\r\n    this._strokeWidth = coerceNumberProperty(value);\r\n  }\r\n\r\n  /** Mode of the progress circle */\r\n  @Input() mode: ProgressSpinnerMode = 'determinate';\r\n\r\n  /** Value of the progress circle. */\r\n  @Input()\r\n  get value(): number {\r\n    return this.mode === 'determinate' ? this._value : 0;\r\n  }\r\n  set value(newValue: number) {\r\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef,\r\n              platform: Platform,\r\n              @Optional() @Inject(DOCUMENT) private _document: any,\r\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\r\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\r\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\r\n\r\n    super(_elementRef);\r\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\r\n\r\n    if (defaults) {\r\n      if (defaults.diameter) {\r\n        this.diameter = defaults.diameter;\r\n      }\r\n\r\n      if (defaults.strokeWidth) {\r\n        this.strokeWidth = defaults.strokeWidth;\r\n      }\r\n    }\r\n\r\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\r\n    // reliably so we fall back to a non-spec animation.\r\n    const animationClass =\r\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\r\n\r\n    _elementRef.nativeElement.classList.add(animationClass);\r\n  }\r\n\r\n  /** The radius of the spinner, adjusted for stroke width. */\r\n  get _circleRadius() {\r\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\r\n  }\r\n\r\n  /** The view box of the spinner's svg element. */\r\n  get _viewBox() {\r\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\r\n    return `0 0 ${viewBox} ${viewBox}`;\r\n  }\r\n\r\n  /** The stroke circumference of the svg circle. */\r\n  get _strokeCircumference(): number {\r\n    return 2 * Math.PI * this._circleRadius;\r\n  }\r\n\r\n  /** The dash offset of the svg circle. */\r\n  get _strokeDashOffset() {\r\n    if (this.mode === 'determinate') {\r\n      return this._strokeCircumference * (100 - this._value) / 100;\r\n    }\r\n\r\n    // In fallback mode set the circle to 80% and rotate it with CSS.\r\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\r\n      return this._strokeCircumference * 0.2;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stroke width of the circle in percent. */\r\n  get _circleStrokeWidth() {\r\n    return this.strokeWidth / this.diameter * 100;\r\n  }\r\n\r\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\r\n  private _attachStyleNode(): void {\r\n    let styleTag = MatProgressSpinner.styleTag;\r\n\r\n    if (!styleTag) {\r\n      styleTag = this._document.createElement('style');\r\n      this._document.head.appendChild(styleTag);\r\n      MatProgressSpinner.styleTag = styleTag;\r\n    }\r\n\r\n    if (styleTag && styleTag.sheet) {\r\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\r\n    }\r\n\r\n    MatProgressSpinner.diameters.add(this.diameter);\r\n  }\r\n\r\n  /** Generates animation styles adjusted for the spinner's diameter. */\r\n  private _getAnimationText(): string {\r\n    return INDETERMINATE_ANIMATION_TEMPLATE\r\n        // Animation should begin at 5% and end at 80%\r\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\r\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\r\n        .replace(/DIAMETER/g, `${this.diameter}`);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * `<mat-spinner>` component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate `<mat-progress-spinner>` instance.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'mode': 'indeterminate',\r\n    'class': 'mat-spinner mat-progress-spinner',\r\n    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n    '[style.width.px]': 'diameter',\r\n    '[style.height.px]': 'diameter',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatSpinner extends MatProgressSpinner {\r\n  constructor(elementRef: ElementRef, platform: Platform,\r\n              @Optional() @Inject(DOCUMENT) document: any,\r\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\r\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\r\n                  defaults?: MatProgressSpinnerDefaultOptions) {\r\n    super(elementRef, platform, document, animationMode, defaults);\r\n    this.mode = 'indeterminate';\r\n  }\r\n}\r\n"]}