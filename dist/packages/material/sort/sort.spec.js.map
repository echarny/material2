{"version":3,"file":"sort.spec.js","sourceRoot":"","sources":["../../../../src/lib/sort/sort.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {\r\n  createFakeEvent,\r\n  createMouseEvent,\r\n  dispatchMouseEvent,\r\n  wrappedErrorMessage\r\n} from '@angular/cdk/testing';\r\nimport {Component, ElementRef, ViewChild} from '@angular/core';\r\nimport {async, ComponentFixture, fakeAsync, inject, TestBed, tick} from '@angular/core/testing';\r\nimport {By} from '@angular/platform-browser';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\nimport {MatTableModule} from '../table/index';\r\nimport {\r\n  MatSort,\r\n  MatSortHeader,\r\n  MatSortHeaderIntl,\r\n  MatSortModule,\r\n  Sort,\r\n  SortDirection\r\n} from './index';\r\nimport {\r\n  getSortDuplicateSortableIdError,\r\n  getSortHeaderMissingIdError,\r\n  getSortHeaderNotContainedWithinSortError,\r\n  getSortInvalidDirectionError,\r\n} from './sort-errors';\r\n\r\n\r\ndescribe('MatSort', () => {\r\n  let fixture: ComponentFixture<SimpleMatSortApp>;\r\n\r\n  let component: SimpleMatSortApp;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatSortModule, MatTableModule, CdkTableModule, NoopAnimationsModule],\r\n      declarations: [\r\n        SimpleMatSortApp,\r\n        CdkTableMatSortApp,\r\n        MatTableMatSortApp,\r\n        MatSortHeaderMissingMatSortApp,\r\n        MatSortDuplicateMatSortableIdsApp,\r\n        MatSortableMissingIdApp,\r\n        MatSortableInvalidDirection\r\n      ],\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(SimpleMatSortApp);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should have the sort headers register and deregister themselves', () => {\r\n    const sortables = component.matSort.sortables;\r\n    expect(sortables.size).toBe(4);\r\n    expect(sortables.get('defaultA')).toBe(component.defaultA);\r\n    expect(sortables.get('defaultB')).toBe(component.defaultB);\r\n\r\n    fixture.destroy();\r\n    expect(sortables.size).toBe(0);\r\n  });\r\n\r\n  it('should mark itself as initialized', fakeAsync(() => {\r\n    let isMarkedInitialized = false;\r\n    component.matSort.initialized.subscribe(() => isMarkedInitialized = true);\r\n\r\n    tick();\r\n    expect(isMarkedInitialized).toBeTruthy();\r\n  }));\r\n\r\n  it('should use the column definition if used within a cdk table', () => {\r\n    let cdkTableMatSortAppFixture = TestBed.createComponent(CdkTableMatSortApp);\r\n    let cdkTableMatSortAppComponent = cdkTableMatSortAppFixture.componentInstance;\r\n\r\n    cdkTableMatSortAppFixture.detectChanges();\r\n    cdkTableMatSortAppFixture.detectChanges();\r\n\r\n    const sortables = cdkTableMatSortAppComponent.matSort.sortables;\r\n    expect(sortables.size).toBe(3);\r\n    expect(sortables.has('column_a')).toBe(true);\r\n    expect(sortables.has('column_b')).toBe(true);\r\n    expect(sortables.has('column_c')).toBe(true);\r\n  });\r\n\r\n  it('should use the column definition if used within an mat table', () => {\r\n    let matTableMatSortAppFixture = TestBed.createComponent(MatTableMatSortApp);\r\n    let matTableMatSortAppComponent = matTableMatSortAppFixture.componentInstance;\r\n\r\n    matTableMatSortAppFixture.detectChanges();\r\n    matTableMatSortAppFixture.detectChanges();\r\n\r\n    const sortables = matTableMatSortAppComponent.matSort.sortables;\r\n    expect(sortables.size).toBe(3);\r\n    expect(sortables.has('column_a')).toBe(true);\r\n    expect(sortables.has('column_b')).toBe(true);\r\n    expect(sortables.has('column_c')).toBe(true);\r\n  });\r\n\r\n  describe('checking correct arrow direction and view state for its various states', () => {\r\n    let expectedStates: Map<string, {viewState: string, arrowDirection: string}>;\r\n\r\n    beforeEach(() => {\r\n      // Starting state for the view and directions - note that overrideStart is reversed to be desc\r\n      expectedStates = new Map<string, {viewState: string, arrowDirection: string}>([\r\n        ['defaultA', {viewState: 'asc', arrowDirection: 'asc'}],\r\n        ['defaultB', {viewState: 'asc', arrowDirection: 'asc'}],\r\n        ['overrideStart', {viewState: 'desc', arrowDirection: 'desc'}],\r\n        ['overrideDisableClear', {viewState: 'asc', arrowDirection: 'asc'}],\r\n      ]);\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n    });\r\n\r\n    it('should be correct when mousing over headers and leaving on mouseleave', () => {\r\n      // Mousing over the first sort should set the view state to hint (asc)\r\n      component.dispatchMouseEvent('defaultA', 'mouseenter');\r\n      expectedStates.set('defaultA', {viewState: 'asc-to-hint', arrowDirection: 'asc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n\r\n      // Mousing away from the first sort should hide the arrow\r\n      component.dispatchMouseEvent('defaultA', 'mouseleave');\r\n      expectedStates.set('defaultA', {viewState: 'hint-to-asc', arrowDirection: 'asc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n\r\n      // Mousing over another sort should set the view state to hint (desc)\r\n      component.dispatchMouseEvent('overrideStart', 'mouseenter');\r\n      expectedStates.set('overrideStart', {viewState: 'desc-to-hint', arrowDirection: 'desc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n    });\r\n\r\n    it('should be correct when mousing over header and then sorting', () => {\r\n      // Mousing over the first sort should set the view state to hint\r\n      component.dispatchMouseEvent('defaultA', 'mouseenter');\r\n      expectedStates.set('defaultA', {viewState: 'asc-to-hint', arrowDirection: 'asc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n\r\n      // Clicking sort on the header should set it to be active immediately\r\n      // (since it was already hinted)\r\n      component.dispatchMouseEvent('defaultA', 'click');\r\n      expectedStates.set('defaultA', {viewState: 'active', arrowDirection: 'active-asc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n    });\r\n\r\n    it('should be correct when cycling through a default sort header', () => {\r\n      // Sort the header to set it to the active start state\r\n      component.sort('defaultA');\r\n      expectedStates.set('defaultA', {viewState: 'asc-to-active', arrowDirection: 'active-asc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n\r\n      // Sorting again will reverse its direction\r\n      component.dispatchMouseEvent('defaultA', 'click');\r\n      expectedStates.set('defaultA', {viewState: 'active', arrowDirection: 'active-desc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n\r\n      // Sorting again will remove the sort and animate away the view\r\n      component.dispatchMouseEvent('defaultA', 'click');\r\n      expectedStates.set('defaultA', {viewState: 'active-to-desc', arrowDirection: 'desc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n    });\r\n\r\n    it('should not enter sort with animations if an animations is disabled', () => {\r\n      // Sort the header to set it to the active start state\r\n      component.defaultA._disableViewStateAnimation = true;\r\n      component.sort('defaultA');\r\n      expectedStates.set('defaultA', {viewState: 'active', arrowDirection: 'active-asc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n\r\n      // Sorting again will reverse its direction\r\n      component.defaultA._disableViewStateAnimation = true;\r\n      component.dispatchMouseEvent('defaultA', 'click');\r\n      expectedStates.set('defaultA', {viewState: 'active', arrowDirection: 'active-desc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n    });\r\n\r\n    it('should be correct when sort has changed while a header is active', () => {\r\n      // Sort the first header to set up\r\n      component.sort('defaultA');\r\n      expectedStates.set('defaultA', {viewState: 'asc-to-active', arrowDirection: 'active-asc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n\r\n      // Sort the second header and verify that the first header animated away\r\n      component.dispatchMouseEvent('defaultB', 'click');\r\n      expectedStates.set('defaultA', {viewState: 'active-to-asc', arrowDirection: 'asc'});\r\n      expectedStates.set('defaultB', {viewState: 'asc-to-active', arrowDirection: 'active-asc'});\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n    });\r\n\r\n    it('should be correct when sort has been disabled', () => {\r\n      // Mousing over the first sort should set the view state to hint\r\n      component.disabledColumnSort = true;\r\n      fixture.detectChanges();\r\n\r\n      component.dispatchMouseEvent('defaultA', 'mouseenter');\r\n      component.expectViewAndDirectionStates(expectedStates);\r\n    });\r\n  });\r\n\r\n  it('should be able to cycle from asc -> desc from either start point', () => {\r\n    component.disableClear = true;\r\n\r\n    component.start = 'asc';\r\n    testSingleColumnSortDirectionSequence(fixture, ['asc', 'desc']);\r\n\r\n    // Reverse directions\r\n    component.start = 'desc';\r\n    testSingleColumnSortDirectionSequence(fixture, ['desc', 'asc']);\r\n  });\r\n\r\n  it('should be able to cycle asc -> desc -> [none]', () => {\r\n    component.start = 'asc';\r\n    testSingleColumnSortDirectionSequence(fixture, ['asc', 'desc', '']);\r\n  });\r\n\r\n  it('should be able to cycle desc -> asc -> [none]', () => {\r\n    component.start = 'desc';\r\n    testSingleColumnSortDirectionSequence(fixture, ['desc', 'asc', '']);\r\n  });\r\n\r\n  it('should allow for the cycling the sort direction to be disabled per column', () => {\r\n    const button = fixture.nativeElement.querySelector('#defaultA button');\r\n\r\n    component.sort('defaultA');\r\n    expect(component.matSort.direction).toBe('asc');\r\n    expect(button.getAttribute('disabled')).toBeFalsy();\r\n\r\n    component.disabledColumnSort = true;\r\n    fixture.detectChanges();\r\n\r\n    component.sort('defaultA');\r\n    expect(component.matSort.direction).toBe('asc');\r\n    expect(button.getAttribute('disabled')).toBe('true');\r\n  });\r\n\r\n  it('should allow for the cycling the sort direction to be disabled for all columns', () => {\r\n    const button = fixture.nativeElement.querySelector('#defaultA button');\r\n\r\n    component.sort('defaultA');\r\n    expect(component.matSort.active).toBe('defaultA');\r\n    expect(component.matSort.direction).toBe('asc');\r\n    expect(button.getAttribute('disabled')).toBeFalsy();\r\n\r\n    component.disableAllSort = true;\r\n    fixture.detectChanges();\r\n\r\n    component.sort('defaultA');\r\n    expect(component.matSort.active).toBe('defaultA');\r\n    expect(component.matSort.direction).toBe('asc');\r\n    expect(button.getAttribute('disabled')).toBe('true');\r\n\r\n    component.sort('defaultB');\r\n    expect(component.matSort.active).toBe('defaultA');\r\n    expect(component.matSort.direction).toBe('asc');\r\n    expect(button.getAttribute('disabled')).toBe('true');\r\n  });\r\n\r\n  it('should reset sort direction when a different column is sorted', () => {\r\n    component.sort('defaultA');\r\n    expect(component.matSort.active).toBe('defaultA');\r\n    expect(component.matSort.direction).toBe('asc');\r\n\r\n    component.sort('defaultA');\r\n    expect(component.matSort.active).toBe('defaultA');\r\n    expect(component.matSort.direction).toBe('desc');\r\n\r\n    component.sort('defaultB');\r\n    expect(component.matSort.active).toBe('defaultB');\r\n    expect(component.matSort.direction).toBe('asc');\r\n  });\r\n\r\n  it('should throw an error if an MatSortable is not contained within an MatSort directive', () => {\r\n    expect(() => TestBed.createComponent(MatSortHeaderMissingMatSortApp).detectChanges())\r\n        .toThrowError(wrappedErrorMessage(getSortHeaderNotContainedWithinSortError()));\r\n  });\r\n\r\n  it('should throw an error if two MatSortables have the same id', () => {\r\n    expect(() => TestBed.createComponent(MatSortDuplicateMatSortableIdsApp).detectChanges())\r\n        .toThrowError(wrappedErrorMessage(getSortDuplicateSortableIdError('duplicateId')));\r\n  });\r\n\r\n  it('should throw an error if an MatSortable is missing an id', () => {\r\n    expect(() => TestBed.createComponent(MatSortableMissingIdApp).detectChanges())\r\n        .toThrowError(wrappedErrorMessage(getSortHeaderMissingIdError()));\r\n  });\r\n\r\n  it('should throw an error if the provided direction is invalid', () => {\r\n    expect(() => TestBed.createComponent(MatSortableInvalidDirection).detectChanges())\r\n        .toThrowError(wrappedErrorMessage(getSortInvalidDirectionError('ascending')));\r\n  });\r\n\r\n  it('should allow let MatSortable override the default sort parameters', () => {\r\n    testSingleColumnSortDirectionSequence(\r\n        fixture, ['asc', 'desc', '']);\r\n\r\n    testSingleColumnSortDirectionSequence(\r\n        fixture, ['desc', 'asc', ''], 'overrideStart');\r\n\r\n    testSingleColumnSortDirectionSequence(\r\n        fixture, ['asc', 'desc'], 'overrideDisableClear');\r\n  });\r\n\r\n  it('should apply the aria-labels to the button', () => {\r\n    const button = fixture.nativeElement.querySelector('#defaultA button');\r\n    expect(button.getAttribute('aria-label')).toBe('Change sorting for defaultA');\r\n  });\r\n\r\n  it('should toggle indicator hint on button focus/blur and hide on click', () => {\r\n    const header = fixture.componentInstance.defaultA;\r\n    const button = fixture.nativeElement.querySelector('#defaultA button');\r\n    const focusEvent = createFakeEvent('focus');\r\n    const blurEvent = createFakeEvent('blur');\r\n\r\n    // Should start without a displayed hint\r\n    expect(header._showIndicatorHint).toBeFalsy();\r\n\r\n    // Focusing the button should show the hint, blurring should hide it\r\n    button.dispatchEvent(focusEvent);\r\n    expect(header._showIndicatorHint).toBeTruthy();\r\n\r\n    button.dispatchEvent(blurEvent);\r\n    expect(header._showIndicatorHint).toBeFalsy();\r\n\r\n    // Show the indicator hint. On click the hint should be hidden\r\n    button.dispatchEvent(focusEvent);\r\n    expect(header._showIndicatorHint).toBeTruthy();\r\n\r\n    header._handleClick();\r\n    expect(header._showIndicatorHint).toBeFalsy();\r\n  });\r\n\r\n  it('should toggle indicator hint on mouseenter/mouseleave and hide on click', () => {\r\n    const header = fixture.componentInstance.defaultA;\r\n    const headerElement = fixture.nativeElement.querySelector('#defaultA');\r\n    const mouseenterEvent = createMouseEvent('mouseenter');\r\n    const mouseleaveEvent = createMouseEvent('mouseleave');\r\n\r\n    // Should start without a displayed hint\r\n    expect(header._showIndicatorHint).toBeFalsy();\r\n\r\n    // Mouse enter should show the hint, blurring should hide it\r\n    headerElement.dispatchEvent(mouseenterEvent);\r\n    expect(header._showIndicatorHint).toBeTruthy();\r\n\r\n    headerElement.dispatchEvent(mouseleaveEvent);\r\n    expect(header._showIndicatorHint).toBeFalsy();\r\n\r\n    // Show the indicator hint. On click the hint should be hidden\r\n    headerElement.dispatchEvent(mouseenterEvent);\r\n    expect(header._showIndicatorHint).toBeTruthy();\r\n\r\n    header._handleClick();\r\n    expect(header._showIndicatorHint).toBeFalsy();\r\n  });\r\n\r\n  it('should apply the aria-sort label to the header when sorted', () => {\r\n    const sortHeaderElement = fixture.nativeElement.querySelector('#defaultA');\r\n    expect(sortHeaderElement.getAttribute('aria-sort')).toBe(null);\r\n\r\n    component.sort('defaultA');\r\n    fixture.detectChanges();\r\n    expect(sortHeaderElement.getAttribute('aria-sort')).toBe('ascending');\r\n\r\n    component.sort('defaultA');\r\n    fixture.detectChanges();\r\n    expect(sortHeaderElement.getAttribute('aria-sort')).toBe('descending');\r\n\r\n    component.sort('defaultA');\r\n    fixture.detectChanges();\r\n    expect(sortHeaderElement.getAttribute('aria-sort')).toBe(null);\r\n  });\r\n\r\n  it('should re-render when the i18n labels have changed',\r\n    inject([MatSortHeaderIntl], (intl: MatSortHeaderIntl) => {\r\n      const header = fixture.debugElement.query(By.directive(MatSortHeader)).nativeElement;\r\n      const button = header.querySelector('.mat-sort-header-button');\r\n\r\n      intl.sortButtonLabel = () => 'Sort all of the things';\r\n      intl.changes.next();\r\n      fixture.detectChanges();\r\n\r\n      expect(button.getAttribute('aria-label')).toBe('Sort all of the things');\r\n    })\r\n  );\r\n});\r\n\r\n/**\r\n * Performs a sequence of sorting on a single column to see if the sort directions are\r\n * consistent with expectations. Detects any changes in the fixture to reflect any changes in\r\n * the inputs and resets the MatSort to remove any side effects from previous tests.\r\n */\r\nfunction testSingleColumnSortDirectionSequence(fixture: ComponentFixture<SimpleMatSortApp>,\r\n                                               expectedSequence: SortDirection[],\r\n                                               id: SimpleMatSortAppColumnIds = 'defaultA') {\r\n  // Detect any changes that were made in preparation for this sort sequence\r\n  fixture.detectChanges();\r\n\r\n  // Reset the sort to make sure there are no side affects from previous tests\r\n  const component = fixture.componentInstance;\r\n  component.matSort.active = '';\r\n  component.matSort.direction = '';\r\n\r\n  // Run through the sequence to confirm the order\r\n  let actualSequence = expectedSequence.map(() => {\r\n    component.sort(id);\r\n\r\n    // Check that the sort event's active sort is consistent with the MatSort\r\n    expect(component.matSort.active).toBe(id);\r\n    expect(component.latestSortEvent.active).toBe(id);\r\n\r\n    // Check that the sort event's direction is consistent with the MatSort\r\n    expect(component.matSort.direction).toBe(component.latestSortEvent.direction);\r\n    return component.matSort.direction;\r\n  });\r\n  expect(actualSequence).toEqual(expectedSequence);\r\n\r\n  // Expect that performing one more sort will loop it back to the beginning.\r\n  component.sort(id);\r\n  expect(component.matSort.direction).toBe(expectedSequence[0]);\r\n}\r\n\r\n/** Column IDs of the SimpleMatSortApp for typing of function params in the component (e.g. sort) */\r\ntype SimpleMatSortAppColumnIds = 'defaultA' | 'defaultB' | 'overrideStart' | 'overrideDisableClear';\r\n\r\n@Component({\r\n  template: `\r\n    <div matSort\r\n         [matSortActive]=\"active\"\r\n         [matSortDisabled]=\"disableAllSort\"\r\n         [matSortStart]=\"start\"\r\n         [matSortDirection]=\"direction\"\r\n         [matSortDisableClear]=\"disableClear\"\r\n         (matSortChange)=\"latestSortEvent = $event\">\r\n      <div id=\"defaultA\"\r\n           #defaultA\r\n           mat-sort-header=\"defaultA\"\r\n           [disabled]=\"disabledColumnSort\">\r\n        A\r\n      </div>\r\n      <div id=\"defaultB\"\r\n           #defaultB\r\n           mat-sort-header=\"defaultB\">\r\n        B\r\n      </div>\r\n      <div id=\"overrideStart\"\r\n           #overrideStart\r\n           mat-sort-header=\"overrideStart\" start=\"desc\">\r\n        D\r\n      </div>\r\n      <div id=\"overrideDisableClear\"\r\n           #overrideDisableClear\r\n           mat-sort-header=\"overrideDisableClear\"\r\n           disableClear>\r\n        E\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nclass SimpleMatSortApp {\r\n  latestSortEvent: Sort;\r\n\r\n  active: string;\r\n  start: SortDirection = 'asc';\r\n  direction: SortDirection = '';\r\n  disableClear: boolean;\r\n  disabledColumnSort = false;\r\n  disableAllSort = false;\r\n\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n  @ViewChild('defaultA') defaultA: MatSortHeader;\r\n  @ViewChild('defaultB') defaultB: MatSortHeader;\r\n  @ViewChild('overrideStart') overrideStart: MatSortHeader;\r\n  @ViewChild('overrideDisableClear') overrideDisableClear: MatSortHeader;\r\n\r\n  constructor (public elementRef: ElementRef) { }\r\n\r\n  sort(id: SimpleMatSortAppColumnIds) {\r\n    this.dispatchMouseEvent(id, 'click');\r\n  }\r\n\r\n  dispatchMouseEvent(id: SimpleMatSortAppColumnIds, event: string) {\r\n    const sortElement = this.elementRef.nativeElement.querySelector(`#${id}`);\r\n    dispatchMouseEvent(sortElement, event);\r\n  }\r\n\r\n  /**\r\n   * Checks expectations for each sort header's view state and arrow direction states. Receives a\r\n   * map that is keyed by each sort header's ID and contains the expectation for that header's\r\n   * states.\r\n   */\r\n  expectViewAndDirectionStates(\r\n      viewStates: Map<string, {viewState: string, arrowDirection: string}>) {\r\n    const sortHeaders = new Map([\r\n      ['defaultA', this.defaultA],\r\n      ['defaultB', this.defaultB],\r\n      ['overrideStart', this.overrideStart],\r\n      ['overrideDisableClear', this.overrideDisableClear]\r\n    ]);\r\n\r\n    viewStates.forEach((viewState, id) => {\r\n      expect(sortHeaders.get(id)!._getArrowViewState()).toEqual(viewState.viewState);\r\n      expect(sortHeaders.get(id)!._getArrowDirectionState()).toEqual(viewState.arrowDirection);\r\n    });\r\n  }\r\n}\r\n\r\n\r\nclass FakeDataSource extends DataSource<any> {\r\n  connect(collectionViewer: CollectionViewer): Observable<any[]> {\r\n    return collectionViewer.viewChange.pipe(map(() => []));\r\n  }\r\n  disconnect() {}\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <cdk-table [dataSource]=\"dataSource\" matSort>\r\n      <ng-container cdkColumnDef=\"column_a\">\r\n        <cdk-header-cell *cdkHeaderCellDef #sortHeaderA mat-sort-header> Column A </cdk-header-cell>\r\n        <cdk-cell *cdkCellDef=\"let row\"> {{row.a}} </cdk-cell>\r\n      </ng-container>\r\n\r\n      <ng-container cdkColumnDef=\"column_b\">\r\n        <cdk-header-cell *cdkHeaderCellDef #sortHeaderB mat-sort-header> Column B </cdk-header-cell>\r\n        <cdk-cell *cdkCellDef=\"let row\"> {{row.b}} </cdk-cell>\r\n      </ng-container>\r\n\r\n      <ng-container cdkColumnDef=\"column_c\">\r\n        <cdk-header-cell *cdkHeaderCellDef #sortHeaderC mat-sort-header> Column C </cdk-header-cell>\r\n        <cdk-cell *cdkCellDef=\"let row\"> {{row.c}} </cdk-cell>\r\n      </ng-container>\r\n\r\n      <cdk-header-row *cdkHeaderRowDef=\"columnsToRender\"></cdk-header-row>\r\n      <cdk-row *cdkRowDef=\"let row; columns: columnsToRender\"></cdk-row>\r\n    </cdk-table>\r\n  `\r\n})\r\nclass CdkTableMatSortApp {\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n\r\n  dataSource = new FakeDataSource();\r\n  columnsToRender = ['column_a', 'column_b', 'column_c'];\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-table [dataSource]=\"dataSource\" matSort>\r\n      <ng-container matColumnDef=\"column_a\">\r\n        <mat-header-cell *matHeaderCellDef #sortHeaderA mat-sort-header> Column A </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\"> {{row.a}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"column_b\">\r\n        <mat-header-cell *matHeaderCellDef #sortHeaderB mat-sort-header> Column B </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\"> {{row.b}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"column_c\">\r\n        <mat-header-cell *matHeaderCellDef #sortHeaderC mat-sort-header> Column C </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\"> {{row.c}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"columnsToRender\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: columnsToRender\"></mat-row>\r\n    </mat-table>\r\n  `\r\n})\r\nclass MatTableMatSortApp {\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n\r\n  dataSource = new FakeDataSource();\r\n  columnsToRender = ['column_a', 'column_b', 'column_c'];\r\n}\r\n\r\n\r\n@Component({\r\n  template: `<div mat-sort-header=\"a\"> A </div>`\r\n})\r\nclass MatSortHeaderMissingMatSortApp { }\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <div matSort>\r\n      <div mat-sort-header=\"duplicateId\"> A </div>\r\n      <div mat-sort-header=\"duplicateId\"> A </div>\r\n    </div>\r\n  `\r\n})\r\nclass MatSortDuplicateMatSortableIdsApp { }\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <div matSort>\r\n      <div mat-sort-header> A </div>\r\n    </div>\r\n  `\r\n})\r\nclass MatSortableMissingIdApp { }\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <div matSort matSortDirection=\"ascending\">\r\n      <div mat-sort-header=\"a\"> A </div>\r\n    </div>\r\n  `\r\n})\r\nclass MatSortableInvalidDirection { }\r\n"]}