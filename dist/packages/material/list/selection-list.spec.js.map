{"version":3,"file":"selection-list.spec.js","sourceRoot":"","sources":["../../../../src/lib/list/selection-list.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {DOWN_ARROW, SPACE, ENTER, UP_ARROW, HOME, END, A} from '@angular/cdk/keycodes';\r\nimport {\r\n  createKeyboardEvent,\r\n  dispatchFakeEvent,\r\n  dispatchEvent,\r\n  dispatchKeyboardEvent,\r\n} from '@angular/cdk/testing';\r\nimport {\r\n  Component,\r\n  DebugElement,\r\n  ChangeDetectionStrategy,\r\n  QueryList,\r\n  ViewChildren,\r\n} from '@angular/core';\r\nimport {async, ComponentFixture, fakeAsync, TestBed, tick, flush} from '@angular/core/testing';\r\nimport {MatRipple} from '@angular/material/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {\r\n  MatListModule,\r\n  MatListOption,\r\n  MatSelectionList,\r\n  MatSelectionListChange\r\n} from './index';\r\nimport {FormControl, FormsModule, NgModel, ReactiveFormsModule} from '@angular/forms';\r\n\r\ndescribe('MatSelectionList without forms', () => {\r\n  describe('with list option', () => {\r\n    let fixture: ComponentFixture<SelectionListWithListOptions>;\r\n    let listOptions: DebugElement[];\r\n    let selectionList: DebugElement;\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [MatListModule],\r\n        declarations: [\r\n          SelectionListWithListOptions,\r\n          SelectionListWithCheckboxPositionAfter,\r\n          SelectionListWithListDisabled,\r\n          SelectionListWithOnlyOneOption\r\n        ],\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n    }));\r\n\r\n\r\n    beforeEach(async(() => {\r\n      fixture = TestBed.createComponent(SelectionListWithListOptions);\r\n      fixture.detectChanges();\r\n\r\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption));\r\n      selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\r\n    }));\r\n\r\n    it('should add and remove focus class on focus/blur', () => {\r\n      // Use the second list item, because the first one is always disabled.\r\n      const listItem = listOptions[1].nativeElement;\r\n\r\n      expect(listItem.classList).not.toContain('mat-list-item-focus');\r\n\r\n      dispatchFakeEvent(listItem, 'focus');\r\n      fixture.detectChanges();\r\n      expect(listItem.className).toContain('mat-list-item-focus');\r\n\r\n      dispatchFakeEvent(listItem, 'blur');\r\n      fixture.detectChanges();\r\n      expect(listItem.className).not.toContain('mat-list-item-focus');\r\n    });\r\n\r\n    it('should be able to set a value on a list option', () => {\r\n      const optionValues = ['inbox', 'starred', 'sent-mail', 'drafts'];\r\n\r\n      optionValues.forEach((optionValue, index) => {\r\n        expect(listOptions[index].componentInstance.value).toBe(optionValue);\r\n      });\r\n    });\r\n\r\n    it('should not emit a selectionChange event if an option changed programmatically', () => {\r\n      spyOn(fixture.componentInstance, 'onValueChange');\r\n\r\n      expect(fixture.componentInstance.onValueChange).toHaveBeenCalledTimes(0);\r\n\r\n      listOptions[2].componentInstance.toggle();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.onValueChange).toHaveBeenCalledTimes(0);\r\n    });\r\n\r\n    it('should emit a selectionChange event if an option got clicked', () => {\r\n      spyOn(fixture.componentInstance, 'onValueChange');\r\n\r\n      expect(fixture.componentInstance.onValueChange).toHaveBeenCalledTimes(0);\r\n\r\n      dispatchFakeEvent(listOptions[2].nativeElement, 'click');\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.onValueChange).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should be able to dispatch one selected item', () => {\r\n      let testListItem = listOptions[2].injector.get<MatListOption>(MatListOption);\r\n      let selectList =\r\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\r\n\r\n      expect(selectList.selected.length).toBe(0);\r\n      expect(listOptions[2].nativeElement.getAttribute('aria-selected')).toBe('false');\r\n\r\n      testListItem.toggle();\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions[2].nativeElement.getAttribute('aria-selected')).toBe('true');\r\n      expect(listOptions[2].nativeElement.getAttribute('aria-disabled')).toBe('false');\r\n      expect(selectList.selected.length).toBe(1);\r\n    });\r\n\r\n    it('should be able to dispatch multiple selected items', () => {\r\n      let testListItem = listOptions[2].injector.get<MatListOption>(MatListOption);\r\n      let testListItem2 = listOptions[1].injector.get<MatListOption>(MatListOption);\r\n      let selectList =\r\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\r\n\r\n      expect(selectList.selected.length).toBe(0);\r\n      expect(listOptions[2].nativeElement.getAttribute('aria-selected')).toBe('false');\r\n      expect(listOptions[1].nativeElement.getAttribute('aria-selected')).toBe('false');\r\n\r\n      testListItem.toggle();\r\n      fixture.detectChanges();\r\n\r\n      testListItem2.toggle();\r\n      fixture.detectChanges();\r\n\r\n      expect(selectList.selected.length).toBe(2);\r\n      expect(listOptions[2].nativeElement.getAttribute('aria-selected')).toBe('true');\r\n      expect(listOptions[1].nativeElement.getAttribute('aria-selected')).toBe('true');\r\n      expect(listOptions[1].nativeElement.getAttribute('aria-disabled')).toBe('false');\r\n      expect(listOptions[2].nativeElement.getAttribute('aria-disabled')).toBe('false');\r\n    });\r\n\r\n    it('should be able to deselect an option', () => {\r\n      let testListItem = listOptions[2].injector.get<MatListOption>(MatListOption);\r\n      let selectList =\r\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\r\n\r\n      expect(selectList.selected.length).toBe(0);\r\n\r\n      testListItem.toggle();\r\n      fixture.detectChanges();\r\n\r\n      expect(selectList.selected.length).toBe(1);\r\n\r\n      testListItem.toggle();\r\n      fixture.detectChanges();\r\n\r\n      expect(selectList.selected.length).toBe(0);\r\n    });\r\n\r\n    it('should not allow selection of disabled items', () => {\r\n      let testListItem = listOptions[0].injector.get<MatListOption>(MatListOption);\r\n      let selectList =\r\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\r\n\r\n      expect(selectList.selected.length).toBe(0);\r\n      expect(listOptions[0].nativeElement.getAttribute('aria-disabled')).toBe('true');\r\n\r\n      testListItem._handleClick();\r\n      fixture.detectChanges();\r\n\r\n      expect(selectList.selected.length).toBe(0);\r\n    });\r\n\r\n    it('should be able to un-disable disabled items', () => {\r\n      let testListItem = listOptions[0].injector.get<MatListOption>(MatListOption);\r\n\r\n      expect(listOptions[0].nativeElement.getAttribute('aria-disabled')).toBe('true');\r\n\r\n      testListItem.disabled = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions[0].nativeElement.getAttribute('aria-disabled')).toBe('false');\r\n    });\r\n\r\n    it('should be able to use keyboard select with SPACE', () => {\r\n      const testListItem = listOptions[1].nativeElement as HTMLElement;\r\n      const SPACE_EVENT: KeyboardEvent = createKeyboardEvent('keydown', SPACE, testListItem);\r\n      const selectList =\r\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\r\n      expect(selectList.selected.length).toBe(0);\r\n\r\n      dispatchFakeEvent(testListItem, 'focus');\r\n      selectionList.componentInstance._keydown(SPACE_EVENT);\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(selectList.selected.length).toBe(1);\r\n      expect(SPACE_EVENT.defaultPrevented).toBe(true);\r\n    });\r\n\r\n    it('should be able to select an item using ENTER', () => {\r\n      const testListItem = listOptions[1].nativeElement as HTMLElement;\r\n      const ENTER_EVENT: KeyboardEvent = createKeyboardEvent('keydown', ENTER, testListItem);\r\n      const selectList =\r\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\r\n      expect(selectList.selected.length).toBe(0);\r\n\r\n      dispatchFakeEvent(testListItem, 'focus');\r\n      selectionList.componentInstance._keydown(ENTER_EVENT);\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(selectList.selected.length).toBe(1);\r\n      expect(ENTER_EVENT.defaultPrevented).toBe(true);\r\n    });\r\n\r\n    it('should not be able to toggle a disabled option using SPACE', () => {\r\n      const testListItem = listOptions[1].nativeElement as HTMLElement;\r\n      const selectionModel = selectionList.componentInstance.selectedOptions;\r\n\r\n      expect(selectionModel.selected.length).toBe(0);\r\n\r\n      listOptions[1].componentInstance.disabled = true;\r\n\r\n      dispatchFakeEvent(testListItem, 'focus');\r\n      selectionList.componentInstance._keydown(createKeyboardEvent('keydown', SPACE, testListItem));\r\n      fixture.detectChanges();\r\n\r\n      expect(selectionModel.selected.length).toBe(0);\r\n    });\r\n\r\n    it('should restore focus if active option is destroyed', () => {\r\n      const manager = selectionList.componentInstance._keyManager;\r\n\r\n      listOptions[3].componentInstance._handleFocus();\r\n\r\n      expect(manager.activeItemIndex).toBe(3);\r\n\r\n      fixture.componentInstance.showLastOption = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(manager.activeItemIndex).toBe(2);\r\n    });\r\n\r\n    it('should focus previous item when press UP ARROW', () => {\r\n      let testListItem = listOptions[2].nativeElement as HTMLElement;\r\n      let UP_EVENT: KeyboardEvent =\r\n        createKeyboardEvent('keydown', UP_ARROW, testListItem);\r\n      let manager = selectionList.componentInstance._keyManager;\r\n\r\n      dispatchFakeEvent(listOptions[2].nativeElement, 'focus');\r\n      expect(manager.activeItemIndex).toEqual(2);\r\n\r\n      selectionList.componentInstance._keydown(UP_EVENT);\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(manager.activeItemIndex).toEqual(1);\r\n    });\r\n\r\n    it('should focus and toggle the next item when pressing SHIFT + UP_ARROW', () => {\r\n      const manager = selectionList.componentInstance._keyManager;\r\n      const upKeyEvent = createKeyboardEvent('keydown', UP_ARROW);\r\n      Object.defineProperty(upKeyEvent, 'shiftKey', {get: () => true});\r\n\r\n      dispatchFakeEvent(listOptions[3].nativeElement, 'focus');\r\n      expect(manager.activeItemIndex).toBe(3);\r\n\r\n      expect(listOptions[1].componentInstance.selected).toBe(false);\r\n      expect(listOptions[2].componentInstance.selected).toBe(false);\r\n\r\n      selectionList.componentInstance._keydown(upKeyEvent);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions[1].componentInstance.selected).toBe(false);\r\n      expect(listOptions[2].componentInstance.selected).toBe(true);\r\n\r\n      selectionList.componentInstance._keydown(upKeyEvent);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions[1].componentInstance.selected).toBe(true);\r\n      expect(listOptions[2].componentInstance.selected).toBe(true);\r\n    });\r\n\r\n    it('should focus next item when press DOWN ARROW', () => {\r\n      const manager = selectionList.componentInstance._keyManager;\r\n\r\n      dispatchFakeEvent(listOptions[2].nativeElement, 'focus');\r\n      expect(manager.activeItemIndex).toEqual(2);\r\n\r\n      selectionList.componentInstance._keydown(createKeyboardEvent('keydown', DOWN_ARROW));\r\n      fixture.detectChanges();\r\n\r\n      expect(manager.activeItemIndex).toEqual(3);\r\n    });\r\n\r\n    it('should focus and toggle the next item when pressing SHIFT + DOWN_ARROW', () => {\r\n      const manager = selectionList.componentInstance._keyManager;\r\n      const downKeyEvent = createKeyboardEvent('keydown', DOWN_ARROW);\r\n      Object.defineProperty(downKeyEvent, 'shiftKey', {get: () => true});\r\n\r\n      dispatchFakeEvent(listOptions[0].nativeElement, 'focus');\r\n      expect(manager.activeItemIndex).toBe(0);\r\n\r\n      expect(listOptions[1].componentInstance.selected).toBe(false);\r\n      expect(listOptions[2].componentInstance.selected).toBe(false);\r\n\r\n      selectionList.componentInstance._keydown(downKeyEvent);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions[1].componentInstance.selected).toBe(true);\r\n      expect(listOptions[2].componentInstance.selected).toBe(false);\r\n\r\n      selectionList.componentInstance._keydown(downKeyEvent);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions[1].componentInstance.selected).toBe(true);\r\n      expect(listOptions[2].componentInstance.selected).toBe(true);\r\n    });\r\n\r\n    it('should be able to focus the first item when pressing HOME', () => {\r\n      const manager = selectionList.componentInstance._keyManager;\r\n      expect(manager.activeItemIndex).toBe(-1);\r\n\r\n      const event = dispatchKeyboardEvent(selectionList.nativeElement, 'keydown', HOME);\r\n      fixture.detectChanges();\r\n\r\n      expect(manager.activeItemIndex).toBe(0);\r\n      expect(event.defaultPrevented).toBe(true);\r\n    });\r\n\r\n    it('should focus the last item when pressing END', () => {\r\n      const manager = selectionList.componentInstance._keyManager;\r\n      expect(manager.activeItemIndex).toBe(-1);\r\n\r\n      const event = dispatchKeyboardEvent(selectionList.nativeElement, 'keydown', END);\r\n      fixture.detectChanges();\r\n\r\n      expect(manager.activeItemIndex).toBe(3);\r\n      expect(event.defaultPrevented).toBe(true);\r\n    });\r\n\r\n    it('should select all items using ctrl + a', () => {\r\n      const event = createKeyboardEvent('keydown', A, selectionList.nativeElement);\r\n      Object.defineProperty(event, 'ctrlKey', {get: () => true});\r\n\r\n      expect(listOptions.some(option => option.componentInstance.selected)).toBe(false);\r\n\r\n      dispatchEvent(selectionList.nativeElement, event);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions.every(option => option.componentInstance.selected)).toBe(true);\r\n    });\r\n\r\n    it('should select all items using ctrl + a if some items are selected', () => {\r\n      const event = createKeyboardEvent('keydown', A, selectionList.nativeElement);\r\n      Object.defineProperty(event, 'ctrlKey', {get: () => true});\r\n\r\n      listOptions.slice(0, 2).forEach(option => option.componentInstance.selected = true);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions.some(option => option.componentInstance.selected)).toBe(true);\r\n\r\n      dispatchEvent(selectionList.nativeElement, event);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions.every(option => option.componentInstance.selected)).toBe(true);\r\n    });\r\n\r\n    it('should deselect all with ctrl + a if all options are selected', () => {\r\n      const event = createKeyboardEvent('keydown', A, selectionList.nativeElement);\r\n      Object.defineProperty(event, 'ctrlKey', {get: () => true});\r\n\r\n      listOptions.forEach(option => option.componentInstance.selected = true);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions.every(option => option.componentInstance.selected)).toBe(true);\r\n\r\n      dispatchEvent(selectionList.nativeElement, event);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions.every(option => option.componentInstance.selected)).toBe(false);\r\n    });\r\n\r\n    it('should be able to jump focus down to an item by typing', fakeAsync(() => {\r\n      const listEl = selectionList.nativeElement;\r\n      const manager = selectionList.componentInstance._keyManager;\r\n\r\n      expect(manager.activeItemIndex).toBe(-1);\r\n\r\n      dispatchEvent(listEl, createKeyboardEvent('keydown', 83, undefined, 's'));\r\n      fixture.detectChanges();\r\n      tick(200);\r\n\r\n      expect(manager.activeItemIndex).toBe(1);\r\n\r\n      dispatchEvent(listEl, createKeyboardEvent('keydown', 68, undefined, 'd'));\r\n      fixture.detectChanges();\r\n      tick(200);\r\n\r\n      expect(manager.activeItemIndex).toBe(3);\r\n    }));\r\n\r\n    it('should be able to select all options', () => {\r\n      const list: MatSelectionList = selectionList.componentInstance;\r\n\r\n      expect(list.options.toArray().every(option => option.selected)).toBe(false);\r\n\r\n      list.selectAll();\r\n      fixture.detectChanges();\r\n\r\n      expect(list.options.toArray().every(option => option.selected)).toBe(true);\r\n    });\r\n\r\n    it('should be able to deselect all options', () => {\r\n      const list: MatSelectionList = selectionList.componentInstance;\r\n\r\n      list.options.forEach(option => option.toggle());\r\n      expect(list.options.toArray().every(option => option.selected)).toBe(true);\r\n\r\n      list.deselectAll();\r\n      fixture.detectChanges();\r\n\r\n      expect(list.options.toArray().every(option => option.selected)).toBe(false);\r\n    });\r\n\r\n    it('should update the list value when an item is selected programmatically', () => {\r\n      const list: MatSelectionList = selectionList.componentInstance;\r\n\r\n      expect(list.selectedOptions.isEmpty()).toBe(true);\r\n\r\n      listOptions[0].componentInstance.selected = true;\r\n      listOptions[2].componentInstance.selected = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(list.selectedOptions.isEmpty()).toBe(false);\r\n      expect(list.selectedOptions.isSelected(listOptions[0].componentInstance)).toBe(true);\r\n      expect(list.selectedOptions.isSelected(listOptions[2].componentInstance)).toBe(true);\r\n    });\r\n\r\n    it('should update the item selected state when it is selected via the model', () => {\r\n      const list: MatSelectionList = selectionList.componentInstance;\r\n      const item: MatListOption = listOptions[0].componentInstance;\r\n\r\n      expect(item.selected).toBe(false);\r\n\r\n      list.selectedOptions.select(item);\r\n      fixture.detectChanges();\r\n\r\n      expect(item.selected).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('with list option selected', () => {\r\n    let fixture: ComponentFixture<SelectionListWithSelectedOption>;\r\n    let listItemEl: DebugElement;\r\n    let selectionList: DebugElement;\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [MatListModule],\r\n        declarations: [SelectionListWithSelectedOption],\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n    }));\r\n\r\n    beforeEach(async(() => {\r\n      fixture = TestBed.createComponent(SelectionListWithSelectedOption);\r\n      listItemEl = fixture.debugElement.query(By.directive(MatListOption));\r\n      selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\r\n      fixture.detectChanges();\r\n    }));\r\n\r\n    it('should set its initial selected state in the selectedOptions', () => {\r\n      let optionEl = listItemEl.injector.get<MatListOption>(MatListOption);\r\n      let selectedOptions = selectionList.componentInstance.selectedOptions;\r\n      expect(selectedOptions.isSelected(optionEl)).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  describe('with tabindex', () => {\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [MatListModule],\r\n        declarations: [\r\n          SelectionListWithTabindexAttr,\r\n          SelectionListWithTabindexBinding,\r\n        ]\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n    }));\r\n\r\n    it('should properly handle native tabindex attribute', () => {\r\n      const fixture = TestBed.createComponent(SelectionListWithTabindexAttr);\r\n      const selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\r\n\r\n      expect(selectionList.componentInstance.tabIndex)\r\n        .toBe(5, 'Expected the selection-list tabindex to be set to the attribute value.');\r\n    });\r\n\r\n    it('should support changing the tabIndex through binding', () => {\r\n      const fixture = TestBed.createComponent(SelectionListWithTabindexBinding);\r\n      const selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\r\n\r\n      expect(selectionList.componentInstance.tabIndex)\r\n        .toBe(0, 'Expected the tabIndex to be set to \"0\" by default.');\r\n\r\n      fixture.componentInstance.tabIndex = 3;\r\n      fixture.detectChanges();\r\n\r\n      expect(selectionList.componentInstance.tabIndex)\r\n        .toBe(3, 'Expected the tabIndex to updated through binding.');\r\n\r\n      fixture.componentInstance.disabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(selectionList.componentInstance.tabIndex)\r\n        .toBe(3, 'Expected the tabIndex to be still set to \"3\".');\r\n    });\r\n  });\r\n\r\n  describe('with single option', () => {\r\n    let fixture: ComponentFixture<SelectionListWithOnlyOneOption>;\r\n    let listOption: DebugElement;\r\n    let listItemEl: DebugElement;\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [MatListModule],\r\n        declarations: [\r\n          SelectionListWithListOptions,\r\n          SelectionListWithCheckboxPositionAfter,\r\n          SelectionListWithListDisabled,\r\n          SelectionListWithOnlyOneOption\r\n        ],\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n    }));\r\n\r\n    beforeEach(async(() => {\r\n      fixture = TestBed.createComponent(SelectionListWithOnlyOneOption);\r\n      listOption = fixture.debugElement.query(By.directive(MatListOption));\r\n      listItemEl = fixture.debugElement.query(By.css('.mat-list-item'));\r\n      fixture.detectChanges();\r\n    }));\r\n\r\n    it('should be focused when focus on nativeElements', () => {\r\n      dispatchFakeEvent(listOption.nativeElement, 'focus');\r\n      fixture.detectChanges();\r\n\r\n      expect(listItemEl.nativeElement.className).toContain('mat-list-item-focus');\r\n\r\n      dispatchFakeEvent(listOption.nativeElement, 'blur');\r\n      fixture.detectChanges();\r\n\r\n      expect(listItemEl.nativeElement.className).not.toContain('mat-list-item-focus');\r\n    });\r\n  });\r\n\r\n  describe('with option disabled', () => {\r\n    let fixture: ComponentFixture<SelectionListWithDisabledOption>;\r\n    let listOptionEl: HTMLElement;\r\n    let listOption: MatListOption;\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [MatListModule],\r\n        declarations: [SelectionListWithDisabledOption]\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n    }));\r\n\r\n    beforeEach(async(() => {\r\n      fixture = TestBed.createComponent(SelectionListWithDisabledOption);\r\n\r\n      const listOptionDebug = fixture.debugElement.query(By.directive(MatListOption));\r\n\r\n      listOption = listOptionDebug.componentInstance;\r\n      listOptionEl = listOptionDebug.nativeElement;\r\n\r\n      fixture.detectChanges();\r\n    }));\r\n\r\n    it('should disable ripples for disabled option', () => {\r\n      expect(listOption._isRippleDisabled())\r\n        .toBe(false, 'Expected ripples to be enabled by default');\r\n\r\n      fixture.componentInstance.disableItem = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(listOption._isRippleDisabled())\r\n        .toBe(true, 'Expected ripples to be disabled if option is disabled');\r\n    });\r\n\r\n    it('should apply the \"mat-list-item-disabled\" class properly', () => {\r\n      expect(listOptionEl.classList).not.toContain('mat-list-item-disabled');\r\n\r\n      fixture.componentInstance.disableItem = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptionEl.classList).toContain('mat-list-item-disabled');\r\n    });\r\n  });\r\n\r\n  describe('with list disabled', () => {\r\n    let fixture: ComponentFixture<SelectionListWithListDisabled>;\r\n    let listOption: DebugElement[];\r\n    let selectionList: DebugElement;\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [MatListModule],\r\n        declarations: [\r\n          SelectionListWithListOptions,\r\n          SelectionListWithCheckboxPositionAfter,\r\n          SelectionListWithListDisabled,\r\n          SelectionListWithOnlyOneOption\r\n        ],\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n    }));\r\n\r\n    beforeEach(async(() => {\r\n      fixture = TestBed.createComponent(SelectionListWithListDisabled);\r\n      listOption = fixture.debugElement.queryAll(By.directive(MatListOption));\r\n      selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\r\n      fixture.detectChanges();\r\n    }));\r\n\r\n    it('should not allow selection on disabled selection-list', () => {\r\n      let testListItem = listOption[2].injector.get<MatListOption>(MatListOption);\r\n      let selectList =\r\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\r\n\r\n      expect(selectList.selected.length).toBe(0);\r\n\r\n      testListItem._handleClick();\r\n      fixture.detectChanges();\r\n\r\n      expect(selectList.selected.length).toBe(0);\r\n    });\r\n\r\n    it('should update state of options if list state has changed', () => {\r\n      // To verify that the template of the list options has been re-rendered after the disabled\r\n      // property of the selection list has been updated, the ripple directive can be used.\r\n      // Inspecting the host classes of the options doesn't work because those update as part\r\n      // of the parent template (of the selection-list).\r\n      const listOptionRipple = listOption[2].query(By.directive(MatRipple))\r\n          .injector.get<MatRipple>(MatRipple);\r\n\r\n      expect(listOptionRipple.disabled)\r\n        .toBe(true, 'Expected ripples of list option to be disabled');\r\n\r\n      fixture.componentInstance.disabled = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptionRipple.disabled)\r\n        .toBe(false, 'Expected ripples of list option to be enabled');\r\n    });\r\n  });\r\n\r\n  describe('with checkbox position after', () => {\r\n    let fixture: ComponentFixture<SelectionListWithCheckboxPositionAfter>;\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [MatListModule],\r\n        declarations: [\r\n          SelectionListWithListOptions,\r\n          SelectionListWithCheckboxPositionAfter,\r\n          SelectionListWithListDisabled,\r\n          SelectionListWithOnlyOneOption\r\n        ],\r\n      });\r\n\r\n      TestBed.compileComponents();\r\n    }));\r\n\r\n    beforeEach(async(() => {\r\n      fixture = TestBed.createComponent(SelectionListWithCheckboxPositionAfter);\r\n      fixture.detectChanges();\r\n    }));\r\n\r\n    it('should be able to customize checkbox position', () => {\r\n      let listItemContent = fixture.debugElement.query(By.css('.mat-list-item-content'));\r\n      expect(listItemContent.nativeElement.classList).toContain('mat-list-item-content-reverse');\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('MatSelectionList with forms', () => {\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatListModule, FormsModule, ReactiveFormsModule],\r\n      declarations: [\r\n        SelectionListWithModel,\r\n        SelectionListWithFormControl,\r\n        SelectionListWithPreselectedOption,\r\n        SelectionListWithPreselectedOptionAndModel,\r\n        SelectionListWithPreselectedFormControlOnPush,\r\n        SelectionListWithCustomComparator,\r\n      ]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  describe('and ngModel', () => {\r\n    let fixture: ComponentFixture<SelectionListWithModel>;\r\n    let selectionListDebug: DebugElement;\r\n    let listOptions: MatListOption[];\r\n    let ngModel: NgModel;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(SelectionListWithModel);\r\n      fixture.detectChanges();\r\n\r\n      selectionListDebug = fixture.debugElement.query(By.directive(MatSelectionList));\r\n      ngModel = selectionListDebug.injector.get<NgModel>(NgModel);\r\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\r\n        .map(optionDebugEl => optionDebugEl.componentInstance);\r\n    });\r\n\r\n    it('should update the model if an option got selected programmatically', fakeAsync(() => {\r\n      expect(fixture.componentInstance.selectedOptions.length)\r\n        .toBe(0, 'Expected no options to be selected by default');\r\n\r\n      listOptions[0].toggle();\r\n      fixture.detectChanges();\r\n\r\n      tick();\r\n\r\n      expect(fixture.componentInstance.selectedOptions.length)\r\n        .toBe(1, 'Expected first list option to be selected');\r\n    }));\r\n\r\n    it('should update the model if an option got clicked', fakeAsync(() => {\r\n      expect(fixture.componentInstance.selectedOptions.length)\r\n        .toBe(0, 'Expected no options to be selected by default');\r\n\r\n      dispatchFakeEvent(listOptions[0]._getHostElement(), 'click');\r\n      fixture.detectChanges();\r\n\r\n      tick();\r\n\r\n      expect(fixture.componentInstance.selectedOptions.length)\r\n        .toBe(1, 'Expected first list option to be selected');\r\n    }));\r\n\r\n    it('should update the options if a model value is set', fakeAsync(() => {\r\n      expect(fixture.componentInstance.selectedOptions.length)\r\n        .toBe(0, 'Expected no options to be selected by default');\r\n\r\n      fixture.componentInstance.selectedOptions = ['opt3'];\r\n      fixture.detectChanges();\r\n\r\n      tick();\r\n\r\n      expect(fixture.componentInstance.selectedOptions.length)\r\n        .toBe(1, 'Expected first list option to be selected');\r\n    }));\r\n\r\n    it('should set the selection-list to touched on blur', fakeAsync(() => {\r\n      expect(ngModel.touched)\r\n        .toBe(false, 'Expected the selection-list to be untouched by default.');\r\n\r\n      dispatchFakeEvent(selectionListDebug.nativeElement, 'blur');\r\n      fixture.detectChanges();\r\n\r\n      tick();\r\n\r\n      expect(ngModel.touched).toBe(true, 'Expected the selection-list to be touched after blur');\r\n    }));\r\n\r\n    it('should be pristine by default', fakeAsync(() => {\r\n      fixture = TestBed.createComponent(SelectionListWithModel);\r\n      fixture.componentInstance.selectedOptions = ['opt2'];\r\n      fixture.detectChanges();\r\n\r\n      ngModel =\r\n        fixture.debugElement.query(By.directive(MatSelectionList)).injector.get<NgModel>(NgModel);\r\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\r\n        .map(optionDebugEl => optionDebugEl.componentInstance);\r\n\r\n      // Flush the initial tick to ensure that every action from the ControlValueAccessor\r\n      // happened before the actual test starts.\r\n      tick();\r\n\r\n      expect(ngModel.pristine)\r\n        .toBe(true, 'Expected the selection-list to be pristine by default.');\r\n\r\n      listOptions[1].toggle();\r\n      fixture.detectChanges();\r\n\r\n      tick();\r\n\r\n      expect(ngModel.pristine)\r\n        .toBe(false, 'Expected the selection-list to be dirty after state change.');\r\n    }));\r\n\r\n    it('should remove a selected option from the value on destroy', fakeAsync(() => {\r\n      listOptions[1].selected = true;\r\n      listOptions[2].selected = true;\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt2', 'opt3']);\r\n\r\n      fixture.componentInstance.renderLastOption = false;\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt2']);\r\n    }));\r\n\r\n    it('should update the model if an option got selected via the model', fakeAsync(() => {\r\n      expect(fixture.componentInstance.selectedOptions).toEqual([]);\r\n\r\n      selectionListDebug.componentInstance.selectedOptions.select(listOptions[0]);\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt1']);\r\n    }));\r\n\r\n    it('should not dispatch the model change event if nothing changed using selectAll', () => {\r\n      expect(fixture.componentInstance.modelChangeSpy).not.toHaveBeenCalled();\r\n\r\n      selectionListDebug.componentInstance.selectAll();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.modelChangeSpy).toHaveBeenCalledTimes(1);\r\n\r\n      selectionListDebug.componentInstance.selectAll();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.modelChangeSpy).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should not dispatch the model change event if nothing changed using selectAll', () => {\r\n      expect(fixture.componentInstance.modelChangeSpy).not.toHaveBeenCalled();\r\n\r\n      selectionListDebug.componentInstance.deselectAll();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.modelChangeSpy).not.toHaveBeenCalled();\r\n    });\r\n\r\n\r\n  });\r\n\r\n  describe('and formControl', () => {\r\n    let fixture: ComponentFixture<SelectionListWithFormControl>;\r\n    let listOptions: MatListOption[];\r\n    let selectionList: MatSelectionList;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(SelectionListWithFormControl);\r\n      fixture.detectChanges();\r\n\r\n      selectionList = fixture.debugElement.query(By.directive(MatSelectionList)).componentInstance;\r\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\r\n        .map(optionDebugEl => optionDebugEl.componentInstance);\r\n    });\r\n\r\n    it('should be able to disable options from the control', () => {\r\n      expect(selectionList.disabled)\r\n        .toBe(false, 'Expected the selection list to be enabled.');\r\n      expect(listOptions.every(option => !option.disabled))\r\n        .toBe(true, 'Expected every list option to be enabled.');\r\n\r\n      fixture.componentInstance.formControl.disable();\r\n      fixture.detectChanges();\r\n\r\n      expect(selectionList.disabled)\r\n        .toBe(true, 'Expected the selection list to be disabled.');\r\n      expect(listOptions.every(option => option.disabled))\r\n        .toBe(true, 'Expected every list option to be disabled.');\r\n    });\r\n\r\n    it('should be able to update the disabled property after form control disabling', () => {\r\n      expect(listOptions.every(option => !option.disabled))\r\n        .toBe(true, 'Expected every list option to be enabled.');\r\n\r\n      fixture.componentInstance.formControl.disable();\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions.every(option => option.disabled))\r\n        .toBe(true, 'Expected every list option to be disabled.');\r\n\r\n      // Previously the selection list has been disabled through FormControl#disable. Now we\r\n      // want to verify that we can still change the disabled state through updating the disabled\r\n      // property. Calling FormControl#disable should not lock the disabled property.\r\n      // See: https://github.com/angular/material2/issues/12107\r\n      selectionList.disabled = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions.every(option => !option.disabled))\r\n        .toBe(true, 'Expected every list option to be enabled.');\r\n    });\r\n\r\n    it('should be able to set the value through the form control', () => {\r\n      expect(listOptions.every(option => !option.selected))\r\n        .toBe(true, 'Expected every list option to be unselected.');\r\n\r\n      fixture.componentInstance.formControl.setValue(['opt2', 'opt3']);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions[1].selected).toBe(true, 'Expected second option to be selected.');\r\n      expect(listOptions[2].selected).toBe(true, 'Expected third option to be selected.');\r\n\r\n      fixture.componentInstance.formControl.setValue(null);\r\n      fixture.detectChanges();\r\n\r\n      expect(listOptions.every(option => !option.selected))\r\n        .toBe(true, 'Expected every list option to be unselected.');\r\n    });\r\n\r\n    it('should mark options as selected when the value is set before they are initialized', () => {\r\n      fixture.destroy();\r\n      fixture = TestBed.createComponent(SelectionListWithFormControl);\r\n\r\n      fixture.componentInstance.formControl.setValue(['opt2', 'opt3']);\r\n      fixture.detectChanges();\r\n\r\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\r\n        .map(optionDebugEl => optionDebugEl.componentInstance);\r\n\r\n      expect(listOptions[1].selected).toBe(true, 'Expected second option to be selected.');\r\n      expect(listOptions[2].selected).toBe(true, 'Expected third option to be selected.');\r\n    });\r\n  });\r\n\r\n  describe('preselected values', () => {\r\n    it('should add preselected options to the model value', fakeAsync(() => {\r\n      const fixture = TestBed.createComponent(SelectionListWithPreselectedOption);\r\n      const listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\r\n          .map(optionDebugEl => optionDebugEl.componentInstance);\r\n\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(listOptions[1].selected).toBe(true);\r\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt2']);\r\n    }));\r\n\r\n    it('should handle preselected option both through the model and the view', fakeAsync(() => {\r\n      const fixture = TestBed.createComponent(SelectionListWithPreselectedOptionAndModel);\r\n      const listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\r\n          .map(optionDebugEl => optionDebugEl.componentInstance);\r\n\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(listOptions[0].selected).toBe(true);\r\n      expect(listOptions[1].selected).toBe(true);\r\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt1', 'opt2']);\r\n    }));\r\n\r\n    it('should show the item as selected when preselected inside OnPush parent', fakeAsync(() => {\r\n      const fixture = TestBed.createComponent(SelectionListWithPreselectedFormControlOnPush);\r\n      fixture.detectChanges();\r\n\r\n      const option = fixture.debugElement.queryAll(By.directive(MatListOption))[1];\r\n\r\n      fixture.detectChanges();\r\n      flush();\r\n      fixture.detectChanges();\r\n\r\n      expect(option.componentInstance.selected).toBe(true);\r\n      expect(option.nativeElement.querySelector('.mat-pseudo-checkbox-checked')).toBeTruthy();\r\n    }));\r\n\r\n  });\r\n\r\n  describe('with custom compare function', () => {\r\n    it('should use a custom comparator to determine which options are selected', fakeAsync(() => {\r\n      const fixture = TestBed.createComponent(SelectionListWithCustomComparator);\r\n      const testComponent = fixture.componentInstance;\r\n\r\n      testComponent.compareWith = jasmine.createSpy('comparator', (o1, o2) => {\r\n        return o1 && o2 && o1.id === o2.id;\r\n      }).and.callThrough();\r\n\r\n      testComponent.selectedOptions = [{id: 2, label: 'Two'}];\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(testComponent.compareWith).toHaveBeenCalled();\r\n      expect(testComponent.optionInstances.toArray()[1].selected).toBe(true);\r\n    }));\r\n  });\r\n});\r\n\r\n\r\n@Component({template: `\r\n  <mat-selection-list id=\"selection-list-1\" (selectionChange)=\"onValueChange($event)\">\r\n    <mat-list-option checkboxPosition=\"before\" disabled=\"true\" value=\"inbox\">\r\n      Inbox (disabled selection-option)\r\n    </mat-list-option>\r\n    <mat-list-option id=\"testSelect\" checkboxPosition=\"before\" class=\"test-native-focus\"\r\n                    value=\"starred\">\r\n      Starred\r\n    </mat-list-option>\r\n    <mat-list-option checkboxPosition=\"before\" value=\"sent-mail\">\r\n      Sent Mail\r\n    </mat-list-option>\r\n    <mat-list-option checkboxPosition=\"before\" value=\"drafts\" *ngIf=\"showLastOption\">\r\n      Drafts\r\n    </mat-list-option>\r\n  </mat-selection-list>`})\r\nclass SelectionListWithListOptions {\r\n  showLastOption: boolean = true;\r\n\r\n  onValueChange(_change: MatSelectionListChange) {}\r\n}\r\n\r\n@Component({template: `\r\n  <mat-selection-list id=\"selection-list-2\">\r\n    <mat-list-option checkboxPosition=\"after\">\r\n      Inbox (disabled selection-option)\r\n    </mat-list-option>\r\n    <mat-list-option id=\"testSelect\" checkboxPosition=\"after\">\r\n      Starred\r\n    </mat-list-option>\r\n    <mat-list-option checkboxPosition=\"after\">\r\n      Sent Mail\r\n    </mat-list-option>\r\n    <mat-list-option checkboxPosition=\"after\">\r\n      Drafts\r\n    </mat-list-option>\r\n  </mat-selection-list>`})\r\nclass SelectionListWithCheckboxPositionAfter {\r\n}\r\n\r\n@Component({template: `\r\n  <mat-selection-list id=\"selection-list-3\" [disabled]=\"disabled\">\r\n    <mat-list-option checkboxPosition=\"after\">\r\n      Inbox (disabled selection-option)\r\n    </mat-list-option>\r\n    <mat-list-option id=\"testSelect\" checkboxPosition=\"after\">\r\n      Starred\r\n    </mat-list-option>\r\n    <mat-list-option checkboxPosition=\"after\">\r\n      Sent Mail\r\n    </mat-list-option>\r\n    <mat-list-option checkboxPosition=\"after\">\r\n      Drafts\r\n    </mat-list-option>\r\n  </mat-selection-list>`})\r\nclass SelectionListWithListDisabled {\r\n  disabled: boolean = true;\r\n}\r\n\r\n@Component({template: `\r\n  <mat-selection-list>\r\n    <mat-list-option [disabled]=\"disableItem\">Item</mat-list-option>\r\n  </mat-selection-list>\r\n  `})\r\nclass SelectionListWithDisabledOption {\r\n  disableItem: boolean = false;\r\n}\r\n\r\n@Component({template: `\r\n  <mat-selection-list>\r\n    <mat-list-option [selected]=\"true\">Item</mat-list-option>\r\n  </mat-selection-list>`})\r\nclass SelectionListWithSelectedOption {\r\n}\r\n\r\n@Component({template: `\r\n  <mat-selection-list id=\"selection-list-4\">\r\n    <mat-list-option checkboxPosition=\"after\" class=\"test-focus\" id=\"123\">\r\n      Inbox\r\n    </mat-list-option>\r\n  </mat-selection-list>`})\r\nclass SelectionListWithOnlyOneOption {\r\n}\r\n\r\n@Component({\r\n  template: `<mat-selection-list tabindex=\"5\"></mat-selection-list>`\r\n})\r\nclass SelectionListWithTabindexAttr {}\r\n\r\n@Component({\r\n  template: `<mat-selection-list [tabIndex]=\"tabIndex\" [disabled]=\"disabled\"></mat-selection-list>`\r\n})\r\nclass SelectionListWithTabindexBinding {\r\n  tabIndex: number;\r\n  disabled: boolean;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-selection-list [(ngModel)]=\"selectedOptions\" (ngModelChange)=\"modelChangeSpy()\">\r\n      <mat-list-option value=\"opt1\">Option 1</mat-list-option>\r\n      <mat-list-option value=\"opt2\">Option 2</mat-list-option>\r\n      <mat-list-option value=\"opt3\" *ngIf=\"renderLastOption\">Option 3</mat-list-option>\r\n    </mat-selection-list>`\r\n})\r\nclass SelectionListWithModel {\r\n  modelChangeSpy = jasmine.createSpy('model change spy');\r\n  selectedOptions: string[] = [];\r\n  renderLastOption = true;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-selection-list [formControl]=\"formControl\">\r\n      <mat-list-option value=\"opt1\">Option 1</mat-list-option>\r\n      <mat-list-option value=\"opt2\">Option 2</mat-list-option>\r\n      <mat-list-option value=\"opt3\">Option 3</mat-list-option>\r\n    </mat-selection-list>\r\n  `\r\n})\r\nclass SelectionListWithFormControl {\r\n  formControl = new FormControl();\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-selection-list [(ngModel)]=\"selectedOptions\">\r\n      <mat-list-option value=\"opt1\">Option 1</mat-list-option>\r\n      <mat-list-option value=\"opt2\" selected>Option 2</mat-list-option>\r\n    </mat-selection-list>`\r\n})\r\nclass SelectionListWithPreselectedOption {\r\n  selectedOptions: string[];\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-selection-list [(ngModel)]=\"selectedOptions\">\r\n      <mat-list-option value=\"opt1\">Option 1</mat-list-option>\r\n      <mat-list-option value=\"opt2\" selected>Option 2</mat-list-option>\r\n    </mat-selection-list>`\r\n})\r\nclass SelectionListWithPreselectedOptionAndModel {\r\n  selectedOptions = ['opt1'];\r\n}\r\n\r\n\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <mat-selection-list [formControl]=\"formControl\">\r\n      <mat-list-option *ngFor=\"let opt of opts\" [value]=\"opt\">{{opt}}</mat-list-option>\r\n    </mat-selection-list>\r\n  `\r\n})\r\nclass SelectionListWithPreselectedFormControlOnPush {\r\n  opts = ['opt1', 'opt2', 'opt3'];\r\n  formControl = new FormControl(['opt2']);\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-selection-list [(ngModel)]=\"selectedOptions\" [compareWith]=\"compareWith\">\r\n      <mat-list-option *ngFor=\"let option of options\" [value]=\"option\">\r\n        {{option.label}}\r\n      </mat-list-option>\r\n    </mat-selection-list>`\r\n})\r\nclass SelectionListWithCustomComparator {\r\n  @ViewChildren(MatListOption) optionInstances: QueryList<MatListOption>;\r\n  selectedOptions: {id: number, label: string}[] = [];\r\n  compareWith?: (o1: any, o2: any) => boolean;\r\n  options = [\r\n    {id: 1, label: 'One'},\r\n    {id: 2, label: 'Two'},\r\n    {id: 3, label: 'Three'}\r\n  ];\r\n}\r\n"]}