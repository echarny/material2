{"version":3,"file":"slide-toggle.js","sourceRoot":"","sources":["../../../../src/lib/slide-toggle/slide-toggle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n  Optional,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HammerInput,\r\n  HasTabIndex,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {\r\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\r\n  MatSlideToggleDefaultOptions\r\n} from './slide-toggle-config';\r\n\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\nlet nextUniqueId = 0;\r\n\r\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSlideToggle),\r\n  multi: true\r\n};\r\n\r\n/** Change event object emitted by a MatSlideToggle. */\r\nexport class MatSlideToggleChange {\r\n  constructor(\r\n    /** The source MatSlideToggle of the event. */\r\n    public source: MatSlideToggle,\r\n    /** The new `checked` value of the MatSlideToggle. */\r\n    public checked: boolean) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSlideToggle.\r\n/** @docs-private */\r\nexport class MatSlideToggleBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatSlideToggleMixinBase =\r\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\r\n\r\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-slide-toggle',\r\n  exportAs: 'matSlideToggle',\r\n  host: {\r\n    'class': 'mat-slide-toggle',\r\n    '[id]': 'id',\r\n    '[class.mat-checked]': 'checked',\r\n    '[class.mat-disabled]': 'disabled',\r\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n  templateUrl: 'slide-toggle.html',\r\n  styleUrls: ['slide-toggle.css'],\r\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\r\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\r\n\r\n  private onChange = (_: any) => {};\r\n  private onTouched = () => {};\r\n\r\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\r\n  private _required: boolean = false;\r\n  private _checked: boolean = false;\r\n\r\n  /** Whether the thumb is currently being dragged. */\r\n  private _dragging = false;\r\n\r\n  /** Previous checked state before drag started. */\r\n  private _previousChecked: boolean;\r\n\r\n  /** Width of the thumb bar of the slide-toggle. */\r\n  private _thumbBarWidth: number;\r\n\r\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\r\n  private _dragPercentage: number;\r\n\r\n  /** Reference to the thumb HTMLElement. */\r\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\r\n\r\n  /** Reference to the thumb bar HTMLElement. */\r\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\r\n\r\n  /** Name value will be applied to the input element if present */\r\n  @Input() name: string | null = null;\r\n\r\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Whether the slide-toggle element is checked or not */\r\n\r\n  /** Used to set the aria-label attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string | null = null;\r\n\r\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Whether the slide-toggle is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value) { this._required = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the slide-toggle element is checked or not */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value) {\r\n    this._checked = coerceBooleanProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  /** An event will be dispatched each time the slide-toggle changes its value. */\r\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\r\n      new EventEmitter<MatSlideToggleChange>();\r\n\r\n  /**\r\n   * An event will be dispatched each time the slide-toggle input is toggled.\r\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\r\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\r\n   */\r\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * An event will be dispatched each time the slide-toggle is dragged.\r\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\r\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\r\n   * the slide toggle to change the slide toggle's value.\r\n   */\r\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Reference to the underlying input element. */\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              /**\r\n               * @deprecated The `_platform` parameter to be removed.\r\n               * @breaking-change 7.0.0\r\n               */\r\n              _platform: Platform,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Attribute('tabindex') tabIndex: string,\r\n              private _ngZone: NgZone,\r\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\r\n                  public defaults: MatSlideToggleDefaultOptions,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\r\n              @Optional() private _dir?: Directionality) {\r\n    super(elementRef);\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._focusMonitor\r\n      .monitor(this._elementRef.nativeElement, true)\r\n      .subscribe(focusOrigin => {\r\n        if (!focusOrigin) {\r\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\r\n          // Angular does not expect events to be raised during change detection, so any state\r\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\r\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\r\n          // we defer telling the form control it has been touched until the next tick.\r\n          Promise.resolve().then(() => this.onTouched());\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n\r\n  /** Method being called whenever the underlying input emits a change event. */\r\n  _onChangeEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the component's `change` output.\r\n    event.stopPropagation();\r\n\r\n    if (!this._dragging) {\r\n      this.toggleChange.emit();\r\n    }\r\n    // Releasing the pointer over the `<label>` element while dragging triggers another\r\n    // click event on the `<label>` element. This means that the checked state of the underlying\r\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\r\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\r\n    // does not change, and the checked state of the underlying input needs to be changed back.\r\n    if (this._dragging || this.defaults.disableToggleValue) {\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      return;\r\n    }\r\n\r\n    // Sync the value from the underlying input element with the component instance.\r\n    this.checked = this._inputElement.nativeElement.checked;\r\n\r\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\r\n    // there is no change event, when the checked state changes programmatically.\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /** Method being called whenever the slide-toggle has been clicked. */\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(value: any): void {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the slide-toggle. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\r\n\r\n  /** Toggles the checked state of the slide-toggle. */\r\n  toggle(): void {\r\n    this.checked = !this.checked;\r\n    this.onChange(this.checked);\r\n  }\r\n\r\n  /**\r\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\r\n   */\r\n  private _emitChangeEvent() {\r\n    this.onChange(this.checked);\r\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\r\n  }\r\n\r\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\r\n  private _getDragPercentage(distance: number) {\r\n    let percentage = (distance / this._thumbBarWidth) * 100;\r\n\r\n    // When the toggle was initially checked, then we have to start the drag at the end.\r\n    if (this._previousChecked) {\r\n      percentage += 100;\r\n    }\r\n\r\n    return Math.max(0, Math.min(percentage, 100));\r\n  }\r\n\r\n  _onDragStart() {\r\n    if (!this.disabled && !this._dragging) {\r\n      const thumbEl = this._thumbEl.nativeElement;\r\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\r\n      thumbEl.classList.add('mat-dragging');\r\n\r\n      this._previousChecked = this.checked;\r\n      this._dragging = true;\r\n    }\r\n  }\r\n\r\n  _onDrag(event: HammerInput) {\r\n    if (this._dragging) {\r\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\r\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\r\n      // Calculate the moved distance based on the thumb bar width.\r\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\r\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\r\n    }\r\n  }\r\n\r\n  _onDragEnd() {\r\n    if (this._dragging) {\r\n      const newCheckedValue = this._dragPercentage > 50;\r\n\r\n      if (newCheckedValue !== this.checked) {\r\n        this.dragChange.emit();\r\n        if (!this.defaults.disableDragValue) {\r\n          this.checked = newCheckedValue;\r\n          this._emitChangeEvent();\r\n        }\r\n      }\r\n\r\n      // The drag should be stopped outside of the current event handler, otherwise the\r\n      // click event will be fired before it and will revert the drag change.\r\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\r\n        if (this._dragging) {\r\n          this._dragging = false;\r\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\r\n\r\n          // Reset the transform because the component will take care\r\n          // of the thumb position after drag.\r\n          this._thumbEl.nativeElement.style.transform = '';\r\n        }\r\n      }));\r\n    }\r\n  }\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // This method is getting called whenever the label of the slide-toggle changes.\r\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n"]}