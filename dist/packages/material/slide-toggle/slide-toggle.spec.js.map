{"version":3,"file":"slide-toggle.spec.js","sourceRoot":"","sources":["../../../../src/lib/slide-toggle/slide-toggle.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {MutationObserverFactory} from '@angular/cdk/observers';\r\nimport {dispatchFakeEvent} from '@angular/cdk/testing';\r\nimport {Component} from '@angular/core';\r\nimport {\r\n  ComponentFixture,\r\n  fakeAsync,\r\n  flush,\r\n  flushMicrotasks,\r\n  TestBed,\r\n  tick,\r\n} from '@angular/core/testing';\r\nimport {FormControl, FormsModule, NgModel, ReactiveFormsModule} from '@angular/forms';\r\nimport {By, HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {BidiModule, Direction} from '@angular/cdk/bidi';\r\nimport {TestGestureConfig} from '../slider/test-gesture-config';\r\nimport {MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS} from './slide-toggle-config';\r\nimport {MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule} from './index';\r\n\r\ndescribe('MatSlideToggle without forms', () => {\r\n  let gestureConfig: TestGestureConfig;\r\n  let mutationObserverCallbacks: Function[];\r\n  let flushMutationObserver = () => mutationObserverCallbacks.forEach(callback => callback());\r\n\r\n  beforeEach(fakeAsync(() => {\r\n    mutationObserverCallbacks = [];\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [MatSlideToggleModule, BidiModule],\r\n      declarations: [\r\n        SlideToggleBasic,\r\n        SlideToggleWithTabindexAttr,\r\n        SlideToggleWithoutLabel\r\n      ],\r\n      providers: [\r\n        {provide: HAMMER_GESTURE_CONFIG, useFactory: () => gestureConfig = new TestGestureConfig()},\r\n        {\r\n          provide: MutationObserverFactory,\r\n          useValue: {\r\n            create: (callback: Function) => {\r\n              mutationObserverCallbacks.push(callback);\r\n              return {observe: () => {}, disconnect: () => {}};\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  describe('basic behavior', () => {\r\n    let fixture: ComponentFixture<any>;\r\n\r\n    let testComponent: SlideToggleBasic;\r\n    let slideToggle: MatSlideToggle;\r\n    let slideToggleElement: HTMLElement;\r\n    let labelElement: HTMLLabelElement;\r\n    let inputElement: HTMLInputElement;\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = TestBed.createComponent(SlideToggleBasic);\r\n\r\n      // Enable jasmine spies on event functions, which may trigger at initialization\r\n      // of the slide-toggle component.\r\n      spyOn(fixture.debugElement.componentInstance, 'onSlideChange').and.callThrough();\r\n      spyOn(fixture.debugElement.componentInstance, 'onSlideClick').and.callThrough();\r\n\r\n      // Initialize the slide-toggle component, by triggering the first change detection cycle.\r\n      fixture.detectChanges();\r\n\r\n      const slideToggleDebug = fixture.debugElement.query(By.css('mat-slide-toggle'));\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      slideToggle = slideToggleDebug.componentInstance;\r\n      slideToggleElement = slideToggleDebug.nativeElement;\r\n      inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\r\n      labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\r\n    }));\r\n\r\n    it('should apply class based on color attribute', () => {\r\n      testComponent.slideColor = 'primary';\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('mat-primary');\r\n\r\n      testComponent.slideColor = 'accent';\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('mat-accent');\r\n    });\r\n\r\n    it('should correctly update the disabled property', () => {\r\n      expect(inputElement.disabled).toBeFalsy();\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.disabled).toBeTruthy();\r\n    });\r\n\r\n    it('should correctly update the checked property', () => {\r\n      expect(slideToggle.checked).toBeFalsy();\r\n\r\n      testComponent.slideChecked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.checked).toBeTruthy();\r\n    });\r\n\r\n    it('should set the toggle to checked on click', () => {\r\n      expect(slideToggle.checked).toBe(false);\r\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('mat-checked');\r\n      expect(slideToggle.checked).toBe(true);\r\n    });\r\n\r\n    it('should not trigger the click event multiple times', () => {\r\n      // By default, when clicking on a label element, a generated click will be dispatched\r\n      // on the associated input element.\r\n      // Since we're using a label element and a visual hidden input, this behavior can led\r\n      // to an issue, where the click events on the slide-toggle are getting executed twice.\r\n\r\n      expect(slideToggle.checked).toBe(false);\r\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('mat-checked');\r\n      expect(slideToggle.checked).toBe(true);\r\n      expect(testComponent.onSlideClick).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should trigger the change event properly', () => {\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.checked).toBe(true);\r\n      expect(slideToggleElement.classList).toContain('mat-checked');\r\n      expect(testComponent.onSlideChange).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should not trigger the change event by changing the native value', fakeAsync(() => {\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\r\n\r\n      testComponent.slideChecked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.checked).toBe(true);\r\n      expect(slideToggleElement.classList).toContain('mat-checked');\r\n      tick();\r\n\r\n      expect(testComponent.onSlideChange).not.toHaveBeenCalled();\r\n    }));\r\n\r\n    it('should not trigger the change event on initialization', fakeAsync(() => {\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\r\n\r\n      testComponent.slideChecked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.checked).toBe(true);\r\n      expect(slideToggleElement.classList).toContain('mat-checked');\r\n      tick();\r\n\r\n      expect(testComponent.onSlideChange).not.toHaveBeenCalled();\r\n    }));\r\n\r\n    it('should add a suffix to the inputs id', () => {\r\n      testComponent.slideId = 'myId';\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.id).toBe('myId');\r\n      expect(inputElement.id).toBe(`${slideToggleElement.id}-input`);\r\n\r\n      testComponent.slideId = 'nextId';\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.id).toBe('nextId');\r\n      expect(inputElement.id).toBe(`${slideToggleElement.id}-input`);\r\n\r\n      testComponent.slideId = null;\r\n      fixture.detectChanges();\r\n\r\n      // Once the id binding is set to null, the id property should auto-generate a unique id.\r\n      expect(inputElement.id).toMatch(/mat-slide-toggle-\\d+-input/);\r\n    });\r\n\r\n    it('should forward the tabIndex to the underlying input', () => {\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.tabIndex).toBe(0);\r\n\r\n      testComponent.slideTabindex = 4;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.tabIndex).toBe(4);\r\n    });\r\n\r\n    it('should forward the specified name to the input', () => {\r\n      testComponent.slideName = 'myName';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.name).toBe('myName');\r\n\r\n      testComponent.slideName = 'nextName';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.name).toBe('nextName');\r\n\r\n      testComponent.slideName = null;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.name).toBe('');\r\n    });\r\n\r\n    it('should forward the aria-label attribute to the input', () => {\r\n      testComponent.slideLabel = 'ariaLabel';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.getAttribute('aria-label')).toBe('ariaLabel');\r\n\r\n      testComponent.slideLabel = null;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.hasAttribute('aria-label')).toBeFalsy();\r\n    });\r\n\r\n    it('should forward the aria-labelledby attribute to the input', () => {\r\n      testComponent.slideLabelledBy = 'ariaLabelledBy';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.getAttribute('aria-labelledby')).toBe('ariaLabelledBy');\r\n\r\n      testComponent.slideLabelledBy = null;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.hasAttribute('aria-labelledby')).toBeFalsy();\r\n    });\r\n\r\n    it('should emit the new values properly', fakeAsync(() => {\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      // We're checking the arguments type / emitted value to be a boolean, because sometimes the\r\n      // emitted value can be a DOM Event, which is not valid.\r\n      // See angular/angular#4059\r\n      expect(testComponent.lastEvent.checked).toBe(true);\r\n    }));\r\n\r\n    it('should support subscription on the change observable', fakeAsync(() => {\r\n      const spy = jasmine.createSpy('change spy');\r\n      const subscription = slideToggle.change.subscribe(spy);\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(spy).toHaveBeenCalledWith(jasmine.objectContaining({checked: true}));\r\n      subscription.unsubscribe();\r\n    }));\r\n\r\n    it('should forward the required attribute', () => {\r\n      testComponent.isRequired = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.required).toBe(true);\r\n\r\n      testComponent.isRequired = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.required).toBe(false);\r\n    });\r\n\r\n    it('should focus on underlying input element when focus() is called', () => {\r\n      expect(document.activeElement).not.toBe(inputElement);\r\n\r\n      slideToggle.focus();\r\n      fixture.detectChanges();\r\n\r\n      expect(document.activeElement).toBe(inputElement);\r\n    });\r\n\r\n    it('should set a element class if labelPosition is set to before', () => {\r\n      expect(slideToggleElement.classList).not.toContain('mat-slide-toggle-label-before');\r\n\r\n      testComponent.labelPosition = 'before';\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('mat-slide-toggle-label-before');\r\n    });\r\n\r\n    it('should show ripples on label mousedown', () => {\r\n      const rippleSelector = '.mat-ripple-element:not(.mat-slide-toggle-persistent-ripple)';\r\n\r\n      expect(slideToggleElement.querySelectorAll(rippleSelector).length).toBe(0);\r\n\r\n      dispatchFakeEvent(labelElement, 'mousedown');\r\n      dispatchFakeEvent(labelElement, 'mouseup');\r\n\r\n      expect(slideToggleElement.querySelectorAll(rippleSelector).length).toBe(1);\r\n    });\r\n\r\n    it('should not show ripples when disableRipple is set', () => {\r\n      const rippleSelector = '.mat-ripple-element:not(.mat-slide-toggle-persistent-ripple)';\r\n      testComponent.disableRipple = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.querySelectorAll(rippleSelector).length).toBe(0);\r\n\r\n      dispatchFakeEvent(labelElement, 'mousedown');\r\n      dispatchFakeEvent(labelElement, 'mouseup');\r\n\r\n      expect(slideToggleElement.querySelectorAll(rippleSelector).length).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('custom template', () => {\r\n    it('should not trigger the change event on initialization', fakeAsync(() => {\r\n      const fixture = TestBed.createComponent(SlideToggleBasic);\r\n\r\n      fixture.componentInstance.slideChecked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.lastEvent).toBeFalsy();\r\n    }));\r\n\r\n    it('should be able to set the tabindex via the native attribute', fakeAsync(() => {\r\n      const fixture = TestBed.createComponent(SlideToggleWithTabindexAttr);\r\n\r\n      fixture.detectChanges();\r\n\r\n      const slideToggle = fixture.debugElement\r\n        .query(By.directive(MatSlideToggle)).componentInstance as MatSlideToggle;\r\n\r\n      expect(slideToggle.tabIndex)\r\n        .toBe(5, 'Expected tabIndex property to have been set based on the native attribute');\r\n    }));\r\n  });\r\n\r\n  describe('custom action configuration', () => {\r\n    it('should not change value on click when click action is noop', fakeAsync(() => {\r\n      TestBed\r\n        .resetTestingModule()\r\n        .configureTestingModule({\r\n          imports: [MatSlideToggleModule],\r\n          declarations: [SlideToggleBasic],\r\n          providers: [\r\n            {\r\n              provide: HAMMER_GESTURE_CONFIG,\r\n              useFactory: () => gestureConfig = new TestGestureConfig()\r\n            },\r\n            {provide: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, useValue: {disableToggleValue: true}},\r\n          ]\r\n        });\r\n      const fixture = TestBed.createComponent(SlideToggleBasic);\r\n      const testComponent = fixture.debugElement.componentInstance;\r\n      const slideToggleDebug = fixture.debugElement.query(By.css('mat-slide-toggle'));\r\n\r\n      const slideToggle = slideToggleDebug.componentInstance;\r\n      const inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\r\n      const labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\r\n\r\n      expect(testComponent.toggleTriggered).toBe(0);\r\n      expect(testComponent.dragTriggered).toBe(0);\r\n      expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\r\n      expect(testComponent.toggleTriggered).toBe(1, 'Expect toggle once');\r\n      expect(testComponent.dragTriggered).toBe(0);\r\n\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\r\n      expect(testComponent.toggleTriggered).toBe(2, 'Expect toggle twice');\r\n      expect(testComponent.dragTriggered).toBe(0);\r\n    }));\r\n\r\n    it('should not change value on dragging when drag action is noop', fakeAsync(() => {\r\n      TestBed\r\n        .resetTestingModule()\r\n        .configureTestingModule({\r\n          imports: [MatSlideToggleModule],\r\n          declarations: [SlideToggleBasic],\r\n          providers: [\r\n            {\r\n              provide: HAMMER_GESTURE_CONFIG,\r\n              useFactory: () => gestureConfig = new TestGestureConfig()\r\n            },\r\n            {provide: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, useValue: {disableDragValue: true}},\r\n          ]\r\n        });\r\n      const fixture = TestBed.createComponent(SlideToggleBasic);\r\n      const testComponent = fixture.debugElement.componentInstance;\r\n      const slideToggleDebug = fixture.debugElement.query(By.css('mat-slide-toggle'));\r\n      const thumbContainerDebug = slideToggleDebug\r\n        .query(By.css('.mat-slide-toggle-thumb-container'));\r\n\r\n      const slideThumbContainer = thumbContainerDebug.nativeElement;\r\n      const slideToggle = slideToggleDebug.componentInstance;\r\n\r\n      expect(testComponent.toggleTriggered).toBe(0);\r\n      expect(testComponent.dragTriggered).toBe(0);\r\n      expect(slideToggle.checked).toBe(false);\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n\r\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\r\n\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\r\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\r\n      });\r\n\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n      expect(testComponent.lastEvent).toBeUndefined();\r\n      expect(testComponent.toggleTriggered).toBe(0);\r\n      expect(testComponent.dragTriggered).toBe(1, 'Expect drag once');\r\n    }));\r\n  });\r\n\r\n  describe('with dragging', () => {\r\n    let fixture: ComponentFixture<any>;\r\n\r\n    let testComponent: SlideToggleBasic;\r\n    let slideToggle: MatSlideToggle;\r\n    let slideToggleElement: HTMLElement;\r\n    let slideThumbContainer: HTMLElement;\r\n    let inputElement: HTMLInputElement;\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = TestBed.createComponent(SlideToggleBasic);\r\n      fixture.detectChanges();\r\n\r\n      const slideToggleDebug = fixture.debugElement.query(By.css('mat-slide-toggle'));\r\n      const thumbContainerDebug = slideToggleDebug\r\n          .query(By.css('.mat-slide-toggle-thumb-container'));\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      slideToggle = slideToggleDebug.componentInstance;\r\n      slideToggleElement = slideToggleDebug.nativeElement;\r\n      slideThumbContainer = thumbContainerDebug.nativeElement;\r\n\r\n      inputElement = slideToggleElement.querySelector('input')!;\r\n    }));\r\n\r\n    it('should drag from start to end', fakeAsync(() => {\r\n      expect(slideToggle.checked).toBe(false);\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n\r\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\r\n\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\r\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\r\n      });\r\n\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideToggle.checked).toBe(true);\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n    }));\r\n\r\n    it('should drag from start to end in RTL', fakeAsync(() => {\r\n      testComponent.direction = 'rtl';\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggle.checked).toBe(false);\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n\r\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\r\n\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\r\n        deltaX: -200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\r\n      });\r\n\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideToggle.checked).toBe(true);\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n    }));\r\n\r\n    it('should drag from end to start', fakeAsync(() => {\r\n      slideToggle.checked = true;\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n\r\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\r\n\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\r\n        deltaX: -200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\r\n      });\r\n\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideToggle.checked).toBe(false);\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n    }));\r\n\r\n    it('should drag from end to start in RTL', fakeAsync(() => {\r\n      testComponent.direction = 'rtl';\r\n      fixture.detectChanges();\r\n\r\n      slideToggle.checked = true;\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n\r\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\r\n\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\r\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\r\n      });\r\n\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideToggle.checked).toBe(false);\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n    }));\r\n\r\n    it('should not drag when disabled', fakeAsync(() => {\r\n      slideToggle.disabled = true;\r\n\r\n      expect(slideToggle.checked).toBe(false);\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\r\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\r\n      });\r\n\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideToggle.checked).toBe(false);\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n    }));\r\n\r\n    it('should should emit a change event after drag', fakeAsync(() => {\r\n      expect(slideToggle.checked).toBe(false);\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n\r\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\r\n\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\r\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\r\n      });\r\n\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideToggle.checked).toBe(true);\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n      expect(testComponent.lastEvent.checked).toBe(true);\r\n    }));\r\n\r\n    it('should not emit a change event when the value did not change', fakeAsync(() => {\r\n      expect(slideToggle.checked).toBe(false);\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, { deltaX: 0 });\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n      expect(slideToggle.checked).toBe(false);\r\n      expect(testComponent.lastEvent)\r\n          .toBeFalsy('Expected the slide-toggle to not emit a change event.');\r\n    }));\r\n\r\n    it('should ignore clicks on the label element while dragging', fakeAsync(() => {\r\n      expect(slideToggle.checked).toBe(false);\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\r\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\r\n      });\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n\r\n      expect(slideToggle.checked).toBe(true);\r\n\r\n      // Fake a change event that has been fired after dragging through the click on pointer\r\n      // release (noticeable on IE11, Edge)\r\n      inputElement.checked = false;\r\n      dispatchFakeEvent(inputElement, 'change');\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n      expect(slideToggle.checked).toBe(true);\r\n    }));\r\n\r\n    it('should update the checked property of the input', fakeAsync(() => {\r\n      expect(inputElement.checked).toBe(false);\r\n\r\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\r\n\r\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\r\n\r\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\r\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\r\n      });\r\n\r\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.checked).toBe(true);\r\n\r\n      // Flush the timeout for the slide ending.\r\n      tick();\r\n\r\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\r\n    }));\r\n  });\r\n\r\n  describe('without label', () => {\r\n    let fixture: ComponentFixture<SlideToggleWithoutLabel>;\r\n    let testComponent: SlideToggleWithoutLabel;\r\n    let slideToggleElement: HTMLElement;\r\n    let slideToggleBarElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(SlideToggleWithoutLabel);\r\n\r\n      const slideToggleDebugEl = fixture.debugElement.query(By.directive(MatSlideToggle));\r\n\r\n      testComponent = fixture.componentInstance;\r\n      slideToggleElement = slideToggleDebugEl.nativeElement;\r\n      slideToggleBarElement = slideToggleDebugEl\r\n          .query(By.css('.mat-slide-toggle-bar')).nativeElement;\r\n    });\r\n\r\n    it('should remove margin for slide-toggle without a label', () => {\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleBarElement.classList)\r\n        .toContain('mat-slide-toggle-bar-no-side-margin');\r\n    });\r\n\r\n    it('should not remove margin if initial label is set through binding', fakeAsync(() => {\r\n      testComponent.label = 'Some content';\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleBarElement.classList)\r\n        .not.toContain('mat-slide-toggle-bar-no-side-margin');\r\n    }));\r\n\r\n    it('should re-add margin if label is added asynchronously', fakeAsync(() => {\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleBarElement.classList)\r\n        .toContain('mat-slide-toggle-bar-no-side-margin');\r\n\r\n      testComponent.label = 'Some content';\r\n      fixture.detectChanges();\r\n      flushMutationObserver();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList)\r\n        .not.toContain('mat-slide-toggle-bar-no-side-margin');\r\n    }));\r\n  });\r\n});\r\n\r\ndescribe('MatSlideToggle with forms', () => {\r\n\r\n  beforeEach(fakeAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatSlideToggleModule, FormsModule, ReactiveFormsModule],\r\n      declarations: [\r\n        SlideToggleWithForm,\r\n        SlideToggleWithModel,\r\n        SlideToggleWithFormControl,\r\n        SlideToggleWithModelAndChangeEvent,\r\n      ]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  describe('using ngModel', () => {\r\n    let fixture: ComponentFixture<SlideToggleWithModel>;\r\n\r\n    let testComponent: SlideToggleWithModel;\r\n    let slideToggle: MatSlideToggle;\r\n    let slideToggleElement: HTMLElement;\r\n    let slideToggleModel: NgModel;\r\n    let inputElement: HTMLInputElement;\r\n    let labelElement: HTMLLabelElement;\r\n\r\n    // This initialization is async() because it needs to wait for ngModel to set the initial value.\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = TestBed.createComponent(SlideToggleWithModel);\r\n      fixture.detectChanges();\r\n\r\n      const slideToggleDebug = fixture.debugElement.query(By.directive(MatSlideToggle));\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      slideToggle = slideToggleDebug.componentInstance;\r\n      slideToggleElement = slideToggleDebug.nativeElement;\r\n      slideToggleModel = slideToggleDebug.injector.get<NgModel>(NgModel);\r\n      inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\r\n      labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\r\n    }));\r\n\r\n    it('should be initially set to ng-pristine', () => {\r\n      expect(slideToggleElement.classList).toContain('ng-pristine');\r\n      expect(slideToggleElement.classList).not.toContain('ng-dirty');\r\n    });\r\n\r\n    it('should update the model programmatically', fakeAsync(() => {\r\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\r\n\r\n      testComponent.modelValue = true;\r\n      fixture.detectChanges();\r\n\r\n      // Flush the microtasks because the forms module updates the model state asynchronously.\r\n      flushMicrotasks();\r\n\r\n      fixture.detectChanges();\r\n      expect(slideToggleElement.classList).toContain('mat-checked');\r\n    }));\r\n\r\n    it('should have the correct control state initially and after interaction', fakeAsync(() => {\r\n      // The control should start off valid, pristine, and untouched.\r\n      expect(slideToggleModel.valid).toBe(true);\r\n      expect(slideToggleModel.pristine).toBe(true);\r\n      expect(slideToggleModel.touched).toBe(false);\r\n\r\n      // After changing the value from the view, the control should\r\n      // become dirty (not pristine), but remain untouched if focus is still there.\r\n      slideToggle.checked = true;\r\n\r\n      // Dispatch a change event on the input element to fake a user interaction that triggered\r\n      // the state change.\r\n      dispatchFakeEvent(inputElement, 'change');\r\n\r\n      expect(slideToggleModel.valid).toBe(true);\r\n      expect(slideToggleModel.pristine).toBe(false);\r\n      expect(slideToggleModel.touched).toBe(false);\r\n\r\n      // Once the input element loses focus, the control should remain dirty but should\r\n      // also turn touched.\r\n      dispatchFakeEvent(inputElement, 'blur');\r\n      fixture.detectChanges();\r\n      flushMicrotasks();\r\n\r\n      expect(slideToggleModel.valid).toBe(true);\r\n      expect(slideToggleModel.pristine).toBe(false);\r\n      expect(slideToggleModel.touched).toBe(true);\r\n    }));\r\n\r\n    it('should not throw an error when disabling while focused', fakeAsync(() => {\r\n      expect(() => {\r\n        // Focus the input element because after disabling, the `blur` event should automatically\r\n        // fire and not result in a changed after checked exception. Related: #12323\r\n        inputElement.focus();\r\n\r\n        // Flush the two nested timeouts from the FocusMonitor that are being created on `focus`.\r\n        flush();\r\n\r\n        slideToggle.disabled = true;\r\n        fixture.detectChanges();\r\n        flushMicrotasks();\r\n      }).not.toThrow();\r\n    }));\r\n\r\n    it('should not set the control to touched when changing the state programmatically',\r\n        fakeAsync(() => {\r\n\r\n      // The control should start off with being untouched.\r\n      expect(slideToggleModel.touched).toBe(false);\r\n\r\n      slideToggle.checked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleModel.touched).toBe(false);\r\n      expect(slideToggleElement.classList).toContain('mat-checked');\r\n\r\n      // Once the input element loses focus, the control should remain dirty but should\r\n      // also turn touched.\r\n      dispatchFakeEvent(inputElement, 'blur');\r\n      fixture.detectChanges();\r\n      flushMicrotasks();\r\n\r\n      expect(slideToggleModel.touched).toBe(true);\r\n      expect(slideToggleElement.classList).toContain('mat-checked');\r\n    }));\r\n\r\n    it('should not set the control to touched when changing the model', fakeAsync(() => {\r\n      // The control should start off with being untouched.\r\n      expect(slideToggleModel.touched).toBe(false);\r\n\r\n      testComponent.modelValue = true;\r\n      fixture.detectChanges();\r\n\r\n      // Flush the microtasks because the forms module updates the model state asynchronously.\r\n      flushMicrotasks();\r\n\r\n      // The checked property has been updated from the model and now the view needs\r\n      // to reflect the state change.\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleModel.touched).toBe(false);\r\n      expect(slideToggle.checked).toBe(true);\r\n      expect(slideToggleElement.classList).toContain('mat-checked');\r\n    }));\r\n\r\n    it('should update checked state on click if control is checked initially', fakeAsync(() => {\r\n      fixture = TestBed.createComponent(SlideToggleWithModel);\r\n      slideToggle = fixture.debugElement.query(By.directive(MatSlideToggle)).componentInstance;\r\n      labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\r\n\r\n      fixture.componentInstance.modelValue = true;\r\n      fixture.detectChanges();\r\n\r\n      // Flush the microtasks because the forms module updates the model state asynchronously.\r\n      flushMicrotasks();\r\n\r\n      // Now the new checked variable has been updated in the slide-toggle and the slide-toggle\r\n      // is marked for check because it still needs to update the underlying input.\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggle.checked)\r\n        .toBe(true, 'Expected slide-toggle to be checked initially');\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(slideToggle.checked)\r\n        .toBe(false, 'Expected slide-toggle to be no longer checked after label click.');\r\n    }));\r\n\r\n    it('should be pristine if initial value is set from NgModel', fakeAsync(() => {\r\n      fixture = TestBed.createComponent(SlideToggleWithModel);\r\n\r\n      fixture.componentInstance.modelValue = true;\r\n      fixture.detectChanges();\r\n\r\n      const debugElement = fixture.debugElement.query(By.directive(MatSlideToggle));\r\n      const modelInstance = debugElement.injector.get<NgModel>(NgModel);\r\n\r\n      // Flush the microtasks because the forms module updates the model state asynchronously.\r\n      flushMicrotasks();\r\n\r\n      expect(modelInstance.pristine).toBe(true);\r\n    }));\r\n\r\n    it('should set the model value when toggling via the `toggle` method', fakeAsync(() => {\r\n      expect(testComponent.modelValue).toBe(false);\r\n\r\n      fixture.debugElement.query(By.directive(MatSlideToggle)).componentInstance.toggle();\r\n      fixture.detectChanges();\r\n      flushMicrotasks();\r\n\r\n      fixture.detectChanges();\r\n      expect(testComponent.modelValue).toBe(true);\r\n    }));\r\n\r\n  });\r\n\r\n  describe('with a FormControl', () => {\r\n    let fixture: ComponentFixture<SlideToggleWithFormControl>;\r\n\r\n    let testComponent: SlideToggleWithFormControl;\r\n    let slideToggle: MatSlideToggle;\r\n    let inputElement: HTMLInputElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(SlideToggleWithFormControl);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      slideToggle = fixture.debugElement.query(By.directive(MatSlideToggle)).componentInstance;\r\n      inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\r\n    });\r\n\r\n    it('should toggle the disabled state', () => {\r\n      expect(slideToggle.disabled).toBe(false);\r\n      expect(inputElement.disabled).toBe(false);\r\n\r\n      testComponent.formControl.disable();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggle.disabled).toBe(true);\r\n      expect(inputElement.disabled).toBe(true);\r\n\r\n      testComponent.formControl.enable();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggle.disabled).toBe(false);\r\n      expect(inputElement.disabled).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('with form element', () => {\r\n    let fixture: ComponentFixture<any>;\r\n    let testComponent: SlideToggleWithForm;\r\n    let buttonElement: HTMLButtonElement;\r\n    let inputElement: HTMLInputElement;\r\n\r\n    // This initialization is async() because it needs to wait for ngModel to set the initial value.\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = TestBed.createComponent(SlideToggleWithForm);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      buttonElement = fixture.debugElement.query(By.css('button')).nativeElement;\r\n      inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\r\n    }));\r\n\r\n    it('should prevent the form from submit when being required', () => {\r\n      if (typeof (inputElement as any).reportValidity === 'undefined') {\r\n        // If the browser does not report the validity then the tests will break.\r\n        // e.g Safari 8 on Mobile.\r\n        return;\r\n      }\r\n\r\n      testComponent.isRequired = true;\r\n\r\n      fixture.detectChanges();\r\n\r\n      buttonElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.isSubmitted).toBe(false);\r\n\r\n      testComponent.isRequired = false;\r\n      fixture.detectChanges();\r\n\r\n      buttonElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(testComponent.isSubmitted).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('with model and change event', () => {\r\n    it('should report changes to NgModel before emitting change event', () => {\r\n      const fixture = TestBed.createComponent(SlideToggleWithModelAndChangeEvent);\r\n      fixture.detectChanges();\r\n\r\n      const labelEl = fixture.debugElement.query(By.css('label')).nativeElement;\r\n\r\n      spyOn(fixture.componentInstance, 'onChange').and.callFake(() => {\r\n        expect(fixture.componentInstance.checked)\r\n          .toBe(true, 'Expected the model value to have changed before the change event fired.');\r\n      });\r\n\r\n      labelEl.click();\r\n\r\n      expect(fixture.componentInstance.onChange).toHaveBeenCalledTimes(1);\r\n    });\r\n  });\r\n});\r\n\r\n@Component({\r\n  template: `\r\n    <mat-slide-toggle [dir]=\"direction\" [required]=\"isRequired\"\r\n                     [disabled]=\"isDisabled\"\r\n                     [color]=\"slideColor\"\r\n                     [id]=\"slideId\"\r\n                     [checked]=\"slideChecked\"\r\n                     [name]=\"slideName\"\r\n                     [aria-label]=\"slideLabel\"\r\n                     [aria-labelledby]=\"slideLabelledBy\"\r\n                     [tabIndex]=\"slideTabindex\"\r\n                     [labelPosition]=\"labelPosition\"\r\n                     [disableRipple]=\"disableRipple\"\r\n                     (toggleChange)=\"onSlideToggleChange()\"\r\n                     (dragChange)=\"onSlideDragChange()\"\r\n                     (change)=\"onSlideChange($event)\"\r\n                     (click)=\"onSlideClick($event)\">\r\n      <span>Test Slide Toggle</span>\r\n    </mat-slide-toggle>`,\r\n})\r\nclass SlideToggleBasic {\r\n  isDisabled: boolean = false;\r\n  isRequired: boolean = false;\r\n  disableRipple: boolean = false;\r\n  slideChecked: boolean = false;\r\n  slideColor: string;\r\n  slideId: string | null;\r\n  slideName: string | null;\r\n  slideLabel: string | null;\r\n  slideLabelledBy: string | null;\r\n  slideTabindex: number;\r\n  lastEvent: MatSlideToggleChange;\r\n  labelPosition: string;\r\n  toggleTriggered: number = 0;\r\n  dragTriggered: number = 0;\r\n  direction: Direction = 'ltr';\r\n\r\n  onSlideClick: (event?: Event) => void = () => {};\r\n  onSlideChange = (event: MatSlideToggleChange) => this.lastEvent = event;\r\n  onSlideToggleChange = () => this.toggleTriggered++;\r\n  onSlideDragChange = () => this.dragTriggered++;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <form ngNativeValidate (ngSubmit)=\"isSubmitted = true\">\r\n      <mat-slide-toggle name=\"slide\" ngModel [required]=\"isRequired\">Required</mat-slide-toggle>\r\n      <button type=\"submit\"></button>\r\n    </form>`\r\n})\r\nclass SlideToggleWithForm {\r\n  isSubmitted: boolean = false;\r\n  isRequired: boolean = false;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slide-toggle [(ngModel)]=\"modelValue\"></mat-slide-toggle>`\r\n})\r\nclass SlideToggleWithModel {\r\n  modelValue = false;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-slide-toggle [formControl]=\"formControl\">\r\n      <span>Test Slide Toggle</span>\r\n    </mat-slide-toggle>`,\r\n})\r\nclass SlideToggleWithFormControl {\r\n  formControl = new FormControl();\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slide-toggle tabindex=\"5\"></mat-slide-toggle>`\r\n})\r\nclass SlideToggleWithTabindexAttr {}\r\n\r\n@Component({\r\n  template: `<mat-slide-toggle>{{label}}</mat-slide-toggle>`\r\n})\r\nclass SlideToggleWithoutLabel {\r\n  label: string;\r\n}\r\n\r\n@Component({\r\n  template: `<mat-slide-toggle [(ngModel)]=\"checked\" (change)=\"onChange()\"></mat-slide-toggle>`\r\n})\r\nclass SlideToggleWithModelAndChangeEvent {\r\n  checked: boolean;\r\n  onChange: () => void = () => {};\r\n}\r\n"]}