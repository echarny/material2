{"version":3,"file":"badge.spec.js","sourceRoot":"","sources":["../../../../src/lib/badge/badge.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {ComponentFixture, TestBed, fakeAsync} from '@angular/core/testing';\r\nimport {Component, DebugElement} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MatBadge, MatBadgeModule} from './index';\r\nimport {ThemePalette} from '@angular/material/core';\r\n\r\ndescribe('MatBadge', () => {\r\n  let fixture: ComponentFixture<any>;\r\n  let testComponent: BadgeTestApp;\r\n  let badgeNativeElement: HTMLElement;\r\n  let badgeDebugElement: DebugElement;\r\n\r\n  beforeEach(fakeAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatBadgeModule],\r\n      declarations: [BadgeTestApp],\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(BadgeTestApp);\r\n    testComponent = fixture.debugElement.componentInstance;\r\n    fixture.detectChanges();\r\n\r\n    badgeDebugElement = fixture.debugElement.query(By.directive(MatBadge));\r\n    badgeNativeElement = badgeDebugElement.nativeElement;\r\n  }));\r\n\r\n  it('should update the badge based on attribute', () => {\r\n    let badgeContentDebugElement = badgeNativeElement.querySelector('.mat-badge-content')!;\r\n\r\n    expect(badgeContentDebugElement.textContent).toContain('1');\r\n\r\n    testComponent.badgeContent = '22';\r\n    fixture.detectChanges();\r\n\r\n    badgeContentDebugElement = badgeNativeElement.querySelector('.mat-badge-content')!;\r\n    expect(badgeContentDebugElement.textContent).toContain('22');\r\n  });\r\n\r\n  it('should apply class based on color attribute', () => {\r\n    testComponent.badgeColor = 'primary';\r\n    fixture.detectChanges();\r\n    expect(badgeNativeElement.classList.contains('mat-badge-primary')).toBe(true);\r\n\r\n    testComponent.badgeColor = 'accent';\r\n    fixture.detectChanges();\r\n    expect(badgeNativeElement.classList.contains('mat-badge-accent')).toBe(true);\r\n\r\n    testComponent.badgeColor = 'warn';\r\n    fixture.detectChanges();\r\n    expect(badgeNativeElement.classList.contains('mat-badge-warn')).toBe(true);\r\n\r\n    testComponent.badgeColor = undefined;\r\n    fixture.detectChanges();\r\n\r\n    expect(badgeNativeElement.classList).not.toContain('mat-badge-accent');\r\n  });\r\n\r\n  it('should update the badge position on direction change', () => {\r\n    expect(badgeNativeElement.classList.contains('mat-badge-above')).toBe(true);\r\n    expect(badgeNativeElement.classList.contains('mat-badge-after')).toBe(true);\r\n\r\n    testComponent.badgeDirection = 'below before';\r\n    fixture.detectChanges();\r\n\r\n    expect(badgeNativeElement.classList.contains('mat-badge-below')).toBe(true);\r\n    expect(badgeNativeElement.classList.contains('mat-badge-before')).toBe(true);\r\n  });\r\n\r\n  it('should change visibility to hidden', () => {\r\n    expect(badgeNativeElement.classList.contains('mat-badge-hidden')).toBe(false);\r\n\r\n    testComponent.badgeHidden = true;\r\n    fixture.detectChanges();\r\n\r\n    expect(badgeNativeElement.classList.contains('mat-badge-hidden')).toBe(true);\r\n  });\r\n\r\n  it('should change badge sizes', () => {\r\n    expect(badgeNativeElement.classList.contains('mat-badge-medium')).toBe(true);\r\n\r\n    testComponent.badgeSize = 'small';\r\n    fixture.detectChanges();\r\n\r\n    expect(badgeNativeElement.classList.contains('mat-badge-small')).toBe(true);\r\n\r\n    testComponent.badgeSize = 'large';\r\n    fixture.detectChanges();\r\n\r\n    expect(badgeNativeElement.classList.contains('mat-badge-large')).toBe(true);\r\n  });\r\n\r\n  it('should change badge overlap', () => {\r\n    expect(badgeNativeElement.classList.contains('mat-badge-overlap')).toBe(false);\r\n\r\n    testComponent.badgeOverlap = true;\r\n    fixture.detectChanges();\r\n\r\n    expect(badgeNativeElement.classList.contains('mat-badge-overlap')).toBe(true);\r\n  });\r\n\r\n  it('should toggle `aria-describedby` depending on whether the badge has a description', () => {\r\n    const badgeContent = badgeNativeElement.querySelector('.mat-badge-content')!;\r\n\r\n    expect(badgeContent.getAttribute('aria-describedby')).toBeFalsy();\r\n\r\n    testComponent.badgeDescription = 'Describing a badge';\r\n    fixture.detectChanges();\r\n\r\n    expect(badgeContent.getAttribute('aria-describedby')).toBeTruthy();\r\n\r\n    testComponent.badgeDescription = '';\r\n    fixture.detectChanges();\r\n\r\n    expect(badgeContent.getAttribute('aria-describedby')).toBeFalsy();\r\n  });\r\n\r\n  it('should toggle visibility based on whether the badge has content', () => {\r\n    const classList = badgeNativeElement.classList;\r\n\r\n    expect(classList.contains('mat-badge-hidden')).toBe(false);\r\n\r\n    testComponent.badgeContent = '';\r\n    fixture.detectChanges();\r\n\r\n    expect(classList.contains('mat-badge-hidden')).toBe(true);\r\n\r\n    testComponent.badgeContent = 'hello';\r\n    fixture.detectChanges();\r\n\r\n    expect(classList.contains('mat-badge-hidden')).toBe(false);\r\n\r\n    testComponent.badgeContent = ' ';\r\n    fixture.detectChanges();\r\n\r\n    expect(classList.contains('mat-badge-hidden')).toBe(true);\r\n\r\n    testComponent.badgeContent = 0;\r\n    fixture.detectChanges();\r\n\r\n    expect(classList.contains('mat-badge-hidden')).toBe(false);\r\n  });\r\n\r\n});\r\n\r\n/** Test component that contains a MatBadge. */\r\n@Component({\r\n  template: `\r\n    <span [matBadge]=\"badgeContent\"\r\n          [matBadgeColor]=\"badgeColor\"\r\n          [matBadgePosition]=\"badgeDirection\"\r\n          [matBadgeHidden]=\"badgeHidden\"\r\n          [matBadgeSize]=\"badgeSize\"\r\n          [matBadgeOverlap]=\"badgeOverlap\"\r\n          [matBadgeDescription]=\"badgeDescription\">\r\n      home\r\n    </span>\r\n  `\r\n})\r\nclass BadgeTestApp {\r\n  badgeColor: ThemePalette;\r\n  badgeContent: string | number = '1';\r\n  badgeDirection = 'above after';\r\n  badgeHidden = false;\r\n  badgeSize = 'medium';\r\n  badgeOverlap = false;\r\n  badgeDescription: string;\r\n}\r\n"]}