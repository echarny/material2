{"version":3,"file":"progress-bar.spec.js","sourceRoot":"","sources":["../../../../src/lib/progress-bar/progress-bar.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {TestBed, async, ComponentFixture} from '@angular/core/testing';\r\nimport {Component} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {Location} from '@angular/common';\r\nimport {MatProgressBarModule} from './index';\r\n\r\n\r\ndescribe('MatProgressBar', () => {\r\n  let fakePath = '/fake-path';\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatProgressBarModule],\r\n      declarations: [\r\n        BasicProgressBar,\r\n        BufferProgressBar,\r\n      ],\r\n      providers: [{\r\n        provide: Location,\r\n        useValue: {path: () => fakePath}\r\n      }]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n\r\n  describe('basic progress-bar', () => {\r\n    let fixture: ComponentFixture<BasicProgressBar>;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(BasicProgressBar);\r\n      fixture.detectChanges();\r\n    });\r\n\r\n    it('should apply a mode of \"determinate\" if no mode is provided.', () => {\r\n      let progressElement = fixture.debugElement.query(By.css('mat-progress-bar'));\r\n      expect(progressElement.componentInstance.mode).toBe('determinate');\r\n    });\r\n\r\n    it('should define default values for value and bufferValue attributes', () => {\r\n      let progressElement = fixture.debugElement.query(By.css('mat-progress-bar'));\r\n      expect(progressElement.componentInstance.value).toBe(0);\r\n      expect(progressElement.componentInstance.bufferValue).toBe(0);\r\n    });\r\n\r\n    it('should clamp value and bufferValue between 0 and 100', () => {\r\n      let progressElement = fixture.debugElement.query(By.css('mat-progress-bar'));\r\n      let progressComponent = progressElement.componentInstance;\r\n\r\n      progressComponent.value = 50;\r\n      expect(progressComponent.value).toBe(50);\r\n\r\n      progressComponent.value = 999;\r\n      expect(progressComponent.value).toBe(100);\r\n\r\n      progressComponent.value = -10;\r\n      expect(progressComponent.value).toBe(0);\r\n\r\n      progressComponent.bufferValue = -29;\r\n      expect(progressComponent.bufferValue).toBe(0);\r\n\r\n      progressComponent.bufferValue = 9;\r\n      expect(progressComponent.bufferValue).toBe(9);\r\n\r\n      progressComponent.bufferValue = 1320;\r\n      expect(progressComponent.bufferValue).toBe(100);\r\n    });\r\n\r\n    it('should return the transform attribute for bufferValue and mode', () => {\r\n      let progressElement = fixture.debugElement.query(By.css('mat-progress-bar'));\r\n      let progressComponent = progressElement.componentInstance;\r\n\r\n      expect(progressComponent._primaryTransform()).toEqual({transform: 'scaleX(0)'});\r\n      expect(progressComponent._bufferTransform()).toBe(undefined);\r\n\r\n      progressComponent.value = 40;\r\n      expect(progressComponent._primaryTransform()).toEqual({transform: 'scaleX(0.4)'});\r\n      expect(progressComponent._bufferTransform()).toBe(undefined);\r\n\r\n      progressComponent.value = 35;\r\n      progressComponent.bufferValue = 55;\r\n      expect(progressComponent._primaryTransform()).toEqual({transform: 'scaleX(0.35)'});\r\n      expect(progressComponent._bufferTransform()).toBe(undefined);\r\n\r\n      progressComponent.mode = 'buffer';\r\n      expect(progressComponent._primaryTransform()).toEqual({transform: 'scaleX(0.35)'});\r\n      expect(progressComponent._bufferTransform()).toEqual({transform: 'scaleX(0.55)'});\r\n\r\n\r\n      progressComponent.value = 60;\r\n      progressComponent.bufferValue = 60;\r\n      expect(progressComponent._primaryTransform()).toEqual({transform: 'scaleX(0.6)'});\r\n      expect(progressComponent._bufferTransform()).toEqual({transform: 'scaleX(0.6)'});\r\n    });\r\n\r\n    it('should prefix SVG references with the current path', () => {\r\n      const rect = fixture.debugElement.query(By.css('rect')).nativeElement;\r\n      expect(rect.getAttribute('fill')).toMatch(/^url\\(['\"]?\\/fake-path#.*['\"]?\\)$/);\r\n    });\r\n\r\n    it('should not be able to tab into the underlying SVG element', () => {\r\n      const svg = fixture.debugElement.query(By.css('svg')).nativeElement;\r\n      expect(svg.getAttribute('focusable')).toBe('false');\r\n    });\r\n  });\r\n\r\n  describe('buffer progress-bar', () => {\r\n    let fixture: ComponentFixture<BufferProgressBar>;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(BufferProgressBar);\r\n      fixture.detectChanges();\r\n    });\r\n\r\n    it('should not modify the mode if a valid mode is provided.', () => {\r\n      let progressElement = fixture.debugElement.query(By.css('mat-progress-bar'));\r\n      expect(progressElement.componentInstance.mode).toBe('buffer');\r\n    });\r\n  });\r\n});\r\n\r\n\r\n@Component({template: '<mat-progress-bar></mat-progress-bar>'})\r\nclass BasicProgressBar { }\r\n\r\n@Component({template: '<mat-progress-bar mode=\"buffer\"></mat-progress-bar>'})\r\nclass BufferProgressBar { }\r\n"]}