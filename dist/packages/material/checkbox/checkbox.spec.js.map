{"version":3,"file":"checkbox.spec.js","sourceRoot":"","sources":["../../../../src/lib/checkbox/checkbox.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  ComponentFixture,\r\n  fakeAsync,\r\n  TestBed,\r\n  tick,\r\n  flush,\r\n  flushMicrotasks,\r\n} from '@angular/core/testing';\r\nimport {FormControl, FormsModule, NgModel, ReactiveFormsModule} from '@angular/forms';\r\nimport {Component, DebugElement, ViewChild, Type} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {dispatchFakeEvent} from '@angular/cdk/testing';\r\nimport {MatCheckbox, MatCheckboxChange, MatCheckboxModule} from './index';\r\nimport {defaultRippleAnimationConfig} from '@angular/material/core';\r\nimport {MAT_CHECKBOX_CLICK_ACTION} from './checkbox-config';\r\nimport {MutationObserverFactory} from '@angular/cdk/observers';\r\n\r\n\r\ndescribe('MatCheckbox', () => {\r\n  let fixture: ComponentFixture<any>;\r\n\r\n  function createComponent<T>(componentType: Type<T>): ComponentFixture<T> {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatCheckboxModule, FormsModule, ReactiveFormsModule],\r\n      declarations: [componentType],\r\n    }).compileComponents();\r\n\r\n    return TestBed.createComponent<T>(componentType);\r\n  }\r\n\r\n  describe('basic behaviors', () => {\r\n    let checkboxDebugElement: DebugElement;\r\n    let checkboxNativeElement: HTMLElement;\r\n    let checkboxInstance: MatCheckbox;\r\n    let testComponent: SingleCheckbox;\r\n    let inputElement: HTMLInputElement;\r\n    let labelElement: HTMLLabelElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SingleCheckbox);\r\n      fixture.detectChanges();\r\n\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      checkboxInstance = checkboxDebugElement.componentInstance;\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\r\n      labelElement = <HTMLLabelElement>checkboxNativeElement.querySelector('label');\r\n    });\r\n\r\n    it('should add and remove the checked state', () => {\r\n      expect(checkboxInstance.checked).toBe(false);\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\r\n      expect(inputElement.checked).toBe(false);\r\n\r\n      testComponent.isChecked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(true);\r\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\r\n      expect(inputElement.checked).toBe(true);\r\n\r\n      testComponent.isChecked = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(false);\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\r\n      expect(inputElement.checked).toBe(false);\r\n    });\r\n\r\n    it('should expose the ripple instance', () => {\r\n      expect(checkboxInstance.ripple).toBeTruthy();\r\n    });\r\n\r\n    it('should add and remove indeterminate state', () => {\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(inputElement.indeterminate).toBe(false);\r\n      expect(inputElement.getAttribute('aria-checked'))\r\n          .toBe('false', 'Expect aria-checked to be false');\r\n\r\n      testComponent.isIndeterminate = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(inputElement.indeterminate).toBe(true);\r\n      expect(inputElement.getAttribute('aria-checked'))\r\n          .toBe('mixed', 'Expect aria checked to be mixed for indeterminate checkbox');\r\n\r\n      testComponent.isIndeterminate = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-indeterminate');\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(inputElement.indeterminate).toBe(false);\r\n    });\r\n\r\n    it('should set indeterminate to false when input clicked', fakeAsync(() => {\r\n      testComponent.isIndeterminate = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.indeterminate).toBe(true);\r\n      expect(inputElement.indeterminate).toBe(true);\r\n      expect(testComponent.isIndeterminate).toBe(true);\r\n\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      // Flush the microtasks because the forms module updates the model state asynchronously.\r\n      flush();\r\n\r\n      // The checked property has been updated from the model and now the view needs\r\n      // to reflect the state change.\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(true);\r\n      expect(inputElement.indeterminate).toBe(false);\r\n      expect(inputElement.checked).toBe(true);\r\n      expect(testComponent.isIndeterminate).toBe(false);\r\n\r\n      testComponent.isIndeterminate = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.indeterminate).toBe(true);\r\n      expect(inputElement.indeterminate).toBe(true);\r\n      expect(inputElement.checked).toBe(true);\r\n      expect(testComponent.isIndeterminate).toBe(true);\r\n      expect(inputElement.getAttribute('aria-checked'))\r\n          .toBe('true', 'Expect aria checked to be true');\r\n\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      // Flush the microtasks because the forms module updates the model state asynchronously.\r\n      flush();\r\n\r\n      // The checked property has been updated from the model and now the view needs\r\n      // to reflect the state change.\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(false);\r\n      expect(inputElement.indeterminate).toBe(false);\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(testComponent.isIndeterminate).toBe(false);\r\n    }));\r\n\r\n    it('should not set indeterminate to false when checked is set programmatically', () => {\r\n      testComponent.isIndeterminate = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.indeterminate).toBe(true);\r\n      expect(inputElement.indeterminate).toBe(true);\r\n      expect(testComponent.isIndeterminate).toBe(true);\r\n\r\n      testComponent.isChecked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(true);\r\n      expect(inputElement.indeterminate).toBe(true);\r\n      expect(inputElement.checked).toBe(true);\r\n      expect(testComponent.isIndeterminate).toBe(true);\r\n\r\n      testComponent.isChecked = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(false);\r\n      expect(inputElement.indeterminate).toBe(true);\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(testComponent.isIndeterminate).toBe(true);\r\n    });\r\n\r\n    it('should change native element checked when check programmatically', () => {\r\n      expect(inputElement.checked).toBe(false);\r\n\r\n      checkboxInstance.checked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.checked).toBe(true);\r\n    });\r\n\r\n    it('should toggle checked state on click', () => {\r\n      expect(checkboxInstance.checked).toBe(false);\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(true);\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(false);\r\n    });\r\n\r\n    it('should change from indeterminate to checked on click', fakeAsync(() => {\r\n      testComponent.isChecked = false;\r\n      testComponent.isIndeterminate = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(false);\r\n      expect(checkboxInstance.indeterminate).toBe(true);\r\n\r\n      checkboxInstance._onInputClick(<Event>{stopPropagation: () => {}});\r\n\r\n      // Flush the microtasks because the indeterminate state will be updated in the next tick.\r\n      flush();\r\n\r\n      expect(checkboxInstance.checked).toBe(true);\r\n      expect(checkboxInstance.indeterminate).toBe(false);\r\n\r\n      checkboxInstance._onInputClick(<Event>{stopPropagation: () => {}});\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(false);\r\n      expect(checkboxInstance.indeterminate).toBe(false);\r\n\r\n      flush();\r\n    }));\r\n\r\n    it('should add and remove disabled state', () => {\r\n      expect(checkboxInstance.disabled).toBe(false);\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-disabled');\r\n      expect(inputElement.tabIndex).toBe(0);\r\n      expect(inputElement.disabled).toBe(false);\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.disabled).toBe(true);\r\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-disabled');\r\n      expect(inputElement.disabled).toBe(true);\r\n\r\n      testComponent.isDisabled = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.disabled).toBe(false);\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-disabled');\r\n      expect(inputElement.tabIndex).toBe(0);\r\n      expect(inputElement.disabled).toBe(false);\r\n    });\r\n\r\n    it('should not toggle `checked` state upon interation while disabled', () => {\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      checkboxNativeElement.click();\r\n      expect(checkboxInstance.checked).toBe(false);\r\n    });\r\n\r\n    it('should overwrite indeterminate state when clicked', fakeAsync(() => {\r\n      testComponent.isIndeterminate = true;\r\n      fixture.detectChanges();\r\n\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      // Flush the microtasks because the indeterminate state will be updated in the next tick.\r\n      flush();\r\n\r\n      expect(checkboxInstance.checked).toBe(true);\r\n      expect(checkboxInstance.indeterminate).toBe(false);\r\n    }));\r\n\r\n    it('should preserve the user-provided id', () => {\r\n      expect(checkboxNativeElement.id).toBe('simple-check');\r\n      expect(inputElement.id).toBe('simple-check-input');\r\n    });\r\n\r\n    it('should generate a unique id for the checkbox input if no id is set', () => {\r\n      testComponent.checkboxId = null;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.inputId).toMatch(/mat-checkbox-\\d+/);\r\n      expect(inputElement.id).toBe(checkboxInstance.inputId);\r\n    });\r\n\r\n    it('should project the checkbox content into the label element', () => {\r\n      let label = <HTMLLabelElement>checkboxNativeElement.querySelector('.mat-checkbox-label');\r\n      expect(label.textContent!.trim()).toBe('Simple checkbox');\r\n    });\r\n\r\n    it('should make the host element a tab stop', () => {\r\n      expect(inputElement.tabIndex).toBe(0);\r\n    });\r\n\r\n    it('should add a css class to position the label before the checkbox', () => {\r\n      testComponent.labelPos = 'before';\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-label-before');\r\n    });\r\n\r\n    it('should not trigger the click event multiple times', () => {\r\n      // By default, when clicking on a label element, a generated click will be dispatched\r\n      // on the associated input element.\r\n      // Since we're using a label element and a visual hidden input, this behavior can led\r\n      // to an issue, where the click events on the checkbox are getting executed twice.\r\n\r\n      spyOn(testComponent, 'onCheckboxClick');\r\n\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\r\n      expect(inputElement.checked).toBe(true);\r\n\r\n      expect(testComponent.onCheckboxClick).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should trigger a change event when the native input does', fakeAsync(() => {\r\n      spyOn(testComponent, 'onCheckboxChange');\r\n\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.checked).toBe(true);\r\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\r\n\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      // The change event shouldn't fire, because the value change was not caused\r\n      // by any interaction.\r\n      expect(testComponent.onCheckboxChange).toHaveBeenCalledTimes(1);\r\n    }));\r\n\r\n    it('should not trigger the change event by changing the native value', fakeAsync(() => {\r\n      spyOn(testComponent, 'onCheckboxChange');\r\n\r\n      expect(inputElement.checked).toBe(false);\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\r\n\r\n      testComponent.isChecked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.checked).toBe(true);\r\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\r\n\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      // The change event shouldn't fire, because the value change was not caused\r\n      // by any interaction.\r\n      expect(testComponent.onCheckboxChange).not.toHaveBeenCalled();\r\n    }));\r\n\r\n    it('should forward the required attribute', () => {\r\n      testComponent.isRequired = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.required).toBe(true);\r\n\r\n      testComponent.isRequired = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.required).toBe(false);\r\n    });\r\n\r\n    it('should focus on underlying input element when focus() is called', () => {\r\n      expect(document.activeElement).not.toBe(inputElement);\r\n\r\n      checkboxInstance.focus();\r\n      fixture.detectChanges();\r\n\r\n      expect(document.activeElement).toBe(inputElement);\r\n    });\r\n\r\n    it('should forward the value to input element', () => {\r\n      testComponent.checkboxValue = 'basic_checkbox';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.value).toBe('basic_checkbox');\r\n    });\r\n\r\n    it('should show a ripple when focused by a keyboard action', fakeAsync(() => {\r\n      expect(fixture.nativeElement.querySelectorAll('.mat-ripple-element').length)\r\n          .toBe(0, 'Expected no ripples on load.');\r\n\r\n      dispatchFakeEvent(inputElement, 'keydown');\r\n      dispatchFakeEvent(inputElement, 'focus');\r\n\r\n      tick(defaultRippleAnimationConfig.enterDuration);\r\n\r\n      expect(fixture.nativeElement.querySelectorAll('.mat-ripple-element').length)\r\n          .toBe(1, 'Expected ripple after element is focused.');\r\n\r\n      dispatchFakeEvent(checkboxInstance._inputElement.nativeElement, 'blur');\r\n      tick(defaultRippleAnimationConfig.exitDuration);\r\n\r\n      expect(fixture.nativeElement.querySelectorAll('.mat-ripple-element').length)\r\n          .toBe(0, 'Expected no ripple after element is blurred.');\r\n    }));\r\n\r\n    it('should remove the SVG checkmark from the tab order', () => {\r\n      expect(checkboxNativeElement.querySelector('svg')!.getAttribute('focusable')).toBe('false');\r\n    });\r\n\r\n    describe('ripple elements', () => {\r\n\r\n      it('should show ripples on label mousedown', () => {\r\n        expect(checkboxNativeElement.querySelector('.mat-ripple-element')).toBeFalsy();\r\n\r\n        dispatchFakeEvent(labelElement, 'mousedown');\r\n        dispatchFakeEvent(labelElement, 'mouseup');\r\n\r\n        expect(checkboxNativeElement.querySelectorAll('.mat-ripple-element').length).toBe(1);\r\n      });\r\n\r\n      it('should not show ripples when disabled', () => {\r\n        testComponent.isDisabled = true;\r\n        fixture.detectChanges();\r\n\r\n        dispatchFakeEvent(labelElement, 'mousedown');\r\n        dispatchFakeEvent(labelElement, 'mouseup');\r\n\r\n        expect(checkboxNativeElement.querySelectorAll('.mat-ripple-element').length).toBe(0);\r\n\r\n        testComponent.isDisabled = false;\r\n        fixture.detectChanges();\r\n\r\n        dispatchFakeEvent(labelElement, 'mousedown');\r\n        dispatchFakeEvent(labelElement, 'mouseup');\r\n\r\n        expect(checkboxNativeElement.querySelectorAll('.mat-ripple-element').length).toBe(1);\r\n      });\r\n\r\n      it('should remove ripple if matRippleDisabled input is set', () => {\r\n        testComponent.disableRipple = true;\r\n        fixture.detectChanges();\r\n\r\n        dispatchFakeEvent(labelElement, 'mousedown');\r\n        dispatchFakeEvent(labelElement, 'mouseup');\r\n\r\n        expect(checkboxNativeElement.querySelectorAll('.mat-ripple-element').length).toBe(0);\r\n\r\n        testComponent.disableRipple = false;\r\n        fixture.detectChanges();\r\n\r\n        dispatchFakeEvent(labelElement, 'mousedown');\r\n        dispatchFakeEvent(labelElement, 'mouseup');\r\n\r\n        expect(checkboxNativeElement.querySelectorAll('.mat-ripple-element').length).toBe(1);\r\n      });\r\n    });\r\n\r\n    describe('color behaviour', () => {\r\n      it('should apply class based on color attribute', () => {\r\n        testComponent.checkboxColor = 'primary';\r\n        fixture.detectChanges();\r\n        expect(checkboxNativeElement.classList.contains('mat-primary')).toBe(true);\r\n\r\n        testComponent.checkboxColor = 'accent';\r\n        fixture.detectChanges();\r\n        expect(checkboxNativeElement.classList.contains('mat-accent')).toBe(true);\r\n      });\r\n\r\n      it('should should not clear previous defined classes', () => {\r\n        checkboxNativeElement.classList.add('custom-class');\r\n\r\n        testComponent.checkboxColor = 'primary';\r\n        fixture.detectChanges();\r\n\r\n        expect(checkboxNativeElement.classList.contains('mat-primary')).toBe(true);\r\n        expect(checkboxNativeElement.classList.contains('custom-class')).toBe(true);\r\n\r\n        testComponent.checkboxColor = 'accent';\r\n        fixture.detectChanges();\r\n\r\n        expect(checkboxNativeElement.classList.contains('mat-primary')).toBe(false);\r\n        expect(checkboxNativeElement.classList.contains('mat-accent')).toBe(true);\r\n        expect(checkboxNativeElement.classList.contains('custom-class')).toBe(true);\r\n\r\n      });\r\n    });\r\n\r\n    describe('state transition css classes', () => {\r\n      it('should transition unchecked -> checked -> unchecked', () => {\r\n        inputElement.click();\r\n        fixture.detectChanges();\r\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-anim-unchecked-checked');\r\n\r\n        inputElement.click();\r\n        fixture.detectChanges();\r\n        expect(checkboxNativeElement.classList)\r\n            .not.toContain('mat-checkbox-anim-unchecked-checked');\r\n        expect(checkboxNativeElement.classList)\r\n            .toContain('mat-checkbox-anim-checked-unchecked');\r\n      });\r\n\r\n      it('should transition unchecked -> indeterminate -> unchecked', () => {\r\n        testComponent.isIndeterminate = true;\r\n        fixture.detectChanges();\r\n\r\n        expect(checkboxNativeElement.classList)\r\n            .toContain('mat-checkbox-anim-unchecked-indeterminate');\r\n\r\n        testComponent.isIndeterminate = false;\r\n        fixture.detectChanges();\r\n\r\n        expect(checkboxNativeElement.classList)\r\n            .not.toContain('mat-checkbox-anim-unchecked-indeterminate');\r\n        expect(checkboxNativeElement.classList)\r\n            .toContain('mat-checkbox-anim-indeterminate-unchecked');\r\n      });\r\n\r\n      it('should transition indeterminate -> checked', () => {\r\n        testComponent.isIndeterminate = true;\r\n        fixture.detectChanges();\r\n\r\n        inputElement.click();\r\n        fixture.detectChanges();\r\n\r\n        expect(checkboxNativeElement.classList).not.toContain(\r\n            'mat-checkbox-anim-unchecked-indeterminate');\r\n        expect(checkboxNativeElement.classList)\r\n            .toContain('mat-checkbox-anim-indeterminate-checked');\r\n      });\r\n\r\n      it('should not apply transition classes when there is no state change', () => {\r\n        testComponent.isChecked = checkboxInstance.checked;\r\n        fixture.detectChanges();\r\n        expect(checkboxNativeElement).not.toMatch(/^mat\\-checkbox\\-anim/g);\r\n\r\n        testComponent.isIndeterminate = checkboxInstance.indeterminate;\r\n        expect(checkboxNativeElement).not.toMatch(/^mat\\-checkbox\\-anim/g);\r\n      });\r\n\r\n      it('should not initially have any transition classes', () => {\r\n        expect(checkboxNativeElement).not.toMatch(/^mat\\-checkbox\\-anim/g);\r\n      });\r\n\r\n      it('should not have transition classes when animation ends', fakeAsync(() => {\r\n        testComponent.isIndeterminate = true;\r\n        fixture.detectChanges();\r\n\r\n        expect(checkboxNativeElement.classList)\r\n          .toContain('mat-checkbox-anim-unchecked-indeterminate');\r\n\r\n        flush();\r\n\r\n        expect(checkboxNativeElement.classList)\r\n          .not.toContain('mat-checkbox-anim-unchecked-indeterminate');\r\n      }));\r\n    });\r\n\r\n    describe(`when MAT_CHECKBOX_CLICK_ACTION is 'check'`, () => {\r\n      beforeEach(() => {\r\n        TestBed.resetTestingModule();\r\n        TestBed.configureTestingModule({\r\n          imports: [MatCheckboxModule, FormsModule, ReactiveFormsModule],\r\n          declarations: [SingleCheckbox],\r\n          providers: [\r\n            {provide: MAT_CHECKBOX_CLICK_ACTION, useValue: 'check'}\r\n          ]\r\n        });\r\n\r\n        fixture = createComponent(SingleCheckbox);\r\n        fixture.detectChanges();\r\n\r\n        checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n        checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n        checkboxInstance = checkboxDebugElement.componentInstance;\r\n        testComponent = fixture.debugElement.componentInstance;\r\n\r\n        inputElement = checkboxNativeElement.querySelector('input') as HTMLInputElement;\r\n        labelElement = checkboxNativeElement.querySelector('label') as HTMLLabelElement;\r\n      });\r\n\r\n      it('should not set `indeterminate` to false on click if check is set', fakeAsync(() => {\r\n        testComponent.isIndeterminate = true;\r\n        inputElement.click();\r\n\r\n        fixture.detectChanges();\r\n        flush();\r\n        fixture.detectChanges();\r\n        expect(inputElement.checked).toBe(true);\r\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\r\n        expect(inputElement.indeterminate).toBe(true);\r\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\r\n      }));\r\n    });\r\n\r\n    describe(`when MAT_CHECKBOX_CLICK_ACTION is 'noop'`, () => {\r\n      beforeEach(() => {\r\n        TestBed.resetTestingModule();\r\n        TestBed.configureTestingModule({\r\n          imports: [MatCheckboxModule, FormsModule, ReactiveFormsModule],\r\n          declarations: [SingleCheckbox],\r\n          providers: [\r\n            {provide: MAT_CHECKBOX_CLICK_ACTION, useValue: 'noop'}\r\n          ]\r\n        });\r\n\r\n        fixture = createComponent(SingleCheckbox);\r\n        fixture.detectChanges();\r\n\r\n        checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n        checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n        checkboxInstance = checkboxDebugElement.componentInstance;\r\n        testComponent = fixture.debugElement.componentInstance;\r\n        inputElement = checkboxNativeElement.querySelector('input') as HTMLInputElement;\r\n        labelElement = checkboxNativeElement.querySelector('label') as HTMLLabelElement;\r\n      });\r\n\r\n      it('should not change `indeterminate` on click if noop is set', fakeAsync(() => {\r\n        testComponent.isIndeterminate = true;\r\n        inputElement.click();\r\n\r\n        fixture.detectChanges();\r\n        flush();\r\n        fixture.detectChanges();\r\n\r\n        expect(inputElement.checked).toBe(false);\r\n        expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\r\n        expect(inputElement.indeterminate).toBe(true);\r\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\r\n      }));\r\n\r\n\r\n      it(`should not change 'checked' or 'indeterminate' on click if noop is set`, fakeAsync(() => {\r\n        testComponent.isChecked = true;\r\n        testComponent.isIndeterminate = true;\r\n        inputElement.click();\r\n\r\n        fixture.detectChanges();\r\n        flush();\r\n        fixture.detectChanges();\r\n\r\n        expect(inputElement.checked).toBe(true);\r\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\r\n        expect(inputElement.indeterminate).toBe(true);\r\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\r\n\r\n        testComponent.isChecked = false;\r\n        inputElement.click();\r\n\r\n        fixture.detectChanges();\r\n        flush();\r\n        fixture.detectChanges();\r\n\r\n        expect(inputElement.checked).toBe(false);\r\n        expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\r\n        expect(inputElement.indeterminate).toBe(true, 'indeterminate should not change');\r\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\r\n      }));\r\n    });\r\n  });\r\n\r\n  describe('with change event and no initial value', () => {\r\n    let checkboxDebugElement: DebugElement;\r\n    let checkboxNativeElement: HTMLElement;\r\n    let checkboxInstance: MatCheckbox;\r\n    let testComponent: CheckboxWithChangeEvent;\r\n    let inputElement: HTMLInputElement;\r\n    let labelElement: HTMLLabelElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(CheckboxWithChangeEvent);\r\n      fixture.detectChanges();\r\n\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      checkboxInstance = checkboxDebugElement.componentInstance;\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\r\n      labelElement = <HTMLLabelElement>checkboxNativeElement.querySelector('label');\r\n    });\r\n\r\n    it('should emit the event to the change observable', () => {\r\n      let changeSpy = jasmine.createSpy('onChangeObservable');\r\n\r\n      checkboxInstance.change.subscribe(changeSpy);\r\n\r\n      fixture.detectChanges();\r\n      expect(changeSpy).not.toHaveBeenCalled();\r\n\r\n      // When changing the native `checked` property the checkbox will not fire a change event,\r\n      // because the element is not focused and it's not the native behavior of the input element.\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(changeSpy).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should not emit a DOM event to the change output', fakeAsync(() => {\r\n      fixture.detectChanges();\r\n      expect(testComponent.lastEvent).toBeUndefined();\r\n\r\n      // Trigger the click on the inputElement, because the input will probably\r\n      // emit a DOM event to the change output.\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      // We're checking the arguments type / emitted value to be a boolean, because sometimes the\r\n      // emitted value can be a DOM Event, which is not valid.\r\n      // See angular/angular#4059\r\n      expect(testComponent.lastEvent.checked).toBe(true);\r\n    }));\r\n  });\r\n\r\n  describe('aria-label ', () => {\r\n    let checkboxDebugElement: DebugElement;\r\n    let checkboxNativeElement: HTMLElement;\r\n    let inputElement: HTMLInputElement;\r\n\r\n    it('should use the provided aria-label', () => {\r\n      fixture = createComponent(CheckboxWithAriaLabel);\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\r\n\r\n      fixture.detectChanges();\r\n      expect(inputElement.getAttribute('aria-label')).toBe('Super effective');\r\n    });\r\n\r\n    it('should not set the aria-label attribute if no value is provided', () => {\r\n      fixture = createComponent(SingleCheckbox);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.nativeElement.querySelector('input').hasAttribute('aria-label')).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('with provided aria-labelledby ', () => {\r\n    let checkboxDebugElement: DebugElement;\r\n    let checkboxNativeElement: HTMLElement;\r\n    let inputElement: HTMLInputElement;\r\n\r\n    it('should use the provided aria-labelledby', () => {\r\n      fixture = createComponent(CheckboxWithAriaLabelledby);\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\r\n\r\n      fixture.detectChanges();\r\n      expect(inputElement.getAttribute('aria-labelledby')).toBe('some-id');\r\n    });\r\n\r\n    it('should not assign aria-labelledby if none is provided', () => {\r\n      fixture = createComponent(SingleCheckbox);\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\r\n\r\n      fixture.detectChanges();\r\n      expect(inputElement.getAttribute('aria-labelledby')).toBe(null);\r\n    });\r\n  });\r\n\r\n  describe('with provided tabIndex', () => {\r\n    let checkboxDebugElement: DebugElement;\r\n    let checkboxNativeElement: HTMLElement;\r\n    let testComponent: CheckboxWithTabIndex;\r\n    let inputElement: HTMLInputElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(CheckboxWithTabIndex);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\r\n    });\r\n\r\n    it('should preserve any given tabIndex', () => {\r\n      expect(inputElement.tabIndex).toBe(7);\r\n    });\r\n\r\n    it('should preserve given tabIndex when the checkbox is disabled then enabled', () => {\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      testComponent.customTabIndex = 13;\r\n      fixture.detectChanges();\r\n\r\n      testComponent.isDisabled = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.tabIndex).toBe(13);\r\n    });\r\n\r\n  });\r\n\r\n  describe('with native tabindex attribute', () => {\r\n    it('should properly detect native tabindex attribute', fakeAsync(() => {\r\n      fixture = createComponent(CheckboxWithTabindexAttr);\r\n      fixture.detectChanges();\r\n\r\n      const checkbox = fixture.debugElement\r\n        .query(By.directive(MatCheckbox)).componentInstance as MatCheckbox;\r\n\r\n      expect(checkbox.tabIndex)\r\n        .toBe(5, 'Expected tabIndex property to have been set based on the native attribute');\r\n    }));\r\n  });\r\n\r\n  describe('using ViewChild', () => {\r\n    let checkboxDebugElement: DebugElement;\r\n    let checkboxNativeElement: HTMLElement;\r\n    let testComponent: CheckboxUsingViewChild;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(CheckboxUsingViewChild);\r\n      fixture.detectChanges();\r\n\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      testComponent = fixture.debugElement.componentInstance;\r\n    });\r\n\r\n    it('should toggle checkbox disabledness correctly', () => {\r\n      const checkboxInstance = checkboxDebugElement.componentInstance;\r\n      const inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\r\n      expect(checkboxInstance.disabled).toBe(false);\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-disabled');\r\n      expect(inputElement.tabIndex).toBe(0);\r\n      expect(inputElement.disabled).toBe(false);\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.disabled).toBe(true);\r\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-disabled');\r\n      expect(inputElement.disabled).toBe(true);\r\n\r\n      testComponent.isDisabled = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.disabled).toBe(false);\r\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-disabled');\r\n      expect(inputElement.tabIndex).toBe(0);\r\n      expect(inputElement.disabled).toBe(false);\r\n    });\r\n\r\n    it('should toggle checkbox ripple disabledness correctly', () => {\r\n      const labelElement = checkboxNativeElement.querySelector('label') as HTMLLabelElement;\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n      dispatchFakeEvent(labelElement, 'mousedown');\r\n      dispatchFakeEvent(labelElement, 'mouseup');\r\n      expect(checkboxNativeElement.querySelectorAll('.mat-ripple-element').length).toBe(0);\r\n\r\n      testComponent.isDisabled = false;\r\n      fixture.detectChanges();\r\n      dispatchFakeEvent(labelElement, 'mousedown');\r\n      dispatchFakeEvent(labelElement, 'mouseup');\r\n      expect(checkboxNativeElement.querySelectorAll('.mat-ripple-element').length).toBe(1);\r\n    });\r\n  });\r\n\r\n  describe('with multiple checkboxes', () => {\r\n    beforeEach(() => {\r\n      fixture = createComponent(MultipleCheckboxes);\r\n      fixture.detectChanges();\r\n    });\r\n\r\n    it('should assign a unique id to each checkbox', () => {\r\n      let [firstId, secondId] =\r\n          fixture.debugElement.queryAll(By.directive(MatCheckbox))\r\n          .map(debugElement => debugElement.nativeElement.querySelector('input').id);\r\n\r\n      expect(firstId).toMatch(/mat-checkbox-\\d+-input/);\r\n      expect(secondId).toMatch(/mat-checkbox-\\d+-input/);\r\n      expect(firstId).not.toEqual(secondId);\r\n    });\r\n  });\r\n\r\n  describe('with ngModel', () => {\r\n    let checkboxDebugElement: DebugElement;\r\n    let checkboxNativeElement: HTMLElement;\r\n    let checkboxInstance: MatCheckbox;\r\n    let inputElement: HTMLInputElement;\r\n    let ngModel: NgModel;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(CheckboxWithNgModel);\r\n\r\n      fixture.componentInstance.isRequired = false;\r\n      fixture.detectChanges();\r\n\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      checkboxInstance = checkboxDebugElement.componentInstance;\r\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\r\n      ngModel = checkboxDebugElement.injector.get<NgModel>(NgModel);\r\n    });\r\n\r\n    it('should be pristine, untouched, and valid initially', () => {\r\n      expect(ngModel.valid).toBe(true);\r\n      expect(ngModel.pristine).toBe(true);\r\n      expect(ngModel.touched).toBe(false);\r\n    });\r\n\r\n    it('should have correct control states after interaction', fakeAsync(() => {\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      // Flush the timeout that is being created whenever a `click` event has been fired by\r\n      // the underlying input.\r\n      flush();\r\n\r\n      // After the value change through interaction, the control should be dirty, but remain\r\n      // untouched as long as the focus is still on the underlying input.\r\n      expect(ngModel.pristine).toBe(false);\r\n      expect(ngModel.touched).toBe(false);\r\n\r\n      // If the input element loses focus, the control should remain dirty but should\r\n      // also turn touched.\r\n      dispatchFakeEvent(inputElement, 'blur');\r\n      fixture.detectChanges();\r\n      flushMicrotasks();\r\n\r\n      expect(ngModel.pristine).toBe(false);\r\n      expect(ngModel.touched).toBe(true);\r\n    }));\r\n\r\n    it('should not throw an error when disabling while focused', fakeAsync(() => {\r\n      expect(() => {\r\n        // Focus the input element because after disabling, the `blur` event should automatically\r\n        // fire and not result in a changed after checked exception. Related: #12323\r\n        inputElement.focus();\r\n\r\n        // Flush the two nested timeouts from the FocusMonitor that are being created on `focus`.\r\n        flush();\r\n\r\n        checkboxInstance.disabled = true;\r\n        fixture.detectChanges();\r\n        flushMicrotasks();\r\n      }).not.toThrow();\r\n    }));\r\n\r\n    it('should toggle checked state on click', () => {\r\n      expect(checkboxInstance.checked).toBe(false);\r\n\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(true);\r\n\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(false);\r\n    });\r\n\r\n    it('should validate with RequiredTrue validator', () => {\r\n      fixture.componentInstance.isRequired = true;\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(true);\r\n      expect(ngModel.valid).toBe(true);\r\n\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.checked).toBe(false);\r\n      expect(ngModel.valid).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('with name attribute', () => {\r\n    beforeEach(() => {\r\n      fixture = createComponent(CheckboxWithNameAttribute);\r\n      fixture.detectChanges();\r\n    });\r\n\r\n    it('should forward name value to input element', () => {\r\n      let checkboxElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      let inputElement = <HTMLInputElement> checkboxElement.nativeElement.querySelector('input');\r\n\r\n      expect(inputElement.getAttribute('name')).toBe('test-name');\r\n    });\r\n  });\r\n\r\n  describe('with form control', () => {\r\n    let checkboxDebugElement: DebugElement;\r\n    let checkboxInstance: MatCheckbox;\r\n    let testComponent: CheckboxWithFormControl;\r\n    let inputElement: HTMLInputElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(CheckboxWithFormControl);\r\n      fixture.detectChanges();\r\n\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\r\n      checkboxInstance = checkboxDebugElement.componentInstance;\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      inputElement = <HTMLInputElement>checkboxDebugElement.nativeElement.querySelector('input');\r\n    });\r\n\r\n    it('should toggle the disabled state', () => {\r\n      expect(checkboxInstance.disabled).toBe(false);\r\n\r\n      testComponent.formControl.disable();\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.disabled).toBe(true);\r\n      expect(inputElement.disabled).toBe(true);\r\n\r\n      testComponent.formControl.enable();\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInstance.disabled).toBe(false);\r\n      expect(inputElement.disabled).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('without label', () => {\r\n    let testComponent: CheckboxWithoutLabel;\r\n    let checkboxInnerContainer: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(CheckboxWithoutLabel);\r\n\r\n      const checkboxDebugEl = fixture.debugElement.query(By.directive(MatCheckbox));\r\n\r\n      testComponent = fixture.componentInstance;\r\n      checkboxInnerContainer = checkboxDebugEl\r\n        .query(By.css('.mat-checkbox-inner-container')).nativeElement;\r\n    });\r\n\r\n    it('should remove margin for checkbox without a label', () => {\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInnerContainer.classList)\r\n        .toContain('mat-checkbox-inner-container-no-side-margin');\r\n    });\r\n\r\n    it('should not remove margin if initial label is set through binding', () => {\r\n      testComponent.label = 'Some content';\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInnerContainer.classList)\r\n        .not.toContain('mat-checkbox-inner-container-no-side-margin');\r\n    });\r\n\r\n    it('should re-add margin if label is added asynchronously', () => {\r\n      fixture.destroy();\r\n\r\n      const mutationCallbacks: Function[] = [];\r\n\r\n      TestBed\r\n        .resetTestingModule()\r\n        .configureTestingModule({\r\n          imports: [MatCheckboxModule, FormsModule, ReactiveFormsModule],\r\n          declarations: [CheckboxWithoutLabel],\r\n          providers: [{\r\n            provide: MutationObserverFactory,\r\n            useValue: {\r\n              // Stub out the factory that creates mutation observers for the underlying directive\r\n              // to allows us to flush out the callbacks asynchronously.\r\n              create: (callback: Function) => {\r\n                mutationCallbacks.push(callback);\r\n\r\n                return {\r\n                  observe: () => {},\r\n                  disconnect: () => {}\r\n                };\r\n              }\r\n            }\r\n          }]\r\n        })\r\n        .compileComponents();\r\n\r\n      fixture = createComponent(CheckboxWithoutLabel);\r\n      checkboxInnerContainer = fixture.debugElement\r\n        .query(By.css('.mat-checkbox-inner-container')).nativeElement;\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInnerContainer.classList)\r\n        .toContain('mat-checkbox-inner-container-no-side-margin');\r\n\r\n      fixture.componentInstance.label = 'Some content';\r\n      fixture.detectChanges();\r\n      mutationCallbacks.forEach(callback => callback());\r\n\r\n      // The MutationObserver from the cdkObserveContent directive detected the content change\r\n      // and notified the checkbox component. The checkbox then marks the component as dirty\r\n      // by calling `markForCheck()`. This needs to be reflected by the component template then.\r\n      fixture.detectChanges();\r\n\r\n      expect(checkboxInnerContainer.classList)\r\n        .not.toContain('mat-checkbox-inner-container-no-side-margin');\r\n    });\r\n\r\n    it('should not add the \"name\" attribute if it is not passed in', () => {\r\n      fixture.detectChanges();\r\n      expect(checkboxInnerContainer.querySelector('input')!.hasAttribute('name')).toBe(false);\r\n    });\r\n\r\n    it('should not add the \"value\" attribute if it is not passed in', () => {\r\n      fixture.detectChanges();\r\n      expect(checkboxInnerContainer.querySelector('input')!.hasAttribute('value')).toBe(false);\r\n    });\r\n\r\n  });\r\n});\r\n\r\n/** Simple component for testing a single checkbox. */\r\n@Component({\r\n  template: `\r\n  <div (click)=\"parentElementClicked = true\" (keyup)=\"parentElementKeyedUp = true\">\r\n    <mat-checkbox\r\n        [id]=\"checkboxId\"\r\n        [required]=\"isRequired\"\r\n        [labelPosition]=\"labelPos\"\r\n        [checked]=\"isChecked\"\r\n        [(indeterminate)]=\"isIndeterminate\"\r\n        [disabled]=\"isDisabled\"\r\n        [color]=\"checkboxColor\"\r\n        [disableRipple]=\"disableRipple\"\r\n        [value]=\"checkboxValue\"\r\n        (click)=\"onCheckboxClick($event)\"\r\n        (change)=\"onCheckboxChange($event)\">\r\n      Simple checkbox\r\n    </mat-checkbox>\r\n  </div>`\r\n})\r\nclass SingleCheckbox {\r\n  labelPos: 'before' | 'after' = 'after';\r\n  isChecked: boolean = false;\r\n  isRequired: boolean = false;\r\n  isIndeterminate: boolean = false;\r\n  isDisabled: boolean = false;\r\n  disableRipple: boolean = false;\r\n  parentElementClicked: boolean = false;\r\n  parentElementKeyedUp: boolean = false;\r\n  checkboxId: string | null = 'simple-check';\r\n  checkboxColor: string = 'primary';\r\n  checkboxValue: string = 'single_checkbox';\r\n\r\n  onCheckboxClick: (event?: Event) => void = () => {};\r\n  onCheckboxChange: (event?: MatCheckboxChange) => void = () => {};\r\n}\r\n\r\n/** Simple component for testing an MatCheckbox with required ngModel. */\r\n@Component({\r\n  template: `<mat-checkbox [required]=\"isRequired\" [(ngModel)]=\"isGood\">Be good</mat-checkbox>`,\r\n})\r\nclass CheckboxWithNgModel {\r\n  isGood: boolean = false;\r\n  isRequired: boolean = true;\r\n}\r\n\r\n/** Simple test component with multiple checkboxes. */\r\n@Component(({\r\n  template: `\r\n    <mat-checkbox>Option 1</mat-checkbox>\r\n    <mat-checkbox>Option 2</mat-checkbox>\r\n  `\r\n}))\r\nclass MultipleCheckboxes { }\r\n\r\n\r\n/** Simple test component with tabIndex */\r\n@Component({\r\n  template: `\r\n    <mat-checkbox\r\n        [tabIndex]=\"customTabIndex\"\r\n        [disabled]=\"isDisabled\">\r\n    </mat-checkbox>`,\r\n})\r\nclass CheckboxWithTabIndex {\r\n  customTabIndex: number = 7;\r\n  isDisabled: boolean = false;\r\n}\r\n\r\n\r\n/** Simple test component that accesses MatCheckbox using ViewChild. */\r\n@Component({\r\n  template: `\r\n    <mat-checkbox></mat-checkbox>`,\r\n})\r\nclass CheckboxUsingViewChild {\r\n  @ViewChild(MatCheckbox) checkbox;\r\n\r\n  set isDisabled(value: boolean) {\r\n    this.checkbox.disabled = value;\r\n  }\r\n}\r\n\r\n/** Simple test component with an aria-label set. */\r\n@Component({\r\n  template: `<mat-checkbox aria-label=\"Super effective\"></mat-checkbox>`\r\n})\r\nclass CheckboxWithAriaLabel { }\r\n\r\n/** Simple test component with an aria-label set. */\r\n@Component({\r\n  template: `<mat-checkbox aria-labelledby=\"some-id\"></mat-checkbox>`\r\n})\r\nclass CheckboxWithAriaLabelledby {}\r\n\r\n/** Simple test component with name attribute */\r\n@Component({\r\n  template: `<mat-checkbox name=\"test-name\"></mat-checkbox>`\r\n})\r\nclass CheckboxWithNameAttribute {}\r\n\r\n/** Simple test component with change event */\r\n@Component({\r\n  template: `<mat-checkbox (change)=\"lastEvent = $event\"></mat-checkbox>`\r\n})\r\nclass CheckboxWithChangeEvent {\r\n  lastEvent: MatCheckboxChange;\r\n}\r\n\r\n/** Test component with reactive forms */\r\n@Component({\r\n  template: `<mat-checkbox [formControl]=\"formControl\"></mat-checkbox>`\r\n})\r\nclass CheckboxWithFormControl {\r\n  formControl = new FormControl();\r\n}\r\n\r\n/** Test component without label */\r\n@Component({\r\n  template: `<mat-checkbox>{{ label }}</mat-checkbox>`\r\n})\r\nclass CheckboxWithoutLabel {\r\n  label: string;\r\n}\r\n\r\n/** Test component with the native tabindex attribute. */\r\n@Component({\r\n  template: `<mat-checkbox tabindex=\"5\"></mat-checkbox>`\r\n})\r\nclass CheckboxWithTabindexAttr {}\r\n"]}