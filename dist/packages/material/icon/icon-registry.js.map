{"version":3,"file":"icon-registry.js","sourceRoot":"","sources":["../../../../src/lib/icon/icon-registry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Optional,\r\n  SecurityContext,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\r\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\r\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n * @docs-private\r\n */\r\nexport function getMatIconNameNotFoundError(iconName: string): Error {\r\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\r\n}\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mat-icon>` without including @angular/http.\r\n * @docs-private\r\n */\r\nexport function getMatIconNoHttpProviderError(): Error {\r\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\r\n               'Please include the HttpClientModule from @angular/common/http in your ' +\r\n               'app imports.');\r\n}\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * @param url URL that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\r\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\r\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\r\n * @param literal HTML that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\r\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\r\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\r\n}\r\n\r\n\r\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * @docs-private\r\n */\r\nclass SvgIconConfig {\r\n  url: SafeResourceUrl | null;\r\n  svgElement: SVGElement | null;\r\n\r\n  constructor(url: SafeResourceUrl);\r\n  constructor(svgElement: SVGElement);\r\n  constructor(data: SafeResourceUrl | SVGElement) {\r\n    // Note that we can't use `instanceof SVGElement` here,\r\n    // because it'll break during server-side rendering.\r\n    if (!!(data as any).nodeName) {\r\n      this.svgElement = data as SVGElement;\r\n    } else {\r\n      this.url = data as SafeResourceUrl;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Service to register and display icons used by the `<mat-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatIconRegistry {\r\n  private _document: Document;\r\n\r\n  /**\r\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n   */\r\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\r\n\r\n  /**\r\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n   * Multiple icon sets can be registered under the same namespace.\r\n   */\r\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\r\n\r\n  /** Cache for icons loaded by direct URLs. */\r\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\r\n\r\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\r\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\r\n\r\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\r\n  private _fontCssClassesByAlias = new Map<string, string>();\r\n\r\n  /**\r\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\r\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\r\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\r\n   */\r\n  private _defaultFontSetClass = 'material-icons';\r\n\r\n  constructor(\r\n    @Optional() private _httpClient: HttpClient,\r\n    private _sanitizer: DomSanitizer,\r\n    @Optional() @Inject(DOCUMENT) document: any) {\r\n      this._document = document;\r\n    }\r\n\r\n  /**\r\n   * Registers an icon by URL in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\r\n    return this.addSvgIconInNamespace('', iconName, url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon using an HTML string in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\r\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\r\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon by URL in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\r\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\r\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\r\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n\r\n    if (!sanitizedLiteral) {\r\n      throw getMatIconFailedToSanitizeLiteralError(literal);\r\n    }\r\n\r\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\r\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the default namespace.\r\n   * @param url\r\n   */\r\n  addSvgIconSet(url: SafeResourceUrl): this {\r\n    return this.addSvgIconSetInNamespace('', url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set using an HTML string in the default namespace.\r\n   * @param literal SVG source of the icon set.\r\n   */\r\n  addSvgIconSetLiteral(literal: SafeHtml): this {\r\n    return this.addSvgIconSetLiteralInNamespace('', literal);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param url\r\n   */\r\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\r\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param literal SVG source of the icon set.\r\n   */\r\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\r\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n\r\n    if (!sanitizedLiteral) {\r\n      throw getMatIconFailedToSanitizeLiteralError(literal);\r\n    }\r\n\r\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\r\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\r\n  }\r\n\r\n  /**\r\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\r\n   * component with the alias as the fontSet input will cause the class name to be applied\r\n   * to the `<mat-icon>` element.\r\n   *\r\n   * @param alias Alias for the font.\r\n   * @param className Class name override to be used instead of the alias.\r\n   */\r\n  registerFontClassAlias(alias: string, className: string = alias): this {\r\n    this._fontCssClassesByAlias.set(alias, className);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name associated with the alias by a previous call to\r\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n   */\r\n  classNameForFontAlias(alias: string): string {\r\n    return this._fontCssClassesByAlias.get(alias) || alias;\r\n  }\r\n\r\n  /**\r\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   *\r\n   * @param className\r\n   */\r\n  setDefaultFontSetClass(className: string): this {\r\n    this._defaultFontSetClass = className;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   */\r\n  getDefaultFontSetClass(): string {\r\n    return this._defaultFontSetClass;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n   * it will not contain any modifications made to elements previously returned).\r\n   *\r\n   * @param safeUrl URL from which to fetch the SVG icon.\r\n   */\r\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\r\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n    }\r\n\r\n    const cachedIcon = this._cachedIconsByUrl.get(url);\r\n\r\n    if (cachedIcon) {\r\n      return observableOf(cloneSvg(cachedIcon));\r\n    }\r\n\r\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\r\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\r\n      map(svg => cloneSvg(svg)),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n   * if not, the Observable will throw an error.\r\n   *\r\n   * @param name Name of the icon to be retrieved.\r\n   * @param namespace Namespace in which to look for the icon.\r\n   */\r\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\r\n    // Return (copy of) cached icon if possible.\r\n    const key = iconKey(namespace, name);\r\n    const config = this._svgIconConfigs.get(key);\r\n\r\n    if (config) {\r\n      return this._getSvgFromConfig(config);\r\n    }\r\n\r\n    // See if we have any icon sets registered for the namespace.\r\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n\r\n    if (iconSetConfigs) {\r\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n    }\r\n\r\n    return observableThrow(getMatIconNameNotFoundError(key));\r\n  }\r\n\r\n  /**\r\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n   */\r\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    if (config.svgElement) {\r\n      // We already have the SVG element for this icon, return a copy.\r\n      return observableOf(cloneSvg(config.svgElement));\r\n    } else {\r\n      // Fetch the icon from the config's URL, cache it, and return a copy.\r\n      return this._loadSvgIconFromConfig(config).pipe(\r\n        tap(svg => config.svgElement = svg),\r\n        map(svg => cloneSvg(svg)),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n   * First searches the available cached icons for a nested element with a matching name, and\r\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n   * that have not been cached, and searches again after all fetches are completed.\r\n   * The returned Observable produces the SVG element if possible, and throws\r\n   * an error if no icon with the specified name can be found.\r\n   */\r\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\r\n      Observable<SVGElement> {\r\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n    // requested name.\r\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n    if (namedIcon) {\r\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n      // time anyway, there's probably not much advantage compared to just always extracting\r\n      // it from the icon set.\r\n      return observableOf(namedIcon);\r\n    }\r\n\r\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n    // fetched, fetch them now and look for iconName in the results.\r\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\r\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\r\n      .map(iconSetConfig => {\r\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\r\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\r\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n\r\n            // Swallow errors fetching individual URLs so the\r\n            // combined Observable won't necessarily fail.\r\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\r\n            return observableOf(null);\r\n          })\r\n        );\r\n      });\r\n\r\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n    // cached SVG element (unless the request failed), and we can check again for the icon.\r\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\r\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n      if (!foundIcon) {\r\n        throw getMatIconNameNotFoundError(name);\r\n      }\r\n\r\n      return foundIcon;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\r\n      SVGElement | null {\r\n    // Iterate backwards, so icon sets added later have precedence.\r\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n      const config = iconSetConfigs[i];\r\n      if (config.svgElement) {\r\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\r\n        if (foundIcon) {\r\n          return foundIcon;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    return this._fetchUrl(config.url)\r\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    // If the SVG for this icon set has already been parsed, do nothing.\r\n    if (config.svgElement) {\r\n      return observableOf(config.svgElement);\r\n    }\r\n\r\n    return this._fetchUrl(config.url).pipe(map(svgText => {\r\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\r\n      // only needs to occur if the cache is yet unset.\r\n      if (!config.svgElement) {\r\n        config.svgElement = this._svgElementFromString(svgText);\r\n      }\r\n\r\n      return config.svgElement;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string, and adds default attributes.\r\n   */\r\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\r\n    const svg = this._svgElementFromString(responseText);\r\n    this._setSvgAttributes(svg);\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\r\n    const iconSource = iconSet.querySelector('#' + iconName);\r\n\r\n    if (!iconSource) {\r\n      return null;\r\n    }\r\n\r\n    // Clone the element and remove the ID to prevent multiple elements from being added\r\n    // to the page with the same ID.\r\n    const iconElement = iconSource.cloneNode(true) as Element;\r\n    iconElement.removeAttribute('id');\r\n\r\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n    // the content of a new <svg> node.\r\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\r\n      return this._setSvgAttributes(iconElement as SVGElement);\r\n    }\r\n\r\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n    // tag is problematic on Firefox, because it needs to include the current page path.\r\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\r\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\r\n    }\r\n\r\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n    // the correct nodes, but the SVG content doesn't render. Instead we\r\n    // have to create an empty SVG node using innerHTML and append its content.\r\n    // Elements created using DOMParser.parseFromString have the same problem.\r\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n    const svg = this._svgElementFromString('<svg></svg>');\r\n    // Clone the node so we don't remove it from the parent icon set element.\r\n    svg.appendChild(iconElement);\r\n\r\n    return this._setSvgAttributes(svg);\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string.\r\n   */\r\n  private _svgElementFromString(str: string): SVGElement {\r\n    const div = this._document.createElement('DIV');\r\n    div.innerHTML = str;\r\n    const svg = div.querySelector('svg') as SVGElement;\r\n\r\n    if (!svg) {\r\n      throw Error('<svg> tag not found');\r\n    }\r\n\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Converts an element into an SVG node by cloning all of its children.\r\n   */\r\n  private _toSvgElement(element: Element): SVGElement {\r\n    let svg = this._svgElementFromString('<svg></svg>');\r\n\r\n    for (let i = 0; i < element.childNodes.length; i++) {\r\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\r\n        svg.appendChild(element.childNodes[i].cloneNode(true));\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Sets the default attributes for an SVG element to be used as an icon.\r\n   */\r\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\r\n    svg.setAttribute('fit', '');\r\n    svg.setAttribute('height', '100%');\r\n    svg.setAttribute('width', '100%');\r\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable which produces the string contents of the given URL. Results may be\r\n   * cached, so future calls with the same URL may not cause another HTTP request.\r\n   */\r\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\r\n    if (!this._httpClient) {\r\n      throw getMatIconNoHttpProviderError();\r\n    }\r\n\r\n    if (safeUrl == null) {\r\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\r\n    }\r\n\r\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n    }\r\n\r\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n    // already a request in progress for that URL. It's necessary to call share() on the\r\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\r\n\r\n    if (inProgressFetch) {\r\n      return inProgressFetch;\r\n    }\r\n\r\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\r\n    // Observable. Figure out why and fix it.\r\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\r\n      finalize(() => this._inProgressUrlFetches.delete(url)),\r\n      share(),\r\n    );\r\n\r\n    this._inProgressUrlFetches.set(url, req);\r\n    return req;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon config by name in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param iconName Name under which to register the config.\r\n   * @param config Config to be registered.\r\n   */\r\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\r\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set config in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param config Config to be registered.\r\n   */\r\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\r\n    const configNamespace = this._iconSetConfigs.get(namespace);\r\n\r\n    if (configNamespace) {\r\n      configNamespace.push(config);\r\n    } else {\r\n      this._iconSetConfigs.set(namespace, [config]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\r\n  parentRegistry: MatIconRegistry,\r\n  httpClient: HttpClient,\r\n  sanitizer: DomSanitizer,\r\n  document?: any) {\r\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\r\n}\r\n\r\n/** @docs-private */\r\nexport const ICON_REGISTRY_PROVIDER = {\r\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\r\n  provide: MatIconRegistry,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), MatIconRegistry],\r\n    [new Optional(), HttpClient],\r\n    DomSanitizer,\r\n    [new Optional(), DOCUMENT as InjectionToken<any>],\r\n  ],\r\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\r\n};\r\n\r\n/** Clones an SVGElement while preserving type information. */\r\nfunction cloneSvg(svg: SVGElement): SVGElement {\r\n  return svg.cloneNode(true) as SVGElement;\r\n}\r\n\r\n/** Returns the cache key to use for an icon namespace and name. */\r\nfunction iconKey(namespace: string, name: string) {\r\n  return namespace + ':' + name;\r\n}\r\n"]}