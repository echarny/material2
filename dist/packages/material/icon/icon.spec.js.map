{"version":3,"file":"icon.spec.js","sourceRoot":"","sources":["../../../../src/lib/icon/icon.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {inject, async, fakeAsync, tick, TestBed} from '@angular/core/testing';\r\nimport {SafeResourceUrl, DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\r\nimport {Component} from '@angular/core';\r\nimport {MatIconModule} from './index';\r\nimport {MatIconRegistry, getMatIconNoHttpProviderError} from './icon-registry';\r\nimport {FAKE_SVGS} from './fake-svgs';\r\nimport {wrappedErrorMessage} from '@angular/cdk/testing';\r\n\r\n\r\n/** Returns the CSS classes assigned to an element as a sorted array. */\r\nfunction sortedClassNames(element: Element): string[] {\r\n  return element.className.split(' ').sort();\r\n}\r\n\r\n/**\r\n * Verifies that an element contains a single `<svg>` child element, and returns that child.\r\n */\r\nfunction verifyAndGetSingleSvgChild(element: SVGElement): SVGElement {\r\n  expect(element.id).toBeFalsy();\r\n  expect(element.childNodes.length).toBe(1);\r\n  const svgChild = element.childNodes[0] as SVGElement;\r\n  expect(svgChild.tagName.toLowerCase()).toBe('svg');\r\n  return svgChild;\r\n}\r\n\r\n/**\r\n * Verifies that an element contains a single `<path>` child element whose \"id\" attribute has\r\n * the specified value.\r\n */\r\nfunction verifyPathChildElement(element: Element, attributeValue: string): void {\r\n  expect(element.childNodes.length).toBe(1);\r\n  const pathElement = element.childNodes[0] as SVGPathElement;\r\n  expect(pathElement.tagName.toLowerCase()).toBe('path');\r\n\r\n  // The testing data SVGs have the name attribute set for verification.\r\n  expect(pathElement.getAttribute('name')).toBe(attributeValue);\r\n}\r\n\r\n\r\ndescribe('MatIcon', () => {\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule, MatIconModule],\r\n      declarations: [\r\n        IconWithColor,\r\n        IconWithLigature,\r\n        IconWithCustomFontCss,\r\n        IconFromSvgName,\r\n        IconWithAriaHiddenFalse,\r\n        IconWithBindingAndNgIf,\r\n        InlineIcon,\r\n        SvgIconWithUserContent,\r\n      ]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  let iconRegistry: MatIconRegistry;\r\n  let http: HttpTestingController;\r\n  let sanitizer: DomSanitizer;\r\n\r\n  beforeEach(inject([MatIconRegistry, HttpTestingController, DomSanitizer],\r\n    (mir: MatIconRegistry, h: HttpTestingController, ds: DomSanitizer) => {\r\n      iconRegistry = mir;\r\n      http = h;\r\n      sanitizer = ds;\r\n    }));\r\n\r\n  it('should apply class based on color attribute', () => {\r\n    let fixture = TestBed.createComponent(IconWithColor);\r\n\r\n    const testComponent = fixture.componentInstance;\r\n    const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n    testComponent.iconName = 'home';\r\n    testComponent.iconColor = 'primary';\r\n    fixture.detectChanges();\r\n    expect(sortedClassNames(matIconElement)).toEqual(['mat-icon', 'mat-primary', 'material-icons']);\r\n  });\r\n\r\n  it('should mark mat-icon as aria-hidden by default', () => {\r\n    const fixture = TestBed.createComponent(IconWithLigature);\r\n    const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n    expect(iconElement.getAttribute('aria-hidden'))\r\n      .toBe('true', 'Expected the mat-icon element has aria-hidden=\"true\" by default');\r\n  });\r\n\r\n  it('should not override a user-provided aria-hidden attribute', () => {\r\n    const fixture = TestBed.createComponent(IconWithAriaHiddenFalse);\r\n    const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n    expect(iconElement.getAttribute('aria-hidden'))\r\n      .toBe('false', 'Expected the mat-icon element has the user-provided aria-hidden value');\r\n  });\r\n\r\n  it('should apply inline styling', () => {\r\n    const fixture = TestBed.createComponent(InlineIcon);\r\n    const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n    expect(iconElement.classList.contains('mat-icon-inline'))\r\n      .toBeFalsy('Expected the mat-icon element to not include the inline styling class');\r\n\r\n    fixture.debugElement.componentInstance.inline = true;\r\n    fixture.detectChanges();\r\n    expect(iconElement.classList.contains('mat-icon-inline'))\r\n      .toBeTruthy('Expected the mat-icon element to include the inline styling class');\r\n  });\r\n\r\n  describe('Ligature icons', () => {\r\n    it('should add material-icons class by default', () => {\r\n      let fixture = TestBed.createComponent(IconWithLigature);\r\n\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      testComponent.iconName = 'home';\r\n      fixture.detectChanges();\r\n      expect(sortedClassNames(matIconElement)).toEqual(['mat-icon', 'material-icons']);\r\n    });\r\n\r\n    it('should use alternate icon font if set', () => {\r\n      iconRegistry.setDefaultFontSetClass('myfont');\r\n\r\n      let fixture = TestBed.createComponent(IconWithLigature);\r\n\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      testComponent.iconName = 'home';\r\n      fixture.detectChanges();\r\n      expect(sortedClassNames(matIconElement)).toEqual(['mat-icon', 'myfont']);\r\n    });\r\n  });\r\n\r\n  describe('Icons from URLs', () => {\r\n    it('should register icon URLs by name', fakeAsync(() => {\r\n      iconRegistry.addSvgIcon('fluffy', trustUrl('cat.svg'));\r\n      iconRegistry.addSvgIcon('fido', trustUrl('dog.svg'));\r\n\r\n      let fixture = TestBed.createComponent(IconFromSvgName);\r\n      let svgElement: SVGElement;\r\n      const testComponent = fixture.componentInstance;\r\n      const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n\r\n      testComponent.iconName = 'fido';\r\n      fixture.detectChanges();\r\n      http.expectOne('dog.svg').flush(FAKE_SVGS.dog);\r\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\r\n      verifyPathChildElement(svgElement, 'woof');\r\n\r\n      // Change the icon, and the SVG element should be replaced.\r\n      testComponent.iconName = 'fluffy';\r\n      fixture.detectChanges();\r\n      http.expectOne('cat.svg').flush(FAKE_SVGS.cat);\r\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\r\n      verifyPathChildElement(svgElement, 'meow');\r\n\r\n      // Using an icon from a previously loaded URL should not cause another HTTP request.\r\n      testComponent.iconName = 'fido';\r\n      fixture.detectChanges();\r\n      http.expectNone('dog.svg');\r\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\r\n      verifyPathChildElement(svgElement, 'woof');\r\n\r\n      // Assert that a registered icon can be looked-up by url.\r\n      iconRegistry.getSvgIconFromUrl(trustUrl('cat.svg')).subscribe(element => {\r\n        verifyPathChildElement(element, 'meow');\r\n      });\r\n\r\n      tick();\r\n    }));\r\n\r\n    it('should throw an error when using an untrusted icon url', () => {\r\n      iconRegistry.addSvgIcon('fluffy', 'farm-set-1.svg');\r\n\r\n      expect(() => {\r\n        let fixture = TestBed.createComponent(IconFromSvgName);\r\n        fixture.componentInstance.iconName = 'fluffy';\r\n        fixture.detectChanges();\r\n      }).toThrowError(/unsafe value used in a resource URL context/);\r\n    });\r\n\r\n    it('should throw an error when using an untrusted icon set url', () => {\r\n      iconRegistry.addSvgIconSetInNamespace('farm', 'farm-set-1.svg');\r\n\r\n      expect(() => {\r\n        let fixture = TestBed.createComponent(IconFromSvgName);\r\n        fixture.componentInstance.iconName = 'farm:pig';\r\n        fixture.detectChanges();\r\n      }).toThrowError(/unsafe value used in a resource URL context/);\r\n    });\r\n\r\n    it('should extract icon from SVG icon set', () => {\r\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-1.svg'));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      let svgElement: any;\r\n      let svgChild: any;\r\n\r\n      testComponent.iconName = 'farm:pig';\r\n      fixture.detectChanges();\r\n      http.expectOne('farm-set-1.svg').flush(FAKE_SVGS.farmSet1);\r\n\r\n      expect(matIconElement.childNodes.length).toBe(1);\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      expect(svgElement.childNodes.length).toBe(1);\r\n      svgChild = svgElement.childNodes[0];\r\n      // The first <svg> child should be the <g id=\"pig\"> element.\r\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n      expect(svgChild.getAttribute('name')).toBe('pig');\r\n      verifyPathChildElement(svgChild, 'oink');\r\n\r\n      // Change the icon, and the SVG element should be replaced.\r\n      testComponent.iconName = 'farm:cow';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      svgChild = svgElement.childNodes[0];\r\n      // The first <svg> child should be the <g id=\"cow\"> element.\r\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n      expect(svgChild.getAttribute('name')).toBe('cow');\r\n      verifyPathChildElement(svgChild, 'moo');\r\n    });\r\n\r\n    it('should never parse the same icon set multiple times', () => {\r\n      // Normally we avoid spying on private methods like this, but the parsing is a private\r\n      // implementation detail that should not be exposed to the public API. This test, though,\r\n      // is important enough to warrant the brittle-ness that results.\r\n      spyOn(iconRegistry, '_svgElementFromString' as any).and.callThrough();\r\n\r\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-1.svg'));\r\n\r\n      // Requests for icons must be subscribed to in order for requests to be made.\r\n      iconRegistry.getNamedSvgIcon('pig', 'farm').subscribe(() => {});\r\n      iconRegistry.getNamedSvgIcon('cow', 'farm').subscribe(() => {});\r\n\r\n      http.expectOne('farm-set-1.svg').flush(FAKE_SVGS.farmSet1);\r\n\r\n      // _svgElementFromString is called once for each icon to create an empty SVG element\r\n      // and once to parse the full icon set.\r\n      expect((iconRegistry as any)._svgElementFromString).toHaveBeenCalledTimes(3);\r\n    });\r\n\r\n    it('should allow multiple icon sets in a namespace', () => {\r\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-1.svg'));\r\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-2.svg'));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      let svgElement: any;\r\n      let svgChild: any;\r\n\r\n      testComponent.iconName = 'farm:pig';\r\n      fixture.detectChanges();\r\n      http.expectOne('farm-set-1.svg').flush(FAKE_SVGS.farmSet1);\r\n      http.expectOne('farm-set-2.svg').flush(FAKE_SVGS.farmSet2);\r\n\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      expect(svgElement.childNodes.length).toBe(1);\r\n      svgChild = svgElement.childNodes[0];\r\n      // The <svg> child should be the <g id=\"pig\"> element.\r\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n      expect(svgChild.getAttribute('name')).toBe('pig');\r\n      expect(svgChild.getAttribute('id')).toBeFalsy();\r\n      expect(svgChild.childNodes.length).toBe(1);\r\n      verifyPathChildElement(svgChild, 'oink');\r\n\r\n      // Change the icon name to one that appears in both icon sets. The icon from the set that\r\n      // was registered last should be used (with id attribute of 'moo moo' instead of 'moo'),\r\n      // and no additional HTTP request should be made.\r\n      testComponent.iconName = 'farm:cow';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      svgChild = svgElement.childNodes[0];\r\n      // The first <svg> child should be the <g id=\"cow\"> element.\r\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n      expect(svgChild.getAttribute('name')).toBe('cow');\r\n      expect(svgChild.childNodes.length).toBe(1);\r\n      verifyPathChildElement(svgChild, 'moo moo');\r\n    });\r\n\r\n    it('should clear the id attribute from the svg node', () => {\r\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-1.svg'));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n\r\n      fixture.componentInstance.iconName = 'farm:pig';\r\n      fixture.detectChanges();\r\n      http.expectOne('farm-set-1.svg').flush(FAKE_SVGS.farmSet1);\r\n\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      const svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n\r\n      expect(svgElement.hasAttribute('id')).toBe(false);\r\n    });\r\n\r\n    it('should unwrap <symbol> nodes', () => {\r\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-3.svg'));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n\r\n      testComponent.iconName = 'farm:duck';\r\n      fixture.detectChanges();\r\n      http.expectOne('farm-set-3.svg').flush(FAKE_SVGS.farmSet3);\r\n\r\n      const svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      const firstChild = svgElement.childNodes[0];\r\n\r\n      expect(svgElement.querySelector('symbol')).toBeFalsy();\r\n      expect(svgElement.childNodes.length).toBe(1);\r\n      expect(firstChild.nodeName.toLowerCase()).toBe('path');\r\n      expect((firstChild as HTMLElement).getAttribute('name')).toBe('quack');\r\n    });\r\n\r\n    it('should not wrap <svg> elements in icon sets in another svg tag', () => {\r\n      iconRegistry.addSvgIconSet(trustUrl('arrow-set.svg'));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      let svgElement: any;\r\n\r\n      testComponent.iconName = 'left-arrow';\r\n      fixture.detectChanges();\r\n      http.expectOne('arrow-set.svg').flush(FAKE_SVGS.arrows);\r\n\r\n      // arrow-set.svg stores its icons as nested <svg> elements, so they should be used\r\n      // directly and not wrapped in an outer <svg> tag like the <g> elements in other sets.\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      verifyPathChildElement(svgElement, 'left');\r\n    });\r\n\r\n    it('should return unmodified copies of icons from icon sets', () => {\r\n      iconRegistry.addSvgIconSet(trustUrl('arrow-set.svg'));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      let svgElement: any;\r\n\r\n      testComponent.iconName = 'left-arrow';\r\n      fixture.detectChanges();\r\n      http.expectOne('arrow-set.svg').flush(FAKE_SVGS.arrows);\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      verifyPathChildElement(svgElement, 'left');\r\n      // Modify the SVG element by setting a viewBox attribute.\r\n      svgElement.setAttribute('viewBox', '0 0 100 100');\r\n\r\n      // Switch to a different icon.\r\n      testComponent.iconName = 'right-arrow';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      verifyPathChildElement(svgElement, 'right');\r\n\r\n      // Switch back to the first icon. The viewBox attribute should not be present.\r\n      testComponent.iconName = 'left-arrow';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      verifyPathChildElement(svgElement, 'left');\r\n      expect(svgElement.getAttribute('viewBox')).toBeFalsy();\r\n    });\r\n\r\n    it('should not throw when toggling an icon that has a binding in IE11', () => {\r\n      iconRegistry.addSvgIcon('fluffy', trustUrl('cat.svg'));\r\n\r\n      const fixture = TestBed.createComponent(IconWithBindingAndNgIf);\r\n\r\n      fixture.detectChanges();\r\n      http.expectOne('cat.svg').flush(FAKE_SVGS.cat);\r\n\r\n      expect(() => {\r\n        fixture.componentInstance.showIcon = false;\r\n        fixture.detectChanges();\r\n\r\n        fixture.componentInstance.showIcon = true;\r\n        fixture.detectChanges();\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('should remove the SVG element from the DOM when the binding is cleared', () => {\r\n      iconRegistry.addSvgIconSet(trustUrl('arrow-set.svg'));\r\n\r\n      let fixture = TestBed.createComponent(IconFromSvgName);\r\n\r\n      const testComponent = fixture.componentInstance;\r\n      const icon = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n\r\n      testComponent.iconName = 'left-arrow';\r\n      fixture.detectChanges();\r\n      http.expectOne('arrow-set.svg').flush(FAKE_SVGS.arrows);\r\n\r\n      expect(icon.querySelector('svg')).toBeTruthy();\r\n\r\n      testComponent.iconName = undefined;\r\n      fixture.detectChanges();\r\n\r\n      expect(icon.querySelector('svg')).toBeFalsy();\r\n    });\r\n\r\n    it('should keep non-SVG user content inside the icon element', fakeAsync(() => {\r\n      iconRegistry.addSvgIcon('fido', trustUrl('dog.svg'));\r\n\r\n      const fixture = TestBed.createComponent(SvgIconWithUserContent);\r\n      const testComponent = fixture.componentInstance;\r\n      const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n\r\n      testComponent.iconName = 'fido';\r\n      fixture.detectChanges();\r\n      http.expectOne('dog.svg').flush(FAKE_SVGS.dog);\r\n\r\n      const userDiv = iconElement.querySelector('div');\r\n\r\n      expect(userDiv).toBeTruthy();\r\n      expect(iconElement.textContent.trim()).toContain('Hello');\r\n\r\n      tick();\r\n    }));\r\n\r\n  });\r\n\r\n  describe('Icons from HTML string', () => {\r\n    it('should register icon HTML strings by name', fakeAsync(() => {\r\n      iconRegistry.addSvgIconLiteral('fluffy', trustHtml(FAKE_SVGS.cat));\r\n      iconRegistry.addSvgIconLiteral('fido', trustHtml(FAKE_SVGS.dog));\r\n\r\n      let fixture = TestBed.createComponent(IconFromSvgName);\r\n      let svgElement: SVGElement;\r\n      const testComponent = fixture.componentInstance;\r\n      const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n\r\n      testComponent.iconName = 'fido';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\r\n      verifyPathChildElement(svgElement, 'woof');\r\n\r\n      testComponent.iconName = 'fluffy';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\r\n      verifyPathChildElement(svgElement, 'meow');\r\n\r\n      // Assert that a registered icon can be looked-up by name.\r\n      iconRegistry.getNamedSvgIcon('fluffy').subscribe(element => {\r\n        verifyPathChildElement(element, 'meow');\r\n      });\r\n\r\n      tick();\r\n    }));\r\n\r\n    it('should throw an error when using untrusted HTML', () => {\r\n      // Stub out console.warn so we don't pollute our logs with Angular's warnings.\r\n      // Jasmine will tear the spy down at the end of the test.\r\n      spyOn(console, 'warn');\r\n\r\n      expect(() => {\r\n        iconRegistry.addSvgIconLiteral('circle', '<svg><circle></svg>');\r\n      }).toThrowError(/was not trusted as safe HTML/);\r\n    });\r\n\r\n    it('should extract an icon from SVG icon set', () => {\r\n      iconRegistry.addSvgIconSetLiteralInNamespace('farm', trustHtml(FAKE_SVGS.farmSet1));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      let svgElement: any;\r\n      let svgChild: any;\r\n\r\n      testComponent.iconName = 'farm:pig';\r\n      fixture.detectChanges();\r\n\r\n      expect(matIconElement.childNodes.length).toBe(1);\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      expect(svgElement.childNodes.length).toBe(1);\r\n      svgChild = svgElement.childNodes[0];\r\n\r\n      // The first <svg> child should be the <g id=\"pig\"> element.\r\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n      expect(svgChild.getAttribute('name')).toBe('pig');\r\n      verifyPathChildElement(svgChild, 'oink');\r\n\r\n      // Change the icon, and the SVG element should be replaced.\r\n      testComponent.iconName = 'farm:cow';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      svgChild = svgElement.childNodes[0];\r\n\r\n      // The first <svg> child should be the <g id=\"cow\"> element.\r\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n      expect(svgChild.getAttribute('name')).toBe('cow');\r\n      verifyPathChildElement(svgChild, 'moo');\r\n    });\r\n\r\n    it('should allow multiple icon sets in a namespace', () => {\r\n      iconRegistry.addSvgIconSetLiteralInNamespace('farm', trustHtml(FAKE_SVGS.farmSet1));\r\n      iconRegistry.addSvgIconSetLiteralInNamespace('farm', trustHtml(FAKE_SVGS.farmSet2));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      let svgElement: any;\r\n      let svgChild: any;\r\n\r\n      testComponent.iconName = 'farm:pig';\r\n      fixture.detectChanges();\r\n\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      expect(svgElement.childNodes.length).toBe(1);\r\n      svgChild = svgElement.childNodes[0];\r\n\r\n      // The <svg> child should be the <g id=\"pig\"> element.\r\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n      expect(svgChild.getAttribute('name')).toBe('pig');\r\n      expect(svgChild.getAttribute('id')).toBeFalsy();\r\n      expect(svgChild.childNodes.length).toBe(1);\r\n      verifyPathChildElement(svgChild, 'oink');\r\n\r\n      // Change the icon name to one that appears in both icon sets. The icon from the set that\r\n      // was registered last should be used (with id attribute of 'moo moo' instead of 'moo'),\r\n      // and no additional HTTP request should be made.\r\n      testComponent.iconName = 'farm:cow';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      svgChild = svgElement.childNodes[0];\r\n\r\n      // The first <svg> child should be the <g id=\"cow\"> element.\r\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n      expect(svgChild.getAttribute('name')).toBe('cow');\r\n      expect(svgChild.childNodes.length).toBe(1);\r\n      verifyPathChildElement(svgChild, 'moo moo');\r\n    });\r\n\r\n    it('should return unmodified copies of icons from icon sets', () => {\r\n      iconRegistry.addSvgIconSetLiteral(trustHtml(FAKE_SVGS.arrows));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n      let svgElement: any;\r\n\r\n      testComponent.iconName = 'left-arrow';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      verifyPathChildElement(svgElement, 'left');\r\n\r\n      // Modify the SVG element by setting a viewBox attribute.\r\n      svgElement.setAttribute('viewBox', '0 0 100 100');\r\n\r\n      // Switch to a different icon.\r\n      testComponent.iconName = 'right-arrow';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      verifyPathChildElement(svgElement, 'right');\r\n\r\n      // Switch back to the first icon. The viewBox attribute should not be present.\r\n      testComponent.iconName = 'left-arrow';\r\n      fixture.detectChanges();\r\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\r\n      verifyPathChildElement(svgElement, 'left');\r\n      expect(svgElement.getAttribute('viewBox')).toBeFalsy();\r\n    });\r\n\r\n    it('should add an extra string to the end of `style` tags inside SVG', fakeAsync(() => {\r\n      iconRegistry.addSvgIconLiteral('fido', trustHtml(`\r\n        <svg>\r\n          <style>#woof {color: blue;}</style>\r\n          <path id=\"woof\" name=\"woof\"></path>\r\n        </svg>\r\n      `));\r\n\r\n      const fixture = TestBed.createComponent(IconFromSvgName);\r\n      fixture.componentInstance.iconName = 'fido';\r\n      fixture.detectChanges();\r\n      const styleTag = fixture.nativeElement.querySelector('mat-icon svg style');\r\n\r\n      // Note the extra whitespace at the end which is what we're testing for. This is a\r\n      // workaround for IE and Edge ignoring `style` tags in dynamically-created SVGs.\r\n      expect(styleTag.textContent).toBe('#woof {color: blue;} ');\r\n\r\n      tick();\r\n    }));\r\n  });\r\n\r\n  describe('custom fonts', () => {\r\n    it('should apply CSS classes for custom font and icon', () => {\r\n      iconRegistry.registerFontClassAlias('f1', 'font1');\r\n      iconRegistry.registerFontClassAlias('f2');\r\n\r\n      const fixture = TestBed.createComponent(IconWithCustomFontCss);\r\n      const testComponent = fixture.componentInstance;\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n\r\n      testComponent.fontSet = 'f1';\r\n      testComponent.fontIcon = 'house';\r\n      fixture.detectChanges();\r\n      expect(sortedClassNames(matIconElement)).toEqual(['font1', 'house', 'mat-icon']);\r\n\r\n      testComponent.fontSet = 'f2';\r\n      testComponent.fontIcon = 'igloo';\r\n      fixture.detectChanges();\r\n      expect(sortedClassNames(matIconElement)).toEqual(['f2', 'igloo', 'mat-icon']);\r\n\r\n      testComponent.fontSet = 'f3';\r\n      testComponent.fontIcon = 'tent';\r\n      fixture.detectChanges();\r\n      expect(sortedClassNames(matIconElement)).toEqual(['f3', 'mat-icon', 'tent']);\r\n    });\r\n\r\n    it('should handle values with extraneous spaces being passed in to `fontSet`', () => {\r\n      const fixture = TestBed.createComponent(IconWithCustomFontCss);\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n\r\n      expect(() => {\r\n        fixture.componentInstance.fontSet = 'font set';\r\n        fixture.detectChanges();\r\n      }).not.toThrow();\r\n\r\n      expect(sortedClassNames(matIconElement)).toEqual(['font', 'mat-icon']);\r\n\r\n      expect(() => {\r\n        fixture.componentInstance.fontSet = ' changed';\r\n        fixture.detectChanges();\r\n      }).not.toThrow();\r\n\r\n      expect(sortedClassNames(matIconElement)).toEqual(['changed', 'mat-icon']);\r\n    });\r\n\r\n    it('should handle values with extraneous spaces being passed in to `fontIcon`', () => {\r\n      const fixture = TestBed.createComponent(IconWithCustomFontCss);\r\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\r\n\r\n      expect(() => {\r\n        fixture.componentInstance.fontIcon = 'font icon';\r\n        fixture.detectChanges();\r\n      }).not.toThrow();\r\n\r\n      expect(sortedClassNames(matIconElement)).toEqual(['font', 'mat-icon', 'material-icons']);\r\n\r\n      expect(() => {\r\n        fixture.componentInstance.fontIcon = ' changed';\r\n        fixture.detectChanges();\r\n      }).not.toThrow();\r\n\r\n      expect(sortedClassNames(matIconElement)).toEqual(['changed', 'mat-icon', 'material-icons']);\r\n    });\r\n\r\n  });\r\n\r\n  /** Marks an SVG icon url as explicitly trusted. */\r\n  function trustUrl(iconUrl: string): SafeResourceUrl {\r\n    return sanitizer.bypassSecurityTrustResourceUrl(iconUrl);\r\n  }\r\n\r\n  /** Marks an SVG icon string as explicitly trusted. */\r\n  function trustHtml(iconHtml: string): SafeHtml {\r\n    return sanitizer.bypassSecurityTrustHtml(iconHtml);\r\n  }\r\n});\r\n\r\n\r\ndescribe('MatIcon without HttpClientModule', () => {\r\n  let iconRegistry: MatIconRegistry;\r\n  let sanitizer: DomSanitizer;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatIconModule],\r\n      declarations: [IconFromSvgName],\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  beforeEach(inject([MatIconRegistry, DomSanitizer], (mir: MatIconRegistry, ds: DomSanitizer) => {\r\n    iconRegistry = mir;\r\n    sanitizer = ds;\r\n  }));\r\n\r\n  it('should throw an error when trying to load a remote icon', async() => {\r\n    const expectedError = wrappedErrorMessage(getMatIconNoHttpProviderError());\r\n\r\n    expect(() => {\r\n      iconRegistry.addSvgIcon('fido', sanitizer.bypassSecurityTrustResourceUrl('dog.svg'));\r\n\r\n      let fixture = TestBed.createComponent(IconFromSvgName);\r\n\r\n      fixture.componentInstance.iconName = 'fido';\r\n      fixture.detectChanges();\r\n    }).toThrowError(expectedError);\r\n  });\r\n});\r\n\r\n\r\n@Component({template: `<mat-icon>{{iconName}}</mat-icon>`})\r\nclass IconWithLigature {\r\n  iconName = '';\r\n}\r\n\r\n@Component({template: `<mat-icon [color]=\"iconColor\">{{iconName}}</mat-icon>`})\r\nclass IconWithColor {\r\n  iconName = '';\r\n  iconColor = 'primary';\r\n}\r\n\r\n@Component({template: `<mat-icon [fontSet]=\"fontSet\" [fontIcon]=\"fontIcon\"></mat-icon>`})\r\nclass IconWithCustomFontCss {\r\n  fontSet = '';\r\n  fontIcon = '';\r\n}\r\n\r\n@Component({template: `<mat-icon [svgIcon]=\"iconName\"></mat-icon>`})\r\nclass IconFromSvgName {\r\n  iconName: string | undefined = '';\r\n}\r\n\r\n@Component({template: '<mat-icon aria-hidden=\"false\">face</mat-icon>'})\r\nclass IconWithAriaHiddenFalse {}\r\n\r\n@Component({template: `<mat-icon [svgIcon]=\"iconName\" *ngIf=\"showIcon\">{{iconName}}</mat-icon>`})\r\nclass IconWithBindingAndNgIf {\r\n  iconName = 'fluffy';\r\n  showIcon = true;\r\n}\r\n\r\n@Component({template: `<mat-icon [inline]=\"inline\">{{iconName}}</mat-icon>`})\r\nclass InlineIcon {\r\n  inline = false;\r\n}\r\n\r\n@Component({template: `<mat-icon [svgIcon]=\"iconName\"><div>Hello</div></mat-icon>`})\r\nclass SvgIconWithUserContent {\r\n  iconName: string | undefined = '';\r\n}\r\n"]}