{"version":3,"file":"chip-remove.spec.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip-remove.spec.ts"],"names":[],"mappings":";;AAAA,sCAAsD;AACtD,8DAA6C;AAC7C,iDAAuE;AACvE,iCAAgD;AAEhD,QAAQ,CAAC,aAAa,EAAE;IACtB,IAAI,OAA8B,CAAC;IACnC,IAAI,QAAkB,CAAC;IACvB,IAAI,gBAA8B,CAAC;IACnC,IAAI,iBAA8B,CAAC;IAEnC,UAAU,CAAC,eAAK,CAAC;QACf,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,sBAAc,CAAC;YACzB,YAAY,EAAE;gBACZ,QAAQ;aACT;SACF,CAAC,CAAC;QAEH,iBAAO,CAAC,iBAAiB,EAAE,CAAC;KAC7B,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC,eAAK,CAAC;QACf,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC5C,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,iBAAiB,CAAC;QAClD,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,gBAAgB,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,SAAS,CAAC,eAAO,CAAC,CAAC,CAAC;QACrE,iBAAiB,GAAG,gBAAgB,CAAC,aAAa,CAAC;KACpD,CAAC,CAAC,CAAC;IAEJ,QAAQ,CAAC,gBAAgB,EAAE;QACzB,EAAE,CAAC,gDAAgD,EAAE;YACnD,IAAI,WAAW,GAAG,CAAA,iBAAiB,CAAC,aAAa,CAAC,GAAG,CAAE,CAAA,CAAC;YAExD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;SAC5D,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE;YACpC,IAAI,WAAW,GAAG,CAAA,iBAAiB,CAAC,aAAa,CAAC,GAAG,CAAE,CAAA,CAAC;YAExD,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;YAC1B,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAE7B,WAAW,CAAC,KAAK,EAAE,CAAC;YAEpB,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;SAC/C,CAAC,CAAC;KACJ,CAAC,CAAC;CACJ,CAAC,CAAC;;;;IAUD,4BAAS,GAAT,eAAc;;gBARf,gBAAS,SAAC;oBACT,QAAQ,EAAE,0GAET;iBACF;;mBAzDD","sourcesContent":["import {Component, DebugElement} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\r\nimport {MatChip, MatChipsModule} from './index';\r\n\r\ndescribe('Chip Remove', () => {\r\n  let fixture: ComponentFixture<any>;\r\n  let testChip: TestChip;\r\n  let chipDebugElement: DebugElement;\r\n  let chipNativeElement: HTMLElement;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatChipsModule],\r\n      declarations: [\r\n        TestChip\r\n      ]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  beforeEach(async(() => {\r\n    fixture = TestBed.createComponent(TestChip);\r\n    testChip = fixture.debugElement.componentInstance;\r\n    fixture.detectChanges();\r\n\r\n    chipDebugElement = fixture.debugElement.query(By.directive(MatChip));\r\n    chipNativeElement = chipDebugElement.nativeElement;\r\n  }));\r\n\r\n  describe('basic behavior', () => {\r\n    it('should applies the `mat-chip-remove` CSS class', () => {\r\n      let hrefElement = chipNativeElement.querySelector('a')!;\r\n\r\n      expect(hrefElement.classList).toContain('mat-chip-remove');\r\n    });\r\n\r\n    it('should emits (removed) on click', () => {\r\n      let hrefElement = chipNativeElement.querySelector('a')!;\r\n\r\n      testChip.removable = true;\r\n      fixture.detectChanges();\r\n\r\n      spyOn(testChip, 'didRemove');\r\n\r\n      hrefElement.click();\r\n\r\n      expect(testChip.didRemove).toHaveBeenCalled();\r\n    });\r\n  });\r\n});\r\n\r\n@Component({\r\n  template: `\r\n    <mat-chip [removable]=\"removable\" (removed)=\"didRemove()\"><a matChipRemove></a></mat-chip>\r\n  `\r\n})\r\nclass TestChip {\r\n  removable: boolean;\r\n\r\n  didRemove() {}\r\n}\r\n"]}