{"version":3,"file":"chip-list.spec.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip-list.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality, Direction} from '@angular/cdk/bidi';\r\nimport {BACKSPACE, DELETE, ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, TAB} from '@angular/cdk/keycodes';\r\nimport {createKeyboardEvent, dispatchFakeEvent, dispatchKeyboardEvent} from '@angular/cdk/testing';\r\nimport {\r\n  Component,\r\n  DebugElement,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewChildren,\r\n  Type,\r\n  Provider,\r\n} from '@angular/core';\r\nimport {ComponentFixture, fakeAsync, TestBed, tick} from '@angular/core/testing';\r\nimport {FormControl, FormsModule, NgForm, ReactiveFormsModule, Validators} from '@angular/forms';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {By} from '@angular/platform-browser';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatInputModule} from '../input/index';\r\nimport {MatChip} from './chip';\r\nimport {MatChipInputEvent} from './chip-input';\r\nimport {MatChipList, MatChipsModule} from './index';\r\n\r\n\r\ndescribe('MatChipList', () => {\r\n  let fixture: ComponentFixture<any>;\r\n  let chipListDebugElement: DebugElement;\r\n  let chipListNativeElement: HTMLElement;\r\n  let chipListInstance: MatChipList;\r\n  let testComponent: StandardChipList;\r\n  let chips: QueryList<any>;\r\n  let manager: FocusKeyManager<MatChip>;\r\n\r\n  describe('StandardChipList', () => {\r\n    describe('basic behaviors', () => {\r\n      beforeEach(() => {\r\n        setupStandardList();\r\n      });\r\n\r\n      it('should add the `mat-chip-list` class', () => {\r\n        expect(chipListNativeElement.classList).toContain('mat-chip-list');\r\n      });\r\n\r\n      it('should not have the aria-selected attribute when is not selectable', () => {\r\n        testComponent.selectable = false;\r\n        fixture.detectChanges();\r\n\r\n        const chipsValid = chips.toArray().every(chip =>\r\n            !chip.selectable && !chip._elementRef.nativeElement.hasAttribute('aria-selected'));\r\n\r\n        expect(chipsValid).toBe(true);\r\n      });\r\n    });\r\n\r\n    describe('with selected chips', () => {\r\n      beforeEach(() => {\r\n        fixture = createComponent(SelectedChipList);\r\n        fixture.detectChanges();\r\n        chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\r\n        chipListNativeElement = chipListDebugElement.nativeElement;\r\n      });\r\n\r\n      it('should not override chips selected', () => {\r\n        const instanceChips = fixture.componentInstance.chips.toArray();\r\n\r\n        expect(instanceChips[0].selected).toBe(true, 'Expected first option to be selected.');\r\n        expect(instanceChips[1].selected).toBe(false, 'Expected second option to be not selected.');\r\n        expect(instanceChips[2].selected).toBe(true, 'Expected third option to be selected.');\r\n      });\r\n\r\n      it('should have role listbox', () => {\r\n        expect(chipListNativeElement.getAttribute('role')).toBe('listbox');\r\n      });\r\n\r\n      it('should not have role when empty', () => {\r\n        fixture.componentInstance.foods = [];\r\n        fixture.detectChanges();\r\n\r\n        expect(chipListNativeElement.getAttribute('role')).toBeNull('Expect no role attribute');\r\n      });\r\n    });\r\n\r\n    describe('focus behaviors', () => {\r\n      beforeEach(() => {\r\n        setupStandardList();\r\n        manager = chipListInstance._keyManager;\r\n      });\r\n\r\n      it('should focus the first chip on focus', () => {\r\n        chipListInstance.focus();\r\n        fixture.detectChanges();\r\n\r\n        expect(manager.activeItemIndex).toBe(0);\r\n      });\r\n\r\n      it('should watch for chip focus', () => {\r\n        let array = chips.toArray();\r\n        let lastIndex = array.length - 1;\r\n        let lastItem = array[lastIndex];\r\n        lastItem.focus();\r\n        fixture.detectChanges();\r\n\r\n        expect(manager.activeItemIndex).toBe(lastIndex);\r\n      });\r\n\r\n      it('should watch for chip focus', () => {\r\n        let array = chips.toArray();\r\n        let lastIndex = array.length - 1;\r\n        let lastItem = array[lastIndex];\r\n\r\n        lastItem.focus();\r\n        fixture.detectChanges();\r\n\r\n        expect(manager.activeItemIndex).toBe(lastIndex);\r\n      });\r\n\r\n      describe('on chip destroy', () => {\r\n        it('should focus the next item', () => {\r\n          let array = chips.toArray();\r\n          let midItem = array[2];\r\n\r\n          // Focus the middle item\r\n          midItem.focus();\r\n\r\n          // Destroy the middle item\r\n          testComponent.remove = 2;\r\n          fixture.detectChanges();\r\n\r\n          // It focuses the 4th item (now at index 2)\r\n          expect(manager.activeItemIndex).toEqual(2);\r\n        });\r\n\r\n\r\n        it('should focus the previous item', () => {\r\n          let array = chips.toArray();\r\n          let lastIndex = array.length - 1;\r\n          let lastItem = array[lastIndex];\r\n\r\n          // Focus the last item\r\n          lastItem.focus();\r\n\r\n          // Destroy the last item\r\n          testComponent.remove = lastIndex;\r\n          fixture.detectChanges();\r\n\r\n          // It focuses the next-to-last item\r\n          expect(manager.activeItemIndex).toEqual(lastIndex - 1);\r\n        });\r\n\r\n        it('should not focus if chip list is not focused', () => {\r\n          let array = chips.toArray();\r\n          let midItem = array[2];\r\n\r\n          // Focus and blur the middle item\r\n          midItem.focus();\r\n          midItem._blur();\r\n\r\n          // Destroy the middle item\r\n          testComponent.remove = 2;\r\n          fixture.detectChanges();\r\n\r\n          // Should not have focus\r\n          expect(chipListInstance._keyManager.activeItemIndex).toEqual(-1);\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('keyboard behavior', () => {\r\n      describe('LTR (default)', () => {\r\n        beforeEach(() => {\r\n          setupStandardList();\r\n          manager = chipListInstance._keyManager;\r\n        });\r\n\r\n        it('should focus previous item when press LEFT ARROW', () => {\r\n          let nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\r\n          let lastNativeChip = nativeChips[nativeChips.length - 1] as HTMLElement;\r\n\r\n          let LEFT_EVENT = createKeyboardEvent('keydown', LEFT_ARROW, lastNativeChip);\r\n          let array = chips.toArray();\r\n          let lastIndex = array.length - 1;\r\n          let lastItem = array[lastIndex];\r\n\r\n          // Focus the last item in the array\r\n          lastItem.focus();\r\n          expect(manager.activeItemIndex).toEqual(lastIndex);\r\n\r\n          // Press the LEFT arrow\r\n          chipListInstance._keydown(LEFT_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          // It focuses the next-to-last item\r\n          expect(manager.activeItemIndex).toEqual(lastIndex - 1);\r\n        });\r\n\r\n        it('should focus next item when press RIGHT ARROW', () => {\r\n          let nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\r\n          let firstNativeChip = nativeChips[0] as HTMLElement;\r\n\r\n          let RIGHT_EVENT: KeyboardEvent =\r\n            createKeyboardEvent('keydown', RIGHT_ARROW, firstNativeChip);\r\n          let array = chips.toArray();\r\n          let firstItem = array[0];\r\n\r\n          // Focus the last item in the array\r\n          firstItem.focus();\r\n          expect(manager.activeItemIndex).toEqual(0);\r\n\r\n          // Press the RIGHT arrow\r\n          chipListInstance._keydown(RIGHT_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          // It focuses the next-to-last item\r\n          expect(manager.activeItemIndex).toEqual(1);\r\n        });\r\n\r\n        it('should not handle arrow key events from non-chip elements', () => {\r\n          const event: KeyboardEvent =\r\n              createKeyboardEvent('keydown', RIGHT_ARROW, chipListNativeElement);\r\n          const initialActiveIndex = manager.activeItemIndex;\r\n\r\n          chipListInstance._keydown(event);\r\n          fixture.detectChanges();\r\n\r\n          expect(manager.activeItemIndex)\r\n              .toBe(initialActiveIndex, 'Expected focused item not to have changed.');\r\n        });\r\n\r\n      });\r\n\r\n      describe('RTL', () => {\r\n        beforeEach(() => {\r\n          setupStandardList('rtl');\r\n          manager = chipListInstance._keyManager;\r\n        });\r\n\r\n        it('should focus previous item when press RIGHT ARROW', () => {\r\n          let nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\r\n          let lastNativeChip = nativeChips[nativeChips.length - 1] as HTMLElement;\r\n\r\n          let RIGHT_EVENT: KeyboardEvent =\r\n              createKeyboardEvent('keydown', RIGHT_ARROW, lastNativeChip);\r\n          let array = chips.toArray();\r\n          let lastIndex = array.length - 1;\r\n          let lastItem = array[lastIndex];\r\n\r\n          // Focus the last item in the array\r\n          lastItem.focus();\r\n          expect(manager.activeItemIndex).toEqual(lastIndex);\r\n\r\n          // Press the RIGHT arrow\r\n          chipListInstance._keydown(RIGHT_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          // It focuses the next-to-last item\r\n          expect(manager.activeItemIndex).toEqual(lastIndex - 1);\r\n        });\r\n\r\n        it('should focus next item when press LEFT ARROW', () => {\r\n          let nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\r\n          let firstNativeChip = nativeChips[0] as HTMLElement;\r\n\r\n          let LEFT_EVENT: KeyboardEvent =\r\n              createKeyboardEvent('keydown', LEFT_ARROW, firstNativeChip);\r\n          let array = chips.toArray();\r\n          let firstItem = array[0];\r\n\r\n          // Focus the last item in the array\r\n          firstItem.focus();\r\n          expect(manager.activeItemIndex).toEqual(0);\r\n\r\n          // Press the LEFT arrow\r\n          chipListInstance._keydown(LEFT_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          // It focuses the next-to-last item\r\n          expect(manager.activeItemIndex).toEqual(1);\r\n        });\r\n\r\n        it('should allow focus to escape when tabbing away', fakeAsync(() => {\r\n          chipListInstance._keyManager.onKeydown(createKeyboardEvent('keydown', TAB));\r\n\r\n          expect(chipListInstance._tabIndex)\r\n            .toBe(-1, 'Expected tabIndex to be set to -1 temporarily.');\r\n\r\n          tick();\r\n\r\n          expect(chipListInstance._tabIndex).toBe(0, 'Expected tabIndex to be reset back to 0');\r\n        }));\r\n\r\n        it(`should use user defined tabIndex`, fakeAsync(() => {\r\n          chipListInstance.tabIndex = 4;\r\n\r\n          fixture.detectChanges();\r\n\r\n          expect(chipListInstance._tabIndex)\r\n            .toBe(4, 'Expected tabIndex to be set to user defined value 4.');\r\n\r\n          chipListInstance._keyManager.onKeydown(createKeyboardEvent('keydown', TAB));\r\n\r\n          expect(chipListInstance._tabIndex)\r\n            .toBe(-1, 'Expected tabIndex to be set to -1 temporarily.');\r\n\r\n          tick();\r\n\r\n          expect(chipListInstance._tabIndex).toBe(4, 'Expected tabIndex to be reset back to 4');\r\n        }));\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('FormFieldChipList', () => {\r\n\r\n    beforeEach(() => {\r\n      setupInputList();\r\n    });\r\n\r\n    describe('keyboard behavior', () => {\r\n      beforeEach(() => {\r\n        manager = chipListInstance._keyManager;\r\n      });\r\n\r\n      it('should maintain focus if the active chip is deleted', () => {\r\n        const secondChip = fixture.nativeElement.querySelectorAll('.mat-chip')[1];\r\n\r\n        secondChip.focus();\r\n        fixture.detectChanges();\r\n\r\n        expect(chipListInstance.chips.toArray().findIndex(chip => chip._hasFocus)).toBe(1);\r\n\r\n        dispatchKeyboardEvent(secondChip, 'keydown', DELETE);\r\n        fixture.detectChanges();\r\n\r\n        expect(chipListInstance.chips.toArray().findIndex(chip => chip._hasFocus)).toBe(1);\r\n      });\r\n\r\n      describe('when the input has focus', () => {\r\n\r\n        it('should not focus the last chip when press DELETE', () => {\r\n          let nativeInput = fixture.nativeElement.querySelector('input');\r\n          let DELETE_EVENT: KeyboardEvent =\r\n              createKeyboardEvent('keydown', DELETE, nativeInput);\r\n\r\n          // Focus the input\r\n          nativeInput.focus();\r\n          expect(manager.activeItemIndex).toBe(-1);\r\n\r\n          // Press the DELETE key\r\n          chipListInstance._keydown(DELETE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          // It doesn't focus the last chip\r\n          expect(manager.activeItemIndex).toEqual(-1);\r\n        });\r\n\r\n        it('should focus the last chip when press BACKSPACE', () => {\r\n          let nativeInput = fixture.nativeElement.querySelector('input');\r\n          let BACKSPACE_EVENT: KeyboardEvent =\r\n              createKeyboardEvent('keydown', BACKSPACE, nativeInput);\r\n\r\n          // Focus the input\r\n          nativeInput.focus();\r\n          expect(manager.activeItemIndex).toBe(-1);\r\n\r\n          // Press the BACKSPACE key\r\n          chipListInstance._keydown(BACKSPACE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          // It focuses the last chip\r\n          expect(manager.activeItemIndex).toEqual(chips.length - 1);\r\n        });\r\n\r\n      });\r\n    });\r\n\r\n    it('should complete the stateChanges stream on destroy', () => {\r\n      const spy = jasmine.createSpy('stateChanges complete');\r\n      const subscription = chipListInstance.stateChanges.subscribe(undefined, undefined, spy);\r\n\r\n      fixture.destroy();\r\n      expect(spy).toHaveBeenCalled();\r\n      subscription.unsubscribe();\r\n    });\r\n\r\n    it('should point the label id to the chip input', () => {\r\n      const label = fixture.nativeElement.querySelector('label');\r\n      const input = fixture.nativeElement.querySelector('input');\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(label.getAttribute('for')).toBeTruthy();\r\n      expect(label.getAttribute('for')).toBe(input.getAttribute('id'));\r\n      expect(label.getAttribute('aria-owns')).toBe(input.getAttribute('id'));\r\n    });\r\n\r\n  });\r\n\r\n  describe('selection logic', () => {\r\n    let formField: HTMLElement;\r\n    let nativeChips: HTMLElement[];\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(BasicChipList);\r\n      fixture.detectChanges();\r\n\r\n      formField = fixture.debugElement.query(By.css('.mat-form-field')).nativeElement;\r\n      nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\r\n          .map((chip) => chip.nativeElement);\r\n\r\n\r\n      chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\r\n      chipListInstance = chipListDebugElement.componentInstance;\r\n      chips = chipListInstance.chips;\r\n\r\n    });\r\n\r\n    it('should float placeholder if chip is selected', () => {\r\n      expect(formField.classList.contains('mat-form-field-should-float'))\r\n        .toBe(true, 'placeholder should be floating');\r\n    });\r\n\r\n    it('should remove selection if chip has been removed', fakeAsync(() => {\r\n      const instanceChips = fixture.componentInstance.chips;\r\n      const chipList = fixture.componentInstance.chipList;\r\n      const firstChip = nativeChips[0];\r\n      dispatchKeyboardEvent(firstChip, 'keydown', SPACE);\r\n      fixture.detectChanges();\r\n\r\n      expect(instanceChips.first.selected).toBe(true, 'Expected first option to be selected.');\r\n      expect(chipList.selected).toBe(chips.first, 'Expected first option to be selected.');\r\n\r\n      fixture.componentInstance.foods = [];\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(chipList.selected)\r\n        .toBe(undefined, 'Expected selection to be removed when option no longer exists.');\r\n    }));\r\n\r\n\r\n    it('should select an option that was added after initialization', () => {\r\n      fixture.componentInstance.foods.push({viewValue: 'Potatoes', value: 'potatoes-8'});\r\n      fixture.detectChanges();\r\n\r\n      nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\r\n        .map((chip) => chip.nativeElement);\r\n      const lastChip = nativeChips[8];\r\n      dispatchKeyboardEvent(lastChip, 'keydown', SPACE);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.chipList.value)\r\n        .toContain('potatoes-8', 'Expect value contain the value of the last option');\r\n      expect(fixture.componentInstance.chips.last.selected)\r\n        .toBeTruthy('Expect last option selected');\r\n    });\r\n\r\n    it('should not select disabled chips', () => {\r\n      const array = chips.toArray();\r\n      const disabledChip = nativeChips[2];\r\n      dispatchKeyboardEvent(disabledChip, 'keydown', SPACE);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.chipList.value)\r\n        .toBeUndefined('Expect value to be undefined');\r\n      expect(array[2].selected).toBeFalsy('Expect disabled chip not selected');\r\n      expect(fixture.componentInstance.chipList.selected)\r\n        .toBeUndefined('Expect no selected chips');\r\n    });\r\n\r\n  });\r\n\r\n  describe('forms integration', () => {\r\n    let nativeChips: HTMLElement[];\r\n\r\n    describe('single selection', () => {\r\n      beforeEach(() => {\r\n        fixture = createComponent(BasicChipList);\r\n        fixture.detectChanges();\r\n\r\n        nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\r\n          .map((chip) => chip.nativeElement);\r\n        chips = fixture.componentInstance.chips;\r\n      });\r\n\r\n      it('should take an initial view value with reactive forms', () => {\r\n        fixture.componentInstance.control = new FormControl('pizza-1');\r\n        fixture.detectChanges();\r\n\r\n        const array = chips.toArray();\r\n\r\n        expect(array[1].selected).toBeTruthy('Expect pizza-1 chip to be selected');\r\n\r\n        dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected).toBeFalsy('Expect chip to be not selected after toggle selected');\r\n      });\r\n\r\n      it('should set the view value from the form', () => {\r\n        const chipList = fixture.componentInstance.chipList;\r\n        const array = chips.toArray();\r\n\r\n        expect(chipList.value).toBeFalsy('Expect chip list to have no initial value');\r\n\r\n        fixture.componentInstance.control.setValue('pizza-1');\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected).toBeTruthy('Expect chip to be selected');\r\n      });\r\n\r\n      it('should update the form value when the view changes', () => {\r\n\r\n        expect(fixture.componentInstance.control.value)\r\n          .toEqual(null, `Expected the control's value to be empty initially.`);\r\n\r\n        dispatchKeyboardEvent(nativeChips[0], 'keydown', SPACE);\r\n        fixture.detectChanges();\r\n\r\n        expect(fixture.componentInstance.control.value)\r\n          .toEqual('steak-0', `Expected control's value to be set to the new option.`);\r\n      });\r\n\r\n      it('should clear the selection when a nonexistent option value is selected', () => {\r\n        const array = chips.toArray();\r\n\r\n        fixture.componentInstance.control.setValue('pizza-1');\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected)\r\n          .toBeTruthy(`Expected chip with the value to be selected.`);\r\n\r\n        fixture.componentInstance.control.setValue('gibberish');\r\n\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected)\r\n          .toBeFalsy(`Expected chip with the old value not to be selected.`);\r\n      });\r\n\r\n\r\n      it('should clear the selection when the control is reset', () => {\r\n        const array = chips.toArray();\r\n\r\n        fixture.componentInstance.control.setValue('pizza-1');\r\n        fixture.detectChanges();\r\n\r\n        fixture.componentInstance.control.reset();\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected)\r\n          .toBeFalsy(`Expected chip with the old value not to be selected.`);\r\n      });\r\n\r\n      it('should set the control to touched when the chip list is touched', () => {\r\n        expect(fixture.componentInstance.control.touched)\r\n          .toBe(false, 'Expected the control to start off as untouched.');\r\n\r\n        const nativeChipList = fixture.debugElement.query(By.css('.mat-chip-list')).nativeElement;\r\n        dispatchFakeEvent(nativeChipList, 'blur');\r\n\r\n        expect(fixture.componentInstance.control.touched)\r\n          .toBe(true, 'Expected the control to be touched.');\r\n      });\r\n\r\n      it('should not set touched when a disabled chip list is touched', () => {\r\n        expect(fixture.componentInstance.control.touched)\r\n          .toBe(false, 'Expected the control to start off as untouched.');\r\n\r\n        fixture.componentInstance.control.disable();\r\n        const nativeChipList = fixture.debugElement.query(By.css('.mat-chip-list')).nativeElement;\r\n        dispatchFakeEvent(nativeChipList, 'blur');\r\n\r\n        expect(fixture.componentInstance.control.touched)\r\n          .toBe(false, 'Expected the control to stay untouched.');\r\n      });\r\n\r\n      it('should set the control to dirty when the chip list\\'s value changes in the DOM', () => {\r\n        expect(fixture.componentInstance.control.dirty)\r\n          .toEqual(false, `Expected control to start out pristine.`);\r\n\r\n        dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\r\n        fixture.detectChanges();\r\n\r\n        expect(fixture.componentInstance.control.dirty)\r\n          .toEqual(true, `Expected control to be dirty after value was changed by user.`);\r\n      });\r\n\r\n      it('should not set the control to dirty when the value changes programmatically', () => {\r\n        expect(fixture.componentInstance.control.dirty)\r\n          .toEqual(false, `Expected control to start out pristine.`);\r\n\r\n        fixture.componentInstance.control.setValue('pizza-1');\r\n\r\n        expect(fixture.componentInstance.control.dirty)\r\n          .toEqual(false, `Expected control to stay pristine after programmatic change.`);\r\n      });\r\n\r\n\r\n      it('should set an asterisk after the placeholder if the control is required', () => {\r\n        let requiredMarker = fixture.debugElement.query(By.css('.mat-form-field-required-marker'));\r\n        expect(requiredMarker)\r\n          .toBeNull(`Expected placeholder not to have an asterisk, as control was not required.`);\r\n\r\n        fixture.componentInstance.isRequired = true;\r\n        fixture.detectChanges();\r\n\r\n        requiredMarker = fixture.debugElement.query(By.css('.mat-form-field-required-marker'));\r\n        expect(requiredMarker)\r\n          .not.toBeNull(`Expected placeholder to have an asterisk, as control was required.`);\r\n      });\r\n\r\n      it('should be able to programmatically select a falsy option', () => {\r\n        fixture.destroy();\r\n        TestBed.resetTestingModule();\r\n\r\n        const falsyFixture = createComponent(FalsyValueChipList);\r\n        falsyFixture.detectChanges();\r\n\r\n        falsyFixture.componentInstance.control.setValue([0]);\r\n        falsyFixture.detectChanges();\r\n        falsyFixture.detectChanges();\r\n\r\n        expect(falsyFixture.componentInstance.chips.first.selected)\r\n          .toBe(true, 'Expected first option to be selected');\r\n      });\r\n\r\n      it('should not focus the active chip when the value is set programmatically', () => {\r\n        const chipArray = fixture.componentInstance.chips.toArray();\r\n\r\n        spyOn(chipArray[4], 'focus').and.callThrough();\r\n\r\n        fixture.componentInstance.control.setValue('chips-4');\r\n        fixture.detectChanges();\r\n\r\n        expect(chipArray[4].focus).not.toHaveBeenCalled();\r\n      });\r\n    });\r\n\r\n    describe('multiple selection', () => {\r\n      beforeEach(() => {\r\n        fixture = createComponent(MultiSelectionChipList);\r\n        fixture.detectChanges();\r\n\r\n        nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\r\n          .map((chip) => chip.nativeElement);\r\n        chips = fixture.componentInstance.chips;\r\n      });\r\n\r\n      it('should take an initial view value with reactive forms', () => {\r\n        fixture.componentInstance.control = new FormControl(['pizza-1']);\r\n        fixture.detectChanges();\r\n\r\n        const array = chips.toArray();\r\n\r\n        expect(array[1].selected).toBeTruthy('Expect pizza-1 chip to be selected');\r\n\r\n        dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected).toBeFalsy('Expect chip to be not selected after toggle selected');\r\n      });\r\n\r\n      it('should set the view value from the form', () => {\r\n        const chipList = fixture.componentInstance.chipList;\r\n        const array = chips.toArray();\r\n\r\n        expect(chipList.value).toBeFalsy('Expect chip list to have no initial value');\r\n\r\n        fixture.componentInstance.control.setValue(['pizza-1']);\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected).toBeTruthy('Expect chip to be selected');\r\n      });\r\n\r\n      it('should update the form value when the view changes', () => {\r\n\r\n        expect(fixture.componentInstance.control.value)\r\n          .toEqual(null, `Expected the control's value to be empty initially.`);\r\n\r\n        dispatchKeyboardEvent(nativeChips[0], 'keydown', SPACE);\r\n        fixture.detectChanges();\r\n\r\n        expect(fixture.componentInstance.control.value)\r\n          .toEqual(['steak-0'], `Expected control's value to be set to the new option.`);\r\n      });\r\n\r\n      it('should clear the selection when a nonexistent option value is selected', () => {\r\n        const array = chips.toArray();\r\n\r\n        fixture.componentInstance.control.setValue(['pizza-1']);\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected)\r\n          .toBeTruthy(`Expected chip with the value to be selected.`);\r\n\r\n        fixture.componentInstance.control.setValue(['gibberish']);\r\n\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected)\r\n          .toBeFalsy(`Expected chip with the old value not to be selected.`);\r\n      });\r\n\r\n\r\n      it('should clear the selection when the control is reset', () => {\r\n        const array = chips.toArray();\r\n\r\n        fixture.componentInstance.control.setValue(['pizza-1']);\r\n        fixture.detectChanges();\r\n\r\n        fixture.componentInstance.control.reset();\r\n        fixture.detectChanges();\r\n\r\n        expect(array[1].selected)\r\n          .toBeFalsy(`Expected chip with the old value not to be selected.`);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('chip list with chip input', () => {\r\n    let nativeChips: HTMLElement[];\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(InputChipList);\r\n      fixture.detectChanges();\r\n\r\n      nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\r\n        .map((chip) => chip.nativeElement);\r\n    });\r\n\r\n    it('should take an initial view value with reactive forms', () => {\r\n      fixture.componentInstance.control = new FormControl(['pizza-1']);\r\n      fixture.detectChanges();\r\n\r\n      const array = fixture.componentInstance.chips.toArray();\r\n\r\n      expect(array[1].selected).toBeTruthy('Expect pizza-1 chip to be selected');\r\n\r\n      dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\r\n      fixture.detectChanges();\r\n\r\n      expect(array[1].selected).toBeFalsy('Expect chip to be not selected after toggle selected');\r\n    });\r\n\r\n    it('should set the view value from the form', () => {\r\n      const array = fixture.componentInstance.chips.toArray();\r\n\r\n      expect(array[1].selected).toBeFalsy('Expect chip to not be selected');\r\n\r\n      fixture.componentInstance.control.setValue(['pizza-1']);\r\n      fixture.detectChanges();\r\n\r\n      expect(array[1].selected).toBeTruthy('Expect chip to be selected');\r\n    });\r\n\r\n    it('should update the form value when the view changes', () => {\r\n\r\n      expect(fixture.componentInstance.control.value)\r\n        .toEqual(null, `Expected the control's value to be empty initially.`);\r\n\r\n      dispatchKeyboardEvent(nativeChips[0], 'keydown', SPACE);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.control.value)\r\n        .toEqual(['steak-0'], `Expected control's value to be set to the new option.`);\r\n    });\r\n\r\n    it('should clear the selection when a nonexistent option value is selected', () => {\r\n      const array = fixture.componentInstance.chips.toArray();\r\n\r\n      fixture.componentInstance.control.setValue(['pizza-1']);\r\n      fixture.detectChanges();\r\n\r\n      expect(array[1].selected)\r\n        .toBeTruthy(`Expected chip with the value to be selected.`);\r\n\r\n      fixture.componentInstance.control.setValue(['gibberish']);\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(array[1].selected)\r\n        .toBeFalsy(`Expected chip with the old value not to be selected.`);\r\n    });\r\n\r\n\r\n    it('should clear the selection when the control is reset', () => {\r\n      const array = fixture.componentInstance.chips.toArray();\r\n\r\n      fixture.componentInstance.control.setValue(['pizza-1']);\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.control.reset();\r\n      fixture.detectChanges();\r\n\r\n      expect(array[1].selected)\r\n        .toBeFalsy(`Expected chip with the old value not to be selected.`);\r\n    });\r\n\r\n    it('should set the control to touched when the chip list is touched', fakeAsync(() => {\r\n      expect(fixture.componentInstance.control.touched)\r\n        .toBe(false, 'Expected the control to start off as untouched.');\r\n\r\n      const nativeChipList = fixture.debugElement.query(By.css('.mat-chip-list')).nativeElement;\r\n\r\n      dispatchFakeEvent(nativeChipList, 'blur');\r\n      tick();\r\n\r\n      expect(fixture.componentInstance.control.touched)\r\n        .toBe(true, 'Expected the control to be touched.');\r\n    }));\r\n\r\n    it('should not set touched when a disabled chip list is touched', () => {\r\n      expect(fixture.componentInstance.control.touched)\r\n        .toBe(false, 'Expected the control to start off as untouched.');\r\n\r\n      fixture.componentInstance.control.disable();\r\n      const nativeChipList = fixture.debugElement.query(By.css('.mat-chip-list')).nativeElement;\r\n      dispatchFakeEvent(nativeChipList, 'blur');\r\n\r\n      expect(fixture.componentInstance.control.touched)\r\n        .toBe(false, 'Expected the control to stay untouched.');\r\n    });\r\n\r\n    it('should set the control to dirty when the chip list\\'s value changes in the DOM', () => {\r\n      expect(fixture.componentInstance.control.dirty)\r\n        .toEqual(false, `Expected control to start out pristine.`);\r\n\r\n      dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.control.dirty)\r\n        .toEqual(true, `Expected control to be dirty after value was changed by user.`);\r\n    });\r\n\r\n    it('should not set the control to dirty when the value changes programmatically', () => {\r\n      expect(fixture.componentInstance.control.dirty)\r\n        .toEqual(false, `Expected control to start out pristine.`);\r\n\r\n      fixture.componentInstance.control.setValue(['pizza-1']);\r\n\r\n      expect(fixture.componentInstance.control.dirty)\r\n        .toEqual(false, `Expected control to stay pristine after programmatic change.`);\r\n    });\r\n\r\n\r\n    it('should set an asterisk after the placeholder if the control is required', () => {\r\n      let requiredMarker = fixture.debugElement.query(By.css('.mat-form-field-required-marker'));\r\n      expect(requiredMarker)\r\n        .toBeNull(`Expected placeholder not to have an asterisk, as control was not required.`);\r\n\r\n      fixture.componentInstance.isRequired = true;\r\n      fixture.detectChanges();\r\n\r\n      requiredMarker = fixture.debugElement.query(By.css('.mat-form-field-required-marker'));\r\n      expect(requiredMarker)\r\n        .not.toBeNull(`Expected placeholder to have an asterisk, as control was required.`);\r\n    });\r\n\r\n    describe('keyboard behavior', () => {\r\n      beforeEach(() => {\r\n        chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\r\n        chipListInstance = chipListDebugElement.componentInstance;\r\n        chips = chipListInstance.chips;\r\n        manager = fixture.componentInstance.chipList._keyManager;\r\n      });\r\n\r\n      describe('when the input has focus', () => {\r\n\r\n        it('should not focus the last chip when press DELETE', () => {\r\n          let nativeInput = fixture.nativeElement.querySelector('input');\r\n          let DELETE_EVENT: KeyboardEvent =\r\n            createKeyboardEvent('keydown', DELETE, nativeInput);\r\n\r\n          // Focus the input\r\n          nativeInput.focus();\r\n          expect(manager.activeItemIndex).toBe(-1);\r\n\r\n          // Press the DELETE key\r\n          chipListInstance._keydown(DELETE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          // It doesn't focus the last chip\r\n          expect(manager.activeItemIndex).toEqual(-1);\r\n        });\r\n\r\n        it('should focus the last chip when press BACKSPACE', () => {\r\n          let nativeInput = fixture.nativeElement.querySelector('input');\r\n          let BACKSPACE_EVENT: KeyboardEvent =\r\n            createKeyboardEvent('keydown', BACKSPACE, nativeInput);\r\n\r\n          // Focus the input\r\n          nativeInput.focus();\r\n          expect(manager.activeItemIndex).toBe(-1);\r\n\r\n          // Press the BACKSPACE key\r\n          chipListInstance._keydown(BACKSPACE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          // It focuses the last chip\r\n          expect(manager.activeItemIndex).toEqual(chips.length - 1);\r\n        });\r\n\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('error messages', () => {\r\n    let errorTestComponent: ChipListWithFormErrorMessages;\r\n    let containerEl: HTMLElement;\r\n    let chipListEl: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(ChipListWithFormErrorMessages);\r\n      fixture.detectChanges();\r\n      errorTestComponent = fixture.componentInstance;\r\n      containerEl = fixture.debugElement.query(By.css('mat-form-field')).nativeElement;\r\n      chipListEl = fixture.debugElement.query(By.css('mat-chip-list')).nativeElement;\r\n    });\r\n\r\n    it('should not show any errors if the user has not interacted', () => {\r\n      expect(errorTestComponent.formControl.untouched)\r\n        .toBe(true, 'Expected untouched form control');\r\n      expect(containerEl.querySelectorAll('mat-error').length).toBe(0, 'Expected no error message');\r\n      expect(chipListEl.getAttribute('aria-invalid'))\r\n        .toBe('false', 'Expected aria-invalid to be set to \"false\".');\r\n    });\r\n\r\n    it('should display an error message when the list is touched and invalid', fakeAsync(() => {\r\n      expect(errorTestComponent.formControl.invalid)\r\n        .toBe(true, 'Expected form control to be invalid');\r\n      expect(containerEl.querySelectorAll('mat-error').length)\r\n        .toBe(0, 'Expected no error message');\r\n\r\n      errorTestComponent.formControl.markAsTouched();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(containerEl.classList)\r\n        .toContain('mat-form-field-invalid', 'Expected container to have the invalid CSS class.');\r\n      expect(containerEl.querySelectorAll('mat-error').length)\r\n        .toBe(1, 'Expected one error message to have been rendered.');\r\n      expect(chipListEl.getAttribute('aria-invalid'))\r\n        .toBe('true', 'Expected aria-invalid to be set to \"true\".');\r\n    }));\r\n\r\n    it('should display an error message when the parent form is submitted', fakeAsync(() => {\r\n      expect(errorTestComponent.form.submitted)\r\n        .toBe(false, 'Expected form not to have been submitted');\r\n      expect(errorTestComponent.formControl.invalid)\r\n        .toBe(true, 'Expected form control to be invalid');\r\n      expect(containerEl.querySelectorAll('mat-error').length).toBe(0, 'Expected no error message');\r\n\r\n      dispatchFakeEvent(fixture.debugElement.query(By.css('form')).nativeElement, 'submit');\r\n      fixture.detectChanges();\r\n\r\n      fixture.whenStable().then(() => {\r\n        expect(errorTestComponent.form.submitted)\r\n          .toBe(true, 'Expected form to have been submitted');\r\n        expect(containerEl.classList)\r\n          .toContain('mat-form-field-invalid', 'Expected container to have the invalid CSS class.');\r\n        expect(containerEl.querySelectorAll('mat-error').length)\r\n          .toBe(1, 'Expected one error message to have been rendered.');\r\n        expect(chipListEl.getAttribute('aria-invalid'))\r\n          .toBe('true', 'Expected aria-invalid to be set to \"true\".');\r\n      });\r\n    }));\r\n\r\n    it('should hide the errors and show the hints once the chip list becomes valid',\r\n        fakeAsync(() => {\r\n      errorTestComponent.formControl.markAsTouched();\r\n      fixture.detectChanges();\r\n\r\n      fixture.whenStable().then(() => {\r\n        expect(containerEl.classList)\r\n          .toContain('mat-form-field-invalid', 'Expected container to have the invalid CSS class.');\r\n        expect(containerEl.querySelectorAll('mat-error').length)\r\n          .toBe(1, 'Expected one error message to have been rendered.');\r\n        expect(containerEl.querySelectorAll('mat-hint').length)\r\n          .toBe(0, 'Expected no hints to be shown.');\r\n\r\n        errorTestComponent.formControl.setValue('something');\r\n        fixture.detectChanges();\r\n\r\n        fixture.whenStable().then(() => {\r\n          expect(containerEl.classList).not.toContain('mat-form-field-invalid',\r\n            'Expected container not to have the invalid class when valid.');\r\n          expect(containerEl.querySelectorAll('mat-error').length)\r\n            .toBe(0, 'Expected no error messages when the input is valid.');\r\n          expect(containerEl.querySelectorAll('mat-hint').length)\r\n            .toBe(1, 'Expected one hint to be shown once the input is valid.');\r\n        });\r\n      });\r\n    }));\r\n\r\n    it('should set the proper role on the error messages', () => {\r\n      errorTestComponent.formControl.markAsTouched();\r\n      fixture.detectChanges();\r\n\r\n      expect(containerEl.querySelector('mat-error')!.getAttribute('role')).toBe('alert');\r\n    });\r\n\r\n    it('sets the aria-describedby to reference errors when in error state', () => {\r\n      let hintId = fixture.debugElement.query(By.css('.mat-hint')).nativeElement.getAttribute('id');\r\n      let describedBy = chipListEl.getAttribute('aria-describedby');\r\n\r\n      expect(hintId).toBeTruthy('hint should be shown');\r\n      expect(describedBy).toBe(hintId);\r\n\r\n      fixture.componentInstance.formControl.markAsTouched();\r\n      fixture.detectChanges();\r\n\r\n      let errorIds = fixture.debugElement.queryAll(By.css('.mat-error'))\r\n        .map(el => el.nativeElement.getAttribute('id')).join(' ');\r\n      describedBy = chipListEl.getAttribute('aria-describedby');\r\n\r\n      expect(errorIds).toBeTruthy('errors should be shown');\r\n      expect(describedBy).toBe(errorIds);\r\n    });\r\n  });\r\n\r\n  function createComponent<T>(component: Type<T>, providers: Provider[] = []): ComponentFixture<T> {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatChipsModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        NoopAnimationsModule,\r\n      ],\r\n      declarations: [component],\r\n      providers\r\n    }).compileComponents();\r\n\r\n    return TestBed.createComponent<T>(component);\r\n  }\r\n\r\n  function setupStandardList(direction: Direction = 'ltr') {\r\n    fixture = createComponent(StandardChipList, [{\r\n      provide: Directionality, useFactory: () => ({value: direction.toLowerCase()})\r\n    }]);\r\n    fixture.detectChanges();\r\n\r\n    chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\r\n    chipListNativeElement = chipListDebugElement.nativeElement;\r\n    chipListInstance = chipListDebugElement.componentInstance;\r\n    testComponent = fixture.debugElement.componentInstance;\r\n    chips = chipListInstance.chips;\r\n  }\r\n\r\n  function setupInputList() {\r\n    fixture = createComponent(FormFieldChipList);\r\n    fixture.detectChanges();\r\n\r\n    chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\r\n    chipListNativeElement = chipListDebugElement.nativeElement;\r\n    chipListInstance = chipListDebugElement.componentInstance;\r\n    testComponent = fixture.debugElement.componentInstance;\r\n    chips = chipListInstance.chips;\r\n  }\r\n\r\n});\r\n\r\n@Component({\r\n  template: `\r\n    <mat-chip-list [tabIndex]=\"tabIndex\" [selectable]=\"selectable\">\r\n      <div *ngFor=\"let i of [0,1,2,3,4]\">\r\n       <div *ngIf=\"remove != i\">\r\n          <mat-chip (select)=\"chipSelect(i)\" (deselect)=\"chipDeselect(i)\">\r\n            {{name}} {{i + 1}}\r\n          </mat-chip>\r\n        </div>\r\n      </div>\r\n    </mat-chip-list>`\r\n})\r\nclass StandardChipList {\r\n  name: string = 'Test';\r\n  selectable: boolean = true;\r\n  remove: number;\r\n  chipSelect: (index?: number) => void = () => {};\r\n  chipDeselect: (index?: number) => void = () => {};\r\n  tabIndex: number = 0;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field>\r\n      <mat-label>Add a chip</mat-label>\r\n      <mat-chip-list #chipList>\r\n        <mat-chip *ngFor=\"let chip of chips\" (removed)=\"remove(chip)\">{{chip}}</mat-chip>\r\n      </mat-chip-list>\r\n      <input name=\"test\" [matChipInputFor]=\"chipList\"/>\r\n    </mat-form-field>\r\n  `\r\n})\r\nclass FormFieldChipList {\r\n  chips = ['Chip 0', 'Chip 1', 'Chip 2'];\r\n\r\n  remove(chip: string) {\r\n    const index = this.chips.indexOf(chip);\r\n\r\n    if (index > -1) {\r\n      this.chips.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'basic-chip-list',\r\n  template: `\r\n    <mat-form-field>\r\n      <mat-chip-list placeholder=\"Food\" [formControl]=\"control\" [required]=\"isRequired\"\r\n        [tabIndex]=\"tabIndexOverride\" [selectable]=\"selectable\">\r\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\" [disabled]=\"food.disabled\">\r\n          {{ food.viewValue }}\r\n        </mat-chip>\r\n      </mat-chip-list>\r\n    </mat-form-field>\r\n  `\r\n})\r\nclass BasicChipList {\r\n  foods: any[] = [\r\n    {value: 'steak-0', viewValue: 'Steak'},\r\n    {value: 'pizza-1', viewValue: 'Pizza'},\r\n    {value: 'tacos-2', viewValue: 'Tacos', disabled: true},\r\n    {value: 'sandwich-3', viewValue: 'Sandwich'},\r\n    {value: 'chips-4', viewValue: 'Chips'},\r\n    {value: 'eggs-5', viewValue: 'Eggs'},\r\n    {value: 'pasta-6', viewValue: 'Pasta'},\r\n    {value: 'sushi-7', viewValue: 'Sushi'},\r\n  ];\r\n  control = new FormControl();\r\n  isRequired: boolean;\r\n  tabIndexOverride: number;\r\n  selectable: boolean;\r\n\r\n  @ViewChild(MatChipList) chipList: MatChipList;\r\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'multi-selection-chip-list',\r\n  template: `\r\n    <mat-form-field>\r\n      <mat-chip-list [multiple]=\"true\" placeholder=\"Food\" [formControl]=\"control\"\r\n        [required]=\"isRequired\"\r\n        [tabIndex]=\"tabIndexOverride\" [selectable]=\"selectable\">\r\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\" [disabled]=\"food.disabled\">\r\n          {{ food.viewValue }}\r\n        </mat-chip>\r\n      </mat-chip-list>\r\n    </mat-form-field>\r\n  `\r\n})\r\nclass MultiSelectionChipList {\r\n  foods: any[] = [\r\n    {value: 'steak-0', viewValue: 'Steak'},\r\n    {value: 'pizza-1', viewValue: 'Pizza'},\r\n    {value: 'tacos-2', viewValue: 'Tacos', disabled: true},\r\n    {value: 'sandwich-3', viewValue: 'Sandwich'},\r\n    {value: 'chips-4', viewValue: 'Chips'},\r\n    {value: 'eggs-5', viewValue: 'Eggs'},\r\n    {value: 'pasta-6', viewValue: 'Pasta'},\r\n    {value: 'sushi-7', viewValue: 'Sushi'},\r\n  ];\r\n  control = new FormControl();\r\n  isRequired: boolean;\r\n  tabIndexOverride: number;\r\n  selectable: boolean;\r\n\r\n  @ViewChild(MatChipList) chipList: MatChipList;\r\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\r\n}\r\n\r\n@Component({\r\n  selector: 'input-chip-list',\r\n  template: `\r\n    <mat-form-field>\r\n      <mat-chip-list [multiple]=\"true\"\r\n                    placeholder=\"Food\" [formControl]=\"control\" [required]=\"isRequired\" #chipList1>\r\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\">\r\n          {{ food.viewValue }}\r\n        </mat-chip>\r\n      </mat-chip-list>\r\n      <input placeholder=\"New food...\"\r\n          [matChipInputFor]=\"chipList1\"\r\n          [matChipInputSeparatorKeyCodes]=\"separatorKeyCodes\"\r\n          [matChipInputAddOnBlur]=\"addOnBlur\"\r\n          (matChipInputTokenEnd)=\"add($event)\" />/>\r\n    </mat-form-field>\r\n  `\r\n})\r\nclass InputChipList {\r\n  foods: any[] = [\r\n    {value: 'steak-0', viewValue: 'Steak'},\r\n    {value: 'pizza-1', viewValue: 'Pizza'},\r\n    {value: 'tacos-2', viewValue: 'Tacos', disabled: true},\r\n    {value: 'sandwich-3', viewValue: 'Sandwich'},\r\n    {value: 'chips-4', viewValue: 'Chips'},\r\n    {value: 'eggs-5', viewValue: 'Eggs'},\r\n    {value: 'pasta-6', viewValue: 'Pasta'},\r\n    {value: 'sushi-7', viewValue: 'Sushi'},\r\n  ];\r\n  control = new FormControl();\r\n\r\n  separatorKeyCodes = [ENTER, SPACE];\r\n  addOnBlur: boolean = true;\r\n  isRequired: boolean;\r\n\r\n  add(event: MatChipInputEvent): void {\r\n    let input = event.input;\r\n    let value = event.value;\r\n\r\n    // Add our foods\r\n    if ((value || '').trim()) {\r\n      this.foods.push({\r\n        value: `${value.trim().toLowerCase()}-${this.foods.length}`,\r\n        viewValue: value.trim()\r\n      });\r\n    }\r\n\r\n    // Reset the input value\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n  }\r\n\r\n  @ViewChild(MatChipList) chipList: MatChipList;\r\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field>\r\n      <mat-chip-list [formControl]=\"control\">\r\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\">{{ food.viewValue }}</mat-chip>\r\n      </mat-chip-list>\r\n    </mat-form-field>\r\n  `\r\n})\r\nclass FalsyValueChipList {\r\n  foods: any[] = [\r\n    {value: 0, viewValue: 'Steak'},\r\n    {value: 1, viewValue: 'Pizza'},\r\n  ];\r\n  control = new FormControl();\r\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-chip-list>\r\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\" [selected]=\"food.selected\">\r\n            {{ food.viewValue }}\r\n        </mat-chip>\r\n    </mat-chip-list>\r\n  `\r\n})\r\nclass SelectedChipList {\r\n  foods: any[] = [\r\n    {value: 0, viewValue: 'Steak', selected: true},\r\n    {value: 1, viewValue: 'Pizza', selected: false},\r\n    {value: 2, viewValue: 'Pasta', selected: true},\r\n  ];\r\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n<form #form=\"ngForm\" novalidate>\r\n  <mat-form-field>\r\n    <mat-chip-list [formControl]=\"formControl\">\r\n      <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\" [selected]=\"food.selected\">\r\n      {{food.viewValue}}\r\n      </mat-chip>\r\n    </mat-chip-list>\r\n    <mat-hint>Please select a chip, or type to add a new chip</mat-hint>\r\n    <mat-error>Should have value</mat-error>\r\n  </mat-form-field>\r\n</form>\r\n  `\r\n})\r\nclass ChipListWithFormErrorMessages {\r\n  foods: any[] = [\r\n    {value: 0, viewValue: 'Steak', selected: true},\r\n    {value: 1, viewValue: 'Pizza', selected: false},\r\n    {value: 2, viewValue: 'Pasta', selected: true},\r\n  ];\r\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\r\n\r\n  @ViewChild('form') form: NgForm;\r\n  formControl = new FormControl('', Validators.required);\r\n}\r\n"]}