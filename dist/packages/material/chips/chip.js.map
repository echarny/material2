{"version":3,"file":"chip.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ContentChild,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  MAT_RIPPLE_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  RippleConfig,\r\n  RippleGlobalOptions,\r\n  RippleRenderer,\r\n  RippleTarget\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n\r\n/** Represents an event fired on an individual `mat-chip`. */\r\nexport interface MatChipEvent {\r\n  /** The chip the event was fired on. */\r\n  chip: MatChip;\r\n}\r\n\r\n/** Event object emitted by MatChip when selected or deselected. */\r\nexport class MatChipSelectionChange {\r\n  constructor(\r\n    /** Reference to the chip that emitted the event. */\r\n    public source: MatChip,\r\n    /** Whether the chip that emitted the event is selected. */\r\n    public selected: boolean,\r\n    /** Whether the selection change was a result of a user interaction. */\r\n    public isUserInput = false) { }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatChip.\r\n/** @docs-private */\r\nexport class MatChipBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n\r\nexport const _MatChipMixinBase =\r\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\r\n\r\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\r\n\r\n/**\r\n * Dummy directive to add CSS class to chip avatar.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-chip-avatar, [matChipAvatar]',\r\n  host: {'class': 'mat-chip-avatar'}\r\n})\r\nexport class MatChipAvatar {}\r\n\r\n/**\r\n * Dummy directive to add CSS class to chip trailing icon.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\r\n  host: {'class': 'mat-chip-trailing-icon'}\r\n})\r\nexport class MatChipTrailingIcon {}\r\n\r\n/**\r\n * Material design styled Chip component. Used inside the MatChipList component.\r\n */\r\n@Directive({\r\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\r\n  inputs: ['color', 'disabled', 'disableRipple'],\r\n  exportAs: 'matChip',\r\n  host: {\r\n    'class': 'mat-chip',\r\n    '[attr.tabindex]': 'disabled ? null : -1',\r\n    'role': 'option',\r\n    '[class.mat-chip-selected]': 'selected',\r\n    '[class.mat-chip-with-avatar]': 'avatar',\r\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\r\n    '[class.mat-chip-disabled]': 'disabled',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-selected]': 'ariaSelected',\r\n    '(click)': '_handleClick($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n  },\r\n})\r\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\r\n    CanDisable, CanDisableRipple, RippleTarget {\r\n\r\n  /** Reference to the RippleRenderer for the chip. */\r\n  private _chipRipple: RippleRenderer;\r\n\r\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\r\n  private _ripplesGloballyDisabled = false;\r\n\r\n  /**\r\n   * Ripple configuration for ripples that are launched on pointer down.\r\n   * @docs-private\r\n   */\r\n  rippleConfig: RippleConfig = {};\r\n\r\n  /**\r\n   * Whether ripples are disabled on interaction\r\n   * @docs-private\r\n   */\r\n  get rippleDisabled(): boolean {\r\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\r\n  }\r\n\r\n  /** Whether the chip has focus. */\r\n  _hasFocus: boolean = false;\r\n\r\n  /** Whether the chip list is selectable */\r\n  chipListSelectable: boolean = true;\r\n\r\n  /** The chip avatar */\r\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\r\n\r\n  /** The chip's trailing icon. */\r\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\r\n\r\n  /** The chip's remove toggler. */\r\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\r\n\r\n  /** Whether the chip is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    this._selected = coerceBooleanProperty(value);\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: value\r\n    });\r\n  }\r\n  protected _selected: boolean = false;\r\n\r\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value != undefined\r\n      ? this._value\r\n      : this._elementRef.nativeElement.textContent;\r\n  }\r\n  set value(value: any) { this._value = value; }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Whether or not the chip is selectable. When a chip is not selectable,\r\n   * changes to it's selected state are always ignored. By default a chip is\r\n   * selectable, and it becomes non-selectable if it's parent chip list is\r\n   * not selectable.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\r\n  protected _selectable: boolean = true;\r\n\r\n  /**\r\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\r\n   */\r\n  @Input()\r\n  get removable(): boolean { return this._removable; }\r\n  set removable(value: boolean) {\r\n    this._removable = coerceBooleanProperty(value);\r\n  }\r\n  protected _removable: boolean = true;\r\n\r\n  /** Emits when the chip is focused. */\r\n  readonly _onFocus = new Subject<MatChipEvent>();\r\n\r\n  /** Emits when the chip is blured. */\r\n  readonly _onBlur = new Subject<MatChipEvent>();\r\n\r\n  /** Emitted when the chip is selected or deselected. */\r\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\r\n      new EventEmitter<MatChipSelectionChange>();\r\n\r\n  /** Emitted when the chip is destroyed. */\r\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /** Emitted when a chip is to be removed. */\r\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /** The ARIA selected applied to the chip. */\r\n  get ariaSelected(): string | null {\r\n    return this.selectable ? this.selected.toString() : null;\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef,\r\n              ngZone: NgZone,\r\n              platform: Platform,\r\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\r\n    super(_elementRef);\r\n\r\n    this._addHostClassName();\r\n\r\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\r\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\r\n\r\n    if (globalOptions) {\r\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\r\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\r\n      this.rippleConfig = {\r\n        speedFactor: globalOptions.baseSpeedFactor,\r\n        animation: globalOptions.animation,\r\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\r\n      };\r\n    }\r\n  }\r\n\r\n  _addHostClassName() {\r\n    // Add class for the different chips\r\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\r\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\r\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\r\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\r\n        return;\r\n      }\r\n    }\r\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.emit({chip: this});\r\n    this._chipRipple._removeTriggerEvents();\r\n  }\r\n\r\n  /** Selects the chip. */\r\n  select(): void {\r\n    this._selected = true;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: true\r\n    });\r\n  }\r\n\r\n  /** Deselects the chip. */\r\n  deselect(): void {\r\n    this._selected = false;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: false\r\n    });\r\n  }\r\n\r\n  /** Select this chip and emit selected event */\r\n  selectViaInteraction(): void {\r\n    this._selected = true;\r\n    // Emit select event when selected changes.\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: true,\r\n      selected: true\r\n    });\r\n  }\r\n\r\n  /** Toggles the current selected state of this chip. */\r\n  toggleSelected(isUserInput: boolean = false): boolean {\r\n    this._selected = !this.selected;\r\n\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput,\r\n      selected: this._selected\r\n    });\r\n\r\n    return this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the chip. */\r\n  focus(): void {\r\n    if (!this._hasFocus) {\r\n      this._elementRef.nativeElement.focus();\r\n      this._onFocus.next({chip: this});\r\n    }\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  /**\r\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n   * BACKSPACE keys are pressed.\r\n   *\r\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n   */\r\n  remove(): void {\r\n    if (this.removable) {\r\n      this.removed.emit({chip: this});\r\n    }\r\n  }\r\n\r\n  /** Ensures events fire properly upon click. */\r\n  _handleClick(event: Event) {\r\n    // Check disabled\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /** Handle custom key presses. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        // If we are removable, remove the focused chip\r\n        this.remove();\r\n        // Always prevent so page navigation does not occur\r\n        event.preventDefault();\r\n        break;\r\n      case SPACE:\r\n        // If we are selectable, toggle the focused chip\r\n        if (this.selectable) {\r\n          this.toggleSelected(true);\r\n        }\r\n\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\r\n\r\n  _blur(): void {\r\n    this._hasFocus = false;\r\n    this._onBlur.next({chip: this});\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\r\n * available at https://material.io/icons/#ic_cancel.\r\n *\r\n * Example:\r\n *\r\n *     `<mat-chip>\r\n *       <mat-icon matChipRemove>cancel</mat-icon>\r\n *     </mat-chip>`\r\n *\r\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\r\n * styles to properly center the icon within the chip.\r\n */\r\n@Directive({\r\n  selector: '[matChipRemove]',\r\n  host: {\r\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\r\n    '(click)': '_handleClick()',\r\n  }\r\n})\r\nexport class MatChipRemove {\r\n  constructor(protected _parentChip: MatChip) {\r\n  }\r\n\r\n  /** Calls the parent chip's public `remove()` method if applicable. */\r\n  _handleClick(): void {\r\n    if (this._parentChip.removable) {\r\n      this._parentChip.remove();\r\n    }\r\n  }\r\n}\r\n"]}