{"version":3,"file":"chip.spec.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directionality} from '@angular/cdk/bidi';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {createKeyboardEvent} from '@angular/cdk/testing';\r\nimport {Component, DebugElement} from '@angular/core';\r\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MatChip, MatChipEvent, MatChipSelectionChange, MatChipsModule} from './index';\r\n\r\n\r\ndescribe('Chips', () => {\r\n  let fixture: ComponentFixture<any>;\r\n  let chipDebugElement: DebugElement;\r\n  let chipNativeElement: HTMLElement;\r\n  let chipInstance: MatChip;\r\n\r\n  let dir = 'ltr';\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatChipsModule],\r\n      declarations: [BasicChip, SingleChip],\r\n      providers: [{\r\n        provide: Directionality, useFactory: () => ({value: dir})\r\n      }]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  describe('MatBasicChip', () => {\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(BasicChip);\r\n      fixture.detectChanges();\r\n\r\n      chipDebugElement = fixture.debugElement.query(By.directive(MatChip));\r\n      chipNativeElement = chipDebugElement.nativeElement;\r\n      chipInstance = chipDebugElement.injector.get(MatChip);\r\n\r\n      document.body.appendChild(chipNativeElement);\r\n    });\r\n\r\n    afterEach(() => {\r\n      document.body.removeChild(chipNativeElement);\r\n    });\r\n\r\n    it('adds the `mat-basic-chip` class', () => {\r\n      expect(chipNativeElement.classList).toContain('mat-chip');\r\n      expect(chipNativeElement.classList).toContain('mat-basic-chip');\r\n    });\r\n  });\r\n\r\n  describe('MatChip', () => {\r\n    let testComponent: SingleChip;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(SingleChip);\r\n      fixture.detectChanges();\r\n\r\n      chipDebugElement = fixture.debugElement.query(By.directive(MatChip));\r\n      chipNativeElement = chipDebugElement.nativeElement;\r\n      chipInstance = chipDebugElement.injector.get(MatChip);\r\n      testComponent = fixture.debugElement.componentInstance;\r\n\r\n      document.body.appendChild(chipNativeElement);\r\n    });\r\n\r\n    afterEach(() => {\r\n      document.body.removeChild(chipNativeElement);\r\n    });\r\n\r\n    describe('basic behaviors', () => {\r\n\r\n      it('adds the `mat-chip` class', () => {\r\n        expect(chipNativeElement.classList).toContain('mat-chip');\r\n      });\r\n\r\n      it('does not add the `mat-basic-chip` class', () => {\r\n        expect(chipNativeElement.classList).not.toContain('mat-basic-chip');\r\n      });\r\n\r\n      it('emits focus only once for multiple clicks', () => {\r\n        let counter = 0;\r\n        chipInstance._onFocus.subscribe(() => {\r\n          counter ++ ;\r\n        });\r\n\r\n        chipNativeElement.focus();\r\n        chipNativeElement.focus();\r\n        fixture.detectChanges();\r\n\r\n        expect(counter).toBe(1);\r\n      });\r\n\r\n      it('emits destroy on destruction', () => {\r\n        spyOn(testComponent, 'chipDestroy').and.callThrough();\r\n\r\n        // Force a destroy callback\r\n        testComponent.shouldShow = false;\r\n        fixture.detectChanges();\r\n\r\n        expect(testComponent.chipDestroy).toHaveBeenCalledTimes(1);\r\n      });\r\n\r\n      it('allows color customization', () => {\r\n        expect(chipNativeElement.classList).toContain('mat-primary');\r\n\r\n        testComponent.color = 'warn';\r\n        fixture.detectChanges();\r\n\r\n        expect(chipNativeElement.classList).not.toContain('mat-primary');\r\n        expect(chipNativeElement.classList).toContain('mat-warn');\r\n      });\r\n\r\n      it('allows selection', () => {\r\n        spyOn(testComponent, 'chipSelectionChange');\r\n        expect(chipNativeElement.classList).not.toContain('mat-chip-selected');\r\n\r\n        testComponent.selected = true;\r\n        fixture.detectChanges();\r\n\r\n        expect(chipNativeElement.classList).toContain('mat-chip-selected');\r\n        expect(testComponent.chipSelectionChange)\r\n            .toHaveBeenCalledWith({source: chipInstance, isUserInput: false, selected: true});\r\n      });\r\n\r\n      it('allows removal', () => {\r\n        spyOn(testComponent, 'chipRemove');\r\n\r\n        chipInstance.remove();\r\n        fixture.detectChanges();\r\n\r\n        expect(testComponent.chipRemove).toHaveBeenCalledWith({chip: chipInstance});\r\n      });\r\n    });\r\n\r\n    describe('keyboard behavior', () => {\r\n\r\n      describe('when selectable is true', () => {\r\n        beforeEach(() => {\r\n          testComponent.selectable = true;\r\n          fixture.detectChanges();\r\n        });\r\n\r\n        it('should selects/deselects the currently focused chip on SPACE', () => {\r\n          const SPACE_EVENT: KeyboardEvent = createKeyboardEvent('keydown', SPACE) as KeyboardEvent;\r\n          const CHIP_SELECTED_EVENT: MatChipSelectionChange = {\r\n            source: chipInstance,\r\n            isUserInput: true,\r\n            selected: true\r\n          };\r\n\r\n          const CHIP_DESELECTED_EVENT: MatChipSelectionChange = {\r\n            source: chipInstance,\r\n            isUserInput: true,\r\n            selected: false\r\n          };\r\n\r\n          spyOn(testComponent, 'chipSelectionChange');\r\n\r\n          // Use the spacebar to select the chip\r\n          chipInstance._handleKeydown(SPACE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          expect(chipInstance.selected).toBeTruthy();\r\n          expect(testComponent.chipSelectionChange).toHaveBeenCalledTimes(1);\r\n          expect(testComponent.chipSelectionChange).toHaveBeenCalledWith(CHIP_SELECTED_EVENT);\r\n\r\n          // Use the spacebar to deselect the chip\r\n          chipInstance._handleKeydown(SPACE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          expect(chipInstance.selected).toBeFalsy();\r\n          expect(testComponent.chipSelectionChange).toHaveBeenCalledTimes(2);\r\n          expect(testComponent.chipSelectionChange).toHaveBeenCalledWith(CHIP_DESELECTED_EVENT);\r\n        });\r\n\r\n        it('should have correct aria-selected', () => {\r\n          expect(chipNativeElement.getAttribute('aria-selected')).toBe('false');\r\n\r\n          testComponent.selected = true;\r\n          fixture.detectChanges();\r\n\r\n          expect(chipNativeElement.getAttribute('aria-selected')).toBe('true');\r\n        });\r\n      });\r\n\r\n      describe('when selectable is false', () => {\r\n        beforeEach(() => {\r\n          testComponent.selectable = false;\r\n          fixture.detectChanges();\r\n        });\r\n\r\n        it('SPACE ignores selection', () => {\r\n          const SPACE_EVENT: KeyboardEvent = createKeyboardEvent('keydown', SPACE) as KeyboardEvent;\r\n\r\n          spyOn(testComponent, 'chipSelectionChange');\r\n\r\n          // Use the spacebar to attempt to select the chip\r\n          chipInstance._handleKeydown(SPACE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          expect(chipInstance.selected).toBeFalsy();\r\n          expect(testComponent.chipSelectionChange).not.toHaveBeenCalled();\r\n        });\r\n\r\n        it('should not have the aria-selected attribute', () => {\r\n          expect(chipNativeElement.hasAttribute('aria-selected')).toBe(false);\r\n        });\r\n      });\r\n\r\n      describe('when removable is true', () => {\r\n        beforeEach(() => {\r\n          testComponent.removable = true;\r\n          fixture.detectChanges();\r\n        });\r\n\r\n        it('DELETE emits the (removed) event', () => {\r\n          const DELETE_EVENT = createKeyboardEvent('keydown', DELETE) as KeyboardEvent;\r\n\r\n          spyOn(testComponent, 'chipRemove');\r\n\r\n          // Use the delete to remove the chip\r\n          chipInstance._handleKeydown(DELETE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          expect(testComponent.chipRemove).toHaveBeenCalled();\r\n        });\r\n\r\n        it('BACKSPACE emits the (removed) event', () => {\r\n          const BACKSPACE_EVENT = createKeyboardEvent('keydown', BACKSPACE) as KeyboardEvent;\r\n\r\n          spyOn(testComponent, 'chipRemove');\r\n\r\n          // Use the delete to remove the chip\r\n          chipInstance._handleKeydown(BACKSPACE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          expect(testComponent.chipRemove).toHaveBeenCalled();\r\n        });\r\n      });\r\n\r\n      describe('when removable is false', () => {\r\n        beforeEach(() => {\r\n          testComponent.removable = false;\r\n          fixture.detectChanges();\r\n        });\r\n\r\n        it('DELETE does not emit the (removed) event', () => {\r\n          const DELETE_EVENT = createKeyboardEvent('keydown', DELETE) as KeyboardEvent;\r\n\r\n          spyOn(testComponent, 'chipRemove');\r\n\r\n          // Use the delete to remove the chip\r\n          chipInstance._handleKeydown(DELETE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          expect(testComponent.chipRemove).not.toHaveBeenCalled();\r\n        });\r\n\r\n        it('BACKSPACE does not emit the (removed) event', () => {\r\n          const BACKSPACE_EVENT = createKeyboardEvent('keydown', BACKSPACE) as KeyboardEvent;\r\n\r\n          spyOn(testComponent, 'chipRemove');\r\n\r\n          // Use the delete to remove the chip\r\n          chipInstance._handleKeydown(BACKSPACE_EVENT);\r\n          fixture.detectChanges();\r\n\r\n          expect(testComponent.chipRemove).not.toHaveBeenCalled();\r\n        });\r\n      });\r\n\r\n      it('should update the aria-label for disabled chips', () => {\r\n        expect(chipNativeElement.getAttribute('aria-disabled')).toBe('false');\r\n\r\n        testComponent.disabled = true;\r\n        fixture.detectChanges();\r\n\r\n        expect(chipNativeElement.getAttribute('aria-disabled')).toBe('true');\r\n      });\r\n\r\n      it('should make disabled chips non-focusable', () => {\r\n        expect(chipNativeElement.getAttribute('tabindex')).toBe('-1');\r\n\r\n        testComponent.disabled = true;\r\n        fixture.detectChanges();\r\n\r\n        expect(chipNativeElement.getAttribute('tabindex')).toBeFalsy();\r\n      });\r\n\r\n    });\r\n  });\r\n});\r\n\r\n@Component({\r\n  template: `\r\n    <mat-chip-list>\r\n      <div *ngIf=\"shouldShow\">\r\n        <mat-chip [selectable]=\"selectable\" [removable]=\"removable\"\r\n                 [color]=\"color\" [selected]=\"selected\" [disabled]=\"disabled\"\r\n                 (focus)=\"chipFocus($event)\" (destroyed)=\"chipDestroy($event)\"\r\n                 (selectionChange)=\"chipSelectionChange($event)\"\r\n                 (removed)=\"chipRemove($event)\">\r\n          {{name}}\r\n        </mat-chip>\r\n      </div>\r\n    </mat-chip-list>`\r\n})\r\nclass SingleChip {\r\n  disabled: boolean = false;\r\n  name: string = 'Test';\r\n  color: string = 'primary';\r\n  selected: boolean = false;\r\n  selectable: boolean = true;\r\n  removable: boolean = true;\r\n  shouldShow: boolean = true;\r\n\r\n  chipFocus: (event?: MatChipEvent) => void = () => {};\r\n  chipDestroy: (event?: MatChipEvent) => void = () => {};\r\n  chipSelectionChange: (event?: MatChipSelectionChange) => void = () => {};\r\n  chipRemove: (event?: MatChipEvent) => void = () => {};\r\n}\r\n\r\n@Component({\r\n  template: `<mat-basic-chip>{{name}}</mat-basic-chip>`\r\n})\r\nclass BasicChip {\r\n}\r\n"]}