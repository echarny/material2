{"version":3,"file":"chip-input.spec.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip-input.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directionality} from '@angular/cdk/bidi';\r\nimport {ENTER, COMMA} from '@angular/cdk/keycodes';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {createKeyboardEvent} from '@angular/cdk/testing';\r\nimport {Component, DebugElement} from '@angular/core';\r\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\r\nimport {By} from '@angular/platform-browser';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatChipInput, MatChipInputEvent} from './chip-input';\r\nimport {MatChipsModule} from './index';\r\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\r\n\r\n\r\ndescribe('MatChipInput', () => {\r\n  let fixture: ComponentFixture<any>;\r\n  let testChipInput: TestChipInput;\r\n  let inputDebugElement: DebugElement;\r\n  let inputNativeElement: HTMLElement;\r\n  let chipInputDirective: MatChipInput;\r\n  let dir = 'ltr';\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [PlatformModule, MatChipsModule, MatFormFieldModule, NoopAnimationsModule],\r\n      declarations: [TestChipInput],\r\n      providers: [{\r\n        provide: Directionality, useFactory: () => {\r\n          return {value: dir.toLowerCase()};\r\n        }\r\n      }]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  beforeEach(async(() => {\r\n    fixture = TestBed.createComponent(TestChipInput);\r\n    testChipInput = fixture.debugElement.componentInstance;\r\n    fixture.detectChanges();\r\n\r\n    inputDebugElement = fixture.debugElement.query(By.directive(MatChipInput));\r\n    chipInputDirective = inputDebugElement.injector.get(MatChipInput) as MatChipInput;\r\n    inputNativeElement = inputDebugElement.nativeElement;\r\n  }));\r\n\r\n  describe('basic behavior', () => {\r\n    it('emits the (chipEnd) on enter keyup', () => {\r\n      let ENTER_EVENT = createKeyboardEvent('keydown', ENTER, inputNativeElement);\r\n\r\n      spyOn(testChipInput, 'add');\r\n\r\n      chipInputDirective._keydown(ENTER_EVENT);\r\n      expect(testChipInput.add).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should have a default id', () => {\r\n      expect(inputNativeElement.getAttribute('id')).toBeTruthy();\r\n    });\r\n\r\n    it('should allow binding to the `placeholder` input', () => {\r\n      expect(inputNativeElement.hasAttribute('placeholder')).toBe(false);\r\n\r\n      testChipInput.placeholder = 'bound placeholder';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputNativeElement.getAttribute('placeholder')).toBe('bound placeholder');\r\n    });\r\n\r\n    it('should propagate the dynamic `placeholder` value to the form field', () => {\r\n      fixture.componentInstance.placeholder = 'add a chip';\r\n      fixture.detectChanges();\r\n\r\n      const label: HTMLElement = fixture.nativeElement.querySelector('.mat-form-field-label');\r\n\r\n      expect(label).toBeTruthy();\r\n      expect(label.textContent).toContain('add a chip');\r\n\r\n      fixture.componentInstance.placeholder = 'or don\\'t';\r\n      fixture.detectChanges();\r\n\r\n      expect(label.textContent).toContain('or don\\'t');\r\n    });\r\n\r\n  });\r\n\r\n  describe('[addOnBlur]', () => {\r\n    it('allows (chipEnd) when true', () => {\r\n      spyOn(testChipInput, 'add');\r\n\r\n      testChipInput.addOnBlur = true;\r\n      fixture.detectChanges();\r\n\r\n      chipInputDirective._blur();\r\n      expect(testChipInput.add).toHaveBeenCalled();\r\n    });\r\n\r\n    it('disallows (chipEnd) when false', () => {\r\n      spyOn(testChipInput, 'add');\r\n\r\n      testChipInput.addOnBlur = false;\r\n      fixture.detectChanges();\r\n\r\n      chipInputDirective._blur();\r\n      expect(testChipInput.add).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('[separatorKeyCodes]', () => {\r\n    it('does not emit (chipEnd) when a non-separator key is pressed', () => {\r\n      let ENTER_EVENT = createKeyboardEvent('keydown', ENTER, inputNativeElement);\r\n      spyOn(testChipInput, 'add');\r\n\r\n      chipInputDirective.separatorKeyCodes = [COMMA];\r\n      fixture.detectChanges();\r\n\r\n      chipInputDirective._keydown(ENTER_EVENT);\r\n      expect(testChipInput.add).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('emits (chipEnd) when a custom separator keys is pressed', () => {\r\n      let COMMA_EVENT = createKeyboardEvent('keydown', COMMA, inputNativeElement);\r\n      spyOn(testChipInput, 'add');\r\n\r\n      chipInputDirective.separatorKeyCodes = [COMMA];\r\n      fixture.detectChanges();\r\n\r\n      chipInputDirective._keydown(COMMA_EVENT);\r\n      expect(testChipInput.add).toHaveBeenCalled();\r\n    });\r\n\r\n    it('emits accepts the custom separator keys in a Set', () => {\r\n      let COMMA_EVENT = createKeyboardEvent('keydown', COMMA, inputNativeElement);\r\n      spyOn(testChipInput, 'add');\r\n\r\n      chipInputDirective.separatorKeyCodes = new Set([COMMA]);\r\n      fixture.detectChanges();\r\n\r\n      chipInputDirective._keydown(COMMA_EVENT);\r\n      expect(testChipInput.add).toHaveBeenCalled();\r\n    });\r\n\r\n    it('emits (chipEnd) when the separator keys are configured globally', () => {\r\n      fixture.destroy();\r\n\r\n      TestBed\r\n        .resetTestingModule()\r\n        .configureTestingModule({\r\n          imports: [MatChipsModule, MatFormFieldModule, PlatformModule, NoopAnimationsModule],\r\n          declarations: [TestChipInput],\r\n          providers: [{\r\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\r\n            useValue: ({separatorKeyCodes: [COMMA]} as MatChipsDefaultOptions)\r\n          }]\r\n        })\r\n        .compileComponents();\r\n\r\n      fixture = TestBed.createComponent(TestChipInput);\r\n      testChipInput = fixture.debugElement.componentInstance;\r\n      fixture.detectChanges();\r\n\r\n      inputDebugElement = fixture.debugElement.query(By.directive(MatChipInput));\r\n      chipInputDirective = inputDebugElement.injector.get(MatChipInput) as MatChipInput;\r\n      inputNativeElement = inputDebugElement.nativeElement;\r\n\r\n      spyOn(testChipInput, 'add');\r\n      fixture.detectChanges();\r\n\r\n      chipInputDirective._keydown(createKeyboardEvent('keydown', COMMA, inputNativeElement));\r\n      expect(testChipInput.add).toHaveBeenCalled();\r\n    });\r\n\r\n  });\r\n});\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field>\r\n      <mat-chip-list #chipList>\r\n      </mat-chip-list>\r\n      <input matInput [matChipInputFor]=\"chipList\"\r\n                [matChipInputAddOnBlur]=\"addOnBlur\"\r\n                (matChipInputTokenEnd)=\"add($event)\"\r\n                [placeholder]=\"placeholder\" />\r\n    </mat-form-field>\r\n  `\r\n})\r\nclass TestChipInput {\r\n  addOnBlur: boolean = false;\r\n  placeholder = '';\r\n\r\n  add(_: MatChipInputEvent) {\r\n  }\r\n}\r\n"]}