{"version":3,"file":"dialog-content-directives.js","sourceRoot":"","sources":["../../../../src/lib/dialog/dialog-content-directives.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Optional,\r\n  SimpleChanges,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport {MatDialog} from './dialog';\r\nimport {MatDialogRef} from './dialog-ref';\r\n\r\n/** Counter used to generate unique IDs for dialog elements. */\r\nlet dialogElementUid = 0;\r\n\r\n/**\r\n * Button that will close the current dialog.\r\n */\r\n@Directive({\r\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\r\n  exportAs: 'matDialogClose',\r\n  host: {\r\n    '(click)': 'dialogRef.close(dialogResult)',\r\n    '[attr.aria-label]': 'ariaLabel',\r\n    'type': 'button', // Prevents accidental form submits.\r\n  }\r\n})\r\nexport class MatDialogClose implements OnInit, OnChanges {\r\n  /** Screenreader label for the button. */\r\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\r\n\r\n  /** Dialog close input. */\r\n  @Input('mat-dialog-close') dialogResult: any;\r\n\r\n  @Input('matDialogClose') _matDialogClose: any;\r\n\r\n  constructor(\r\n    @Optional() public dialogRef: MatDialogRef<any>,\r\n    private _elementRef: ElementRef,\r\n    private _dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    if (!this.dialogRef) {\r\n      // When this directive is included in a dialog via TemplateRef (rather than being\r\n      // in a Component), the DialogRef isn't available via injection because embedded\r\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\r\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\r\n      // be resolved at constructor time.\r\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\r\n\r\n    if (proxiedChange) {\r\n      this.dialogResult = proxiedChange.currentValue;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\r\n */\r\n@Directive({\r\n  selector: '[mat-dialog-title], [matDialogTitle]',\r\n  exportAs: 'matDialogTitle',\r\n  host: {\r\n    'class': 'mat-dialog-title',\r\n    '[id]': 'id',\r\n  },\r\n})\r\nexport class MatDialogTitle implements OnInit {\r\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\r\n\r\n  constructor(\r\n    @Optional() private _dialogRef: MatDialogRef<any>,\r\n    private _elementRef: ElementRef,\r\n    private _dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    if (!this._dialogRef) {\r\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\r\n    }\r\n\r\n    if (this._dialogRef) {\r\n      Promise.resolve().then(() => {\r\n        const container = this._dialogRef._containerInstance;\r\n\r\n        if (container && !container._ariaLabelledBy) {\r\n          container._ariaLabelledBy = this.id;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Scrollable content container of a dialog.\r\n */\r\n@Directive({\r\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\r\n  host: {'class': 'mat-dialog-content'}\r\n})\r\nexport class MatDialogContent {}\r\n\r\n\r\n/**\r\n * Container for the bottom action buttons in a dialog.\r\n * Stays fixed to the bottom when scrolling.\r\n */\r\n@Directive({\r\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\r\n  host: {'class': 'mat-dialog-actions'}\r\n})\r\nexport class MatDialogActions {}\r\n\r\n\r\n/**\r\n * Finds the closest MatDialogRef to an element by looking at the DOM.\r\n * @param element Element relative to which to look for a dialog.\r\n * @param openDialogs References to the currently-open dialogs.\r\n */\r\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\r\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\r\n\r\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\r\n    parent = parent.parentElement;\r\n  }\r\n\r\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\r\n}\r\n"]}