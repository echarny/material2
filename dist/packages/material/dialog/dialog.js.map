{"version":3,"file":"dialog.js","sourceRoot":"","sources":["../../../../src/lib/dialog/dialog.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayContainer,\r\n  OverlayRef,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {Location} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\r\nimport {startWith} from 'rxjs/operators';\r\nimport {MatDialogConfig} from './dialog-config';\r\nimport {MatDialogContainer} from './dialog-container';\r\nimport {MatDialogRef} from './dialog-ref';\r\n\r\n\r\n/** Injection token that can be used to access the data that was passed in to a dialog. */\r\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\r\n\r\n/** Injection token that can be used to specify default dialog options. */\r\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\r\n\r\n/** Injection token that determines the scroll handling while the dialog is open. */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n\r\n/**\r\n * Service to open Material Design modal dialogs.\r\n */\r\n@Injectable()\r\nexport class MatDialog {\r\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\r\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\r\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\r\n  private _ariaHiddenElements = new Map<Element, string|null>();\r\n\r\n  /** Keeps track of the currently-open dialogs. */\r\n  get openDialogs(): MatDialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n  }\r\n\r\n  /** Stream that emits when a dialog has been opened. */\r\n  get afterOpened(): Subject<MatDialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\r\n  }\r\n\r\n  /**\r\n   * Stream that emits when a dialog has been opened.\r\n   * @deprecated Use `afterOpened` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  get afterOpen(): Subject<MatDialogRef<any>> {\r\n    return this.afterOpened;\r\n  }\r\n\r\n  get _afterAllClosed() {\r\n    const parent = this._parentDialog;\r\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\r\n  }\r\n\r\n  /**\r\n   * Stream that emits when all open dialog have finished closing.\r\n   * Will emit on subscribe if there are no open dialogs to begin with.\r\n   */\r\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\r\n      this._afterAllClosed :\r\n      this._afterAllClosed.pipe(startWith(undefined)));\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _injector: Injector,\r\n      @Optional() private _location: Location,\r\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\r\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\r\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\r\n      private _overlayContainer: OverlayContainer) {}\r\n\r\n  /**\r\n   * Opens a modal dialog containing the given component.\r\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\r\n   *     or a TemplateRef to instantiate as the dialog content.\r\n   * @param config Extra configuration options.\r\n   * @returns Reference to the newly-opened dialog.\r\n   */\r\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\r\n\r\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\r\n\r\n    if (config.id && this.getDialogById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\r\n                                                      dialogContainer,\r\n                                                      overlayRef,\r\n                                                      config);\r\n\r\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\r\n    if (!this.openDialogs.length) {\r\n      this._hideNonDialogContentFromAssistiveTechnology();\r\n    }\r\n\r\n    this.openDialogs.push(dialogRef);\r\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\r\n    this.afterOpened.next(dialogRef);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Closes all of the currently-open dialogs.\r\n   */\r\n  closeAll(): void {\r\n    let i = this.openDialogs.length;\r\n\r\n    while (i--) {\r\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\r\n      // runs on the next microtask, in addition to modifying the array as we're going\r\n      // through it. We loop through all of them and call close without assuming that\r\n      // they'll be removed from the list instantaneously.\r\n      this.openDialogs[i].close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds an open dialog by its id.\r\n   * @param id ID to use when looking up the dialog.\r\n   */\r\n  getDialogById(id: string): MatDialogRef<any> | undefined {\r\n    return this.openDialogs.find(dialog => dialog.id === id);\r\n  }\r\n\r\n  /**\r\n   * Creates the overlay into which the dialog will be loaded.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the OverlayRef for the created overlay.\r\n   */\r\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\r\n    const overlayConfig = this._getOverlayConfig(config);\r\n    return this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Creates an overlay config from a dialog config.\r\n   * @param dialogConfig The dialog configuration.\r\n   * @returns The overlay configuration.\r\n   */\r\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\r\n    const state = new OverlayConfig({\r\n      positionStrategy: this._overlay.position().global(),\r\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\r\n      panelClass: dialogConfig.panelClass,\r\n      hasBackdrop: dialogConfig.hasBackdrop,\r\n      direction: dialogConfig.direction,\r\n      minWidth: dialogConfig.minWidth,\r\n      minHeight: dialogConfig.minHeight,\r\n      maxWidth: dialogConfig.maxWidth,\r\n      maxHeight: dialogConfig.maxHeight\r\n    });\r\n\r\n    if (dialogConfig.backdropClass) {\r\n      state.backdropClass = dialogConfig.backdropClass;\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n   * @param overlay Reference to the dialog's underlying overlay.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to a ComponentRef for the attached container.\r\n   */\r\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\r\n      [MatDialogConfig, config]\r\n    ]));\r\n    const containerPortal =\r\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\r\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\r\n\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  private _attachDialogContent<T, R>(\r\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n      dialogContainer: MatDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: MatDialogConfig): MatDialogRef<T, R> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef =\r\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\r\n\r\n    // When the dialog backdrop is clicked, we want to close it.\r\n    if (config.hasBackdrop) {\r\n      overlayRef.backdropClick().subscribe(() => {\r\n        if (!dialogRef.disableClose) {\r\n          dialogRef.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (componentOrTemplateRef instanceof TemplateRef) {\r\n      dialogContainer.attachTemplatePortal(\r\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\r\n          <any>{ $implicit: config.data, dialogRef }));\r\n    } else {\r\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n      const contentRef = dialogContainer.attachComponentPortal<T>(\r\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n      dialogRef.componentInstance = contentRef.instance;\r\n    }\r\n\r\n    dialogRef\r\n      .updateSize(config.width, config.height)\r\n      .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n   * of a dialog to close itself and, optionally, to return a value.\r\n   * @param config Config object that is used to construct the dialog.\r\n   * @param dialogRef Reference to the dialog.\r\n   * @param container Dialog container element that wraps all of the contents.\r\n   * @returns The custom injector that can be used inside the dialog.\r\n   */\r\n  private _createInjector<T>(\r\n      config: MatDialogConfig,\r\n      dialogRef: MatDialogRef<T>,\r\n      dialogContainer: MatDialogContainer): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n\r\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\r\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\r\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\r\n    // added to the injection tokens.\r\n    const injectionTokens = new WeakMap<any, any>([\r\n      [MatDialogContainer, dialogContainer],\r\n      [MAT_DIALOG_DATA, config.data],\r\n      [MatDialogRef, dialogRef]\r\n    ]);\r\n\r\n    if (config.direction &&\r\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\r\n      injectionTokens.set(Directionality, {\r\n        value: config.direction,\r\n        change: observableOf()\r\n      });\r\n    }\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\r\n\r\n  /**\r\n   * Removes a dialog from the array of open dialogs.\r\n   * @param dialogRef Dialog to be removed.\r\n   */\r\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\r\n    const index = this.openDialogs.indexOf(dialogRef);\r\n\r\n    if (index > -1) {\r\n      this.openDialogs.splice(index, 1);\r\n\r\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\r\n      // to a the siblings and emit to the `afterAllClosed` stream.\r\n      if (!this.openDialogs.length) {\r\n        this._ariaHiddenElements.forEach((previousValue, element) => {\r\n          if (previousValue) {\r\n            element.setAttribute('aria-hidden', previousValue);\r\n          } else {\r\n            element.removeAttribute('aria-hidden');\r\n          }\r\n        });\r\n\r\n        this._ariaHiddenElements.clear();\r\n        this._afterAllClosed.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hides all of the content that isn't an overlay from assistive technology.\r\n   */\r\n  private _hideNonDialogContentFromAssistiveTechnology() {\r\n    const overlayContainer = this._overlayContainer.getContainerElement();\r\n\r\n    // Ensure that the overlay container is attached to the DOM.\r\n    if (overlayContainer.parentElement) {\r\n      const siblings = overlayContainer.parentElement.children;\r\n\r\n      for (let i = siblings.length - 1; i > -1; i--) {\r\n        let sibling = siblings[i];\r\n\r\n        if (sibling !== overlayContainer &&\r\n          sibling.nodeName !== 'SCRIPT' &&\r\n          sibling.nodeName !== 'STYLE' &&\r\n          !sibling.hasAttribute('aria-live')) {\r\n\r\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\r\n          sibling.setAttribute('aria-hidden', 'true');\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Applies default options to the dialog config.\r\n * @param config Config to be modified.\r\n * @param defaultOptions Default options provided.\r\n * @returns The new configuration object.\r\n */\r\nfunction _applyConfigDefaults(\r\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\r\n  return {...defaultOptions, ...config};\r\n}\r\n"]}