{"version":3,"file":"simple-snack-bar.js","sourceRoot":"","sources":["../../../../src/lib/snack-bar/simple-snack-bar.ts"],"names":[],"mappings":";;;;;;;;;AAQA,sCAA4F;AAC5F,iDAA+C;AAC/C,uDAAsD;AACtD,+DAA6D;;;;;;IAwB3D,wBACS,WAA2C,EACtB;QADrB,gBAAW,GAAX,WAAW,CAAgC;QAElD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;IAED,4CAA4C;;IAC5C,+BAAM;IAAN;QACE,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;KACtC;IAGD,sBAAI,qCAAS;QADb,4CAA4C;;QAC5C;YACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;SAC3B;;;OAAA;;gBA/BF,gBAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,kBAAkB;oBAC5B,WAAW,EAAE,uBAAuB;oBACpC,SAAS,EAAE,CAAC,sBAAsB,CAAC;oBACnC,aAAa,EAAE,wBAAiB,CAAC,IAAI;oBACrC,eAAe,EAAE,8BAAuB,CAAC,MAAM;oBAC/C,UAAU,EAAE,CAAC,4CAAqB,CAAC,WAAW,CAAC;oBAC/C,IAAI,EAAE;wBACJ,gBAAgB,EAAE,EAAE;wBACpB,OAAO,EAAE,qBAAqB;qBAC/B;iBACF;;;;gBArBO,8BAAc;gDA4BjB,aAAM,SAAC,qCAAkB;;yBArC9B;;AA+Ba,wCAAc","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\r\nimport {MatSnackBarRef} from './snack-bar-ref';\r\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\r\nimport {matSnackBarAnimations} from './snack-bar-animations';\r\n\r\n\r\n/**\r\n * A component used to open as the default snack bar, matching material spec.\r\n * This should only be used internally by the snack bar service.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'simple-snack-bar',\r\n  templateUrl: 'simple-snack-bar.html',\r\n  styleUrls: ['simple-snack-bar.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [matSnackBarAnimations.contentFade],\r\n  host: {\r\n    '[@contentFade]': '',\r\n    'class': 'mat-simple-snackbar',\r\n  }\r\n})\r\nexport class SimpleSnackBar {\r\n  /** Data that was injected into the snack bar. */\r\n  data: { message: string, action: string };\r\n\r\n  constructor(\r\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\r\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\r\n    this.data = data;\r\n  }\r\n\r\n  /** Performs the action on the snack bar. */\r\n  action(): void {\r\n    this.snackBarRef.dismissWithAction();\r\n  }\r\n\r\n  /** If the action button should be shown. */\r\n  get hasAction(): boolean {\r\n    return !!this.data.action;\r\n  }\r\n}\r\n"]}