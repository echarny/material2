{"version":3,"file":"grid-list.spec.js","sourceRoot":"","sources":["../../../../src/lib/grid-list/grid-list.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {async, TestBed} from '@angular/core/testing';\r\nimport {Component, DebugElement} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MatGridList, MatGridListModule} from './index';\r\nimport {MatGridTile, MatGridTileText} from './grid-tile';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\n\r\n\r\ndescribe('MatGridList', () => {\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatGridListModule],\r\n      declarations: [\r\n        GridListWithoutCols,\r\n        GridListWithInvalidRowHeightRatio,\r\n        GridListWithTooWideColspan,\r\n        GridListWithUnspecifiedRowHeight,\r\n        GirdListWithRowHeightRatio,\r\n        GridListWithFitRowHeightMode,\r\n        GridListWithFixedRowHeightMode,\r\n        GridListWithUnitlessFixedRowHeight,\r\n        GridListWithUnspecifiedGutterSize,\r\n        GridListWithGutterSize,\r\n        GridListWithUnitlessGutterSize,\r\n        GridListWithRatioHeightAndMulipleRows,\r\n        GridListWithFixRowHeightAndMultipleRows,\r\n        GridListWithColspanBinding,\r\n        GridListWithRowspanBinding,\r\n        GridListWithComplexLayout,\r\n        GridListWithFootersWithoutLines,\r\n        GridListWithFooterContainingTwoLines,\r\n        GridListWithoutMatchingGap,\r\n        GridListWithEmptyDirectionality,\r\n        GridListWithRtl,\r\n      ],\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  it('should throw error if cols is not defined', () => {\r\n    let fixture = TestBed.createComponent(GridListWithoutCols);\r\n\r\n    expect(() => fixture.detectChanges()).toThrowError(/must pass in number of columns/);\r\n  });\r\n\r\n  it('should throw error if rowHeight ratio is invalid', () => {\r\n    let fixture = TestBed.createComponent(GridListWithInvalidRowHeightRatio);\r\n\r\n    expect(() => fixture.detectChanges()).toThrowError(/invalid ratio given for row-height/);\r\n  });\r\n\r\n  it('should throw error if tile colspan is wider than total cols', () => {\r\n    let fixture = TestBed.createComponent(GridListWithTooWideColspan);\r\n\r\n    expect(() => fixture.detectChanges()).toThrowError(/tile with colspan 5 is wider than grid/);\r\n  });\r\n\r\n  it('should default to 1:1 row height if undefined ', () => {\r\n    let fixture = TestBed.createComponent(GridListWithUnspecifiedRowHeight);\r\n    fixture.detectChanges();\r\n    let tile = fixture.debugElement.query(By.directive(MatGridTile));\r\n\r\n    // In ratio mode, heights are set using the padding-top property.\r\n    expect(getStyle(tile, 'padding-top')).toBe('200px');\r\n  });\r\n\r\n  it('should use a ratio row height if passed in', () => {\r\n    let fixture = TestBed.createComponent(GirdListWithRowHeightRatio);\r\n\r\n    fixture.componentInstance.rowHeight = '4:1';\r\n    fixture.detectChanges();\r\n\r\n    let tile = fixture.debugElement.query(By.directive(MatGridTile));\r\n    expect(getStyle(tile, 'padding-top')).toBe('100px');\r\n\r\n    fixture.componentInstance.rowHeight = '2:1';\r\n    fixture.detectChanges();\r\n\r\n    expect(getStyle(tile, 'padding-top')).toBe('200px');\r\n  });\r\n\r\n  it('should divide row height evenly in \"fit\" mode', () => {\r\n    let fixture = TestBed.createComponent(GridListWithFitRowHeightMode);\r\n\r\n    fixture.componentInstance.totalHeight = '300px';\r\n    fixture.detectChanges();\r\n    let tile = fixture.debugElement.query(By.directive(MatGridTile));\r\n\r\n    // 149.5 * 2 = 299px + 1px gutter = 300px\r\n    expect(getStyle(tile, 'height')).toBe('149.5px');\r\n\r\n    fixture.componentInstance.totalHeight = '200px';\r\n    fixture.detectChanges();\r\n\r\n    // 99.5 * 2 = 199px + 1px gutter = 200px\r\n    expect(getStyle(tile, 'height')).toBe('99.5px');\r\n  });\r\n\r\n  it('should use the fixed row height if passed in', () => {\r\n    let fixture = TestBed.createComponent(GridListWithFixedRowHeightMode);\r\n\r\n    fixture.componentInstance.rowHeight = '100px';\r\n    fixture.detectChanges();\r\n\r\n    let tile = fixture.debugElement.query(By.directive(MatGridTile));\r\n    expect(getStyle(tile, 'height')).toBe('100px');\r\n\r\n    fixture.componentInstance.rowHeight = '200px';\r\n    fixture.detectChanges();\r\n\r\n    expect(getStyle(tile, 'height')).toBe('200px');\r\n  });\r\n\r\n  it('should default to pixels if row height units are missing', () => {\r\n    let fixture = TestBed.createComponent(GridListWithUnitlessFixedRowHeight);\r\n    fixture.detectChanges();\r\n\r\n    let tile = fixture.debugElement.query(By.directive(MatGridTile));\r\n    expect(getStyle(tile, 'height')).toBe('100px');\r\n  });\r\n\r\n  it('should default gutter size to 1px', () => {\r\n    let fixture = TestBed.createComponent(GridListWithUnspecifiedGutterSize);\r\n    fixture.detectChanges();\r\n\r\n    let tiles = fixture.debugElement.queryAll(By.css('mat-grid-tile'));\r\n\r\n    // check horizontal gutter\r\n    expect(getStyle(tiles[0], 'width')).toBe('99.5px');\r\n    expect(getComputedLeft(tiles[1])).toBe(100.5);\r\n\r\n    // check vertical gutter\r\n    expect(getStyle(tiles[0], 'height')).toBe('100px');\r\n    expect(getStyle(tiles[2], 'top')).toBe('101px');\r\n  });\r\n\r\n  it('should set the gutter size if passed', () => {\r\n    let fixture = TestBed.createComponent(GridListWithGutterSize);\r\n    fixture.detectChanges();\r\n\r\n    let tiles = fixture.debugElement.queryAll(By.css('mat-grid-tile'));\r\n\r\n    // check horizontal gutter\r\n    expect(getStyle(tiles[0], 'width')).toBe('99px');\r\n    expect(getComputedLeft(tiles[1])).toBe(101);\r\n\r\n    // check vertical gutter\r\n    expect(getStyle(tiles[0], 'height')).toBe('100px');\r\n    expect(getStyle(tiles[2], 'top')).toBe('102px');\r\n  });\r\n\r\n  it('should use pixels if gutter units are missing', () => {\r\n    let fixture = TestBed.createComponent(GridListWithUnitlessGutterSize);\r\n    fixture.detectChanges();\r\n\r\n    let tiles = fixture.debugElement.queryAll(By.css('mat-grid-tile'));\r\n\r\n    // check horizontal gutter\r\n    expect(getStyle(tiles[0], 'width')).toBe('99px');\r\n    expect(getComputedLeft(tiles[1])).toBe(101);\r\n\r\n    // check vertical gutter\r\n    expect(getStyle(tiles[0], 'height')).toBe('100px');\r\n    expect(getStyle(tiles[2], 'top')).toBe('102px');\r\n  });\r\n\r\n  it('should set the correct list height in ratio mode', () => {\r\n    let fixture = TestBed.createComponent(GridListWithRatioHeightAndMulipleRows);\r\n    fixture.detectChanges();\r\n\r\n    let list = fixture.debugElement.query(By.directive(MatGridList));\r\n    expect(getStyle(list, 'padding-bottom')).toBe('201px');\r\n  });\r\n\r\n  it('should set the correct list height in fixed mode', () => {\r\n    let fixture = TestBed.createComponent(GridListWithFixRowHeightAndMultipleRows);\r\n    fixture.detectChanges();\r\n\r\n    let list = fixture.debugElement.query(By.directive(MatGridList));\r\n    expect(getStyle(list, 'height')).toBe('201px');\r\n  });\r\n\r\n  it('should allow adjustment of tile colspan', () => {\r\n    let fixture = TestBed.createComponent(GridListWithColspanBinding);\r\n      fixture.componentInstance.colspan = 2;\r\n      fixture.detectChanges();\r\n\r\n      let tile = fixture.debugElement.query(By.directive(MatGridTile));\r\n      expect(getStyle(tile, 'width')).toBe('199.5px');\r\n\r\n      fixture.componentInstance.colspan = 3;\r\n      fixture.detectChanges();\r\n      expect(getStyle(tile, 'width')).toBe('299.75px');\r\n  });\r\n\r\n  it('should allow adjustment of tile rowspan', () => {\r\n    let fixture = TestBed.createComponent(GridListWithRowspanBinding);\r\n\r\n    fixture.componentInstance.rowspan = 2;\r\n    fixture.detectChanges();\r\n\r\n    let tile = fixture.debugElement.query(By.directive(MatGridTile));\r\n    expect(getStyle(tile, 'height')).toBe('201px');\r\n\r\n    fixture.componentInstance.rowspan = 3;\r\n    fixture.detectChanges();\r\n    expect(getStyle(tile, 'height')).toBe('302px');\r\n  });\r\n\r\n  it('should lay out tiles correctly for a complex layout', () => {\r\n    let fixture = TestBed.createComponent(GridListWithComplexLayout);\r\n\r\n      fixture.componentInstance.tiles = [\r\n        {cols: 3, rows: 1},\r\n        {cols: 1, rows: 2},\r\n        {cols: 1, rows: 1},\r\n        {cols: 2, rows: 1}\r\n      ];\r\n\r\n      fixture.detectChanges();\r\n      let tiles = fixture.debugElement.queryAll(By.css('mat-grid-tile'));\r\n\r\n      expect(getStyle(tiles[0], 'width')).toBe('299.75px');\r\n      expect(getStyle(tiles[0], 'height')).toBe('100px');\r\n      expect(getComputedLeft(tiles[0])).toBe(0);\r\n      expect(getStyle(tiles[0], 'top')).toBe('0px');\r\n\r\n      expect(getStyle(tiles[1], 'width')).toBe('99.25px');\r\n      expect(getStyle(tiles[1], 'height')).toBe('201px');\r\n      expect(getComputedLeft(tiles[1])).toBe(300.75);\r\n      expect(getStyle(tiles[1], 'top')).toBe('0px');\r\n\r\n      expect(getStyle(tiles[2], 'width')).toBe('99.25px');\r\n      expect(getStyle(tiles[2], 'height')).toBe('100px');\r\n      expect(getComputedLeft(tiles[2])).toBe(0);\r\n      expect(getStyle(tiles[2], 'top')).toBe('101px');\r\n\r\n      expect(getStyle(tiles[3], 'width')).toBe('199.5px');\r\n      expect(getStyle(tiles[3], 'height')).toBe('100px');\r\n      expect(getComputedLeft(tiles[3])).toBe(100.25);\r\n      expect(getStyle(tiles[3], 'top')).toBe('101px');\r\n  });\r\n\r\n  it('should add not add any classes to footers without lines', () => {\r\n    let fixture = TestBed.createComponent(GridListWithFootersWithoutLines);\r\n    fixture.detectChanges();\r\n\r\n    let footer = fixture.debugElement.query(By.directive(MatGridTileText));\r\n    expect(footer.nativeElement.classList.contains('mat-2-line')).toBe(false);\r\n  });\r\n\r\n  it('should add class to footers with two lines', () => {\r\n    let fixture = TestBed.createComponent(GridListWithFooterContainingTwoLines);\r\n    fixture.detectChanges();\r\n\r\n    let footer = fixture.debugElement.query(By.directive(MatGridTileText));\r\n    expect(footer.nativeElement.classList.contains('mat-2-line')).toBe(true);\r\n  });\r\n\r\n  it('should not use calc() that evaluates to 0', () => {\r\n    const fixture = TestBed.createComponent(GirdListWithRowHeightRatio);\r\n\r\n    fixture.componentInstance.rowHeight = '4:1';\r\n    fixture.detectChanges();\r\n\r\n    const firstTile = fixture.debugElement.query(By.directive(MatGridTile)).nativeElement;\r\n\r\n    expect(firstTile.style.marginTop).toBe('0px');\r\n    expect(firstTile.style.left).toBe('0px');\r\n  });\r\n\r\n  it('should reset the old styles when switching to a new tile styler', () => {\r\n    const fixture = TestBed.createComponent(GirdListWithRowHeightRatio);\r\n\r\n    fixture.componentInstance.rowHeight = '4:1';\r\n    fixture.detectChanges();\r\n\r\n    const list = fixture.debugElement.query(By.directive(MatGridList));\r\n    const tile = fixture.debugElement.query(By.directive(MatGridTile));\r\n\r\n    expect(getStyle(tile, 'padding-top')).toBe('100px');\r\n    expect(getStyle(list, 'padding-bottom')).toBe('100px');\r\n\r\n    fixture.componentInstance.rowHeight = '400px';\r\n    fixture.detectChanges();\r\n\r\n    expect(getStyle(tile, 'padding-top')).toBe('0px', 'Expected tile padding to be reset.');\r\n    expect(getStyle(list, 'padding-bottom')).toBe('0px', 'Expected list padding to be reset.');\r\n    expect(getStyle(tile, 'top')).toBe('0px');\r\n    expect(getStyle(tile, 'height')).toBe('400px');\r\n  });\r\n\r\n  it('should ensure that all tiles are inside the grid when there are no matching gaps', () => {\r\n    const fixture = TestBed.createComponent(GridListWithoutMatchingGap);\r\n    const tiles = fixture.debugElement.queryAll(By.css('mat-grid-tile'));\r\n\r\n    fixture.detectChanges();\r\n    expect(tiles.every(tile => getComputedLeft(tile) >= 0))\r\n        .toBe(true, 'Expected none of the tiles to have a negative `left`');\r\n  });\r\n\r\n  it('should default to LTR if empty directionality is given', () => {\r\n    const fixture = TestBed.createComponent(GridListWithEmptyDirectionality);\r\n    const tile: HTMLElement = fixture.debugElement.query(By.css('mat-grid-tile')).nativeElement;\r\n    fixture.detectChanges();\r\n\r\n    expect(tile.style.left).toBe('0px');\r\n    expect(tile.style.right).toBe('');\r\n  });\r\n\r\n  it('should set `right` styles for RTL', () => {\r\n    const fixture = TestBed.createComponent(GridListWithRtl);\r\n    const tile: HTMLElement = fixture.debugElement.query(By.css('mat-grid-tile')).nativeElement;\r\n    fixture.detectChanges();\r\n\r\n    expect(tile.style.left).toBe('');\r\n    expect(tile.style.right).toBe('0px');\r\n  });\r\n});\r\n\r\n\r\nfunction getStyle(el: DebugElement, prop: string): string {\r\n  return getComputedStyle(el.nativeElement).getPropertyValue(prop);\r\n}\r\n\r\n/** Gets the `left` position of an element. */\r\nfunction getComputedLeft(element: DebugElement): number {\r\n  // While the other properties in this test use `getComputedStyle`, we use `getBoundingClientRect`\r\n  // for left because iOS Safari doesn't support using `getComputedStyle` to get the calculated\r\n  // `left` value when using CSS `calc`. We subtract the `left` of the document body because\r\n  // browsers, by default, add a margin to the body (typically 8px).\r\n  let elementRect = element.nativeElement.getBoundingClientRect();\r\n  let bodyRect = document.body.getBoundingClientRect();\r\n\r\n  return elementRect.left - bodyRect.left;\r\n}\r\n\r\n\r\n@Component({template: '<mat-grid-list></mat-grid-list>'})\r\nclass GridListWithoutCols { }\r\n\r\n@Component({template: '<mat-grid-list cols=\"4\" rowHeight=\"4:3:2\"></mat-grid-list>'})\r\nclass GridListWithInvalidRowHeightRatio { }\r\n\r\n@Component({template:\r\n    '<mat-grid-list cols=\"4\"><mat-grid-tile colspan=\"5\"></mat-grid-tile></mat-grid-list>'})\r\nclass GridListWithTooWideColspan { }\r\n\r\n@Component({template: `\r\n    <div style=\"width:200px\">\r\n      <mat-grid-list cols=\"1\">\r\n        <mat-grid-tile></mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>`})\r\nclass GridListWithUnspecifiedRowHeight { }\r\n\r\n@Component({template: `\r\n    <div style=\"width:400px\">\r\n      <mat-grid-list cols=\"1\" [rowHeight]=\"rowHeight\">\r\n        <mat-grid-tile></mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>`})\r\nclass GirdListWithRowHeightRatio {\r\n  rowHeight: string;\r\n}\r\n\r\n@Component({template: `\r\n    <mat-grid-list cols=\"1\" rowHeight=\"fit\" [style.height]=\"totalHeight\">\r\n      <mat-grid-tile></mat-grid-tile>\r\n      <mat-grid-tile></mat-grid-tile>\r\n    </mat-grid-list>`})\r\nclass GridListWithFitRowHeightMode {\r\n  totalHeight: string;\r\n}\r\n\r\n@Component({template: `\r\n    <mat-grid-list cols=\"4\" [rowHeight]=\"rowHeight\">\r\n      <mat-grid-tile></mat-grid-tile>\r\n    </mat-grid-list>`})\r\nclass GridListWithFixedRowHeightMode {\r\n  rowHeight: string;\r\n}\r\n\r\n@Component({template: `\r\n    <mat-grid-list cols=\"4\" rowHeight=\"100\">\r\n      <mat-grid-tile></mat-grid-tile>\r\n    </mat-grid-list>`})\r\nclass GridListWithUnitlessFixedRowHeight {\r\n  rowHeight: string;\r\n}\r\n\r\n@Component({template: `\r\n    <div style=\"width:200px\">\r\n      <mat-grid-list cols=\"2\" rowHeight=\"100px\">\r\n        <mat-grid-tile></mat-grid-tile>\r\n        <mat-grid-tile></mat-grid-tile>\r\n        <mat-grid-tile></mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>`})\r\nclass GridListWithUnspecifiedGutterSize { }\r\n\r\n@Component({template: `\r\n    <div style=\"width:200px\">\r\n      <mat-grid-list cols=\"2\" gutterSize=\"2px\" rowHeight=\"100px\">\r\n        <mat-grid-tile></mat-grid-tile>\r\n        <mat-grid-tile></mat-grid-tile>\r\n        <mat-grid-tile></mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>`})\r\nclass GridListWithGutterSize { }\r\n\r\n@Component({template: `\r\n    <div style=\"width:200px\">\r\n      <mat-grid-list cols=\"2\" gutterSize=\"2\" rowHeight=\"100px\">\r\n        <mat-grid-tile></mat-grid-tile>\r\n        <mat-grid-tile></mat-grid-tile>\r\n        <mat-grid-tile></mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>`})\r\nclass GridListWithUnitlessGutterSize { }\r\n\r\n@Component({template: `\r\n    <div style=\"width:400px\">\r\n      <mat-grid-list cols=\"1\" rowHeight=\"4:1\">\r\n        <mat-grid-tile></mat-grid-tile>\r\n        <mat-grid-tile></mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>`})\r\nclass GridListWithRatioHeightAndMulipleRows { }\r\n\r\n@Component({template: `\r\n    <mat-grid-list cols=\"1\" rowHeight=\"100px\">\r\n      <mat-grid-tile></mat-grid-tile>\r\n      <mat-grid-tile></mat-grid-tile>\r\n    </mat-grid-list>`})\r\nclass GridListWithFixRowHeightAndMultipleRows { }\r\n\r\n@Component({template: `\r\n    <div style=\"width:400px\">\r\n      <mat-grid-list cols=\"4\">\r\n        <mat-grid-tile [colspan]=\"colspan\"></mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>`})\r\nclass GridListWithColspanBinding {\r\n  colspan: number;\r\n}\r\n\r\n@Component({template: `\r\n    <mat-grid-list cols=\"1\" rowHeight=\"100px\">\r\n      <mat-grid-tile [rowspan]=\"rowspan\"></mat-grid-tile>\r\n    </mat-grid-list>`})\r\nclass GridListWithRowspanBinding {\r\n  rowspan: number;\r\n}\r\n\r\n@Component({template: `\r\n    <div style=\"width:400px\">\r\n      <mat-grid-list cols=\"4\" rowHeight=\"100px\">\r\n        <mat-grid-tile *ngFor=\"let tile of tiles\" [colspan]=\"tile.cols\" [rowspan]=\"tile.rows\"\r\n                      [style.background]=\"tile.color\">\r\n          {{tile.text}}\r\n        </mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>`})\r\nclass GridListWithComplexLayout {\r\n  tiles: any[];\r\n}\r\n\r\n@Component({template: `\r\n    <mat-grid-list cols=\"1\">\r\n      <mat-grid-tile>\r\n        <mat-grid-tile-footer>\r\n          I'm a footer!\r\n        </mat-grid-tile-footer>\r\n      </mat-grid-tile>\r\n    </mat-grid-list>`})\r\nclass GridListWithFootersWithoutLines { }\r\n\r\n@Component({template: `\r\n    <mat-grid-list cols=\"1\">\r\n      <mat-grid-tile>\r\n        <mat-grid-tile-footer>\r\n          <h3 mat-line>First line</h3>\r\n          <span mat-line>Second line</span>\r\n        </mat-grid-tile-footer>\r\n      </mat-grid-tile>\r\n    </mat-grid-list>`})\r\nclass GridListWithFooterContainingTwoLines { }\r\n\r\n@Component({template: `\r\n  <mat-grid-list cols=\"5\">\r\n    <mat-grid-tile [rowspan]=\"1\" [colspan]=\"3\">1</mat-grid-tile>\r\n    <mat-grid-tile [rowspan]=\"2\" [colspan]=\"2\">2</mat-grid-tile>\r\n    <mat-grid-tile [rowspan]=\"1\" [colspan]=\"2\">3</mat-grid-tile>\r\n    <mat-grid-tile [rowspan]=\"2\" [colspan]=\"2\">4</mat-grid-tile>\r\n  </mat-grid-list>\r\n`})\r\nclass GridListWithoutMatchingGap { }\r\n\r\n@Component({\r\n  template: `<mat-grid-list cols=\"1\"><mat-grid-tile>Hello</mat-grid-tile></mat-grid-list>`,\r\n  providers: [{provide: Directionality, useValue: {}}]\r\n})\r\nclass GridListWithEmptyDirectionality { }\r\n\r\n@Component({\r\n  template: `<mat-grid-list cols=\"1\"><mat-grid-tile>Hello</mat-grid-tile></mat-grid-list>`,\r\n  providers: [{provide: Directionality, useValue: {value: 'rtl'}}]\r\n})\r\nclass GridListWithRtl { }\r\n"]}