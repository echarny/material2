{"version":3,"file":"grid-list.js","sourceRoot":"","sources":["../../../../src/lib/grid-list/grid-list.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  AfterContentChecked,\r\n  OnInit,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  Optional,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {MatGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  coerceToString,\r\n  coerceToNumber,\r\n} from './grid-list-measure';\r\n\r\n\r\n// TODO(kara): Conditional (responsive) column count / row size.\r\n// TODO(kara): Re-layout on window resize / media change (debounced).\r\n// TODO(kara): gridTileHeader and gridTileFooter.\r\n\r\nconst MAT_FIT_MODE = 'fit';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-list',\r\n  exportAs: 'matGridList',\r\n  templateUrl: 'grid-list.html',\r\n  styleUrls: ['grid-list.css'],\r\n  host: {\r\n    'class': 'mat-grid-list',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatGridList implements OnInit, AfterContentChecked {\r\n  /** Number of columns being rendered. */\r\n  private _cols: number;\r\n\r\n  /**\r\n   * Row height value passed in by user. This can be one of three types:\r\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\r\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\r\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\r\n   */\r\n  private _rowHeight: string;\r\n\r\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\r\n  private _gutter: string = '1px';\r\n\r\n  /** Sets position and size styles for a tile */\r\n  private _tileStyler: TileStyler;\r\n\r\n  /** Query list of tiles that are being rendered. */\r\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\r\n\r\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\r\n\r\n  /** Amount of columns in the grid list. */\r\n  @Input()\r\n  get cols(): number { return this._cols; }\r\n  set cols(value: number) { this._cols = coerceToNumber(value); }\r\n\r\n  /** Size of the grid list's gutter in pixels. */\r\n  @Input()\r\n  get gutterSize(): string { return this._gutter; }\r\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\r\n\r\n  /** Set internal representation of row height from the user-provided value. */\r\n  @Input()\r\n  set rowHeight(value: string | number) {\r\n    const newValue = coerceToString(value);\r\n\r\n    if (newValue !== this._rowHeight) {\r\n      this._rowHeight = newValue;\r\n      this._setTileStyler(this._rowHeight);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._checkCols();\r\n    this._checkRowHeight();\r\n  }\r\n\r\n  /**\r\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\r\n   * to run it frequently.\r\n   */\r\n  ngAfterContentChecked() {\r\n    this._layoutTiles();\r\n  }\r\n\r\n  /** Throw a friendly error if cols property is missing */\r\n  private _checkCols() {\r\n    if (!this.cols) {\r\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\r\n                  `Example: <mat-grid-list cols=\"3\">`);\r\n    }\r\n  }\r\n\r\n  /** Default to equal width:height if rowHeight property is missing */\r\n  private _checkRowHeight(): void {\r\n    if (!this._rowHeight) {\r\n      this._setTileStyler('1:1');\r\n    }\r\n  }\r\n\r\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\r\n  private _setTileStyler(rowHeight: string): void {\r\n    if (this._tileStyler) {\r\n      this._tileStyler.reset(this);\r\n    }\r\n\r\n    if (rowHeight === MAT_FIT_MODE) {\r\n      this._tileStyler = new FitTileStyler();\r\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\r\n      this._tileStyler = new RatioTileStyler(rowHeight);\r\n    } else {\r\n      this._tileStyler = new FixedTileStyler(rowHeight);\r\n    }\r\n  }\r\n\r\n  /** Computes and applies the size and position for all children grid tiles. */\r\n  private _layoutTiles(): void {\r\n    const tracker = new TileCoordinator(this.cols, this._tiles);\r\n    const direction = this._dir ? this._dir.value : 'ltr';\r\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\r\n\r\n    this._tiles.forEach((tile, index) => {\r\n      const pos = tracker.positions[index];\r\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\r\n    });\r\n\r\n    this._setListStyle(this._tileStyler.getComputedHeight());\r\n  }\r\n\r\n  /** Sets style on the main grid-list element, given the style name and value. */\r\n  _setListStyle(style: [string, string | null] | null): void {\r\n    if (style) {\r\n      this._element.nativeElement.style[style[0]] = style[1];\r\n    }\r\n  }\r\n}\r\n"]}