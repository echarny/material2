{"version":3,"file":"tile-coordinator.js","sourceRoot":"","sources":["../../../../src/lib/grid-list/tile-coordinator.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {QueryList} from '@angular/core';\r\nimport {MatGridTile} from './grid-tile';\r\n\r\n/**\r\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\r\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\r\n * because the tiles can have a rowspan.\r\n *\r\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\r\n * large enough to accommodate it so that the tiles still render in the same order in which they\r\n * are given.\r\n *\r\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\r\n * element of the array corresponds to a column, and the value indicates how many cells in that\r\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\r\n * decrements each value in the tracking array (indicating that the column is one cell closer to\r\n * being free).\r\n *\r\n * @docs-private\r\n */\r\nexport class TileCoordinator {\r\n  /** Tracking array (see class description). */\r\n  tracker: number[];\r\n\r\n  /** Index at which the search for the next gap will start. */\r\n  columnIndex: number = 0;\r\n\r\n  /** The current row index. */\r\n  rowIndex: number = 0;\r\n\r\n  /** Gets the total number of rows occupied by tiles */\r\n  get rowCount(): number { return this.rowIndex + 1; }\r\n\r\n  /**\r\n   * Gets the total span of rows occupied by tiles.\r\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\r\n   */\r\n  get rowspan() {\r\n    let lastRowMax = Math.max(...this.tracker);\r\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\r\n    // add the difference to the rowcount\r\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\r\n  }\r\n\r\n  /** The computed (row, col) position of each tile (the output). */\r\n  positions: TilePosition[];\r\n\r\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\r\n    this.tracker = new Array(numColumns);\r\n    this.tracker.fill(0, 0, this.tracker.length);\r\n\r\n    this.positions = tiles.map(tile => this._trackTile(tile));\r\n  }\r\n\r\n  /** Calculates the row and col position of a tile. */\r\n  private _trackTile(tile: MatGridTile): TilePosition {\r\n    // Find a gap large enough for this tile.\r\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\r\n\r\n    // Place tile in the resulting gap.\r\n    this._markTilePosition(gapStartIndex, tile);\r\n\r\n    // The next time we look for a gap, the search will start at columnIndex, which should be\r\n    // immediately after the tile that has just been placed.\r\n    this.columnIndex = gapStartIndex + tile.colspan;\r\n\r\n    return new TilePosition(this.rowIndex, gapStartIndex);\r\n  }\r\n\r\n  /** Finds the next available space large enough to fit the tile. */\r\n  private _findMatchingGap(tileCols: number): number {\r\n    if (tileCols > this.tracker.length) {\r\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\r\n                      `grid with cols=\"${this.tracker.length}\".`);\r\n    }\r\n\r\n    // Start index is inclusive, end index is exclusive.\r\n    let gapStartIndex = -1;\r\n    let gapEndIndex = -1;\r\n\r\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\r\n    do {\r\n      // If we've reached the end of the row, go to the next row.\r\n      if (this.columnIndex + tileCols > this.tracker.length) {\r\n        this._nextRow();\r\n        continue;\r\n      }\r\n\r\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n\r\n      // If there are no more empty spaces in this row at all, move on to the next row.\r\n      if (gapStartIndex == -1) {\r\n        this._nextRow();\r\n        continue;\r\n      }\r\n\r\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n\r\n      // If a gap large enough isn't found, we want to start looking immediately after the current\r\n      // gap on the next iteration.\r\n      this.columnIndex = gapStartIndex + 1;\r\n\r\n      // Continue iterating until we find a gap wide enough for this tile.\r\n    } while (gapEndIndex - gapStartIndex < tileCols);\r\n\r\n    // If we still didn't manage to find a gap, ensure that the index is\r\n    // at least zero so the tile doesn't get pulled out of the grid.\r\n    return Math.max(gapStartIndex, 0);\r\n  }\r\n\r\n  /** Move \"down\" to the next row. */\r\n  private _nextRow(): void {\r\n    this.columnIndex = 0;\r\n    this.rowIndex++;\r\n\r\n    // Decrement all spaces by one to reflect moving down one row.\r\n    for (let i = 0; i < this.tracker.length; i++) {\r\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\r\n   * The gap ends when a non-zero value is found.\r\n   */\r\n  private _findGapEndIndex(gapStartIndex: number): number {\r\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\r\n      if (this.tracker[i] != 0) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    // The gap ends with the end of the row.\r\n    return this.tracker.length;\r\n  }\r\n\r\n  /** Update the tile tracker to account for the given tile in the given space. */\r\n  private _markTilePosition(start: number, tile: MatGridTile): void {\r\n    for (let i = 0; i < tile.colspan; i++) {\r\n      this.tracker[start + i] = tile.rowspan;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Simple data structure for tile position (row, col).\r\n * @docs-private\r\n */\r\nexport class TilePosition {\r\n  constructor(public row: number, public col: number) {}\r\n}\r\n"]}