{"version":3,"file":"flat-data-source.js","sourceRoot":"","sources":["../../../../../../src/lib/tree/data-source/flat-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\r\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\r\nimport {map, take} from 'rxjs/operators';\r\n\r\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n */\r\nexport class MatTreeFlattener<T, F> {\r\n\r\n  constructor(public transformFunction: (node: T, level: number) => F,\r\n              public getLevel: (node: F) => number,\r\n              public isExpandable: (node: F) => boolean,\r\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\r\n\r\n  _flattenNode(node: T, level: number,\r\n               resultNodes: F[], parentMap: boolean[]): F[] {\r\n    const flatNode = this.transformFunction(node, level);\r\n    resultNodes.push(flatNode);\r\n\r\n    if (this.isExpandable(flatNode)) {\r\n      const childrenNodes = this.getChildren(node);\r\n      if (Array.isArray(childrenNodes)) {\r\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\r\n      } else {\r\n        childrenNodes.pipe(take(1)).subscribe(children => {\r\n          this._flattenChildren(children, level, resultNodes, parentMap);\r\n        });\r\n      }\r\n    }\r\n    return resultNodes;\r\n  }\r\n\r\n  _flattenChildren(children: T[], level: number,\r\n                   resultNodes: F[], parentMap: boolean[]): void {\r\n    children.forEach((child, index) => {\r\n      let childParentMap: boolean[] = parentMap.slice();\r\n      childParentMap.push(index != children.length - 1);\r\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Flatten a list of node type T to flattened version of node F.\r\n   * Please note that type T may be nested, and the length of `structuredData` may be different\r\n   * from that of returned list `F[]`.\r\n   */\r\n  flattenNodes(structuredData: T[]): F[] {\r\n    let resultNodes: F[] = [];\r\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\r\n    return resultNodes;\r\n  }\r\n\r\n  /**\r\n   * Expand flattened node with current expansion status.\r\n   * The returned list may have different length.\r\n   */\r\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\r\n    let results: F[] = [];\r\n    let currentExpand: boolean[] = [];\r\n    currentExpand[0] = true;\r\n\r\n    nodes.forEach(node => {\r\n      let expand = true;\r\n      for (let i = 0; i <= this.getLevel(node); i++) {\r\n        expand = expand && currentExpand[i];\r\n      }\r\n      if (expand) {\r\n        results.push(node);\r\n      }\r\n      if (this.isExpandable(node)) {\r\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\r\n      }\r\n    });\r\n    return results;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n */\r\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\r\n  _flattenedData = new BehaviorSubject<F[]>([]);\r\n\r\n  _expandedData = new BehaviorSubject<F[]>([]);\r\n\r\n  _data: BehaviorSubject<T[]>;\r\n  get data() { return this._data.value; }\r\n  set data(value: T[]) {\r\n    this._data.next(value);\r\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\r\n    this.treeControl.dataNodes = this._flattenedData.value;\r\n  }\r\n\r\n  constructor(private treeControl: FlatTreeControl<F>,\r\n              private treeFlattener: MatTreeFlattener<T, F>,\r\n              initialData: T[] = []) {\r\n    super();\r\n    this._data = new BehaviorSubject<T[]>(initialData);\r\n  }\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\r\n    const changes = [\r\n      collectionViewer.viewChange,\r\n      this.treeControl.expansionModel.onChange!,\r\n      this._flattenedData\r\n    ];\r\n    return merge(...changes).pipe(map(() => {\r\n      this._expandedData.next(\r\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\r\n      return this._expandedData.value;\r\n    }));\r\n  }\r\n\r\n  disconnect() {\r\n    // no op\r\n  }\r\n}\r\n"]}