{"version":3,"file":"selection-list.js","sourceRoot":"","sources":["../../../../../src/lib/list/selection-list.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAkB,eAAe,EAAC,MAAM,mBAAmB,CAAC;AACnE,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAC,cAAc,EAAC,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAC,MAAM,uBAAuB,CAAC;AACvF,OAAO,EAEL,SAAS,EACT,uBAAuB,EACvB,iBAAiB,EACjB,SAAS,EACT,YAAY,EACZ,eAAe,EACf,UAAU,EACV,YAAY,EACZ,UAAU,EACV,MAAM,EACN,KAAK,EAGL,MAAM,EACN,SAAS,EACT,SAAS,EACT,iBAAiB,GAClB,MAAM,eAAe,CAAC;AACvB,OAAO,EAEL,OAAO,EACP,aAAa,EACb,kBAAkB,GACnB,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAuB,iBAAiB,EAAC,MAAM,gBAAgB,CAAC;AACvE,OAAO,EAAC,YAAY,EAAC,MAAM,MAAM,CAAC;AAClC,OAAO,EAAC,yBAAyB,EAAC,MAAM,QAAQ,CAAC;;;;AAIjD;;;AAAA;;;+BA5CA;IA4CoC,CAAA;;;;AAApC,gCAAoC;AACpC,MAAM,CAAC,qBAAM,0BAA0B,GAAG,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;;;;AAGnF;;;AAAA;;;4BAhDA;IAgDiC,CAAA;;;;AAAjC,6BAAiC;AACjC,MAAM,CAAC,qBAAM,uBAAuB,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;;;;AAG7E,MAAM,CAAC,qBAAM,iCAAiC,GAAQ;IACpD,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,gBAAgB,EAAhB,CAAgB,CAAC;IAC/C,KAAK,EAAE,IAAI;CACZ,CAAC;;;;AAGF;;;AAAA;IACE,gCAES,QAEA;QAFA,WAAM,GAAN,MAAM;QAEN,WAAM,GAAN,MAAM;KAAmB;iCAhEpC;IAiEC,CAAA;;;;AAND,kCAMC;;;;;;;;;;;;;;;;;;;IA6BkC,yCAAuB;IA6CxD,uBAAoB,QAAoB,EACpB;IAE2C;QAH/D,YAIE,iBAAO,SACR;QALmB,cAAQ,GAAR,QAAQ,CAAY;QACpB,qBAAe,GAAf,eAAe;QAE4B,mBAAa,GAAb,aAAa;0BA7CxD,KAAK;0BACL,KAAK;;;;0BAGJ,KAAK;;;;iCASsB,OAAO;;KAkCtD;0BA3BG,mCAAQ;;;;;sBAAK,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;;;;;QAC9F,UAAa,KAAU;YACrB,qBAAM,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;YAE9C,EAAE,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;gBAC1B,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;aACrC;SACF;;;;0BAIG,mCAAQ;;;;;sBAAc,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;;;;;QACrF,UAAa,KAAc;YACzB,qBAAM,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;YAEhD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;gBAC9B,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC;aACzC;SACF;;;;;;;IASD,gCAAQ;;;IAAR;QAAA,iBAcC;;;;;;QARC,qBAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;QAEnC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;YACrB,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,IAAI,WAAW,CAAC,CAAC,CAAC;gBAClC,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,KAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;aACrC;SACF,CAAC,CAAC;KACJ;;;;IAED,0CAAkB;;;IAAlB;;;QAGE,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC/C;;;;IAED,mCAAW;;;IAAX;QAAA,iBAQC;QAPC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;YAGlB,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,GAAG,KAAK,EAArB,CAAqB,CAAC,CAAC;SACrD;QAED,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;KAChD;IAED,iDAAiD;;;;;IACjD,8BAAM;;;;IAAN;QACE,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;KAChC;IAED,sDAAsD;;;;;IACtD,6BAAK;;;;IAAL;QACE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACrC;IAED;;;OAGG;;;;;;IACH,gCAAQ;;;;;IAAR;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;KAC/D;IAED,uEAAuE;;;;;IACvE,yCAAiB;;;;IAAjB;QACE,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC;KAChF;;;;IAED,oCAAY;;;IAAZ;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,EAAE,CAAC;;YAGd,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC3C;KACF;;;;IAED,oCAAY;;;IAAZ;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;KAC5C;;;;IAED,mCAAW;;;IAAX;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;KACjC;IAED,uDAAuD;;;;;IACvD,uCAAe;;;;IAAf;QACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;KACpC;IAED,oFAAoF;;;;;;IACpF,oCAAY;;;;;IAAZ,UAAa,QAAiB;QAC5B,EAAE,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,KAAK,CAAC;SACd;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACjD;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC;KACb;IAED;;;;OAIG;;;;;;;IACH,qCAAa;;;;;;IAAb;QACE,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;KACrC;;gBAlLF,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,iBAAiB;oBAC3B,QAAQ,EAAE,eAAe;oBACzB,MAAM,EAAE,CAAC,eAAe,CAAC;oBACzB,IAAI,EAAE;wBACJ,MAAM,EAAE,QAAQ;wBAChB,OAAO,EAAE,+BAA+B;wBACxC,SAAS,EAAE,gBAAgB;wBAC3B,QAAQ,EAAE,eAAe;wBACzB,SAAS,EAAE,gBAAgB;wBAC3B,UAAU,EAAE,IAAI;wBAChB,gCAAgC,EAAE,UAAU;wBAC5C,6BAA6B,EAAE,WAAW;wBAC1C,mCAAmC,EAAE,SAAS;wBAC9C,sBAAsB,EAAE,qBAAqB;wBAC7C,sBAAsB,EAAE,qBAAqB;qBAC9C;oBACD,WAAW,EAAE,kBAAkB;oBAC/B,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;;gBAzEC,UAAU;gBAJV,iBAAiB;gBAqQN,gBAAgB,uBAvId,MAAM,SAAC,UAAU,CAAC,cAAM,OAAA,gBAAgB,EAAhB,CAAgB,CAAC;;;4BAvCrD,YAAY,SAAC,yBAAyB;2BACtC,eAAe,SAAC,OAAO;0BAGvB,SAAS,SAAC,MAAM;qCAGhB,KAAK;0BAGL,KAAK;6BAGL,KAAK;6BAYL,KAAK;;wBAhIR;EA8FmC,uBAAuB;SAA7C,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuLY,4CAA0B;IAsD9D,0BAAoB,QAAoB,EAAyB;QAAjE,YACE,iBAAO,SAER;QAHmB,cAAQ,GAAR,QAAQ,CAAY;;;;gCA3CpC,IAAI,YAAY,EAA0B;;;;yBAGlB,CAAC;0BAuBA,KAAK;;;;gCAGe,IAAI,cAAc,CAAgB,IAAI,CAAC;;;;0BAG9C,UAAC,CAAM,KAAO;;;;8BAMhC,YAAY,CAAC,KAAK;;;;2BAGjB,eAAQ;QAI/B,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;KACzC;0BAhCG,sCAAQ;;;;;sBAAc,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;;;;;QAChD,UAAa,KAAc;YACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;;;;;YAM9C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,aAAa,EAAE,EAAtB,CAAsB,CAAC,CAAC;aACxD;SACF;;;;;;;IAuBD,6CAAkB;;;IAAlB;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC,OAAO,CAAC;aAChE,QAAQ,EAAE;aACV,aAAa,EAAE;aAGf,aAAa,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;QAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB;;QAGD,IAAI,CAAC,aAAa,sBAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,GAAE,SAAS,CAAC,UAAA,KAAK;YACjE,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChB,GAAG,CAAC,CAAa,UAAW,EAAX,KAAA,KAAK,CAAC,KAAK,EAAX,cAAW,EAAX,IAAW;oBAAvB,IAAI,IAAI,SAAA;oBACX,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;iBACtB;aACF;YAED,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClB,GAAG,CAAC,CAAa,UAAa,EAAb,KAAA,KAAK,CAAC,OAAO,EAAb,cAAa,EAAb,IAAa;oBAAzB,IAAI,IAAI,SAAA;oBACX,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;iBACvB;aACF;SACF,CAAC,CAAC;KACJ;;;;IAED,sCAAW;;;IAAX;QACE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;KAClC;IAED,2CAA2C;;;;;IAC3C,gCAAK;;;;IAAL;QACE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACrC;IAED,kCAAkC;;;;;IAClC,oCAAS;;;;IAAT;QACE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;KACnC;IAED,oCAAoC;;;;;IACpC,sCAAW;;;;IAAX;QACE,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;KACpC;IAED,qDAAqD;;;;;;IACrD,4CAAiB;;;;;IAAjB,UAAkB,MAAqB;QACrC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;KACtE;IAED,6EAA6E;;;;;;IAC7E,gDAAqB;;;;;IAArB,UAAsB,MAAqB;QACzC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YACrB,qBAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;;YAGjD,EAAE,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;aAC1C;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;aACtC;SACF;KACF;IAED,sDAAsD;;;;;;IACtD,mCAAQ;;;;;IAAR,UAAS,KAAoB;QAC3B,qBAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC9B,qBAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,qBAAM,kBAAkB,GAAG,OAAO,CAAC,eAAe,CAAC;QAEnD,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAChB,KAAK,KAAK,CAAC;YACX,KAAK,KAAK;gBACR,IAAI,CAAC,oBAAoB,EAAE,CAAC;;gBAE5B,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,KAAK,CAAC;YACR,KAAK,IAAI,CAAC;YACV,KAAK,GAAG;gBACN,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;gBAC9E,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,KAAK,CAAC;YACR,KAAK,CAAC;gBACJ,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;oBAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,MAAM,CAAC,QAAQ,EAAhB,CAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;oBACtF,KAAK,CAAC,cAAc,EAAE,CAAC;iBACxB;gBACD,KAAK,CAAC;YACR;gBACE,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC5B;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,UAAU,CAAC,IAAI,KAAK,CAAC,QAAQ;YAClE,OAAO,CAAC,eAAe,KAAK,kBAAkB,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC7B;KACF;IAED,yDAAyD;;;;;IACzD,6CAAkB;;;;IAAlB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC;SACjD;KACF;IAED,uEAAuE;;;;;;IACvE,2CAAgB;;;;;IAAhB,UAAiB,MAAqB;QACpC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,sBAAsB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;KACrE;IAED,mDAAmD;;;;;;IACnD,qCAAU;;;;;IAAV,UAAW,MAAgB;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,qBAAqB,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;SAC1C;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;SAC3B;KACF;IAED,qDAAqD;;;;;;IACrD,2CAAgB;;;;;IAAhB,UAAiB,UAAmB;QAClC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;KAC5B;IAED,mDAAmD;;;;;;IACnD,2CAAgB;;;;;IAAhB,UAAiB,EAAwB;QACvC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACrB;IAED,mDAAmD;;;;;;IACnD,4CAAiB;;;;;IAAjB,UAAkB,EAAc;QAC9B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACtB;;;;;;IAGO,gDAAqB;;;;;cAAC,MAAgB;;QAC5C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAA1B,CAA0B,CAAC,CAAC;QAE3D,MAAM;aACH,GAAG,CAAC,UAAA,KAAK;YACR,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM;gBAC3B,OAAA,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,KAAK,KAAK;YAAjF,CAAiF,CAAC,CAAC;SACxF,CAAC;aACD,MAAM,CAAC,OAAO,CAAC;aACf,OAAO,CAAC,UAAA,MAAM,aAAI,MAAM,GAAE,YAAY,CAAC,IAAI,IAAC,CAAC,CAAC;;;;;;IAI3C,mDAAwB;;;;;QAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,EAAZ,CAAY,CAAC,CAAC;;;;;;IAI5E,+CAAoB;;;;;QAC1B,qBAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;QAEpD,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7D,qBAAI,aAAa,GAAkB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,YAAY,CAAC,CAAC;YAExE,EAAE,CAAC,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC7C,aAAa,CAAC,MAAM,EAAE,CAAC;;;gBAIvB,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;aACtC;SACF;;;;;;;;IAOK,iDAAsB;;;;;;cAAC,UAAmB;;;QAGhD,qBAAI,UAAU,GAAG,KAAK,CAAC;QAEvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACzB,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACpC,UAAU,GAAG,IAAI,CAAC;aACnB;SACF,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;;;;;;;IAQK,wCAAa;;;;;cAAC,KAAa;QACjC,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;;;;;;;IAI3C,0CAAe;;;;;cAAC,MAAqB;QAC3C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;;;gBA1RjD,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,oBAAoB;oBAC9B,QAAQ,EAAE,kBAAkB;oBAC5B,MAAM,EAAE,CAAC,UAAU,EAAE,eAAe,EAAE,UAAU,CAAC;oBACjD,IAAI,EAAE;wBACJ,MAAM,EAAE,SAAS;wBACjB,YAAY,EAAE,UAAU;wBACxB,OAAO,EAAE,oBAAoB;wBAC7B,SAAS,EAAE,SAAS;wBACpB,QAAQ,EAAE,cAAc;wBACxB,WAAW,EAAE,kBAAkB;wBAC/B,sBAAsB,EAAE,qBAAqB;qBAC9C;oBACD,QAAQ,EAAE,2BAA2B;oBACrC,SAAS,EAAE,CAAC,UAAU,CAAC;oBACvB,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,SAAS,EAAE,CAAC,iCAAiC,CAAC;oBAC9C,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;;gBAhQC,UAAU;gDAuTiC,SAAS,SAAC,UAAU;;;4BA/C9D,eAAe,SAAC,aAAa;oCAG7B,MAAM;6BAIN,KAAK;gCAOL,KAAK;6BAGL,KAAK;;2BA7SR;EAqRsC,0BAA0B;SAAnD,gBAAgB","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisableRipple,\r\n  MatLine,\r\n  MatLineSetter,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatListAvatarCssMatStyler} from './list';\r\n\r\n\r\n/** @docs-private */\r\nexport class MatSelectionListBase {}\r\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\r\n\r\n/** @docs-private */\r\nexport class MatListOptionBase {}\r\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\r\n\r\n/** @docs-private */\r\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSelectionList),\r\n  multi: true\r\n};\r\n\r\n/** Change event that is being fired whenever the selected state of an option changes. */\r\nexport class MatSelectionListChange {\r\n  constructor(\r\n    /** Reference to the selection list that emitted the event. */\r\n    public source: MatSelectionList,\r\n    /** Reference to the option that has been changed. */\r\n    public option: MatListOption) {}\r\n}\r\n\r\n/**\r\n * Component for list-options of selection-list. Each list-option can automatically\r\n * generate a checkbox and can put current item into the selectionModel of selection-list\r\n * if the current item is selected.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list-option',\r\n  exportAs: 'matListOption',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'role': 'option',\r\n    'class': 'mat-list-item mat-list-option',\r\n    '(focus)': '_handleFocus()',\r\n    '(blur)': '_handleBlur()',\r\n    '(click)': '_handleClick()',\r\n    'tabindex': '-1',\r\n    '[class.mat-list-item-disabled]': 'disabled',\r\n    '[class.mat-list-item-focus]': '_hasFocus',\r\n    '[class.mat-list-item-with-avatar]': '_avatar',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  templateUrl: 'list-option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatListOption extends _MatListOptionMixinBase\r\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\r\n\r\n  private _selected = false;\r\n  private _disabled = false;\r\n\r\n  /** Whether the option has focus. */\r\n  _hasFocus: boolean = false;\r\n\r\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n\r\n  /** DOM element containing the item's text. */\r\n  @ViewChild('text') _text: ElementRef;\r\n\r\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\r\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Value of the option */\r\n  @Input() value: any;\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\r\n  set disabled(value: any) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the option is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\r\n  set selected(value: boolean) {\r\n    const isSelected = coerceBooleanProperty(value);\r\n\r\n    if (isSelected !== this._selected) {\r\n      this._setSelected(isSelected);\r\n      this.selectionList._reportValueChange();\r\n    }\r\n  }\r\n\r\n  constructor(private _element: ElementRef,\r\n              private _changeDetector: ChangeDetectorRef,\r\n              /** @docs-private */\r\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // List options that are selected at initialization can't be reported properly to the form\r\n    // control. This is because it takes some time until the selection-list knows about all\r\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\r\n    // that should be used instead. Deferring the value change report to the next tick ensures\r\n    // that the form control value is not being overwritten.\r\n    const wasSelected = this._selected;\r\n\r\n    Promise.resolve().then(() => {\r\n      if (this._selected || wasSelected) {\r\n        this.selected = true;\r\n        this._changeDetector.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\r\n    // tslint:disable-next-line:no-unused-expression\r\n    new MatLineSetter(this._lines, this._element);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.selected) {\r\n      // We have to delay this until the next tick in order\r\n      // to avoid changed after checked errors.\r\n      Promise.resolve().then(() => this.selected = false);\r\n    }\r\n\r\n    this.selectionList._removeOptionFromList(this);\r\n  }\r\n\r\n  /** Toggles the selection state of the option. */\r\n  toggle(): void {\r\n    this.selected = !this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the option. */\r\n  focus(): void {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\r\n   * @docs-private\r\n   */\r\n  getLabel() {\r\n    return this._text ? this._text.nativeElement.textContent : '';\r\n  }\r\n\r\n  /** Whether this list item should show a ripple effect when clicked. */\r\n  _isRippleDisabled() {\r\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\r\n  }\r\n\r\n  _handleClick() {\r\n    if (!this.disabled) {\r\n      this.toggle();\r\n\r\n      // Emit a change event if the selected state of the option changed through user interaction.\r\n      this.selectionList._emitChangeEvent(this);\r\n    }\r\n  }\r\n\r\n  _handleFocus() {\r\n    this._hasFocus = true;\r\n    this.selectionList._setFocusedOption(this);\r\n  }\r\n\r\n  _handleBlur() {\r\n    this._hasFocus = false;\r\n    this.selectionList._onTouched();\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n\r\n  /** Sets the selected state of the option. Returns whether the value has changed. */\r\n  _setSelected(selected: boolean): boolean {\r\n    if (selected === this._selected) {\r\n      return false;\r\n    }\r\n\r\n    this._selected = selected;\r\n\r\n    if (selected) {\r\n      this.selectionList.selectedOptions.select(this);\r\n    } else {\r\n      this.selectionList.selectedOptions.deselect(this);\r\n    }\r\n\r\n    this._changeDetector.markForCheck();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\r\n   * used to trigger an update of the list option if the disabled state of the selection list\r\n   * changed.\r\n   */\r\n  _markForCheck() {\r\n    this._changeDetector.markForCheck();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-selection-list',\r\n  exportAs: 'matSelectionList',\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  host: {\r\n    'role': 'listbox',\r\n    '[tabIndex]': 'tabIndex',\r\n    'class': 'mat-selection-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  styleUrls: ['list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\r\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatListOption>;\r\n\r\n  /** The option components contained within this selection-list. */\r\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\r\n\r\n  /** Emits a change event whenever the selected state of an option changes. */\r\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\r\n      new EventEmitter<MatSelectionListChange>();\r\n\r\n  /** Tabindex of the selection list. */\r\n  @Input() tabIndex: number = 0;\r\n\r\n  /**\r\n   * Function used for comparing an option against the selected value when determining which\r\n   * options should appear as selected. The first argument is the value of an options. The second\r\n   * one is a value from the selected value. A boolean must be returned.\r\n   */\r\n  @Input() compareWith: (o1: any, o2: any) => boolean;\r\n\r\n  /** Whether the selection list is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\r\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\r\n    // changed its state. Since we know that a change to `disabled` property of the list affects\r\n    // the state of the options, we manually mark each option for check.\r\n    if (this.options) {\r\n      this.options.forEach(option => option._markForCheck());\r\n    }\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  /** The currently selected options. */\r\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\r\n\r\n  /** View to model callback that should be called whenever the selected options change. */\r\n  private _onChange: (value: any) => void = (_: any) => {};\r\n\r\n  /** Used for storing the values that were assigned before the options were initialized. */\r\n  private _tempValues: string[]|null;\r\n\r\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\r\n  private _modelChanges = Subscription.EMPTY;\r\n\r\n  /** View to model callback that should be called if the list or its options lost focus. */\r\n  _onTouched: () => void = () => {};\r\n\r\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\r\n    super();\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\r\n      .withWrap()\r\n      .withTypeAhead()\r\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\r\n      // screenreader users, that allows reading the different options of the list.\r\n      .skipPredicate(() => false);\r\n\r\n    if (this._tempValues) {\r\n      this._setOptionsFromValues(this._tempValues);\r\n      this._tempValues = null;\r\n    }\r\n\r\n    // Sync external changes to the model back to the options.\r\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\r\n      if (event.added) {\r\n        for (let item of event.added) {\r\n          item.selected = true;\r\n        }\r\n      }\r\n\r\n      if (event.removed) {\r\n        for (let item of event.removed) {\r\n          item.selected = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._modelChanges.unsubscribe();\r\n  }\r\n\r\n  /** Focuses the last active list option. */\r\n  focus() {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /** Selects all of the options. */\r\n  selectAll() {\r\n    this._setAllOptionsSelected(true);\r\n  }\r\n\r\n  /** Deselects all of the options. */\r\n  deselectAll() {\r\n    this._setAllOptionsSelected(false);\r\n  }\r\n\r\n  /** Sets the focused option of the selection-list. */\r\n  _setFocusedOption(option: MatListOption) {\r\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\r\n  }\r\n\r\n  /** Removes an option from the selection list and updates the active item. */\r\n  _removeOptionFromList(option: MatListOption) {\r\n    if (option._hasFocus) {\r\n      const optionIndex = this._getOptionIndex(option);\r\n\r\n      // Check whether the option is the last item\r\n      if (optionIndex > 0) {\r\n        this._keyManager.setPreviousItemActive();\r\n      } else if (optionIndex === 0 && this.options.length > 1) {\r\n        this._keyManager.setNextItemActive();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Passes relevant key presses to our key manager. */\r\n  _keydown(event: KeyboardEvent) {\r\n    const keyCode = event.keyCode;\r\n    const manager = this._keyManager;\r\n    const previousFocusIndex = manager.activeItemIndex;\r\n\r\n    switch (keyCode) {\r\n      case SPACE:\r\n      case ENTER:\r\n        this._toggleFocusedOption();\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n      case HOME:\r\n      case END:\r\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n        event.preventDefault();\r\n        break;\r\n      case A:\r\n        if (event.ctrlKey) {\r\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      default:\r\n        manager.onKeydown(event);\r\n    }\r\n\r\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\r\n        manager.activeItemIndex !== previousFocusIndex) {\r\n      this._toggleFocusedOption();\r\n    }\r\n  }\r\n\r\n  /** Reports a value change to the ControlValueAccessor */\r\n  _reportValueChange() {\r\n    if (this.options) {\r\n      this._onChange(this._getSelectedOptionValues());\r\n    }\r\n  }\r\n\r\n  /** Emits a change event if the selected state of an option changed. */\r\n  _emitChangeEvent(option: MatListOption) {\r\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(values: string[]): void {\r\n    if (this.options) {\r\n      this._setOptionsFromValues(values || []);\r\n    } else {\r\n      this._tempValues = values;\r\n    }\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Sets the selected options based on the specified values. */\r\n  private _setOptionsFromValues(values: string[]) {\r\n    this.options.forEach(option => option._setSelected(false));\r\n\r\n    values\r\n      .map(value => {\r\n        return this.options.find(option =>\r\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\r\n      })\r\n      .filter(Boolean)\r\n      .forEach(option => option!._setSelected(true));\r\n  }\r\n\r\n  /** Returns the values of the selected options. */\r\n  private _getSelectedOptionValues(): string[] {\r\n    return this.options.filter(option => option.selected).map(option => option.value);\r\n  }\r\n\r\n  /** Toggles the state of the currently focused option if enabled. */\r\n  private _toggleFocusedOption(): void {\r\n    let focusedIndex = this._keyManager.activeItemIndex;\r\n\r\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\r\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\r\n\r\n      if (focusedOption && !focusedOption.disabled) {\r\n        focusedOption.toggle();\r\n\r\n        // Emit a change event because the focused option changed its state through user\r\n        // interaction.\r\n        this._emitChangeEvent(focusedOption);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selected state on all of the options\r\n   * and emits an event if anything changed.\r\n   */\r\n  private _setAllOptionsSelected(isSelected: boolean) {\r\n    // Keep track of whether anything changed, because we only want to\r\n    // emit the changed event when something actually changed.\r\n    let hasChanged = false;\r\n\r\n    this.options.forEach(option => {\r\n      if (option._setSelected(isSelected)) {\r\n        hasChanged = true;\r\n      }\r\n    });\r\n\r\n    if (hasChanged) {\r\n      this._reportValueChange();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of options.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.options.length;\r\n  }\r\n\r\n  /** Returns the index of the specified list option. */\r\n  private _getOptionIndex(option: MatListOption): number {\r\n    return this.options.toArray().indexOf(option);\r\n  }\r\n}\r\n"]}