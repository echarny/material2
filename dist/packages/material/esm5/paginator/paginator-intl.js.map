{"version":3,"file":"paginator-intl.js","sourceRoot":"","sources":["../../../../../src/lib/paginator/paginator-intl.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAC,OAAO,EAAC,MAAM,MAAM,CAAC;;;;;;;;;;;;uBAaO,IAAI,OAAO,EAAQ;;;;iCAGzB,iBAAiB;;;;6BAGrB,WAAW;;;;iCAGP,eAAe;;;;8BAGlB,YAAY;;;;6BAGb,WAAW;;;;6BAGnB,UAAC,IAAY,EAAE,QAAgB,EAAE,MAAc;YAC7D,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,UAAQ,MAAQ,CAAC;aAAE;YAE9D,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAE7B,qBAAM,UAAU,GAAG,IAAI,GAAG,QAAQ,CAAC;;YAGnC,qBAAM,QAAQ,GAAG,UAAU,GAAG,MAAM,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;gBACzC,UAAU,GAAG,QAAQ,CAAC;YAE1B,MAAM,CAAI,UAAU,GAAG,CAAC,WAAM,QAAQ,YAAO,MAAQ,CAAC;SACvD;;;gBArCF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;2BAhBhC;;SAiBa,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwC7B,MAAM,8CAA8C,UAA4B;IAC9E,MAAM,CAAC,UAAU,IAAI,IAAI,gBAAgB,EAAE,CAAC;CAC7C;;;;AAGD,MAAM,CAAC,qBAAM,2BAA2B,GAAG;;IAEzC,OAAO,EAAE,gBAAgB;IACzB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,gBAAgB,CAAC,CAAC;IAC1D,UAAU,EAAE,mCAAmC;CAChD,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\r\n * include it in a custom provider\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatPaginatorIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the page size selector. */\r\n  itemsPerPageLabel: string = 'Items per page:';\r\n\r\n  /** A label for the button that increments the current page. */\r\n  nextPageLabel: string = 'Next page';\r\n\r\n  /** A label for the button that decrements the current page. */\r\n  previousPageLabel: string = 'Previous page';\r\n\r\n  /** A label for the button that moves to the first page. */\r\n  firstPageLabel: string = 'First page';\r\n\r\n  /** A label for the button that moves to the last page. */\r\n  lastPageLabel: string = 'Last page';\r\n\r\n  /** A label for the range of items within the current page and the length of the whole list. */\r\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\r\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\r\n\r\n    length = Math.max(length, 0);\r\n\r\n    const startIndex = page * pageSize;\r\n\r\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n    const endIndex = startIndex < length ?\r\n        Math.min(startIndex + pageSize, length) :\r\n        startIndex + pageSize;\r\n\r\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\r\n  return parentIntl || new MatPaginatorIntl();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\r\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatPaginatorIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\r\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\r\n};\r\n"]}