{"version":3,"file":"button.js","sourceRoot":"","sources":["../../../../../src/lib/button/button.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  Inject,\r\n  Input,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\r\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\r\n\r\n/**\r\n * List of classes to add to MatButton instances based on host attributes to\r\n * style as different variants.\r\n */\r\nconst BUTTON_HOST_ATTRIBUTES = [\r\n  'mat-button',\r\n  'mat-flat-button',\r\n  'mat-icon-button',\r\n  'mat-raised-button',\r\n  'mat-stroked-button',\r\n  'mat-mini-fab',\r\n  'mat-fab',\r\n];\r\n\r\n// Boilerplate for applying mixins to MatButton.\r\n/** @docs-private */\r\nexport class MatButtonBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\r\n\r\n\r\n/**\r\n * Material design button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\r\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\r\n             button[mat-flat-button]`,\r\n  exportAs: 'matButton',\r\n  host: {\r\n    '[disabled]': 'disabled || null',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatButton extends _MatButtonMixinBase\r\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\r\n\r\n  /** Whether the button is round. */\r\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\r\n\r\n  /** Whether the button is icon button. */\r\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\r\n\r\n  /** Reference to the MatRipple instance of the button. */\r\n  @ViewChild(MatRipple) ripple: MatRipple;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              /**\r\n               * @deprecated Platform checks for SSR are no longer needed\r\n               * @breaking-change 7.0.0\r\n               */\r\n              // tslint:disable-next-line:no-unused-variable\r\n              private _platform: Platform,\r\n              private _focusMonitor: FocusMonitor,\r\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\r\n    super(elementRef);\r\n\r\n    // For each of the variant selectors that is prevent in the button's host\r\n    // attributes, add the correct corresponding class.\r\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\r\n      if (this._hasHostAttributes(attr)) {\r\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\r\n      }\r\n    }\r\n\r\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\r\n\r\n    if (this.isRoundButton) {\r\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._getHostElement().focus();\r\n  }\r\n\r\n  _getHostElement() {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /** Gets whether the button has one of the given attributes. */\r\n  _hasHostAttributes(...attributes: string[]) {\r\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\r\n  }\r\n}\r\n\r\n/**\r\n * Raised Material design button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\r\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\r\n  exportAs: 'matButton, matAnchor',\r\n  host: {\r\n    // Note that we ignore the user-specified tabindex when it's disabled for\r\n    // consistency with the `mat-button` applied on native buttons where even\r\n    // though they have an index, they're not tabbable.\r\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '(click)': '_haltDisabledEvents($event)',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatAnchor extends MatButton {\r\n  /** Tabindex of the button. */\r\n  @Input() tabIndex: number;\r\n\r\n  constructor(\r\n    platform: Platform,\r\n    focusMonitor: FocusMonitor,\r\n    elementRef: ElementRef,\r\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\r\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\r\n    super(elementRef, platform, focusMonitor, animationMode);\r\n  }\r\n\r\n  _haltDisabledEvents(event: Event) {\r\n    // A disabled button shouldn't apply any actions\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\n}\r\n"]}