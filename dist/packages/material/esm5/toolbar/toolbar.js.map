{"version":3,"file":"toolbar.js","sourceRoot":"","sources":["../../../../../src/lib/toolbar/toolbar.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  isDevMode,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n// Boilerplate for applying mixins to MatToolbar.\r\n/** @docs-private */\r\nexport class MatToolbarBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\r\n\r\n@Directive({\r\n  selector: 'mat-toolbar-row',\r\n  exportAs: 'matToolbarRow',\r\n  host: {'class': 'mat-toolbar-row'},\r\n})\r\nexport class MatToolbarRow {}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-toolbar',\r\n  exportAs: 'matToolbar',\r\n  templateUrl: 'toolbar.html',\r\n  styleUrls: ['toolbar.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'class': 'mat-toolbar',\r\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\r\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\r\n  private _document: Document;\r\n\r\n  /** Reference to all toolbar row elements that have been projected. */\r\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\r\n\r\n  constructor(\r\n    elementRef: ElementRef,\r\n    private _platform: Platform,\r\n    @Inject(DOCUMENT) document?: any) {\r\n    super(elementRef);\r\n\r\n    // TODO: make the document a required param when doing breaking changes.\r\n    this._document = document;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!isDevMode() || !this._platform.isBrowser) {\r\n      return;\r\n    }\r\n\r\n    this._checkToolbarMixedModes();\r\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\r\n  }\r\n\r\n  /**\r\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\r\n   */\r\n  private _checkToolbarMixedModes() {\r\n    if (!this._toolbarRows.length) {\r\n      return;\r\n    }\r\n\r\n    // Check if there are any other DOM nodes that can display content but aren't inside of\r\n    // a <mat-toolbar-row> element.\r\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\r\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\r\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\r\n      .some(node => node.textContent.trim());\r\n\r\n    if (isCombinedUsage) {\r\n      throwToolbarMixedModesError();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to combine the different toolbar row modes.\r\n * @docs-private\r\n */\r\nexport function throwToolbarMixedModesError() {\r\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\r\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\r\n    'inside of a `<mat-toolbar>` for a single row.');\r\n}\r\n"]}