{"version":3,"file":"gesture-annotations.js","sourceRoot":"","sources":["../../../../../../src/lib/core/gestures/gesture-annotations.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Stripped-down HammerJS annotations to be used within Material, which are necessary,\r\n * because HammerJS is an optional dependency. For the full annotations see:\r\n * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/hammerjs/index.d.ts\r\n */\r\n\r\n/** @docs-private */\r\nexport interface HammerInput {\r\n  preventDefault: () => {};\r\n  deltaX: number;\r\n  deltaY: number;\r\n  center: { x: number; y: number; };\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HammerStatic {\r\n  new(element: HTMLElement | SVGElement, options?: any): HammerManager;\r\n\r\n  Pan: Recognizer;\r\n  Swipe: Recognizer;\r\n  Press: Recognizer;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface Recognizer {\r\n  new(options?: any): Recognizer;\r\n  recognizeWith(otherRecognizer: Recognizer | string): Recognizer;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface RecognizerStatic {\r\n  new(options?: any): Recognizer;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HammerInstance {\r\n  on(eventName: string, callback: Function): void;\r\n  off(eventName: string, callback: Function): void;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HammerManager {\r\n  add(recogniser: Recognizer | Recognizer[]): Recognizer;\r\n  set(options: any): HammerManager;\r\n  emit(event: string, data: any): void;\r\n  off(events: string, handler?: Function): void;\r\n  on(events: string, handler: Function): void;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HammerOptions {\r\n  cssProps?: {[key: string]: string};\r\n  domEvents?: boolean;\r\n  enable?: boolean | ((manager: HammerManager) => boolean);\r\n  preset?: any[];\r\n  touchAction?: string;\r\n  recognizers?: any[];\r\n\r\n  inputClass?: HammerInput;\r\n  inputTarget?: EventTarget;\r\n}\r\n"]}