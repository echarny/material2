{"version":3,"file":"gesture-config.js","sourceRoot":"","sources":["../../../../../../src/lib/core/gestures/gesture-config.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AAC3E,OAAO,EAAC,mBAAmB,EAAC,MAAM,2BAA2B,CAAC;AAC9D,OAAO,EAAC,eAAe,EAAC,MAAM,mCAAmC,CAAC;;;;;AAalE,MAAM,CAAC,qBAAM,kBAAkB,GAAG,IAAI,cAAc,CAAgB,oBAAoB,CAAC,CAAC;AAE1F,qBAAM,0CAA0C,GAAG;IACjD,WAAW;IACX,OAAO;IACP,YAAY;IACZ,UAAU;IACV,YAAY;IACZ,WAAW;CACZ,CAAC;SAOI,eAAQ,OACP,eAAQ;;;;;AAFf,qBAAM,kBAAkB,GAAmB;IACzC,EAAE,IAAU;IACZ,GAAG,IAAU;CACd,CAAC;;;;;IAIiC,yCAAmB;IAIpD,uBACkD,gBACpC;QAFd,YAGE,iBAAO,SAIR;QANiD,oBAAc,GAAd,cAAc;;;;uBAHvD,0CAA0C;QAMjD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,YAAY,CAAC,uBAAuB,EAAE,CAAC;SACxC;;KACF;IAED;;;;;;;;;;;;OAYG;;;;;;;;;;;;;;IACH,mCAAW;;;;;;;;;;;;;IAAX,UAAY,OAAoB;QAC9B,qBAAM,MAAM,GAAiB,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,mBAAC,MAAa,EAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QAE3F,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;;;;;;;;;YASZ,MAAM,CAAC,kBAAkB,CAAC;SAC3B;QAED,qBAAM,EAAE,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,IAAI,SAAS,CAAC,CAAC;;QAGjE,qBAAM,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;QAC7B,qBAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QACjC,qBAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;;;;QAKjC,qBAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAC,EAAE,KAAK,CAAC,CAAC;QACjF,qBAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,EAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC,CAAC;;QAGjF,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;;QAGzB,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;QAE9C,MAAM,mBAAC,EAAoB,EAAC;KAC7B;;;;;;;;IAGO,yCAAiB;;;;;;;cAAC,IAAgB,EAAE,OAAY;QAAE,sBAA6B;aAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;YAA7B,qCAA6B;;QACrF,qBAAI,UAAU,GAAG,IAAI,mBAAC,IAAI,CAAC,WAA+B,EAAC,CAAC,OAAO,CAAC,CAAC;QAErE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,YAAY,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,EAA9B,CAA8B,CAAC,CAAC;QAE7D,MAAM,CAAC,UAAU,CAAC;;;gBAvErB,UAAU;;;;gDAMN,QAAQ,YAAI,MAAM,SAAC,kBAAkB;gBAxClC,eAAe,uBAyClB,QAAQ;;wBAnDb;EA6CmC,mBAAmB;SAAzC,aAAa","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\r\nimport {HammerGestureConfig} from '@angular/platform-browser';\r\nimport {MatCommonModule} from '../common-behaviors/common-module';\r\nimport {\r\n  HammerStatic,\r\n  HammerInstance,\r\n  Recognizer,\r\n  RecognizerStatic,\r\n  HammerOptions,\r\n} from './gesture-annotations';\r\n\r\n/**\r\n * Injection token that can be used to provide options to the Hammerjs instance.\r\n * More info at http://hammerjs.github.io/api/.\r\n */\r\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\r\n\r\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\r\n  'longpress',\r\n  'slide',\r\n  'slidestart',\r\n  'slideend',\r\n  'slideright',\r\n  'slideleft'\r\n];\r\n\r\n/**\r\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\r\n * been loaded on the page.\r\n */\r\nconst noopHammerInstance: HammerInstance = {\r\n  on: () => {},\r\n  off: () => {},\r\n};\r\n\r\n/** Adjusts configuration of our gesture library, Hammer. */\r\n@Injectable()\r\nexport class GestureConfig extends HammerGestureConfig {\r\n  /** List of new event names to add to the gesture support list */\r\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\r\n    @Optional() commonModule?: MatCommonModule) {\r\n    super();\r\n    if (commonModule) {\r\n      commonModule._checkHammerIsAvailable();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\n   *\r\n   * Our gesture names come from the Material Design gestures spec:\r\n   * https://material.io/design/#gestures-touch-mechanics\r\n   *\r\n   * More information on default recognizers can be found in Hammer docs:\r\n   * http://hammerjs.github.io/recognizer-pan/\r\n   * http://hammerjs.github.io/recognizer-press/\r\n   *\r\n   * @param element Element to which to assign the new HammerJS gestures.\r\n   * @returns Newly-created HammerJS instance.\r\n   */\r\n  buildHammer(element: HTMLElement): HammerInstance {\r\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\r\n\r\n    if (!hammer) {\r\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\r\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\r\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\r\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\r\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\r\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\r\n      // undefined).\r\n      // @breaking-change 7.0.0\r\n      return noopHammerInstance;\r\n    }\r\n\r\n    const mc = new hammer(element, this._hammerOptions || undefined);\r\n\r\n    // Default Hammer Recognizers.\r\n    const pan = new hammer.Pan();\r\n    const swipe = new hammer.Swipe();\r\n    const press = new hammer.Press();\r\n\r\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\r\n    // Otherwise the previous `recognizeWith` will be dropped.\r\n    // TODO: Confirm threshold numbers with Material Design UX Team\r\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\r\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\r\n\r\n    // Overwrite the default `pan` event to use the swipe event.\r\n    pan.recognizeWith(swipe);\r\n\r\n    // Add customized gestures to Hammer manager\r\n    mc.add([swipe, press, pan, slide, longpress]);\r\n\r\n    return mc as HammerInstance;\r\n  }\r\n\r\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\r\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\r\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\r\n\r\n    inheritances.push(base);\r\n    inheritances.forEach(item => recognizer.recognizeWith(item));\r\n\r\n    return recognizer;\r\n  }\r\n\r\n}\r\n"]}