{"version":3,"file":"initialized.js","sourceRoot":"","sources":["../../../../../../src/lib/core/common-behaviors/initialized.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAa,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwB5C,MAAM,2BAAsD,IAAO;IAEjE,MAAM;QAAe,mCAAI;QAyBvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BAAuC,IAAI,UAAI;;;;mCAvB9B,KAAK;;;;;;wCAO2B,EAAE;;;;;gCAMrC,IAAI,UAAU,CAAO,UAAA,UAAU;;;gBAG3C,EAAE,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACxB,KAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;iBACpC;gBAAC,IAAI,CAAC,CAAC;uCACN,KAAI,CAAC,mBAAmB,GAAE,IAAI,CAAC,UAAU;iBAC1C;aACF,CAAC;;SAE6C;QAE/C;;;;WAIG;;;;;;;QACH,kCAAgB;;;;;;QAAhB;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACxB,MAAM,KAAK,CAAC,4DAA4D;oBACpE,6BAA6B,CAAC,CAAC;aACpC;YAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;cAE3B,IAAI,CAAC,mBAAmB,GAAE,OAAO,CAAC,IAAI,CAAC,iBAAiB;YACxD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;QAED,yEAAyE;;;;;;QACzE,mCAAiB;;;;;QAAjB,UAAkB,UAA4B;YAC5C,UAAU,CAAC,IAAI,EAAE,CAAC;YAClB,UAAU,CAAC,QAAQ,EAAE,CAAC;SACvB;sBAlFL;KAmFG,AAjDM,CAAc,IAAI,GAiDvB;CACH","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable, Subscriber} from 'rxjs';\r\nimport {Constructor} from './constructor';\r\n\r\n\r\n/**\r\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\r\n * value once markInitialized has been called, which should be done during the ngOnInit function.\r\n * If the subscription is made after it has already been marked as initialized, then it will trigger\r\n * an emit immediately.\r\n * @docs-private\r\n */\r\nexport interface HasInitialized {\r\n  /** Stream that emits once during the directive/component's ngOnInit. */\r\n  initialized: Observable<void>;\r\n\r\n  /**\r\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\r\n   * the directive has been initialized.\r\n   * @docs-private\r\n   */\r\n  _markInitialized: () => void;\r\n}\r\n\r\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\r\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\r\n    Constructor<HasInitialized> & T {\r\n  return class extends base {\r\n    /** Whether this directive has been marked as initialized. */\r\n    _isInitialized = false;\r\n\r\n    /**\r\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\r\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\r\n     * not expect to be populated after.\r\n     */\r\n    _pendingSubscribers: Subscriber<void>[] | null = [];\r\n\r\n    /**\r\n     * Observable stream that emits when the directive initializes. If already initialized, the\r\n     * subscriber is stored to be notified once _markInitialized is called.\r\n     */\r\n    initialized = new Observable<void>(subscriber => {\r\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\r\n      // when _markInitialized is called.\r\n      if (this._isInitialized) {\r\n        this._notifySubscriber(subscriber);\r\n      } else {\r\n        this._pendingSubscribers!.push(subscriber);\r\n      }\r\n    });\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n\r\n    /**\r\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\r\n     * of ngOnInit.\r\n     * @docs-private\r\n     */\r\n    _markInitialized(): void {\r\n      if (this._isInitialized) {\r\n        throw Error('This directive has already been marked as initialized and ' +\r\n            'should not be called twice.');\r\n      }\r\n\r\n      this._isInitialized = true;\r\n\r\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\r\n      this._pendingSubscribers = null;\r\n    }\r\n\r\n    /** Emits and completes the subscriber stream (should only emit once). */\r\n    _notifySubscriber(subscriber: Subscriber<void>): void {\r\n      subscriber.next();\r\n      subscriber.complete();\r\n    }\r\n  };\r\n}\r\n"]}