{"version":3,"file":"color.js","sourceRoot":"","sources":["../../../../../../src/lib/core/common-behaviors/color.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAM,qBAA2D,IAAO,EACpE,YAA2B;IAC7B,MAAM;QAAe,mCAAI;QAmBvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BACW,IAAI,UAId;;YADC,AADA,8DAA8D;YAC9D,KAAI,CAAC,KAAK,GAAG,YAAY,CAAC;;SAC3B;QArBD,sBAAI,0BAAK;;;;YAAT,cAA4B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;;;;;YACjD,UAAU,KAAmB;gBAC3B,qBAAM,YAAY,GAAG,KAAK,IAAI,YAAY,CAAC;gBAE3C,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBAChB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,SAAO,IAAI,CAAC,MAAQ,CAAC,CAAC;qBACvE;oBACD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBACjB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,SAAO,YAAc,CAAC,CAAC;qBACrE;oBAED,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;iBAC5B;aACF;;;WAdgD;sBA/BrD;KAqDG,AAzBM,CAAc,IAAI,GAyBvB;CACH","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Constructor} from './constructor';\r\nimport {ElementRef} from '@angular/core';\r\n\r\n/** @docs-private */\r\nexport interface CanColor {\r\n  /** Theme color palette for the component. */\r\n  color: ThemePalette;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HasElementRef {\r\n  _elementRef: ElementRef;\r\n}\r\n\r\n/** Possible color palette values. */\r\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\r\n\r\n/** Mixin to augment a directive with a `color` property. */\r\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\r\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\r\n  return class extends base {\r\n    private _color: ThemePalette;\r\n\r\n    get color(): ThemePalette { return this._color; }\r\n    set color(value: ThemePalette) {\r\n      const colorPalette = value || defaultColor;\r\n\r\n      if (colorPalette !== this._color) {\r\n        if (this._color) {\r\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\r\n        }\r\n        if (colorPalette) {\r\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\r\n        }\r\n\r\n        this._color = colorPalette;\r\n      }\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      // Set the default color that can be specified from the mixin.\r\n      this.color = defaultColor;\r\n    }\r\n  };\r\n}\r\n\r\n"]}