{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../../../src/lib/checkbox/checkbox.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterViewInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HasTabIndex,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\n// Increasing integer for generating unique ids for checkbox components.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatCheckbox),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Represents the different states that require custom transitions between them.\r\n * @docs-private\r\n */\r\nexport enum TransitionCheckState {\r\n  /** The initial state of the component before any user interaction. */\r\n  Init,\r\n  /** The state representing the component when it's becoming checked. */\r\n  Checked,\r\n  /** The state representing the component when it's becoming unchecked. */\r\n  Unchecked,\r\n  /** The state representing the component when it's becoming indeterminate. */\r\n  Indeterminate\r\n}\r\n\r\n/** Change event object emitted by MatCheckbox. */\r\nexport class MatCheckboxChange {\r\n  /** The source MatCheckbox of the event. */\r\n  source: MatCheckbox;\r\n  /** The new `checked` value of the checkbox. */\r\n  checked: boolean;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatCheckbox.\r\n/** @docs-private */\r\nexport class MatCheckboxBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatCheckboxMixinBase =\r\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\r\n\r\n\r\n/**\r\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\r\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\r\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\r\n * so there is no need to provide them yourself. However, if you want to omit a label and still\r\n * have the checkbox be accessible, you may supply an [aria-label] input.\r\n * See: https://material.io/design/components/selection-controls.html\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-checkbox',\r\n  templateUrl: 'checkbox.html',\r\n  styleUrls: ['checkbox.css'],\r\n  exportAs: 'matCheckbox',\r\n  host: {\r\n    'class': 'mat-checkbox',\r\n    '[id]': 'id',\r\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\r\n    '[class.mat-checkbox-checked]': 'checked',\r\n    '[class.mat-checkbox-disabled]': 'disabled',\r\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\r\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\r\n  },\r\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\r\n  inputs: ['disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\r\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\r\n\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\r\n\r\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Whether the checkbox is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\r\n  private _required: boolean;\r\n\r\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Name value will be applied to the input element if present */\r\n  @Input() name: string | null = null;\r\n\r\n  /** Event emitted when the checkbox's `checked` value changes. */\r\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\r\n      new EventEmitter<MatCheckboxChange>();\r\n\r\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\r\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** The value attribute of the native input element */\r\n  @Input() value: string;\r\n\r\n  /** The native `<input type=\"checkbox\">` element */\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  /** Reference to the ripple instance of the checkbox. */\r\n  @ViewChild(MatRipple) ripple: MatRipple;\r\n\r\n  /**\r\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\n   * @docs-private\r\n   */\r\n  _onTouched: () => any = () => {};\r\n\r\n  private _currentAnimationClass: string = '';\r\n\r\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\r\n\r\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** Reference to the focused state ripple. */\r\n  private _focusRipple: RippleRef | null;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _ngZone: NgZone,\r\n              @Attribute('tabindex') tabIndex: string,\r\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\r\n                  private _clickAction: MatCheckboxClickAction,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\r\n    super(elementRef);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n  }\r\n\r\n  /**\r\n   * Whether the checkbox is checked.\r\n   */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value: boolean) {\r\n    if (value != this.checked) {\r\n      this._checked = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _checked: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\r\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\r\n   */\r\n  @Input()\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: any) {\r\n    if (value != this.disabled) {\r\n      this._disabled = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\r\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\r\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\r\n   * set to false.\r\n   */\r\n  @Input()\r\n  get indeterminate(): boolean { return this._indeterminate; }\r\n  set indeterminate(value: boolean) {\r\n    const changed = value != this._indeterminate;\r\n    this._indeterminate = value;\r\n\r\n    if (changed) {\r\n      if (this._indeterminate) {\r\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\r\n      } else {\r\n        this._transitionCheckState(\r\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n      }\r\n      this.indeterminateChange.emit(this._indeterminate);\r\n    }\r\n  }\r\n  private _indeterminate: boolean = false;\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // This method is getting called whenever the label of the checkbox changes.\r\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any) {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\r\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\r\n  }\r\n\r\n  private _transitionCheckState(newState: TransitionCheckState) {\r\n    let oldState = this._currentCheckState;\r\n    let element: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    if (oldState === newState) {\r\n      return;\r\n    }\r\n    if (this._currentAnimationClass.length > 0) {\r\n      element.classList.remove(this._currentAnimationClass);\r\n    }\r\n\r\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\r\n        oldState, newState);\r\n    this._currentCheckState = newState;\r\n\r\n    if (this._currentAnimationClass.length > 0) {\r\n      element.classList.add(this._currentAnimationClass);\r\n\r\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\r\n      const animationClass = this._currentAnimationClass;\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        setTimeout(() => {\r\n          element.classList.remove(animationClass);\r\n        }, 1000);\r\n      });\r\n    }\r\n  }\r\n\r\n  private _emitChangeEvent() {\r\n    let event = new MatCheckboxChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n\r\n    this._controlValueAccessorChangeFn(this.checked);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  /** Function is called whenever the focus changes for the input element. */\r\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\r\n    } else if (!focusOrigin) {\r\n      if (this._focusRipple) {\r\n        this._focusRipple.fadeOut();\r\n        this._focusRipple = null;\r\n      }\r\n\r\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\r\n      // Angular does not expect events to be raised during change detection, so any state change\r\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\r\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\r\n      // the form control it has been touched until the next tick.\r\n      Promise.resolve().then(() => this._onTouched());\r\n    }\r\n  }\r\n\r\n  /** Toggles the `checked` state of the checkbox. */\r\n  toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  /**\r\n   * Event handler for checkbox input element.\r\n   * Toggles checked state if element is not disabled.\r\n   * Do not toggle on (change) event since IE doesn't fire change event when\r\n   *   indeterminate checkbox is clicked.\r\n   * @param event\r\n   */\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `checkbox` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n\r\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\r\n    if (!this.disabled && this._clickAction !== 'noop') {\r\n      // When user manually click on the checkbox, `indeterminate` is set to false.\r\n      if (this.indeterminate && this._clickAction !== 'check') {\r\n\r\n        Promise.resolve().then(() => {\r\n          this._indeterminate = false;\r\n          this.indeterminateChange.emit(this._indeterminate);\r\n        });\r\n      }\r\n\r\n      this.toggle();\r\n      this._transitionCheckState(\r\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n\r\n      // Emit our custom change event if the native input emitted one.\r\n      // It is important to only emit it, if the native input triggered one, because\r\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n      this._emitChangeEvent();\r\n    } else if (!this.disabled && this._clickAction === 'noop') {\r\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\r\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\r\n    }\r\n  }\r\n\r\n  /** Focuses the checkbox. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\r\n\r\n  _onInteractionEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  private _getAnimationClassForCheckStateTransition(\r\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\r\n    // Don't transition if animations are disabled.\r\n    if (this._animationMode === 'NoopAnimations') {\r\n      return '';\r\n    }\r\n\r\n    let animSuffix: string = '';\r\n\r\n    switch (oldState) {\r\n      case TransitionCheckState.Init:\r\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\r\n        // [checked] bound to it.\r\n        if (newState === TransitionCheckState.Checked) {\r\n          animSuffix = 'unchecked-checked';\r\n        } else if (newState == TransitionCheckState.Indeterminate) {\r\n          animSuffix = 'unchecked-indeterminate';\r\n        } else {\r\n          return '';\r\n        }\r\n        break;\r\n      case TransitionCheckState.Unchecked:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'unchecked-checked' : 'unchecked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Checked:\r\n        animSuffix = newState === TransitionCheckState.Unchecked ?\r\n            'checked-unchecked' : 'checked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Indeterminate:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'indeterminate-checked' : 'indeterminate-unchecked';\r\n        break;\r\n    }\r\n\r\n    return `mat-checkbox-anim-${animSuffix}`;\r\n  }\r\n}\r\n"]}