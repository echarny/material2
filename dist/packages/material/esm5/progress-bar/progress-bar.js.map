{"version":3,"file":"progress-bar.js","sourceRoot":"","sources":["../../../../../src/lib/progress-bar/progress-bar.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Location} from '@angular/common';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\r\n\r\n// Boilerplate for applying mixins to MatProgressBar.\r\n/** @docs-private */\r\nexport class MatProgressBarBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\r\n\r\n/** Counter used to generate unique IDs for progress bars. */\r\nlet progressbarId = 0;\r\n\r\n/**\r\n * `<mat-progress-bar>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-bar',\r\n  exportAs: 'matProgressBar',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'aria-valuemin': '0',\r\n    'aria-valuemax': '100',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n    'class': 'mat-progress-bar',\r\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-bar.html',\r\n  styleUrls: ['progress-bar.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\r\n  constructor(public _elementRef: ElementRef,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\r\n              /**\r\n               * @deprecated `location` parameter to be made required.\r\n               * @breaking-change 8.0.0\r\n               */\r\n              @Optional() location?: Location) {\r\n    super(_elementRef);\r\n\r\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\r\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\r\n    // because named route URLs can contain parentheses (see #12338).\r\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\r\n  }\r\n\r\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\r\n  @Input()\r\n  get value(): number { return this._value; }\r\n  set value(v: number) { this._value = clamp(v || 0); }\r\n  private _value: number = 0;\r\n\r\n  /** Buffer value of the progress bar. Defaults to zero. */\r\n  @Input()\r\n  get bufferValue(): number { return this._bufferValue; }\r\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\r\n  private _bufferValue: number = 0;\r\n\r\n  /**\r\n   * Mode of the progress bar.\r\n   *\r\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\r\n   * 'determinate'.\r\n   * Mirrored to mode attribute.\r\n   */\r\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\r\n\r\n  /** ID of the progress bar. */\r\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\r\n\r\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\r\n  _rectangleFillValue: string;\r\n\r\n  /** Gets the current transform value for the progress bar's primary indicator. */\r\n  _primaryTransform() {\r\n    const scale = this.value / 100;\r\n    return {transform: `scaleX(${scale})`};\r\n  }\r\n\r\n  /**\r\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\r\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\r\n   */\r\n  _bufferTransform() {\r\n    if (this.mode === 'buffer') {\r\n      const scale = this.bufferValue / 100;\r\n      return {transform: `scaleX(${scale})`};\r\n    }\r\n  }\r\n}\r\n\r\n/** Clamps a value to be between two numbers, by default 0 and 100. */\r\nfunction clamp(v: number, min = 0, max = 100) {\r\n  return Math.max(min, Math.min(max, v));\r\n}\r\n"]}