{"version":3,"file":"divider.js","sourceRoot":"","sources":["../../../../../src/lib/divider/divider.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB,EAAC,MAAM,eAAe,CAAC;AAC3F,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;;;yBAuB7B,KAAK;sBAMR,KAAK;;0BAR3B,gCAAQ;;;;;sBAAc,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;;;;;QAChD,UAAa,KAAc,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;0BAK3E,6BAAK;;;;;sBAAc,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;;;;;QAC1C,UAAU,KAAc,IAAI,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;;gBA1B1E,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,aAAa;oBACvB,IAAI,EAAE;wBACJ,MAAM,EAAE,WAAW;wBACnB,yBAAyB,EAAE,sCAAsC;wBACjE,8BAA8B,EAAE,UAAU;wBAC1C,gCAAgC,EAAE,WAAW;wBAC7C,2BAA2B,EAAE,OAAO;wBACpC,OAAO,EAAE,aAAa;qBACvB;oBACD,QAAQ,EAAE,EAAE;oBACZ,SAAS,EAAE,CAAC,aAAa,CAAC;oBAC1B,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;;6BAGE,KAAK;0BAML,KAAK;;qBAnCR;;SA2Ba,UAAU","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-divider',\r\n  host: {\r\n    'role': 'separator',\r\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n    '[class.mat-divider-vertical]': 'vertical',\r\n    '[class.mat-divider-horizontal]': '!vertical',\r\n    '[class.mat-divider-inset]': 'inset',\r\n    'class': 'mat-divider'\r\n  },\r\n  template: '',\r\n  styleUrls: ['divider.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDivider {\r\n  /** Whether the divider is vertically aligned. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\r\n  private _vertical: boolean = false;\r\n\r\n  /** Whether the divider is an inset divider. */\r\n  @Input()\r\n  get inset(): boolean { return this._inset; }\r\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\r\n  private _inset: boolean = false;\r\n}\r\n"]}