{"version":3,"file":"snack-bar.js","sourceRoot":"","sources":["../../../../../src/lib/snack-bar/snack-bar.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\r\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\r\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\nimport {MatSnackBarModule} from './snack-bar-module';\r\nimport {MatSnackBarRef} from './snack-bar-ref';\r\n\r\n\r\n/** Injection token that can be used to specify default snack bar. */\r\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\r\n  return new MatSnackBarConfig();\r\n}\r\n\r\n/**\r\n * Service to dispatch Material Design snack bar messages.\r\n */\r\n@Injectable({providedIn: MatSnackBarModule})\r\nexport class MatSnackBar {\r\n  /**\r\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\r\n   * If there is a parent snack-bar service, all operations should delegate to that parent\r\n   * via `_openedSnackBarRef`.\r\n   */\r\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\r\n\r\n  /** Reference to the currently opened snackbar at *any* level. */\r\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\r\n    const parent = this._parentSnackBar;\r\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\r\n  }\r\n\r\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\r\n    if (this._parentSnackBar) {\r\n      this._parentSnackBar._openedSnackBarRef = value;\r\n    } else {\r\n      this._snackBarRefAtThisLevel = value;\r\n    }\r\n  }\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _live: LiveAnnouncer,\r\n      private _injector: Injector,\r\n      private _breakpointObserver: BreakpointObserver,\r\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\r\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\r\n   * currently opened snack bars.\r\n   *\r\n   * @param component Component to be instantiated.\r\n   * @param config Extra configuration for the snack bar.\r\n   */\r\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\r\n    MatSnackBarRef<T> {\r\n    return this._attach(component, config) as MatSnackBarRef<T>;\r\n  }\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\r\n   * currently opened snack bars.\r\n   *\r\n   * @param template Template to be instantiated.\r\n   * @param config Extra configuration for the snack bar.\r\n   */\r\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\r\n    MatSnackBarRef<EmbeddedViewRef<any>> {\r\n    return this._attach(template, config);\r\n  }\r\n\r\n  /**\r\n   * Opens a snackbar with a message and an optional action.\r\n   * @param message The message to show in the snackbar.\r\n   * @param action The label for the snackbar action.\r\n   * @param config Additional configuration options for the snackbar.\r\n   */\r\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\r\n      MatSnackBarRef<SimpleSnackBar> {\r\n    const _config = {...this._defaultConfig, ...config};\r\n\r\n    // Since the user doesn't have access to the component, we can\r\n    // override the data to pass in our own message and action.\r\n    _config.data = {message, action};\r\n\r\n    if (!_config.announcementMessage) {\r\n      _config.announcementMessage = message;\r\n    }\r\n\r\n    return this.openFromComponent(SimpleSnackBar, _config);\r\n  }\r\n\r\n  /**\r\n   * Dismisses the currently-visible snack bar.\r\n   */\r\n  dismiss(): void {\r\n    if (this._openedSnackBarRef) {\r\n      this._openedSnackBarRef.dismiss();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attaches the snack bar container component to the overlay.\r\n   */\r\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\r\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\r\n      [MatSnackBarConfig, config]\r\n    ]));\r\n\r\n    const containerPortal =\r\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\r\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\r\n    containerRef.instance.snackBarConfig = config;\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Places a new component or a template as the content of the snack bar container.\r\n   */\r\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\r\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\r\n\r\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\r\n    const overlayRef = this._createOverlay(config);\r\n    const container = this._attachSnackBarContainer(overlayRef, config);\r\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\r\n\r\n    if (content instanceof TemplateRef) {\r\n      const portal = new TemplatePortal(content, null!, {\r\n        $implicit: config.data,\r\n        snackBarRef\r\n      } as any);\r\n\r\n      snackBarRef.instance = container.attachTemplatePortal(portal);\r\n    } else {\r\n      const injector = this._createInjector(config, snackBarRef);\r\n      const portal = new ComponentPortal(content, undefined, injector);\r\n      const contentRef = container.attachComponentPortal<T>(portal);\r\n\r\n      // We can't pass this via the injector, because the injector is created earlier.\r\n      snackBarRef.instance = contentRef.instance;\r\n    }\r\n\r\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\r\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\r\n    // fill the width of the screen for full width snackbars.\r\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\r\n      takeUntil(overlayRef.detachments().pipe(take(1)))\r\n    ).subscribe(state => {\r\n      if (state.matches) {\r\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\r\n      } else {\r\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\r\n      }\r\n    });\r\n\r\n    this._animateSnackBar(snackBarRef, config);\r\n    this._openedSnackBarRef = snackBarRef;\r\n    return this._openedSnackBarRef;\r\n  }\r\n\r\n  /** Animates the old snack bar out and the new one in. */\r\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\r\n    // When the snackbar is dismissed, clear the reference to it.\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\r\n      if (this._openedSnackBarRef == snackBarRef) {\r\n        this._openedSnackBarRef = null;\r\n      }\r\n    });\r\n\r\n    if (this._openedSnackBarRef) {\r\n      // If a snack bar is already in view, dismiss it and enter the\r\n      // new snack bar after exit animation is complete.\r\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\r\n        snackBarRef.containerInstance.enter();\r\n      });\r\n      this._openedSnackBarRef.dismiss();\r\n    } else {\r\n      // If no snack bar is in view, enter the new snack bar.\r\n      snackBarRef.containerInstance.enter();\r\n    }\r\n\r\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\r\n    if (config.duration && config.duration > 0) {\r\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\r\n    }\r\n\r\n    if (config.announcementMessage) {\r\n      this._live.announce(config.announcementMessage, config.politeness);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new overlay and places it in the correct location.\r\n   * @param config The user-specified snack bar config.\r\n   */\r\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\r\n    const overlayConfig = new OverlayConfig();\r\n    overlayConfig.direction = config.direction;\r\n\r\n    let positionStrategy = this._overlay.position().global();\r\n    // Set horizontal position.\r\n    const isRtl = config.direction === 'rtl';\r\n    const isLeft = (\r\n      config.horizontalPosition === 'left' ||\r\n      (config.horizontalPosition === 'start' && !isRtl) ||\r\n      (config.horizontalPosition === 'end' && isRtl));\r\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\r\n    if (isLeft) {\r\n      positionStrategy.left('0');\r\n    } else if (isRight) {\r\n      positionStrategy.right('0');\r\n    } else {\r\n      positionStrategy.centerHorizontally();\r\n    }\r\n    // Set horizontal position.\r\n    if (config.verticalPosition === 'top') {\r\n      positionStrategy.top('0');\r\n    } else {\r\n      positionStrategy.bottom('0');\r\n    }\r\n\r\n    overlayConfig.positionStrategy = positionStrategy;\r\n    return this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Creates an injector to be used inside of a snack bar component.\r\n   * @param config Config that was used to create the snack bar.\r\n   * @param snackBarRef Reference to the snack bar.\r\n   */\r\n  private _createInjector<T>(\r\n      config: MatSnackBarConfig,\r\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n\r\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\r\n      [MatSnackBarRef, snackBarRef],\r\n      [MAT_SNACK_BAR_DATA, config.data]\r\n    ]));\r\n  }\r\n}\r\n"]}