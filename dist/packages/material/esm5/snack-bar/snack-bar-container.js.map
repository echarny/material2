{"version":3,"file":"snack-bar-container.js","sourceRoot":"","sources":["../../../../../src/lib/snack-bar/snack-bar-container.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {\r\n  BasePortalOutlet,\r\n  CdkPortalOutlet,\r\n  ComponentPortal,\r\n  TemplatePortal,\r\n} from '@angular/cdk/portal';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  NgZone,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {take} from 'rxjs/operators';\r\nimport {matSnackBarAnimations} from './snack-bar-animations';\r\nimport {MatSnackBarConfig} from './snack-bar-config';\r\n\r\n\r\n/**\r\n * Internal component that wraps user-provided snack bar content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'snack-bar-container',\r\n  templateUrl: 'snack-bar-container.html',\r\n  styleUrls: ['snack-bar-container.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [matSnackBarAnimations.snackBarState],\r\n  host: {\r\n    'role': 'alert',\r\n    'class': 'mat-snack-bar-container',\r\n    '[@state]': '_animationState',\r\n    '(@state.done)': 'onAnimationEnd($event)'\r\n  },\r\n})\r\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\r\n  /** Whether the component has been destroyed. */\r\n  private _destroyed = false;\r\n\r\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\r\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\r\n\r\n  /** Subject for notifying that the snack bar has exited from view. */\r\n  readonly _onExit: Subject<any> = new Subject();\r\n\r\n  /** Subject for notifying that the snack bar has finished entering the view. */\r\n  readonly _onEnter: Subject<any> = new Subject();\r\n\r\n  /** The state of the snack bar animations. */\r\n  _animationState = 'void';\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    private _elementRef: ElementRef,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    /** The snack bar configuration. */\r\n    public snackBarConfig: MatSnackBarConfig) {\r\n\r\n    super();\r\n  }\r\n\r\n  /** Attach a component portal as content to this snack bar container. */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    this._assertNotAttached();\r\n    this._applySnackBarClasses();\r\n    return this._portalOutlet.attachComponentPortal(portal);\r\n  }\r\n\r\n  /** Attach a template portal as content to this snack bar container. */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    this._assertNotAttached();\r\n    this._applySnackBarClasses();\r\n    return this._portalOutlet.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Handle end of animations, updating the state of the snackbar. */\r\n  onAnimationEnd(event: AnimationEvent) {\r\n    const {fromState, toState} = event;\r\n\r\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\r\n      this._completeExit();\r\n    }\r\n\r\n    if (toState.startsWith('visible')) {\r\n      // Note: we shouldn't use `this` inside the zone callback,\r\n      // because it can cause a memory leak.\r\n      const onEnter = this._onEnter;\r\n\r\n      this._ngZone.run(() => {\r\n        onEnter.next();\r\n        onEnter.complete();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Begin animation of snack bar entrance into view. */\r\n  enter(): void {\r\n    if (!this._destroyed) {\r\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Begin animation of the snack bar exiting from view. */\r\n  exit(): Observable<void> {\r\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\r\n    return this._onExit;\r\n  }\r\n\r\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\r\n  ngOnDestroy() {\r\n    this._destroyed = true;\r\n    this._completeExit();\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to settle before removing the element. Helps prevent\r\n   * errors where we end up removing an element which is in the middle of an animation.\r\n   */\r\n  private _completeExit() {\r\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\r\n      this._onExit.next();\r\n      this._onExit.complete();\r\n    });\r\n  }\r\n\r\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\r\n  private _applySnackBarClasses() {\r\n    const element: HTMLElement = this._elementRef.nativeElement;\r\n    const panelClasses = this.snackBarConfig.panelClass;\r\n\r\n    if (panelClasses) {\r\n      if (Array.isArray(panelClasses)) {\r\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\r\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\r\n      } else {\r\n        element.classList.add(panelClasses);\r\n      }\r\n    }\r\n\r\n    if (this.snackBarConfig.horizontalPosition === 'center') {\r\n      element.classList.add('mat-snack-bar-center');\r\n    }\r\n\r\n    if (this.snackBarConfig.verticalPosition === 'top') {\r\n      element.classList.add('mat-snack-bar-top');\r\n    }\r\n  }\r\n\r\n  /** Asserts that no content is already attached to the container. */\r\n  private _assertNotAttached() {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throw Error('Attempting to attach snack bar content after content is already attached');\r\n    }\r\n  }\r\n}\r\n"]}