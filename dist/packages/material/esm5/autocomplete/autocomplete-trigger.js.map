{"version":3,"file":"autocomplete-trigger.js","sourceRoot":"","sources":["../../../../../src/lib/autocomplete/autocomplete-trigger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  FlexibleConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  ScrollStrategy,\r\n  ViewportRuler,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Host,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  _countGroupLabelsBeforeOption,\r\n  _getOptionScrollPosition,\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\r\nimport {MatAutocomplete} from './autocomplete';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\r\n\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the scrollTop of the panel. Because we are not\r\n * actually focusing the active item, scroll must be handled manually.\r\n */\r\n\r\n/** The height of each autocomplete option. */\r\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\r\n\r\n/** The total height of the autocomplete panel. */\r\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\r\n\r\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\r\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n */\r\nexport function getMatAutocompleteMissingPanelError(): Error {\r\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\r\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\r\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\r\n  host: {\r\n    '[attr.autocomplete]': 'autocompleteAttribute',\r\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\r\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\r\n    '[attr.aria-activedescendant]': 'activeOption?.id',\r\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\r\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\r\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n    '(focusin)': '_handleFocus()',\r\n    '(blur)': '_onTouched()',\r\n    '(input)': '_handleInput($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  exportAs: 'matAutocompleteTrigger',\r\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\r\n})\r\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\r\n  private _overlayRef: OverlayRef | null;\r\n  private _portal: TemplatePortal;\r\n  private _componentDestroyed = false;\r\n  private _autocompleteDisabled = false;\r\n\r\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\r\n  private _previousValue: string | number | null;\r\n\r\n  /** Strategy that is used to position the panel. */\r\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\r\n\r\n  /** Whether or not the label state is being overridden. */\r\n  private _manuallyFloatingLabel = false;\r\n\r\n  /** The subscription for closing actions (some are bound to document). */\r\n  private _closingActionsSubscription: Subscription;\r\n\r\n  /** Subscription to viewport size changes. */\r\n  private _viewportSubscription = Subscription.EMPTY;\r\n\r\n  /** Stream of keyboard events that can close the panel. */\r\n  private readonly _closeKeyEventStream = new Subject<void>();\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when autocomplete has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The autocomplete panel to be attached to this trigger. */\r\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\r\n\r\n  /**\r\n   * Reference relative to which to position the autocomplete panel.\r\n   * Defaults to the autocomplete trigger element.\r\n   */\r\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\r\n\r\n  /**\r\n   * `autocomplete` attribute to be set on the input element.\r\n   * @docs-private\r\n   */\r\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\r\n\r\n  /**\r\n   * Whether the autocomplete is disabled. When disabled, the element will\r\n   * act as a regular input and the user won't be able to open the panel.\r\n   */\r\n  @Input('matAutocompleteDisabled')\r\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\r\n  set autocompleteDisabled(value: boolean) {\r\n    this._autocompleteDisabled = coerceBooleanProperty(value);\r\n  }\r\n\r\n  constructor(private _element: ElementRef, private _overlay: Overlay,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              private _zone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Host() private _formField: MatFormField,\r\n              @Optional() @Inject(DOCUMENT) private _document: any,\r\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\r\n              private _viewportRuler?: ViewportRuler) {}\r\n\r\n  ngOnDestroy() {\r\n    this._viewportSubscription.unsubscribe();\r\n    this._componentDestroyed = true;\r\n    this._destroyPanel();\r\n    this._closeKeyEventStream.complete();\r\n  }\r\n\r\n  /** Whether or not the autocomplete panel is open. */\r\n  get panelOpen(): boolean {\r\n    return this._overlayAttached && this.autocomplete.showPanel;\r\n  }\r\n  private _overlayAttached: boolean = false;\r\n\r\n  /** Opens the autocomplete suggestion panel. */\r\n  openPanel(): void {\r\n    this._attachOverlay();\r\n    this._floatLabel();\r\n  }\r\n\r\n  /** Closes the autocomplete suggestion panel. */\r\n  closePanel(): void {\r\n    this._resetLabel();\r\n\r\n    if (!this._overlayAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.panelOpen) {\r\n      // Only emit if the panel was visible.\r\n      this.autocomplete.closed.emit();\r\n    }\r\n\r\n    this.autocomplete._isOpen = this._overlayAttached = false;\r\n\r\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n      this._overlayRef.detach();\r\n      this._closingActionsSubscription.unsubscribe();\r\n    }\r\n\r\n    // Note that in some cases this can end up being called after the component is destroyed.\r\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\r\n    if (!this._componentDestroyed) {\r\n      // We need to trigger change detection manually, because\r\n      // `fromEvent` doesn't seem to do it at the proper time.\r\n      // This ensures that the label is reset when the\r\n      // user clicks outside.\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\r\n   * within the viewport.\r\n   */\r\n  updatePosition(): void {\r\n    if (this._overlayAttached) {\r\n      this._overlayRef!.updatePosition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A stream of actions that should close the autocomplete panel, including\r\n   * when an option is selected, on blur, and when TAB is pressed.\r\n   */\r\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\r\n    return merge(\r\n      this.optionSelections,\r\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\r\n      this._closeKeyEventStream,\r\n      this._outsideClickStream,\r\n      this._overlayRef ?\r\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\r\n          observableOf()\r\n    ).pipe(\r\n      // Normalize the output so we return a consistent type.\r\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\r\n    );\r\n  }\r\n\r\n  /** Stream of autocomplete option selections. */\r\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.autocomplete && this.autocomplete.options) {\r\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\r\n    // Return a stream that we'll replace with the real one once everything is in place.\r\n    return this._zone.onStable\r\n        .asObservable()\r\n        .pipe(take(1), switchMap(() => this.optionSelections));\r\n  });\r\n\r\n  /** The currently active option, coerced to MatOption type. */\r\n  get activeOption(): MatOption | null {\r\n    if (this.autocomplete && this.autocomplete._keyManager) {\r\n      return this.autocomplete._keyManager.activeItem;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stream of clicks outside of the autocomplete panel. */\r\n  private get _outsideClickStream(): Observable<any> {\r\n    if (!this._document) {\r\n      return observableOf(null);\r\n    }\r\n\r\n    return merge(\r\n      fromEvent(this._document, 'click'),\r\n      fromEvent(this._document, 'touchend')\r\n    )\r\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\r\n      const clickTarget = event.target as HTMLElement;\r\n      const formField = this._formField ?\r\n          this._formField._elementRef.nativeElement : null;\r\n\r\n      return this._overlayAttached &&\r\n              clickTarget !== this._element.nativeElement &&\r\n              (!formField || !formField.contains(clickTarget)) &&\r\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\r\n    }));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => {}) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this._element.nativeElement.disabled = isDisabled;\r\n  }\r\n\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n\r\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\r\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\r\n    // the input value to the one that it had on focus, however it won't dispatch any events\r\n    // which means that the model value will be out of sync with the view.\r\n    if (keyCode === ESCAPE) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\r\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\r\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\r\n      this._resetActiveItem();\r\n      this._closeKeyEventStream.next();\r\n      event.stopPropagation();\r\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\r\n      this.activeOption._selectViaInteraction();\r\n      this._resetActiveItem();\r\n      event.preventDefault();\r\n    } else if (this.autocomplete) {\r\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\r\n\r\n      if (this.panelOpen || keyCode === TAB) {\r\n        this.autocomplete._keyManager.onKeydown(event);\r\n      } else if (isArrowKey && this._canOpen()) {\r\n        this.openPanel();\r\n      }\r\n\r\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n        this._scrollToOption();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleInput(event: KeyboardEvent): void {\r\n    let target = event.target as HTMLInputElement;\r\n    let value: number | string | null = target.value;\r\n\r\n    // Based on `NumberValueAccessor` from forms.\r\n    if (target.type === 'number') {\r\n      value = value == '' ? null : parseFloat(value);\r\n    }\r\n\r\n    // If the input has a placeholder, IE will fire the `input` event on page load,\r\n    // focus and blur, in addition to when the user actually changed the value. To\r\n    // filter out all of the extra events, we save the value on focus and between\r\n    // `input` events, and we check whether it changed.\r\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\r\n    if (this._previousValue !== value && document.activeElement === event.target) {\r\n      this._previousValue = value;\r\n      this._onChange(value);\r\n\r\n      if (this._canOpen()) {\r\n        this.openPanel();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleFocus(): void {\r\n    if (this._canOpen()) {\r\n      this._previousValue = this._element.nativeElement.value;\r\n      this._attachOverlay();\r\n      this._floatLabel(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n   * This causes the value to jump when selecting an option with the mouse.\r\n   * This method manually floats the label until the panel can be closed.\r\n   * @param shouldAnimate Whether the label should be animated when it is floated.\r\n   */\r\n  private _floatLabel(shouldAnimate = false): void {\r\n    if (this._formField && this._formField.floatLabel === 'auto') {\r\n      if (shouldAnimate) {\r\n        this._formField._animateAndLockLabel();\r\n      } else {\r\n        this._formField.floatLabel = 'always';\r\n      }\r\n\r\n      this._manuallyFloatingLabel = true;\r\n    }\r\n  }\r\n\r\n  /** If the label has been manually elevated, return it to its normal state. */\r\n  private _resetLabel(): void  {\r\n    if (this._manuallyFloatingLabel) {\r\n      this._formField.floatLabel = 'auto';\r\n      this._manuallyFloatingLabel = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given that we are not actually focusing active options, we must manually adjust scroll\r\n   * to reveal options below the fold. First, we find the offset of the option from the top\r\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\r\n   * the panel height + the option height, so the active option will be just visible at the\r\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\r\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\r\n   * not adjusted.\r\n   */\r\n  private _scrollToOption(): void {\r\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(index,\r\n        this.autocomplete.options, this.autocomplete.optionGroups);\r\n\r\n    const newScrollPosition = _getOptionScrollPosition(\r\n      index + labelCount,\r\n      AUTOCOMPLETE_OPTION_HEIGHT,\r\n      this.autocomplete._getScrollTop(),\r\n      AUTOCOMPLETE_PANEL_HEIGHT\r\n    );\r\n\r\n    this.autocomplete._setScrollTop(newScrollPosition);\r\n  }\r\n\r\n  /**\r\n   * This method listens to a stream of panel closing actions and resets the\r\n   * stream every time the option list changes.\r\n   */\r\n  private _subscribeToClosingActions(): Subscription {\r\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\r\n    const optionChanges = this.autocomplete.options.changes.pipe(\r\n      tap(() => this._positionStrategy.reapplyLastPosition()),\r\n      // Defer emitting to the stream until the next tick, because changing\r\n      // bindings in here will cause \"changed after checked\" errors.\r\n      delay(0)\r\n    );\r\n\r\n    // When the zone is stable initially, and when the option list changes...\r\n    return merge(firstStable, optionChanges)\r\n      .pipe(\r\n        // create a new stream of panelClosingActions, replacing any previous streams\r\n        // that were created, and flatten it so our stream only emits closing events...\r\n        switchMap(() => {\r\n          this._resetActiveItem();\r\n          this.autocomplete._setVisibility();\r\n\r\n          if (this.panelOpen) {\r\n            this._overlayRef!.updatePosition();\r\n          }\r\n\r\n          return this.panelClosingActions;\r\n        }),\r\n        // when the first closing event occurs...\r\n        take(1)\r\n      )\r\n      // set the value, close the panel, and complete.\r\n      .subscribe(event => this._setValueAndClose(event));\r\n  }\r\n\r\n  /** Destroys the autocomplete suggestion panel. */\r\n  private _destroyPanel(): void {\r\n    if (this._overlayRef) {\r\n      this.closePanel();\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\r\n\r\n  private _setTriggerValue(value: any): void {\r\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\r\n      this.autocomplete.displayWith(value) :\r\n      value;\r\n\r\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n    const inputValue = toDisplay != null ? toDisplay : '';\r\n\r\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\r\n    // through change detection.\r\n    if (this._formField) {\r\n      this._formField._control.value = inputValue;\r\n    } else {\r\n      this._element.nativeElement.value = inputValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method closes the panel, and if a value is specified, also sets the associated\r\n   * control to that value. It will also mark the control as dirty if this interaction\r\n   * stemmed from the user.\r\n   */\r\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\r\n    if (event && event.source) {\r\n      this._clearPreviousSelectedOption(event.source);\r\n      this._setTriggerValue(event.source.value);\r\n      this._onChange(event.source.value);\r\n      this._element.nativeElement.focus();\r\n      this.autocomplete._emitSelectEvent(event.source);\r\n    }\r\n\r\n    this.closePanel();\r\n  }\r\n\r\n  /**\r\n   * Clear any previous selected option and emit a selection change event for this option\r\n   */\r\n  private _clearPreviousSelectedOption(skip: MatOption) {\r\n    this.autocomplete.options.forEach(option => {\r\n      if (option != skip && option.selected) {\r\n        option.deselect();\r\n      }\r\n    });\r\n  }\r\n\r\n  private _attachOverlay(): void {\r\n    if (!this.autocomplete) {\r\n      throw getMatAutocompleteMissingPanelError();\r\n    }\r\n\r\n    if (!this._overlayRef) {\r\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\r\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\r\n\r\n      if (this._viewportRuler) {\r\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\r\n          if (this.panelOpen && this._overlayRef) {\r\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // Update the panel width and direction, in case anything has changed.\r\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\r\n    }\r\n\r\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._portal);\r\n      this._closingActionsSubscription = this._subscribeToClosingActions();\r\n    }\r\n\r\n    const wasOpen = this.panelOpen;\r\n\r\n    this.autocomplete._setVisibility();\r\n    this.autocomplete._isOpen = this._overlayAttached = true;\r\n\r\n    // We need to do an extra `panelOpen` check in here, because the\r\n    // autocomplete won't be shown if there are no options.\r\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\r\n      this.autocomplete.opened.emit();\r\n    }\r\n  }\r\n\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getOverlayPosition(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      width: this._getPanelWidth(),\r\n      direction: this._dir\r\n    });\r\n  }\r\n\r\n  private _getOverlayPosition(): PositionStrategy {\r\n    this._positionStrategy = this._overlay.position()\r\n      .flexibleConnectedTo(this._getConnectedElement())\r\n      .withFlexibleDimensions(false)\r\n      .withPush(false)\r\n      .withPositions([\r\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\r\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\r\n      ]);\r\n\r\n    // The overlay edge connected to the trigger should have squared corners, while\r\n    // the opposite end has rounded corners. We apply a CSS class to swap the\r\n    // border-radius based on the overlay position.\r\n    this._positionStrategy.positionChanges.subscribe(({connectionPair}) => {\r\n      if (this.autocomplete) {\r\n        this.autocomplete._classList['mat-autocomplete-panel-above'] =\r\n            connectionPair.originY === 'top';\r\n      }\r\n    });\r\n\r\n    return this._positionStrategy;\r\n  }\r\n\r\n  private _getConnectedElement(): ElementRef {\r\n    if (this.connectedTo) {\r\n      return this.connectedTo.elementRef;\r\n    }\r\n\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\r\n  }\r\n\r\n  private _getPanelWidth(): number | string {\r\n    return this.autocomplete.panelWidth || this._getHostWidth();\r\n  }\r\n\r\n  /** Returns the width of the input element, so the panel width can match it. */\r\n  private _getHostWidth(): number {\r\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n  }\r\n\r\n  /**\r\n   * Resets the active item to -1 so arrow events will activate the\r\n   * correct options, or to 0 if the consumer opted into it.\r\n   */\r\n  private _resetActiveItem(): void {\r\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\r\n  }\r\n\r\n  /** Determines whether the panel can be opened. */\r\n  private _canOpen(): boolean {\r\n    const element: HTMLInputElement = this._element.nativeElement;\r\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\r\n  }\r\n\r\n}\r\n"]}