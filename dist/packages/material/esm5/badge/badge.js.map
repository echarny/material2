{"version":3,"file":"badge.js","sourceRoot":"","sources":["../../../../../src/lib/badge/badge.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AriaDescriber} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\r\nimport {ThemePalette} from '@angular/material/core';\r\n\r\n\r\nlet nextId = 0;\r\n\r\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\r\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\r\n\r\n/** Directive to display a text badge. */\r\n@Directive({\r\n  selector: '[matBadge]',\r\n  host: {\r\n    'class': 'mat-badge',\r\n    '[class.mat-badge-overlap]': 'overlap',\r\n    '[class.mat-badge-above]': 'isAbove()',\r\n    '[class.mat-badge-below]': '!isAbove()',\r\n    '[class.mat-badge-before]': '!isAfter()',\r\n    '[class.mat-badge-after]': 'isAfter()',\r\n    '[class.mat-badge-small]': 'size === \"small\"',\r\n    '[class.mat-badge-medium]': 'size === \"medium\"',\r\n    '[class.mat-badge-large]': 'size === \"large\"',\r\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\r\n  },\r\n})\r\nexport class MatBadge implements OnDestroy {\r\n  /** Whether the badge has any content. */\r\n  _hasContent = false;\r\n\r\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\r\n  @Input('matBadgeColor')\r\n  get color(): ThemePalette { return this._color; }\r\n  set color(value: ThemePalette) {\r\n    this._setColor(value);\r\n    this._color = value;\r\n  }\r\n  private _color: ThemePalette = 'primary';\r\n\r\n  /** Whether the badge should overlap its contents or not */\r\n  @Input('matBadgeOverlap')\r\n  get overlap(): boolean { return this._overlap; }\r\n  set overlap(val: boolean) {\r\n    this._overlap = coerceBooleanProperty(val);\r\n  }\r\n  private _overlap: boolean = true;\r\n\r\n  /**\r\n   * Position the badge should reside.\r\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\r\n   */\r\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\r\n\r\n  /** The content for the badge */\r\n  @Input('matBadge')\r\n  get content(): string { return this._content; }\r\n  set content(value: string) {\r\n    this._content = value;\r\n    this._hasContent = value != null && `${value}`.trim().length > 0;\r\n    this._updateTextContent();\r\n  }\r\n  private _content: string;\r\n\r\n  /** Message used to describe the decorated element via aria-describedby */\r\n  @Input('matBadgeDescription')\r\n  get description(): string { return this._description; }\r\n  set description(newDescription: string) {\r\n    if (newDescription !== this._description) {\r\n      this._updateHostAriaDescription(newDescription, this._description);\r\n      this._description = newDescription;\r\n    }\r\n  }\r\n  private _description: string;\r\n\r\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\r\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\r\n\r\n  /** Whether the badge is hidden. */\r\n  @Input('matBadgeHidden')\r\n  get hidden(): boolean { return this._hidden; }\r\n  set hidden(val: boolean) {\r\n    this._hidden = coerceBooleanProperty(val);\r\n  }\r\n  private _hidden: boolean;\r\n\r\n  /** Unique id for the badge */\r\n  _id: number = nextId++;\r\n\r\n  private _badgeElement: HTMLElement;\r\n\r\n  constructor(\r\n      @Optional() @Inject(DOCUMENT) private _document: any,\r\n      private _ngZone: NgZone,\r\n      private _elementRef: ElementRef,\r\n      private _ariaDescriber: AriaDescriber) {}\r\n\r\n  /** Whether the badge is above the host or not */\r\n  isAbove(): boolean {\r\n    return this.position.indexOf('below') === -1;\r\n  }\r\n\r\n  /** Whether the badge is after the host or not */\r\n  isAfter(): boolean {\r\n    return this.position.indexOf('before') === -1;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.description && this._badgeElement) {\r\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\r\n    }\r\n  }\r\n\r\n  /** Injects a span element into the DOM with the content. */\r\n  private _updateTextContent(): HTMLSpanElement {\r\n    if (!this._badgeElement) {\r\n      this._badgeElement = this._createBadgeElement();\r\n    } else {\r\n      this._badgeElement.textContent = this.content;\r\n    }\r\n    return this._badgeElement;\r\n  }\r\n\r\n  /** Creates the badge element */\r\n  private _createBadgeElement(): HTMLElement {\r\n    const badgeElement = this._document.createElement('span');\r\n    const activeClass = 'mat-badge-active';\r\n\r\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\r\n    badgeElement.classList.add('mat-badge-content');\r\n    badgeElement.textContent = this.content;\r\n\r\n    if (this.description) {\r\n      badgeElement.setAttribute('aria-label', this.description);\r\n    }\r\n\r\n    this._elementRef.nativeElement.appendChild(badgeElement);\r\n\r\n    // animate in after insertion\r\n    if (typeof requestAnimationFrame === 'function') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => {\r\n          badgeElement.classList.add(activeClass);\r\n        });\r\n      });\r\n    } else {\r\n      badgeElement.classList.add(activeClass);\r\n    }\r\n\r\n    return badgeElement;\r\n  }\r\n\r\n  /** Sets the aria-label property on the element */\r\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\r\n    // ensure content available before setting label\r\n    const content = this._updateTextContent();\r\n\r\n    if (oldDescription) {\r\n      this._ariaDescriber.removeDescription(content, oldDescription);\r\n    }\r\n\r\n    if (newDescription) {\r\n      this._ariaDescriber.describe(content, newDescription);\r\n    }\r\n  }\r\n\r\n  /** Adds css theme class given the color to the component host */\r\n  private _setColor(colorPalette: ThemePalette) {\r\n    if (colorPalette !== this._color) {\r\n      if (this._color) {\r\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\r\n      }\r\n      if (colorPalette) {\r\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]}