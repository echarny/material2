{"version":3,"file":"paginator.js","sourceRoot":"","sources":["../../../../src/lib/paginator/paginator.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatPaginatorIntl} from './paginator-intl';\r\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\r\n\r\n/** The default page size if there is no page size and there are no provided page size options. */\r\nconst DEFAULT_PAGE_SIZE = 50;\r\n\r\n/**\r\n * Change event object that is emitted when the user selects a\r\n * different page size or navigates to another page.\r\n */\r\nexport class PageEvent {\r\n  /** The current page index. */\r\n  pageIndex: number;\r\n\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 7.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n\r\n  /** The current page size */\r\n  pageSize: number;\r\n\r\n  /** The current total number of items being paged */\r\n  length: number;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatPaginator.\r\n/** @docs-private */\r\nexport class MatPaginatorBase {}\r\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\r\n\r\n/**\r\n * Component to provide navigation between paged information. Displays the size of the current\r\n * page, user-selectable options to change that size, what items are being shown, and\r\n * navigational button to go to the previous or next page.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-paginator',\r\n  exportAs: 'matPaginator',\r\n  templateUrl: 'paginator.html',\r\n  styleUrls: ['paginator.css'],\r\n  host: {\r\n    'class': 'mat-paginator',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\r\n  private _initialized: boolean;\r\n  private _intlChanges: Subscription;\r\n\r\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\r\n  @Input()\r\n  get pageIndex(): number { return this._pageIndex; }\r\n  set pageIndex(value: number) {\r\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  _pageIndex: number = 0;\r\n\r\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\r\n  @Input()\r\n  get length(): number { return this._length; }\r\n  set length(value: number) {\r\n    this._length = coerceNumberProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  _length: number = 0;\r\n\r\n  /** Number of items to display on a page. By default set to 50. */\r\n  @Input()\r\n  get pageSize(): number { return this._pageSize; }\r\n  set pageSize(value: number) {\r\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n  private _pageSize: number;\r\n\r\n  /** The set of provided page size options to display to the user. */\r\n  @Input()\r\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\r\n  set pageSizeOptions(value: number[]) {\r\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n  private _pageSizeOptions: number[] = [];\r\n\r\n  /** Whether to hide the page size selection UI from the user. */\r\n  @Input()\r\n  get hidePageSize(): boolean { return this._hidePageSize; }\r\n  set hidePageSize(value: boolean) {\r\n    this._hidePageSize = coerceBooleanProperty(value);\r\n  }\r\n  private _hidePageSize = false;\r\n\r\n\r\n  /** Whether to show the first/last buttons UI to the user. */\r\n  @Input()\r\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\r\n  set showFirstLastButtons(value: boolean) {\r\n    this._showFirstLastButtons = coerceBooleanProperty(value);\r\n  }\r\n  private _showFirstLastButtons = false;\r\n\r\n  /** Event emitted when the paginator changes the page size or page index. */\r\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\r\n\r\n  /** Displayed set of page size options. Will be sorted and include current page size. */\r\n  _displayedPageSizeOptions: number[];\r\n\r\n  constructor(public _intl: MatPaginatorIntl,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    super();\r\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._initialized = true;\r\n    this._updateDisplayedPageSizeOptions();\r\n    this._markInitialized();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\r\n\r\n  /** Advances to the next page if it exists. */\r\n  nextPage(): void {\r\n    if (!this.hasNextPage()) { return; }\r\n\r\n    const previousPageIndex = this.pageIndex;\r\n    this.pageIndex++;\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /** Move back to the previous page if it exists. */\r\n  previousPage(): void {\r\n    if (!this.hasPreviousPage()) { return; }\r\n\r\n    const previousPageIndex = this.pageIndex;\r\n    this.pageIndex--;\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /** Move to the first page if not already there. */\r\n  firstPage(): void {\r\n    // hasPreviousPage being false implies at the start\r\n    if (!this.hasPreviousPage()) { return; }\r\n\r\n    const previousPageIndex = this.pageIndex;\r\n    this.pageIndex = 0;\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /** Move to the last page if not already there. */\r\n  lastPage(): void {\r\n    // hasNextPage being false implies at the end\r\n    if (!this.hasNextPage()) { return; }\r\n\r\n    const previousPageIndex = this.pageIndex;\r\n    this.pageIndex = this.getNumberOfPages();\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /** Whether there is a previous page. */\r\n  hasPreviousPage(): boolean {\r\n    return this.pageIndex >= 1 && this.pageSize != 0;\r\n  }\r\n\r\n  /** Whether there is a next page. */\r\n  hasNextPage(): boolean {\r\n    const numberOfPages = this.getNumberOfPages();\r\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\r\n  }\r\n\r\n  /** Calculate the number of pages */\r\n  getNumberOfPages(): number {\r\n    return Math.ceil(this.length / this.pageSize) - 1;\r\n  }\r\n\r\n\r\n  /**\r\n   * Changes the page size so that the first item displayed on the page will still be\r\n   * displayed using the new page size.\r\n   *\r\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\r\n   * switching so that the page size is 5 will set the third page as the current page so\r\n   * that the 10th item will still be displayed.\r\n   */\r\n  _changePageSize(pageSize: number) {\r\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\r\n    // containing the previous page's first item.\r\n    const startIndex = this.pageIndex * this.pageSize;\r\n    const previousPageIndex = this.pageIndex;\r\n\r\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\r\n    this.pageSize = pageSize;\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /**\r\n   * Updates the list of page size options to display to the user. Includes making sure that\r\n   * the page size is an option and that the list is sorted.\r\n   */\r\n  private _updateDisplayedPageSizeOptions() {\r\n    if (!this._initialized) { return; }\r\n\r\n    // If no page size is provided, use the first page size option or the default page size.\r\n    if (!this.pageSize) {\r\n      this._pageSize = this.pageSizeOptions.length != 0 ?\r\n          this.pageSizeOptions[0] :\r\n          DEFAULT_PAGE_SIZE;\r\n    }\r\n\r\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\r\n\r\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\r\n      this._displayedPageSizeOptions.push(this.pageSize);\r\n    }\r\n\r\n    // Sort the numbers using a number-specific sort function.\r\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\r\n  private _emitPageEvent(previousPageIndex: number) {\r\n    this.page.emit({\r\n      previousPageIndex,\r\n      pageIndex: this.pageIndex,\r\n      pageSize: this.pageSize,\r\n      length: this.length\r\n    });\r\n  }\r\n}\r\n"]}