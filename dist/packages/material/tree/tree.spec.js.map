{"version":3,"file":"tree.spec.js","sourceRoot":"","sources":["../../../../src/lib/tree/tree.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {FlatTreeControl, NestedTreeControl, TreeControl} from '@angular/cdk/tree';\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {\r\n  MatTree,\r\n  MatTreeFlatDataSource,\r\n  MatTreeFlattener,\r\n  MatTreeModule,\r\n  MatTreeNestedDataSource\r\n} from './index';\r\n\r\n\r\ndescribe('MatTree', () => {\r\n  /** Represents an indent for expectNestedTreeToMatch */\r\n  const _ = {};\r\n\r\n  let treeElement: HTMLElement;\r\n  let underlyingDataSource: FakeDataSource;\r\n\r\n  function configureMatTreeTestingModule(declarations) {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatTreeModule],\r\n      declarations: declarations,\r\n    }).compileComponents();\r\n  }\r\n\r\n  describe('flat tree', () => {\r\n    describe('should initialize', () => {\r\n      let fixture: ComponentFixture<SimpleMatTreeApp>;\r\n      let component: SimpleMatTreeApp;\r\n\r\n\r\n      beforeEach(() => {\r\n        configureMatTreeTestingModule([SimpleMatTreeApp]);\r\n        fixture = TestBed.createComponent(SimpleMatTreeApp);\r\n\r\n        component = fixture.componentInstance;\r\n        underlyingDataSource = component.underlyingDataSource;\r\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\r\n\r\n        fixture.detectChanges();\r\n      });\r\n\r\n      it('with rendered dataNodes', () => {\r\n        const nodes = getNodes(treeElement);\r\n\r\n        expect(nodes).toBeDefined('Expect nodes to be defined');\r\n        expect(nodes[0].classList).toContain('customNodeClass');\r\n      });\r\n\r\n      it('with the right accessibility roles', () => {\r\n        expect(treeElement.getAttribute('role')).toBe('tree');\r\n\r\n        getNodes(treeElement).forEach(node => {\r\n          expect(node.getAttribute('role')).toBe('treeitem');\r\n        });\r\n      });\r\n\r\n      it('with the right data', () => {\r\n        expect(underlyingDataSource.data.length).toBe(3);\r\n\r\n        let data = underlyingDataSource.data;\r\n        expectFlatTreeToMatch(treeElement, 28,\r\n            [`topping_1 - cheese_1 + base_1`],\r\n            [`topping_2 - cheese_2 + base_2`],\r\n            [`topping_3 - cheese_3 + base_3`]);\r\n\r\n        underlyingDataSource.addChild(data[2]);\r\n        fixture.detectChanges();\r\n\r\n        expectFlatTreeToMatch(treeElement, 28,\r\n            [`topping_1 - cheese_1 + base_1`],\r\n            [`topping_2 - cheese_2 + base_2`],\r\n            [`topping_3 - cheese_3 + base_3`],\r\n            [`_, topping_4 - cheese_4 + base_4`]);\r\n      });\r\n    });\r\n\r\n    describe('with toggle', () => {\r\n      let fixture: ComponentFixture<MatTreeAppWithToggle>;\r\n      let component: MatTreeAppWithToggle;\r\n\r\n      beforeEach(() => {\r\n        configureMatTreeTestingModule([MatTreeAppWithToggle]);\r\n        fixture = TestBed.createComponent(MatTreeAppWithToggle);\r\n\r\n        component = fixture.componentInstance;\r\n        underlyingDataSource = component.underlyingDataSource;\r\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\r\n\r\n        fixture.detectChanges();\r\n      });\r\n\r\n      it('should expand/collapse the node', () => {\r\n        expect(underlyingDataSource.data.length).toBe(3);\r\n\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(0, `Expect no expanded node`);\r\n\r\n        component.toggleRecursively = false;\r\n        const data = underlyingDataSource.data;\r\n        const child = underlyingDataSource.addChild(data[2]);\r\n        underlyingDataSource.addChild(child);\r\n        fixture.detectChanges();\r\n\r\n        expectFlatTreeToMatch(treeElement, 40,\r\n            [`topping_1 - cheese_1 + base_1`],\r\n            [`topping_2 - cheese_2 + base_2`],\r\n            [`topping_3 - cheese_3 + base_3`]);\r\n\r\n\r\n        (getNodes(treeElement)[2] as HTMLElement).click();\r\n        fixture.detectChanges();\r\n\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(1, `Expect node expanded one level`);\r\n        expectFlatTreeToMatch(treeElement, 40,\r\n            [`topping_1 - cheese_1 + base_1`],\r\n            [`topping_2 - cheese_2 + base_2`],\r\n            [`topping_3 - cheese_3 + base_3`],\r\n            [_, `topping_4 - cheese_4 + base_4`]);\r\n\r\n        (getNodes(treeElement)[3] as HTMLElement).click();\r\n        fixture.detectChanges();\r\n\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(2, `Expect node expanded`);\r\n        expectFlatTreeToMatch(treeElement, 40,\r\n            [`topping_1 - cheese_1 + base_1`],\r\n            [`topping_2 - cheese_2 + base_2`],\r\n            [`topping_3 - cheese_3 + base_3`],\r\n            [_, `topping_4 - cheese_4 + base_4`],\r\n            [_, _, `topping_5 - cheese_5 + base_5`]);\r\n\r\n        (getNodes(treeElement)[2] as HTMLElement).click();\r\n        fixture.detectChanges();\r\n\r\n        expectFlatTreeToMatch(treeElement, 40,\r\n            [`topping_1 - cheese_1 + base_1`],\r\n            [`topping_2 - cheese_2 + base_2`],\r\n            [`topping_3 - cheese_3 + base_3`]);\r\n      });\r\n\r\n      it('should expand/collapse the node recursively', () => {\r\n        expect(underlyingDataSource.data.length).toBe(3);\r\n\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(0, `Expect no expanded node`);\r\n\r\n        const data = underlyingDataSource.data;\r\n        const child = underlyingDataSource.addChild(data[2]);\r\n        underlyingDataSource.addChild(child);\r\n        fixture.detectChanges();\r\n\r\n        expectFlatTreeToMatch(treeElement, 40,\r\n            [`topping_1 - cheese_1 + base_1`],\r\n            [`topping_2 - cheese_2 + base_2`],\r\n            [`topping_3 - cheese_3 + base_3`]);\r\n\r\n        (getNodes(treeElement)[2] as HTMLElement).click();\r\n        fixture.detectChanges();\r\n\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(3, `Expect nodes expanded`);\r\n        expectFlatTreeToMatch(treeElement, 40,\r\n            [`topping_1 - cheese_1 + base_1`],\r\n            [`topping_2 - cheese_2 + base_2`],\r\n            [`topping_3 - cheese_3 + base_3`],\r\n            [_, `topping_4 - cheese_4 + base_4`],\r\n            [_, _, `topping_5 - cheese_5 + base_5`]);\r\n\r\n\r\n        (getNodes(treeElement)[2] as HTMLElement).click();\r\n        fixture.detectChanges();\r\n\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(0, `Expect node collapsed`);\r\n\r\n        expectFlatTreeToMatch(treeElement, 40,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n      });\r\n    });\r\n\r\n    describe('with when node template', () => {\r\n      let fixture: ComponentFixture<WhenNodeMatTreeApp>;\r\n      let component: WhenNodeMatTreeApp;\r\n\r\n      beforeEach(() => {\r\n        configureMatTreeTestingModule([WhenNodeMatTreeApp]);\r\n        fixture = TestBed.createComponent(WhenNodeMatTreeApp);\r\n\r\n        component = fixture.componentInstance;\r\n        underlyingDataSource = component.underlyingDataSource;\r\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\r\n\r\n        fixture.detectChanges();\r\n      });\r\n\r\n      it('with the right data', () => {\r\n        expectFlatTreeToMatch(treeElement, 28,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [`topping_3 - cheese_3 + base_3`],\r\n          [`>>> topping_4 - cheese_4 + base_4`]);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('nested tree', () => {\r\n    describe('should initialize', () => {\r\n      let fixture: ComponentFixture<NestedMatTreeApp>;\r\n      let component: NestedMatTreeApp;\r\n\r\n      beforeEach(() => {\r\n        configureMatTreeTestingModule([NestedMatTreeApp]);\r\n        fixture = TestBed.createComponent(NestedMatTreeApp);\r\n\r\n        component = fixture.componentInstance;\r\n        underlyingDataSource = component.underlyingDataSource;\r\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\r\n\r\n        fixture.detectChanges();\r\n      });\r\n\r\n      it('with rendered dataNodes', () => {\r\n        const nodes = getNodes(treeElement);\r\n\r\n        expect(nodes).toBeDefined('Expect nodes to be defined');\r\n        expect(nodes[0].classList).toContain('customNodeClass');\r\n      });\r\n\r\n      it('with the right accessibility roles', () => {\r\n        expect(treeElement.getAttribute('role')).toBe('tree');\r\n\r\n        getNodes(treeElement).forEach(node => {\r\n          expect(node.getAttribute('role')).toBe('treeitem');\r\n        });\r\n      });\r\n\r\n      it('with the right data', () => {\r\n        expect(underlyingDataSource.data.length).toBe(3);\r\n\r\n        let data = underlyingDataSource.data;\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`${data[0].pizzaTopping} - ${data[0].pizzaCheese} + ${data[0].pizzaBase}`],\r\n          [`${data[1].pizzaTopping} - ${data[1].pizzaCheese} + ${data[1].pizzaBase}`],\r\n          [`${data[2].pizzaTopping} - ${data[2].pizzaCheese} + ${data[2].pizzaBase}`]);\r\n\r\n        underlyingDataSource.addChild(data[1]);\r\n        fixture.detectChanges();\r\n\r\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\r\n        data = underlyingDataSource.data;\r\n        expect(data.length).toBe(3);\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [_, `topping_4 - cheese_4 + base_4`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n      });\r\n\r\n      it('with nested child data', () => {\r\n        expect(underlyingDataSource.data.length).toBe(3);\r\n\r\n        let data = underlyingDataSource.data;\r\n        const child = underlyingDataSource.addChild(data[1]);\r\n        underlyingDataSource.addChild(child);\r\n        fixture.detectChanges();\r\n\r\n        expect(data.length).toBe(3);\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [_, `topping_4 - cheese_4 + base_4`],\r\n          [_, _, `topping_5 - cheese_5 + base_5`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n\r\n        underlyingDataSource.addChild(child);\r\n        fixture.detectChanges();\r\n\r\n        expect(data.length).toBe(3);\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [_, `topping_4 - cheese_4 + base_4`],\r\n          [_, _, `topping_5 - cheese_5 + base_5`],\r\n          [_, _, `topping_6 - cheese_6 + base_6`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n      });\r\n    });\r\n\r\n    describe('with when node', () => {\r\n      let fixture: ComponentFixture<WhenNodeNestedMatTreeApp>;\r\n      let component: WhenNodeNestedMatTreeApp;\r\n\r\n      beforeEach(() => {\r\n        configureMatTreeTestingModule([WhenNodeNestedMatTreeApp]);\r\n        fixture = TestBed.createComponent(WhenNodeNestedMatTreeApp);\r\n\r\n        component = fixture.componentInstance;\r\n        underlyingDataSource = component.underlyingDataSource;\r\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\r\n\r\n        fixture.detectChanges();\r\n      });\r\n\r\n      it('with the right data', () => {\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [`topping_3 - cheese_3 + base_3`],\r\n          [`>>> topping_4 - cheese_4 + base_4`]);\r\n      });\r\n    });\r\n\r\n    describe('with toggle', () => {\r\n      let fixture: ComponentFixture<NestedMatTreeAppWithToggle>;\r\n      let component: NestedMatTreeAppWithToggle;\r\n\r\n      beforeEach(() => {\r\n        configureMatTreeTestingModule([NestedMatTreeAppWithToggle]);\r\n        fixture = TestBed.createComponent(NestedMatTreeAppWithToggle);\r\n\r\n        component = fixture.componentInstance;\r\n        underlyingDataSource = component.underlyingDataSource;\r\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\r\n\r\n        fixture.detectChanges();\r\n      });\r\n\r\n      it('should expand/collapse the node', () => {\r\n        component.toggleRecursively = false;\r\n        let data = underlyingDataSource.data;\r\n        const child = underlyingDataSource.addChild(data[1]);\r\n        underlyingDataSource.addChild(child);\r\n\r\n        fixture.detectChanges();\r\n\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n\r\n        fixture.detectChanges();\r\n\r\n        (getNodes(treeElement)[1] as HTMLElement).click();\r\n        fixture.detectChanges();\r\n\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(1, `Expect node expanded`);\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [_, `topping_4 - cheese_4 + base_4`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n\r\n        (getNodes(treeElement)[1] as HTMLElement).click();\r\n        fixture.detectChanges();\r\n\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(0, `Expect node collapsed`);\r\n      });\r\n\r\n      it('should expand/collapse the node recursively', () => {\r\n        let data = underlyingDataSource.data;\r\n        const child = underlyingDataSource.addChild(data[1]);\r\n        underlyingDataSource.addChild(child);\r\n        fixture.detectChanges();\r\n\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n\r\n        (getNodes(treeElement)[1] as HTMLElement).click();\r\n        fixture.detectChanges();\r\n\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(3, `Expect node expanded`);\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [_, `topping_4 - cheese_4 + base_4`],\r\n          [_, _, `topping_5 - cheese_5 + base_5`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n\r\n        (getNodes(treeElement)[1] as HTMLElement).click();\r\n        fixture.detectChanges();\r\n\r\n        expect(component.treeControl.expansionModel.selected.length)\r\n          .toBe(0, `Expect node collapsed`);\r\n        expectNestedTreeToMatch(treeElement,\r\n          [`topping_1 - cheese_1 + base_1`],\r\n          [`topping_2 - cheese_2 + base_2`],\r\n          [`topping_3 - cheese_3 + base_3`]);\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\nexport class TestData {\r\n  pizzaTopping: string;\r\n  pizzaCheese: string;\r\n  pizzaBase: string;\r\n  level: number;\r\n  children: TestData[];\r\n  observableChildren: BehaviorSubject<TestData[]>;\r\n  isSpecial: boolean;\r\n\r\n  constructor(pizzaTopping: string, pizzaCheese: string, pizzaBase: string,\r\n              children: TestData[] = [], isSpecial: boolean = false) {\r\n    this.pizzaTopping = pizzaTopping;\r\n    this.pizzaCheese = pizzaCheese;\r\n    this.pizzaBase = pizzaBase;\r\n    this.isSpecial = isSpecial;\r\n    this.children = children;\r\n    this.observableChildren = new BehaviorSubject<TestData[]>(this.children);\r\n  }\r\n}\r\n\r\nclass FakeDataSource {\r\n  dataIndex = 0;\r\n  _dataChange = new BehaviorSubject<TestData[]>([]);\r\n  get data() { return this._dataChange.getValue(); }\r\n  set data(data: TestData[]) { this._dataChange.next(data); }\r\n\r\n  connect(): Observable<TestData[]> {\r\n    return this._dataChange;\r\n  }\r\n\r\n  disconnect() {}\r\n\r\n  constructor() {\r\n    for (let i = 0; i < 3; i++) {\r\n      this.addData();\r\n    }\r\n  }\r\n\r\n  addChild(parent: TestData, isSpecial: boolean = false) {\r\n    const nextIndex = ++this.dataIndex;\r\n    const child = new TestData(`topping_${nextIndex}`, `cheese_${nextIndex}`, `base_${nextIndex}`);\r\n\r\n    const index = this.data.indexOf(parent);\r\n    if (index > -1) {\r\n      parent = new TestData(\r\n          parent.pizzaTopping, parent.pizzaCheese, parent.pizzaBase, parent.children, isSpecial);\r\n    }\r\n    parent.children.push(child);\r\n    parent.observableChildren.next(parent.children);\r\n\r\n    let copiedData = this.data.slice();\r\n    if (index > -1) {\r\n      copiedData.splice(index, 1, parent);\r\n    }\r\n    this.data = copiedData;\r\n    return child;\r\n  }\r\n\r\n  addData(isSpecial: boolean = false) {\r\n    const nextIndex = ++this.dataIndex;\r\n    let copiedData = this.data.slice();\r\n    copiedData.push(new TestData(\r\n      `topping_${nextIndex}`, `cheese_${nextIndex}`, `base_${nextIndex}`, [], isSpecial));\r\n\r\n    this.data = copiedData;\r\n  }\r\n}\r\n\r\nfunction getNodes(treeElement: Element): Element[] {\r\n  return [].slice.call(treeElement.querySelectorAll('.mat-tree-node, .mat-nested-tree-node'))!;\r\n}\r\n\r\nfunction expectFlatTreeToMatch(treeElement: Element, expectedPaddingIndent: number = 28,\r\n                               ...expectedTree: any[]) {\r\n  const missedExpectations: string[] = [];\r\n\r\n  function checkNode(node: Element, expectedNode: any[]) {\r\n    const actualTextContent = node.textContent!.trim();\r\n    const expectedTextContent = expectedNode[expectedNode.length - 1];\r\n    if (actualTextContent !== expectedTextContent) {\r\n      missedExpectations.push(\r\n        `Expected node contents to be ${expectedTextContent} but was ${actualTextContent}`);\r\n    }\r\n  }\r\n\r\n  function checkLevel(node: Element, expectedNode: any[]) {\r\n\r\n    const actualLevel = (node as HTMLElement).style.paddingLeft;\r\n    if (expectedNode.length === 1) {\r\n      if (actualLevel !== ``) {\r\n        missedExpectations.push(\r\n          `Expected node level to be 0 but was ${actualLevel}`);\r\n      }\r\n    } else {\r\n      const expectedLevel = `${(expectedNode.length - 1) * expectedPaddingIndent}px`;\r\n      if (actualLevel != expectedLevel) {\r\n        missedExpectations.push(\r\n          `Expected node level to be ${expectedLevel} but was ${actualLevel}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  getNodes(treeElement).forEach((node, index) => {\r\n    const expected = expectedTree ?\r\n      expectedTree[index] :\r\n      null;\r\n\r\n    checkLevel(node, expected);\r\n    checkNode(node, expected);\r\n  });\r\n\r\n  if (missedExpectations.length) {\r\n    fail(missedExpectations.join('\\n'));\r\n  }\r\n}\r\n\r\nfunction expectNestedTreeToMatch(treeElement: Element, ...expectedTree: any[]) {\r\n  const missedExpectations: string[] = [];\r\n  function checkNodeContent(node: Element, expectedNode: any[]) {\r\n    const expectedTextContent = expectedNode[expectedNode.length - 1];\r\n    const actualTextContent = node.childNodes.item(0).textContent!.trim();\r\n    if (actualTextContent !== expectedTextContent) {\r\n      missedExpectations.push(\r\n        `Expected node contents to be ${expectedTextContent} but was ${actualTextContent}`);\r\n    }\r\n  }\r\n\r\n  function checkNodeDescendants(node: Element, expectedNode: any[], currentIndex: number) {\r\n    let expectedDescendant = 0;\r\n\r\n    for (let i = currentIndex + 1; i < expectedTree.length; ++i) {\r\n      if (expectedTree[i].length > expectedNode.length) {\r\n        ++expectedDescendant;\r\n      } else if (expectedTree[i].length === expectedNode.length) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    const actualDescendant = getNodes(node).length;\r\n    if (actualDescendant !== expectedDescendant) {\r\n      missedExpectations.push(\r\n        `Expected node descendant num to be ${expectedDescendant} but was ${actualDescendant}`);\r\n    }\r\n  }\r\n\r\n  getNodes(treeElement).forEach((node, index) => {\r\n\r\n    const expected = expectedTree ?\r\n      expectedTree[index] :\r\n      null;\r\n\r\n    checkNodeDescendants(node, expected, index);\r\n    checkNodeContent(node, expected);\r\n  });\r\n\r\n  if (missedExpectations.length) {\r\n    fail(missedExpectations.join('\\n'));\r\n  }\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n      <mat-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\"\r\n                     matTreeNodePadding [matTreeNodePaddingIndent]=\"28\"\r\n                     matTreeNodeToggle>\r\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\r\n      </mat-tree-node>\r\n    </mat-tree>\r\n  `\r\n})\r\nclass SimpleMatTreeApp {\r\n  getLevel = (node: TestData) => node.level;\r\n  isExpandable = (node: TestData) => node.children.length > 0;\r\n  getChildren = (node: TestData) => node.observableChildren;\r\n  transformer = (node: TestData, level: number) => {\r\n    node.level = level;\r\n    return node;\r\n  }\r\n\r\n  treeFlattener = new MatTreeFlattener<TestData, TestData>(\r\n    this.transformer, this.getLevel, this.isExpandable, this.getChildren);\r\n\r\n  treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\r\n\r\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n  underlyingDataSource = new FakeDataSource();\r\n\r\n  @ViewChild(MatTree) tree: MatTree<TestData>;\r\n\r\n  constructor() {\r\n    this.underlyingDataSource.connect().subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n      <mat-nested-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\">\r\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\r\n         <ng-template matTreeNodeOutlet></ng-template>\r\n      </mat-nested-tree-node>\r\n    </mat-tree>\r\n  `\r\n})\r\nclass NestedMatTreeApp {\r\n  getChildren = (node: TestData) => node.observableChildren;\r\n\r\n  treeControl = new NestedTreeControl(this.getChildren);\r\n\r\n  dataSource = new MatTreeNestedDataSource();\r\n  underlyingDataSource = new FakeDataSource();\r\n\r\n  @ViewChild(MatTree) tree: MatTree<TestData>;\r\n\r\n  constructor() {\r\n    this.underlyingDataSource.connect().subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n      <mat-nested-tree-node *matTreeNodeDef=\"let node\">\r\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\r\n         <ng-template matTreeNodeOutlet></ng-template>\r\n      </mat-nested-tree-node>\r\n       <mat-nested-tree-node *matTreeNodeDef=\"let node; when: isSpecial\"\r\n                             matTreeNodeToggle>\r\n                     >>> {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\r\n         <div *ngIf=\"treeControl.isExpanded(node)\">\r\n            <ng-template matTreeNodeOutlet></ng-template>\r\n         </div>\r\n      </mat-nested-tree-node>\r\n    </mat-tree>\r\n  `\r\n})\r\nclass WhenNodeNestedMatTreeApp {\r\n  isSpecial = (_: number, node: TestData) =>  node.isSpecial;\r\n\r\n  getChildren = (node: TestData) => node.observableChildren;\r\n\r\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\r\n\r\n  dataSource = new MatTreeNestedDataSource();\r\n  underlyingDataSource = new FakeDataSource();\r\n\r\n  @ViewChild(MatTree) tree: MatTree<TestData>;\r\n\r\n  constructor() {\r\n    this.underlyingDataSource.connect().subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n      <mat-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\"\r\n                     matTreeNodePadding\r\n                     matTreeNodeToggle [matTreeNodeToggleRecursive]=\"toggleRecursively\">\r\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\r\n      </mat-tree-node>\r\n    </mat-tree>\r\n  `\r\n})\r\nclass MatTreeAppWithToggle {\r\n  toggleRecursively: boolean = true;\r\n\r\n  getLevel = (node: TestData) => node.level;\r\n  isExpandable = (node: TestData) => node.children.length > 0;\r\n  getChildren = (node: TestData) => node.observableChildren;\r\n  transformer = (node: TestData, level: number) => {\r\n    node.level = level;\r\n    return node;\r\n  }\r\n\r\n  treeFlattener = new MatTreeFlattener<TestData, TestData>(\r\n    this.transformer, this.getLevel, this.isExpandable, this.getChildren);\r\n\r\n  treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\r\n\r\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n  underlyingDataSource = new FakeDataSource();\r\n\r\n  @ViewChild(MatTree) tree: MatTree<TestData>;\r\n\r\n  constructor() {\r\n    this.underlyingDataSource.connect().subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n      <mat-nested-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\"\r\n                            matTreeNodeToggle [matTreeNodeToggleRecursive]=\"toggleRecursively\">\r\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\r\n        <div *ngIf=\"treeControl.isExpanded(node)\">\r\n          <ng-template matTreeNodeOutlet></ng-template>\r\n        </div>\r\n      </mat-nested-tree-node>\r\n    </mat-tree>\r\n  `\r\n})\r\nclass NestedMatTreeAppWithToggle {\r\n  toggleRecursively: boolean = true;\r\n\r\n  getChildren = (node: TestData) => node.observableChildren;\r\n\r\n  treeControl = new NestedTreeControl(this.getChildren);\r\n  dataSource = new MatTreeNestedDataSource();\r\n  underlyingDataSource = new FakeDataSource();\r\n\r\n  @ViewChild(MatTree) tree: MatTree<TestData>;\r\n\r\n  constructor() {\r\n    this.underlyingDataSource.connect().subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n      <mat-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\"\r\n                     matTreeNodePadding [matTreeNodePaddingIndent]=\"28\"\r\n                     matTreeNodeToggle>\r\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\r\n      </mat-tree-node>\r\n       <mat-tree-node *matTreeNodeDef=\"let node; when: isSpecial\" class=\"customNodeClass\"\r\n                     matTreeNodePadding [matTreeNodePaddingIndent]=\"28\"\r\n                     matTreeNodeToggle>\r\n                     >>> {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\r\n      </mat-tree-node>\r\n    </mat-tree>\r\n  `\r\n})\r\nclass WhenNodeMatTreeApp {\r\n  isSpecial = (_: number, node: TestData) => node.isSpecial;\r\n\r\n  getLevel = (node: TestData) => node.level;\r\n  isExpandable = (node: TestData) => node.children.length > 0;\r\n  getChildren = (node: TestData) => node.observableChildren;\r\n  transformer = (node: TestData, level: number) => {\r\n    node.level = level;\r\n    return node;\r\n  }\r\n\r\n  treeFlattener = new MatTreeFlattener<TestData, TestData>(\r\n    this.transformer, this.getLevel, this.isExpandable, this.getChildren);\r\n\r\n  treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\r\n\r\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n  underlyingDataSource = new FakeDataSource();\r\n\r\n  @ViewChild(MatTree) tree: MatTree<TestData>;\r\n\r\n  constructor() {\r\n    this.underlyingDataSource.connect().subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n}\r\n"]}