{"version":3,"file":"sidenav.spec.js","sourceRoot":"","sources":["../../../../src/lib/sidenav/sidenav.spec.ts"],"names":[],"mappings":";;AAAA,sCAAwC;AACxC,iDAAuE;AACvE,iCAAqD;AACrD,mEAA0E;AAC1E,8DAA6C;AAG7C,QAAQ,CAAC,YAAY,EAAE;IACrB,IAAI,OAAmD,CAAC;IACxD,IAAI,SAAsB,CAAC;IAE3B,UAAU,CAAC,eAAK,CAAC;QACf,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,wBAAgB,EAAE,iCAAoB,CAAC;YACjD,YAAY,EAAE,CAAC,wBAAwB,CAAC;SACzC,CAAC,CAAC;QAEH,iBAAO,CAAC,iBAAiB,EAAE,CAAC;QAE5B,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,wBAAwB,CAAC,CAAC;QAC5D,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,SAAS,CAAC,kBAAU,CAAC,CAAC,CAAC,aAAa,CAAC;KAChF,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,6CAA6C,EAAE;QAChD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAE3D,OAAO,CAAC,iBAAiB,CAAC,KAAK,GAAG,KAAK,CAAC;QACxC,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;KAChE,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE;QACvD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE5C,OAAO,CAAC,iBAAiB,CAAC,KAAK,GAAG,KAAK,CAAC;QACxC,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;QACxC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;KAC5C,CAAC,CAAC;CACJ,CAAC,CAAC;;;qBAmBO,IAAI;wBACD,EAAE;2BACC,EAAE;;;gBAlBjB,gBAAS,SAAC;oBACT,QAAQ,EAAE,uVAYiB;iBAC5B;;mCA7DD","sourcesContent":["import {Component} from '@angular/core';\r\nimport {async, TestBed, ComponentFixture} from '@angular/core/testing';\r\nimport {MatSidenav, MatSidenavModule} from './index';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {By} from '@angular/platform-browser';\r\n\r\n\r\ndescribe('MatSidenav', () => {\r\n  let fixture: ComponentFixture<SidenavWithFixedPosition>;\r\n  let sidenavEl: HTMLElement;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatSidenavModule, NoopAnimationsModule],\r\n      declarations: [SidenavWithFixedPosition],\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n\r\n    fixture = TestBed.createComponent(SidenavWithFixedPosition);\r\n    fixture.detectChanges();\r\n\r\n    sidenavEl = fixture.debugElement.query(By.directive(MatSidenav)).nativeElement;\r\n  }));\r\n\r\n  it('should be fixed position when in fixed mode', () => {\r\n    expect(sidenavEl.classList).toContain('mat-sidenav-fixed');\r\n\r\n    fixture.componentInstance.fixed = false;\r\n    fixture.detectChanges();\r\n\r\n    expect(sidenavEl.classList).not.toContain('mat-sidenav-fixed');\r\n  });\r\n\r\n  it('should set fixed bottom and top when in fixed mode', () => {\r\n    expect(sidenavEl.style.top).toBe('20px');\r\n    expect(sidenavEl.style.bottom).toBe('30px');\r\n\r\n    fixture.componentInstance.fixed = false;\r\n    fixture.detectChanges();\r\n\r\n    expect(sidenavEl.style.top).toBeFalsy();\r\n    expect(sidenavEl.style.bottom).toBeFalsy();\r\n  });\r\n});\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-sidenav-container>\r\n      <mat-sidenav\r\n          #drawer\r\n          [fixedInViewport]=\"fixed\"\r\n          [fixedTopGap]=\"fixedTop\"\r\n          [fixedBottomGap]=\"fixedBottom\">\r\n        Drawer.\r\n      </mat-sidenav>\r\n      <mat-sidenav-content>\r\n        Some content.\r\n      </mat-sidenav-content>\r\n    </mat-sidenav-container>`,\r\n})\r\nclass SidenavWithFixedPosition {\r\n  fixed = true;\r\n  fixedTop = 20;\r\n  fixedBottom = 30;\r\n}\r\n"]}