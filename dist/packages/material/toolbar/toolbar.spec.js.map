{"version":3,"file":"toolbar.spec.js","sourceRoot":"","sources":["../../../../src/lib/toolbar/toolbar.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component} from '@angular/core';\r\nimport {TestBed, async, ComponentFixture, fakeAsync, flush} from '@angular/core/testing';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MatToolbarModule} from './index';\r\n\r\ndescribe('MatToolbar', () => {\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatToolbarModule],\r\n      declarations: [ToolbarSingleRow, ToolbarMultipleRows, ToolbarMixedRowModes],\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  describe('with single row', () => {\r\n    let fixture: ComponentFixture<ToolbarSingleRow>;\r\n    let testComponent: ToolbarSingleRow;\r\n    let toolbarElement: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(ToolbarSingleRow);\r\n      testComponent = fixture.debugElement.componentInstance;\r\n      toolbarElement = fixture.debugElement.query(By.css('.mat-toolbar')).nativeElement;\r\n    });\r\n\r\n    it('should apply class based on color attribute', () => {\r\n      testComponent.toolbarColor = 'primary';\r\n      fixture.detectChanges();\r\n\r\n      expect(toolbarElement.classList.contains('mat-primary')).toBe(true);\r\n\r\n      testComponent.toolbarColor = 'accent';\r\n      fixture.detectChanges();\r\n\r\n      expect(toolbarElement.classList.contains('mat-primary')).toBe(false);\r\n      expect(toolbarElement.classList.contains('mat-accent')).toBe(true);\r\n\r\n      testComponent.toolbarColor = 'warn';\r\n      fixture.detectChanges();\r\n\r\n      expect(toolbarElement.classList.contains('mat-accent')).toBe(false);\r\n      expect(toolbarElement.classList.contains('mat-warn')).toBe(true);\r\n    });\r\n\r\n    it('should not wrap the first row contents inside of a generated element', () => {\r\n      expect(toolbarElement.firstElementChild!.tagName).toBe('SPAN',\r\n          'Expected the <span> element of the first row to be a direct child of the toolbar');\r\n    });\r\n  });\r\n\r\n  describe('with multiple rows', () => {\r\n\r\n    it('should project each toolbar-row element inside of the toolbar', () => {\r\n      const fixture = TestBed.createComponent(ToolbarMultipleRows);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.debugElement.queryAll(By.css('.mat-toolbar > .mat-toolbar-row')).length)\r\n        .toBe(2, 'Expected one toolbar row to be present while no content is projected.');\r\n    });\r\n\r\n    it('should throw an error if different toolbar modes are mixed', () => {\r\n      expect(() => {\r\n        const fixture = TestBed.createComponent(ToolbarMixedRowModes);\r\n        fixture.detectChanges();\r\n      }).toThrowError(/attempting to combine different/i);\r\n    });\r\n\r\n    it('should throw an error if a toolbar-row is added later', fakeAsync(() => {\r\n      const fixture = TestBed.createComponent(ToolbarMixedRowModes);\r\n\r\n      fixture.componentInstance.showToolbarRow = false;\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      expect(() => {\r\n        try {\r\n          fixture.componentInstance.showToolbarRow = true;\r\n          fixture.detectChanges();\r\n          flush();\r\n        } catch (e) {\r\n          flush();\r\n        }\r\n      }).toThrowError(/attempting to combine different/i);\r\n    }));\r\n  });\r\n\r\n});\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-toolbar [color]=\"toolbarColor\">\r\n      <span>First Row</span>\r\n    </mat-toolbar>\r\n  `\r\n})\r\nclass ToolbarSingleRow {\r\n  toolbarColor: string;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-toolbar>\r\n      <mat-toolbar-row>First Row</mat-toolbar-row>\r\n      <mat-toolbar-row>Second Row</mat-toolbar-row>\r\n    </mat-toolbar>\r\n  `\r\n})\r\nclass ToolbarMultipleRows {}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-toolbar>\r\n      First Row\r\n      <mat-toolbar-row *ngIf=\"showToolbarRow\">Second Row</mat-toolbar-row>\r\n    </mat-toolbar>\r\n  `\r\n})\r\nclass ToolbarMixedRowModes {\r\n  showToolbarRow: boolean = true;\r\n}\r\n"]}