{"version":3,"file":"color.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/common-behaviors/color.spec.ts"],"names":[],"mappings":";;AAAA,iCAAmC;AACnC,sCAAyC;AAEzC,QAAQ,CAAC,YAAY,EAAE;IAErB,EAAE,CAAC,wDAAwD,EAAE;QAC3D,IAAM,cAAc,GAAG,kBAAU,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;aACjB,SAAS,CAAC,wDAAwD,CAAC,CAAC;QAEzE,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC;QAE1B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;aACjB,IAAI,CAAC,QAAQ,EAAE,iEAAiE,CAAC,CAAC;KACxF,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;QACxD,IAAM,cAAc,GAAG,kBAAU,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;aAC1C,IAAI,CAAC,CAAC,EAAE,gEAAgE,CAAC,CAAC;QAE7E,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;QAE3B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,aAAa,EAAE,0DAA0D,CAAC,CAAC;QAExF,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC;QAE1B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,2DAA2D,CAAC,CAAC;QAC7F,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,YAAY,EAAE,yDAAyD,CAAC,CAAC;KACvF,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACrC,IAAM,cAAc,GAAG,kBAAU,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;aAC1C,IAAI,CAAC,CAAC,EAAE,gEAAgE,CAAC,CAAC;QAE7E,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;QAE3B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,aAAa,EAAE,0DAA0D,CAAC,CAAC;QAExF,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;QAE3B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;aAC1C,IAAI,CAAC,CAAC,EAAE,kDAAkD,CAAC,CAAC;KAChE,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACrD,IAAM,cAAc,GAAG,kBAAU,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACvD,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,YAAY,EAAE,iEAAiE,CAAC,CAAC;QAE9F,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;QAE3B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,YAAY,EAAE,oDAAoD,CAAC,CAAC;KAClF,CAAC,CAAC;CAEJ,CAAC,CAAC;AAEH,IAAA;;2BAC6B,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;;2BAG1C,IAAI,iBAAU,CAAC,IAAI,CAAC,WAAW,CAAC;;oBA3EhD;IA4EC,CAAA","sourcesContent":["import {mixinColor} from './color';\r\nimport {ElementRef} from '@angular/core';\r\n\r\ndescribe('MixinColor', () => {\r\n\r\n  it('should augment an existing class with a color property', () => {\r\n    const classWithColor = mixinColor(TestClass);\r\n    const instance = new classWithColor();\r\n\r\n    expect(instance.color)\r\n        .toBeFalsy('Expected the mixed-into class to have a color property');\r\n\r\n    instance.color = 'accent';\r\n\r\n    expect(instance.color)\r\n        .toBe('accent', 'Expected the mixed-into class to have an updated color property');\r\n  });\r\n\r\n  it('should remove old color classes if new color is set', () => {\r\n    const classWithColor = mixinColor(TestClass);\r\n    const instance = new classWithColor();\r\n\r\n    expect(instance.testElement.classList.length)\r\n      .toBe(0, 'Expected the element to not have any classes at initialization');\r\n\r\n    instance.color = 'primary';\r\n\r\n    expect(instance.testElement.classList)\r\n      .toContain('mat-primary', 'Expected the element to have the \"mat-primary\" class set');\r\n\r\n    instance.color = 'accent';\r\n\r\n    expect(instance.testElement.classList)\r\n      .not.toContain('mat-primary', 'Expected the element to no longer have \"mat-primary\" set.');\r\n    expect(instance.testElement.classList)\r\n      .toContain('mat-accent', 'Expected the element to have the \"mat-accent\" class set');\r\n  });\r\n\r\n  it('should allow having no color set', () => {\r\n    const classWithColor = mixinColor(TestClass);\r\n    const instance = new classWithColor();\r\n\r\n    expect(instance.testElement.classList.length)\r\n      .toBe(0, 'Expected the element to not have any classes at initialization');\r\n\r\n    instance.color = 'primary';\r\n\r\n    expect(instance.testElement.classList)\r\n      .toContain('mat-primary', 'Expected the element to have the \"mat-primary\" class set');\r\n\r\n    instance.color = undefined;\r\n\r\n    expect(instance.testElement.classList.length)\r\n      .toBe(0, 'Expected the element to have no color class set.');\r\n  });\r\n\r\n  it('should allow having a default color if specified', () => {\r\n    const classWithColor = mixinColor(TestClass, 'accent');\r\n    const instance = new classWithColor();\r\n\r\n    expect(instance.testElement.classList)\r\n      .toContain('mat-accent', 'Expected the element to have the \"mat-accent\" class by default.');\r\n\r\n    instance.color = undefined;\r\n\r\n    expect(instance.testElement.classList)\r\n      .toContain('mat-accent', 'Expected the default color \"mat-accent\" to be set.');\r\n  });\r\n\r\n});\r\n\r\nclass TestClass {\r\n  testElement: HTMLElement = document.createElement('div');\r\n\r\n  /** Fake instance of an ElementRef. */\r\n  _elementRef = new ElementRef(this.testElement);\r\n}\r\n"]}