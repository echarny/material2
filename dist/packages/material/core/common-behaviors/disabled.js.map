{"version":3,"file":"disabled.js","sourceRoot":"","sources":["../../../../../src/lib/core/common-behaviors/disabled.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAQA,kDAA4D;;AAU5D,uBAAyD,IAAO;IAC9D,MAAM;QAAe,2BAAI;QAMvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BAAuC,IAAI,UAAI;8BALlB,KAAK;;SAKa;QAH/C,sBAAI,6BAAQ;iBAAZ,cAAiB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;iBACzC,UAAa,KAAU,IAAI,IAAI,CAAC,SAAS,GAAG,gCAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;WADlC;sBAtB7C;KA0BG,AAPM,CAAc,IAAI,GAOvB;CACH;AATD,sCASC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisable {\r\n  /** Whether the component is disabled. */\r\n  disabled: boolean;\r\n}\r\n\r\n/** Mixin to augment a directive with a `disabled` property. */\r\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\r\n  return class extends base {\r\n    private _disabled: boolean = false;\r\n\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n"]}