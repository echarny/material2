{"version":3,"file":"initialized.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/common-behaviors/initialized.spec.ts"],"names":[],"mappings":";;AAAA,6CAA+C;AAG/C,QAAQ,CAAC,qBAAqB,EAAE;IAC9B,IAAA;;;yBAJF;QAIsB,CAAA;IACpB,IAAI,QAAwB,CAAC;IAE7B,UAAU,CAAC;QACT,IAAM,uBAAuB,GAAG,8BAAgB,CAAC,UAAU,CAAC,CAAC;QAC7D,QAAQ,GAAG,IAAI,uBAAuB,EAAE,CAAC;KAC1C,CAAC,CAAC;IAEH,EAAE,CAAC,mFAAmF,EAAE,UAAA,IAAI;;QAE1F,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,cAAM,OAAA,IAAI,EAAE,EAAN,CAAM,CAAC,CAAC;;QAG7C,QAAQ,CAAC,gBAAgB,EAAE,CAAC;KAC7B,CAAC,CAAC;IAEH,EAAE,CAAC,kFAAkF,EAAE,UAAA,IAAI;;QAEzF,QAAQ,CAAC,gBAAgB,EAAE,CAAC;;QAG5B,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,cAAM,OAAA,IAAI,EAAE,EAAN,CAAM,CAAC,CAAC;KAC9C,CAAC,CAAC;IAEH,EAAE,CAAC,oFAAoF,EAAE,UAAA,IAAI;;QAE3F,IAAM,yBAAyB,GAAG,CAAC,CAAC;QACpC,IAAI,wBAAwB,GAAG,CAAC,CAAC;;QAGjC;YACE,wBAAwB,EAAE,CAAC;YAC3B,EAAE,CAAC,CAAC,wBAAwB,KAAK,yBAAyB,CAAC,CAAC,CAAC;gBAC3D,IAAI,EAAE,CAAC;aACR;SACF;QAED,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3C,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAE3C,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QAE5B,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3C,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;KAC5C,CAAC,CAAC;CACJ,CAAC,CAAC","sourcesContent":["import {mixinInitialized} from './initialized';\r\nimport {HasInitialized} from '@angular/material/core';\r\n\r\ndescribe('MixinHasInitialized', () => {\r\n  class EmptyClass { }\r\n  let instance: HasInitialized;\r\n\r\n  beforeEach(() => {\r\n    const classWithHasInitialized = mixinInitialized(EmptyClass);\r\n    instance = new classWithHasInitialized();\r\n  });\r\n\r\n  it('should emit for subscriptions made before the directive was marked as initialized', done => {\r\n    // Listen for an event from the initialized stream and mark the test as done when it emits.\r\n    instance.initialized.subscribe(() => done());\r\n\r\n    // Mark the class as initialized so that the stream emits and the test completes.\r\n    instance._markInitialized();\r\n  });\r\n\r\n  it('should emit for subscriptions made after the directive was marked as initialized', done => {\r\n    // Mark the class as initialized so the stream emits when subscribed and the test completes.\r\n    instance._markInitialized();\r\n\r\n    // Listen for an event from the initialized stream and mark the test as done when it emits.\r\n    instance.initialized.subscribe(() => done());\r\n  });\r\n\r\n  it('should emit for multiple subscriptions made before and after marked as initialized', done => {\r\n    // Should expect the number of notifications to match the number of subscriptions.\r\n    const expectedNotificationCount = 4;\r\n    let currentNotificationCount = 0;\r\n\r\n    // Function that completes the test when the number of notifications meets the expectation.\r\n    function onNotified() {\r\n      currentNotificationCount++;\r\n      if (currentNotificationCount === expectedNotificationCount) {\r\n        done();\r\n      }\r\n    }\r\n\r\n    instance.initialized.subscribe(onNotified);  // Subscription 1\r\n    instance.initialized.subscribe(onNotified);  // Subscription 2\r\n\r\n    instance._markInitialized();\r\n\r\n    instance.initialized.subscribe(onNotified);  // Subscription 3\r\n    instance.initialized.subscribe(onNotified);  // Subscription 4\r\n  });\r\n});\r\n"]}