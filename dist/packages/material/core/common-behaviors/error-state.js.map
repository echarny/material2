{"version":3,"file":"error-state.js","sourceRoot":"","sources":["../../../../../src/lib/core/common-behaviors/error-state.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAWA,6BAA6B;;;;;AAsB7B,yBAAsE,IAAO;IAE3E,MAAM;QAAe,2BAAI;QAyBvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BACW,IAAI,UACd;;+BAzBqB,KAAK;;;;;iCAMH,IAAI,cAAO,EAAQ;;SAmB1C;QAfD,kCAAgB,GAAhB;YACE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;YACjC,IAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,WAAW,CAAC;YACzD,IAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,yBAAyB,CAAC;YACzE,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAsB,CAAC,CAAC,CAAC,IAAI,CAAC;YAC9E,IAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAEvD,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;gBAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;aAC1B;SACF;sBA1DL;KA+DG,AA5BM,CAAc,IAAI,GA4BvB;CACH;AA/BD,0CA+BC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Constructor} from './constructor';\r\nimport {ErrorStateMatcher} from '../error/error-options';\r\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** @docs-private */\r\nexport interface CanUpdateErrorState {\r\n  updateErrorState();\r\n  readonly stateChanges: Subject<void>;\r\n  errorState: boolean;\r\n  errorStateMatcher: ErrorStateMatcher;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HasErrorState {\r\n  _parentFormGroup: FormGroupDirective;\r\n  _parentForm: NgForm;\r\n  _defaultErrorStateMatcher: ErrorStateMatcher;\r\n  ngControl: NgControl;\r\n}\r\n\r\n/**\r\n * Mixin to augment a directive with updateErrorState method.\r\n * For component with `errorState` and need to update `errorState`.\r\n */\r\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\r\n: Constructor<CanUpdateErrorState> & T {\r\n  return class extends base {\r\n    /** Whether the component is in an error state. */\r\n    errorState: boolean = false;\r\n\r\n    /**\r\n     * Stream that emits whenever the state of the input changes such that the wrapping\r\n     * `MatFormField` needs to run change detection.\r\n     */\r\n    readonly stateChanges = new Subject<void>();\r\n\r\n    errorStateMatcher: ErrorStateMatcher;\r\n\r\n    updateErrorState() {\r\n      const oldState = this.errorState;\r\n      const parent = this._parentFormGroup || this._parentForm;\r\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\r\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\r\n      const newState = matcher.isErrorState(control, parent);\r\n\r\n      if (newState !== oldState) {\r\n        this.errorState = newState;\r\n        this.stateChanges.next();\r\n      }\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n"]}