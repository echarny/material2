{"version":3,"file":"option.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/option/option.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {async, ComponentFixture, TestBed} from '@angular/core/testing';\r\nimport {Component, DebugElement} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {dispatchFakeEvent} from '@angular/cdk/testing';\r\nimport {MatOption, MatOptionModule} from './index';\r\n\r\ndescribe('MatOption component', () => {\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatOptionModule],\r\n      declarations: [OptionWithDisable]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  it('should complete the `stateChanges` stream on destroy', () => {\r\n    const fixture = TestBed.createComponent(OptionWithDisable);\r\n    fixture.detectChanges();\r\n\r\n    const optionInstance: MatOption =\r\n        fixture.debugElement.query(By.directive(MatOption)).componentInstance;\r\n    const completeSpy = jasmine.createSpy('complete spy');\r\n    const subscription = optionInstance._stateChanges.subscribe(undefined, undefined, completeSpy);\r\n\r\n    fixture.destroy();\r\n    expect(completeSpy).toHaveBeenCalled();\r\n    subscription.unsubscribe();\r\n  });\r\n\r\n  it('should not emit to `onSelectionChange` if selecting an already-selected option', () => {\r\n    const fixture = TestBed.createComponent(OptionWithDisable);\r\n    fixture.detectChanges();\r\n\r\n    const optionInstance: MatOption =\r\n        fixture.debugElement.query(By.directive(MatOption)).componentInstance;\r\n\r\n    optionInstance.select();\r\n    expect(optionInstance.selected).toBe(true);\r\n\r\n    const spy = jasmine.createSpy('selection change spy');\r\n    const subscription = optionInstance.onSelectionChange.subscribe(spy);\r\n\r\n    optionInstance.select();\r\n    fixture.detectChanges();\r\n\r\n    expect(optionInstance.selected).toBe(true);\r\n    expect(spy).not.toHaveBeenCalled();\r\n\r\n    subscription.unsubscribe();\r\n  });\r\n\r\n  it('should not emit to `onSelectionChange` if deselecting an unselected option', () => {\r\n    const fixture = TestBed.createComponent(OptionWithDisable);\r\n    fixture.detectChanges();\r\n\r\n    const optionInstance: MatOption =\r\n        fixture.debugElement.query(By.directive(MatOption)).componentInstance;\r\n\r\n    optionInstance.deselect();\r\n    expect(optionInstance.selected).toBe(false);\r\n\r\n    const spy = jasmine.createSpy('selection change spy');\r\n    const subscription = optionInstance.onSelectionChange.subscribe(spy);\r\n\r\n    optionInstance.deselect();\r\n    fixture.detectChanges();\r\n\r\n    expect(optionInstance.selected).toBe(false);\r\n    expect(spy).not.toHaveBeenCalled();\r\n\r\n    subscription.unsubscribe();\r\n  });\r\n\r\n  describe('ripples', () => {\r\n    let fixture: ComponentFixture<OptionWithDisable>;\r\n    let optionDebugElement: DebugElement;\r\n    let optionNativeElement: HTMLElement;\r\n    let optionInstance: MatOption;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(OptionWithDisable);\r\n      fixture.detectChanges();\r\n\r\n      optionDebugElement = fixture.debugElement.query(By.directive(MatOption));\r\n      optionNativeElement = optionDebugElement.nativeElement;\r\n      optionInstance = optionDebugElement.componentInstance;\r\n    });\r\n\r\n    it('should show ripples by default', () => {\r\n      expect(optionInstance.disableRipple).toBeFalsy('Expected ripples to be enabled by default');\r\n      expect(optionNativeElement.querySelectorAll('.mat-ripple-element').length)\r\n        .toBe(0, 'Expected no ripples to show up initially');\r\n\r\n      dispatchFakeEvent(optionNativeElement, 'mousedown');\r\n      dispatchFakeEvent(optionNativeElement, 'mouseup');\r\n\r\n      expect(optionNativeElement.querySelectorAll('.mat-ripple-element').length)\r\n        .toBe(1, 'Expected one ripple to show up after a fake click.');\r\n    });\r\n\r\n    it('should not show ripples if the option is disabled', () => {\r\n      expect(optionNativeElement.querySelectorAll('.mat-ripple-element').length)\r\n        .toBe(0, 'Expected no ripples to show up initially');\r\n\r\n      fixture.componentInstance.disabled = true;\r\n      fixture.detectChanges();\r\n\r\n      dispatchFakeEvent(optionNativeElement, 'mousedown');\r\n      dispatchFakeEvent(optionNativeElement, 'mouseup');\r\n\r\n      expect(optionNativeElement.querySelectorAll('.mat-ripple-element').length)\r\n        .toBe(0, 'Expected no ripples to show up after click on a disabled option.');\r\n    });\r\n\r\n  });\r\n\r\n});\r\n\r\n@Component({\r\n  template: `<mat-option [disabled]=\"disabled\"></mat-option>`\r\n})\r\nclass OptionWithDisable {\r\n  disabled: boolean;\r\n}\r\n"]}