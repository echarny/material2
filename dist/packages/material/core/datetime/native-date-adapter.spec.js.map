{"version":3,"file":"native-date-adapter.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/datetime/native-date-adapter.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Platform} from '@angular/cdk/platform';\r\nimport {LOCALE_ID} from '@angular/core';\r\nimport {async, inject, TestBed} from '@angular/core/testing';\r\nimport {DEC, FEB, JAN, MAR} from '../testing/month-constants';\r\nimport {DateAdapter, MAT_DATE_LOCALE, NativeDateAdapter, NativeDateModule} from './index';\r\n\r\nconst SUPPORTS_INTL = typeof Intl != 'undefined';\r\n\r\n\r\ndescribe('NativeDateAdapter', () => {\r\n  let platform: Platform;\r\n  let adapter: NativeDateAdapter;\r\n  let assertValidDate: (d: Date | null, valid: boolean) => void;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [NativeDateModule]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(inject([DateAdapter, Platform],\r\n    (dateAdapter: NativeDateAdapter, _platform: Platform) => {\r\n    adapter = dateAdapter;\r\n    platform = _platform;\r\n\r\n    assertValidDate = (d: Date | null, valid: boolean) => {\r\n      expect(adapter.isDateInstance(d)).not.toBeNull(`Expected ${d} to be a date instance`);\r\n      expect(adapter.isValid(d!)).toBe(valid,\r\n          `Expected ${d} to be ${valid ? 'valid' : 'invalid'},` +\r\n          ` but was ${valid ? 'invalid' : 'valid'}`);\r\n    };\r\n  }));\r\n\r\n  it('should get year', () => {\r\n    expect(adapter.getYear(new Date(2017, JAN, 1))).toBe(2017);\r\n  });\r\n\r\n  it('should get month', () => {\r\n    expect(adapter.getMonth(new Date(2017, JAN, 1))).toBe(0);\r\n  });\r\n\r\n  it('should get date', () => {\r\n    expect(adapter.getDate(new Date(2017, JAN, 1))).toBe(1);\r\n  });\r\n\r\n  it('should get day of week', () => {\r\n    expect(adapter.getDayOfWeek(new Date(2017, JAN, 1))).toBe(0);\r\n  });\r\n\r\n  it('should get long month names', () => {\r\n    expect(adapter.getMonthNames('long')).toEqual([\r\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n      'October', 'November', 'December'\r\n    ]);\r\n  });\r\n\r\n  it('should get long month names', () => {\r\n    expect(adapter.getMonthNames('short')).toEqual([\r\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n    ]);\r\n  });\r\n\r\n  it('should get narrow month names', () => {\r\n    // Edge & IE use same value for short and narrow.\r\n    if (platform.EDGE || platform.TRIDENT) {\r\n      expect(adapter.getMonthNames('narrow')).toEqual([\r\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n      ]);\r\n    } else {\r\n      expect(adapter.getMonthNames('narrow')).toEqual([\r\n        'J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'\r\n      ]);\r\n    }\r\n  });\r\n\r\n  it('should get month names in a different locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    if (SUPPORTS_INTL) {\r\n      expect(adapter.getMonthNames('long')).toEqual([\r\n        '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'\r\n      ]);\r\n    } else {\r\n      expect(adapter.getMonthNames('long')).toEqual([\r\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n        'October', 'November', 'December'\r\n      ]);\r\n    }\r\n  });\r\n\r\n  it('should get date names', () => {\r\n    expect(adapter.getDateNames()).toEqual([\r\n      '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17',\r\n      '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'\r\n    ]);\r\n  });\r\n\r\n  it('should get date names in a different locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    if (SUPPORTS_INTL) {\r\n      expect(adapter.getDateNames()).toEqual([\r\n        '1日', '2日', '3日', '4日', '5日', '6日', '7日', '8日', '9日', '10日', '11日', '12日',\r\n        '13日', '14日', '15日', '16日', '17日', '18日', '19日', '20日', '21日', '22日', '23日', '24日',\r\n        '25日', '26日', '27日', '28日', '29日', '30日', '31日'\r\n      ]);\r\n    } else {\r\n      expect(adapter.getDateNames()).toEqual([\r\n        '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17',\r\n        '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'\r\n      ]);\r\n    }\r\n  });\r\n\r\n  it('should get long day of week names', () => {\r\n    expect(adapter.getDayOfWeekNames('long')).toEqual([\r\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\r\n    ]);\r\n  });\r\n\r\n  it('should get short day of week names', () => {\r\n    expect(adapter.getDayOfWeekNames('short')).toEqual([\r\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'\r\n    ]);\r\n  });\r\n\r\n  it('should get narrow day of week names', () => {\r\n    // Edge & IE use two-letter narrow days.\r\n    if (platform.EDGE || platform.TRIDENT) {\r\n      expect(adapter.getDayOfWeekNames('narrow')).toEqual([\r\n        'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'\r\n      ]);\r\n    } else {\r\n      expect(adapter.getDayOfWeekNames('narrow')).toEqual([\r\n        'S', 'M', 'T', 'W', 'T', 'F', 'S'\r\n      ]);\r\n    }\r\n  });\r\n\r\n  it('should get day of week names in a different locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    if (SUPPORTS_INTL) {\r\n      expect(adapter.getDayOfWeekNames('long')).toEqual([\r\n        '日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'\r\n      ]);\r\n    } else {\r\n      expect(adapter.getDayOfWeekNames('long')).toEqual([\r\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\r\n      ]);\r\n    }\r\n  });\r\n\r\n  it('should get year name', () => {\r\n    expect(adapter.getYearName(new Date(2017, JAN, 1))).toBe('2017');\r\n  });\r\n\r\n  it('should get year name in a different locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    if (SUPPORTS_INTL) {\r\n      expect(adapter.getYearName(new Date(2017, JAN, 1))).toBe('2017年');\r\n    } else {\r\n      expect(adapter.getYearName(new Date(2017, JAN, 1))).toBe('2017');\r\n    }\r\n  });\r\n\r\n  it('should get first day of week', () => {\r\n    expect(adapter.getFirstDayOfWeek()).toBe(0);\r\n  });\r\n\r\n  it('should create Date', () => {\r\n    expect(adapter.createDate(2017, JAN, 1)).toEqual(new Date(2017, JAN, 1));\r\n  });\r\n\r\n  it('should not create Date with month over/under-flow', () => {\r\n    expect(() => adapter.createDate(2017, DEC + 1, 1)).toThrow();\r\n    expect(() => adapter.createDate(2017, JAN - 1, 1)).toThrow();\r\n  });\r\n\r\n  it('should not create Date with date over/under-flow', () => {\r\n    expect(() => adapter.createDate(2017, JAN, 32)).toThrow();\r\n    expect(() => adapter.createDate(2017, JAN, 0)).toThrow();\r\n  });\r\n\r\n  it('should create Date with low year number', () => {\r\n    expect(adapter.createDate(-1, JAN, 1).getFullYear()).toBe(-1);\r\n    expect(adapter.createDate(0, JAN, 1).getFullYear()).toBe(0);\r\n    expect(adapter.createDate(50, JAN, 1).getFullYear()).toBe(50);\r\n    expect(adapter.createDate(99, JAN, 1).getFullYear()).toBe(99);\r\n    expect(adapter.createDate(100, JAN, 1).getFullYear()).toBe(100);\r\n  });\r\n\r\n  it(\"should get today's date\", () => {\r\n    expect(adapter.sameDate(adapter.today(), new Date()))\r\n        .toBe(true, \"should be equal to today's date\");\r\n  });\r\n\r\n  it('should parse string', () => {\r\n    expect(adapter.parse('1/1/2017')).toEqual(new Date(2017, JAN, 1));\r\n  });\r\n\r\n  it('should parse number', () => {\r\n    let timestamp = new Date().getTime();\r\n    expect(adapter.parse(timestamp)).toEqual(new Date(timestamp));\r\n  });\r\n\r\n  it ('should parse Date', () => {\r\n    let date = new Date(2017, JAN, 1);\r\n    expect(adapter.parse(date)).toEqual(date);\r\n    expect(adapter.parse(date)).not.toBe(date);\r\n  });\r\n\r\n  it('should parse invalid value as invalid', () => {\r\n    let d = adapter.parse('hello');\r\n    expect(d).not.toBeNull();\r\n    expect(adapter.isDateInstance(d))\r\n        .toBe(true, 'Expected string to have been fed through Date.parse');\r\n    expect(adapter.isValid(d as Date))\r\n        .toBe(false, 'Expected to parse as \"invalid date\" object');\r\n  });\r\n\r\n  it('should format', () => {\r\n    if (SUPPORTS_INTL) {\r\n      expect(adapter.format(new Date(2017, JAN, 1), {})).toEqual('1/1/2017');\r\n    } else {\r\n      expect(adapter.format(new Date(2017, JAN, 1), {})).toEqual('Sun Jan 01 2017');\r\n    }\r\n  });\r\n\r\n  it('should format with custom format', () => {\r\n    if (SUPPORTS_INTL) {\r\n      expect(adapter.format(new Date(2017, JAN, 1), {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n      })).toEqual('January 1, 2017');\r\n    } else {\r\n      expect(adapter.format(new Date(2017, JAN, 1), {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n      })).toEqual('Sun Jan 01 2017');\r\n    }\r\n  });\r\n\r\n  it('should format with a different locale', () => {\r\n    adapter.setLocale('ja-JP');\r\n    if (SUPPORTS_INTL) {\r\n      // Edge & IE use a different format in Japanese.\r\n      if (platform.EDGE || platform.TRIDENT) {\r\n        expect(adapter.format(new Date(2017, JAN, 1), {})).toEqual('2017年1月1日');\r\n      } else {\r\n        expect(adapter.format(new Date(2017, JAN, 1), {})).toEqual('2017/1/1');\r\n      }\r\n    } else {\r\n      expect(adapter.format(new Date(2017, JAN, 1), {})).toEqual('Sun Jan 01 2017');\r\n    }\r\n  });\r\n\r\n  it('should throw when attempting to format invalid date', () => {\r\n    expect(() => adapter.format(new Date(NaN), {}))\r\n        .toThrowError(/NativeDateAdapter: Cannot format invalid date\\./);\r\n  });\r\n\r\n  it('should add years', () => {\r\n    expect(adapter.addCalendarYears(new Date(2017, JAN, 1), 1)).toEqual(new Date(2018, JAN, 1));\r\n    expect(adapter.addCalendarYears(new Date(2017, JAN, 1), -1)).toEqual(new Date(2016, JAN, 1));\r\n  });\r\n\r\n  it('should respect leap years when adding years', () => {\r\n    expect(adapter.addCalendarYears(new Date(2016, FEB, 29), 1)).toEqual(new Date(2017, FEB, 28));\r\n    expect(adapter.addCalendarYears(new Date(2016, FEB, 29), -1)).toEqual(new Date(2015, FEB, 28));\r\n  });\r\n\r\n  it('should add months', () => {\r\n    expect(adapter.addCalendarMonths(new Date(2017, JAN, 1), 1)).toEqual(new Date(2017, FEB, 1));\r\n    expect(adapter.addCalendarMonths(new Date(2017, JAN, 1), -1)).toEqual(new Date(2016, DEC, 1));\r\n  });\r\n\r\n  it('should respect month length differences when adding months', () => {\r\n    expect(adapter.addCalendarMonths(new Date(2017, JAN, 31), 1)).toEqual(new Date(2017, FEB, 28));\r\n    expect(adapter.addCalendarMonths(new Date(2017, MAR, 31), -1)).toEqual(new Date(2017, FEB, 28));\r\n  });\r\n\r\n  it('should add days', () => {\r\n    expect(adapter.addCalendarDays(new Date(2017, JAN, 1), 1)).toEqual(new Date(2017, JAN, 2));\r\n    expect(adapter.addCalendarDays(new Date(2017, JAN, 1), -1)).toEqual(new Date(2016, DEC, 31));\r\n  });\r\n\r\n  it('should clone', () => {\r\n    let date = new Date(2017, JAN, 1);\r\n    expect(adapter.clone(date)).toEqual(date);\r\n    expect(adapter.clone(date)).not.toBe(date);\r\n  });\r\n\r\n  it('should compare dates', () => {\r\n    expect(adapter.compareDate(new Date(2017, JAN, 1), new Date(2017, JAN, 2))).toBeLessThan(0);\r\n    expect(adapter.compareDate(new Date(2017, JAN, 1), new Date(2017, FEB, 1))).toBeLessThan(0);\r\n    expect(adapter.compareDate(new Date(2017, JAN, 1), new Date(2018, JAN, 1))).toBeLessThan(0);\r\n    expect(adapter.compareDate(new Date(2017, JAN, 1), new Date(2017, JAN, 1))).toBe(0);\r\n    expect(adapter.compareDate(new Date(2018, JAN, 1), new Date(2017, JAN, 1))).toBeGreaterThan(0);\r\n    expect(adapter.compareDate(new Date(2017, FEB, 1), new Date(2017, JAN, 1))).toBeGreaterThan(0);\r\n    expect(adapter.compareDate(new Date(2017, JAN, 2), new Date(2017, JAN, 1))).toBeGreaterThan(0);\r\n  });\r\n\r\n  it('should clamp date at lower bound', () => {\r\n    expect(adapter.clampDate(\r\n        new Date(2017, JAN, 1), new Date(2018, JAN, 1), new Date(2019, JAN, 1)))\r\n        .toEqual(new Date(2018, JAN, 1));\r\n  });\r\n\r\n  it('should clamp date at upper bound', () => {\r\n    expect(adapter.clampDate(\r\n        new Date(2020, JAN, 1), new Date(2018, JAN, 1), new Date(2019, JAN, 1)))\r\n        .toEqual(new Date(2019, JAN, 1));\r\n  });\r\n\r\n  it('should clamp date already within bounds', () => {\r\n    expect(adapter.clampDate(\r\n        new Date(2018, FEB, 1), new Date(2018, JAN, 1), new Date(2019, JAN, 1)))\r\n        .toEqual(new Date(2018, FEB, 1));\r\n  });\r\n\r\n  it('should use UTC for formatting by default', () => {\r\n    if (SUPPORTS_INTL) {\r\n      expect(adapter.format(new Date(1800, 7, 14), {day: 'numeric'})).toBe('14');\r\n    } else {\r\n      expect(adapter.format(new Date(1800, 7, 14), {day: 'numeric'})).toBe('Thu Aug 14 1800');\r\n    }\r\n  });\r\n\r\n  it('should count today as a valid date instance', () => {\r\n    let d = new Date();\r\n    expect(adapter.isValid(d)).toBe(true);\r\n    expect(adapter.isDateInstance(d)).toBe(true);\r\n  });\r\n\r\n  it('should count an invalid date as an invalid date instance', () => {\r\n    let d = new Date(NaN);\r\n    expect(adapter.isValid(d)).toBe(false);\r\n    expect(adapter.isDateInstance(d)).toBe(true);\r\n  });\r\n\r\n  it('should count a string as not a date instance', () => {\r\n    let d = '1/1/2017';\r\n    expect(adapter.isDateInstance(d)).toBe(false);\r\n  });\r\n\r\n  it('should create dates from valid ISO strings', () => {\r\n    assertValidDate(adapter.deserialize('1985-04-12T23:20:50.52Z'), true);\r\n    assertValidDate(adapter.deserialize('1996-12-19T16:39:57-08:00'), true);\r\n    assertValidDate(adapter.deserialize('1937-01-01T12:00:27.87+00:20'), true);\r\n    assertValidDate(adapter.deserialize('2017-01-01'), true);\r\n    assertValidDate(adapter.deserialize('2017-01-01T00:00:00'), true);\r\n    assertValidDate(adapter.deserialize('1990-13-31T23:59:00Z'), false);\r\n    assertValidDate(adapter.deserialize('1/1/2017'), false);\r\n    assertValidDate(adapter.deserialize('2017-01-01T'), false);\r\n    expect(adapter.deserialize('')).toBeNull();\r\n    expect(adapter.deserialize(null)).toBeNull();\r\n    assertValidDate(adapter.deserialize(new Date()), true);\r\n    assertValidDate(adapter.deserialize(new Date(NaN)), false);\r\n  });\r\n\r\n  it('should create an invalid date', () => {\r\n    assertValidDate(adapter.invalid(), false);\r\n  });\r\n\r\n  it('should not throw when attempting to format a date with a year less than 1', () => {\r\n    expect(() => adapter.format(new Date(-1, 1, 1), {})).not.toThrow();\r\n  });\r\n\r\n  it('should not throw when attempting to format a date with a year greater than 9999', () => {\r\n    expect(() => adapter.format(new Date(10000, 1, 1), {})).not.toThrow();\r\n  });\r\n});\r\n\r\n\r\ndescribe('NativeDateAdapter with MAT_DATE_LOCALE override', () => {\r\n  let adapter: NativeDateAdapter;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [NativeDateModule],\r\n      providers: [{provide: MAT_DATE_LOCALE, useValue: 'da-DK'}]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(inject([DateAdapter], (d: NativeDateAdapter) => {\r\n    adapter = d;\r\n  }));\r\n\r\n  it('should take the default locale id from the MAT_DATE_LOCALE injection token', () => {\r\n    const expectedValue = SUPPORTS_INTL ?\r\n        ['søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag'] :\r\n        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n    expect(adapter.getDayOfWeekNames('long')).toEqual(expectedValue);\r\n  });\r\n\r\n});\r\n\r\ndescribe('NativeDateAdapter with LOCALE_ID override', () => {\r\n  let adapter: NativeDateAdapter;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [NativeDateModule],\r\n      providers: [{provide: LOCALE_ID, useValue: 'da-DK'}]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(inject([DateAdapter], (d: NativeDateAdapter) => {\r\n    adapter = d;\r\n  }));\r\n\r\n  it('should cascade locale id from the LOCALE_ID injection token to MAT_DATE_LOCALE', () => {\r\n    const expectedValue = SUPPORTS_INTL ?\r\n        ['søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag'] :\r\n        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n    expect(adapter.getDayOfWeekNames('long')).toEqual(expectedValue);\r\n  });\r\n});\r\n"]}