{"version":3,"file":"gesture-config.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/gestures/gesture-config.spec.ts"],"names":[],"mappings":";;AAAA,iDAAqD;AACrD,sCAAwC;AACxC,8DAAgE;AAChE,mDAAmE;AAEnE,QAAQ,CAAC,eAAe,EAAE;IACxB,UAAU,CAAC,eAAK,CAAC;QACf,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,YAAY,EAAE,CAAC,yBAAyB,CAAC;YACzC,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,wCAAqB,EAAE,QAAQ,EAAE,8BAAa,EAAC,CAAC;SACvE,CAAC,CAAC,iBAAiB,EAAE,CAAC;KACxB,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,6BAA6B,EAAE;QAChC,KAAK,CAAC,MAAM,EAAE,QAAe,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;QAEjD,IAAM,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC;QACnE,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC;KAC7C,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE;QAC/C,iBAAO;aACJ,kBAAkB,EAAE;aACpB,sBAAsB,CAAC;YACtB,YAAY,EAAE,CAAC,yBAAyB,CAAC;YACzC,SAAS,EAAE;gBACT,EAAC,OAAO,EAAE,wCAAqB,EAAE,QAAQ,EAAE,8BAAa,EAAC;gBACzD,EAAC,OAAO,EAAE,mCAAkB,EAAE,QAAQ,EAAE,EAAC,QAAQ,EAAE,EAAC,WAAW,EAAE,MAAM,EAAC,EAAC,EAAC;aAC3E;SACF,CAAC;aACD,iBAAiB,EAAE,CAAC;QAEvB,KAAK,CAAC,MAAM,EAAE,QAAe,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;QAEjD,IAAM,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC;QACnE,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,IAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC1E,IAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;QAE1D,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACtC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC5D,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;;QAExD,IAAM,YAAY,GAAI,MAAc,CAAC,MAAM,CAAC;QAC3C,MAAc,CAAC,MAAM,GAAG,SAAS,CAAC;;QAGnC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAEvB,iBAAO;aACJ,kBAAkB,EAAE;aACpB,sBAAsB,CAAC;YACtB,YAAY,EAAE,CAAC,yBAAyB,CAAC;YACzC,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,wCAAqB,EAAE,QAAQ,EAAE,8BAAa,EAAC,CAAC;SACvE,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAEzB,IAAM,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC;QACnE,OAAO,CAAC,aAAa,EAAE,CAAC;;;QAKxB,AAHA,iEAAiE;QAEjE,6BAA6B;QAC5B,MAAc,CAAC,MAAM,GAAG,YAAY,CAAC;KACvC,CAAC,CAAC;;CAIJ,CAAC,CAAC;;;;IAOD,wCAAI,GAAJ,eAAS;;gBAJV,gBAAS,SAAC;oBACT,QAAQ,EAAE,uDAAqD;iBAChE;;oCA7ED","sourcesContent":["import {TestBed, async} from '@angular/core/testing';\r\nimport {Component} from '@angular/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {GestureConfig, MAT_HAMMER_OPTIONS} from './gesture-config';\r\n\r\ndescribe('GestureConfig', () => {\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [ButtonWithLongpressHander],\r\n      providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  it('should instantiate HammerJS', () => {\r\n    spyOn(window, 'Hammer' as any).and.callThrough();\r\n\r\n    const fixture = TestBed.createComponent(ButtonWithLongpressHander);\r\n    fixture.detectChanges();\r\n\r\n    expect(window['Hammer']).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should be able to pass options to HammerJS', () => {\r\n    TestBed\r\n      .resetTestingModule()\r\n      .configureTestingModule({\r\n        declarations: [ButtonWithLongpressHander],\r\n        providers: [\r\n          {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\r\n          {provide: MAT_HAMMER_OPTIONS, useValue: {cssProps: {touchAction: 'auto'}}}\r\n        ]\r\n      })\r\n      .compileComponents();\r\n\r\n    spyOn(window, 'Hammer' as any).and.callThrough();\r\n\r\n    const fixture = TestBed.createComponent(ButtonWithLongpressHander);\r\n    fixture.detectChanges();\r\n\r\n    const button = fixture.debugElement.nativeElement.querySelector('button');\r\n    const firstCallArgs = window['Hammer'].calls.first().args;\r\n\r\n    expect(firstCallArgs[0]).toBe(button);\r\n    expect(firstCallArgs[1].cssProps.touchAction).toBe('auto');\r\n  });\r\n\r\n  it('should should not error when HammerJS is not loaded', () => {\r\n    // Remove the Hammer global from the environment, storing it to restore at the end of the test.\r\n    const hammerGlobal = (window as any).Hammer;\r\n    (window as any).Hammer = undefined;\r\n\r\n    // Stub out `console.warn` so the warnings don't pollute our logs.\r\n    spyOn(console, 'warn');\r\n\r\n    TestBed\r\n      .resetTestingModule()\r\n      .configureTestingModule({\r\n        declarations: [ButtonWithLongpressHander],\r\n        providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}],\r\n      }).compileComponents();\r\n\r\n    const fixture = TestBed.createComponent(ButtonWithLongpressHander);\r\n    fixture.detectChanges();\r\n\r\n    // No assertions here; the absense of errors satisfies this test.\r\n\r\n    // Restore the global Hammer.\r\n    (window as any).Hammer = hammerGlobal;\r\n  });\r\n\r\n  // TODO(jelbourn): add a test for use of HAMMER_LOADER when we can depend on Angular 6.1+.\r\n\r\n});\r\n\r\n\r\n@Component({\r\n  template: `<button (longpress)=\"noop()\">Long press me</button>`\r\n})\r\nclass ButtonWithLongpressHander {\r\n  noop() {}\r\n}\r\n"]}