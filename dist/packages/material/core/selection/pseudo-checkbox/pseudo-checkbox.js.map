{"version":3,"file":"pseudo-checkbox.js","sourceRoot":"","sources":["../../../../../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts"],"names":[],"mappings":";;;;;;;;;AAQA,sCAOuB;AACvB,mEAA2E;;;;;;;;;;;;;;;IA2CzE,2BAA8D;QAAA,mBAAc,GAAd,cAAc;;qBALnC,WAAW;;wBAGvB,KAAK;KAEwD;;gBAtB3F,gBAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,aAAa,EAAE,wBAAiB,CAAC,IAAI;oBACrC,eAAe,EAAE,8BAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,qBAAqB;oBAC/B,SAAS,EAAE,CAAC,qBAAqB,CAAC;oBAClC,QAAQ,EAAE,EAAE;oBACZ,IAAI,EAAE;wBACJ,OAAO,EAAE,qBAAqB;wBAC9B,2CAA2C,EAAE,2BAA2B;wBACxE,qCAAqC,EAAE,qBAAqB;wBAC5D,sCAAsC,EAAE,UAAU;wBAClD,iCAAiC,EAAE,qCAAqC;qBACzE;iBACF;;;;gDAQc,eAAQ,YAAI,aAAM,SAAC,kCAAqB;;;0BALpD,YAAK;6BAGL,YAAK;;4BAzDR;;AAoDa,8CAAiB","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Inject,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n/**\r\n * Possible states for a pseudo checkbox.\r\n * @docs-private\r\n */\r\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\r\n\r\n/**\r\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\r\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\r\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\r\n * Note that theming is meant to be handled by the parent element, e.g.\r\n * `mat-primary .mat-pseudo-checkbox`.\r\n *\r\n * Note that this component will be completely invisible to screen-reader users. This is *not*\r\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\r\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\r\n * of more complex components that appropriately handle selected / checked state.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'mat-pseudo-checkbox',\r\n  styleUrls: ['pseudo-checkbox.css'],\r\n  template: '',\r\n  host: {\r\n    'class': 'mat-pseudo-checkbox',\r\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\r\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\r\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n})\r\nexport class MatPseudoCheckbox {\r\n  /** Display state of the checkbox. */\r\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\r\n\r\n  /** Whether the checkbox is disabled. */\r\n  @Input() disabled: boolean = false;\r\n\r\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\r\n}\r\n"]}