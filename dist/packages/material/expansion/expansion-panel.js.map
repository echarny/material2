{"version":3,"file":"expansion-panel.js","sourceRoot":"","sources":["../../../../src/lib/expansion/expansion-panel.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {filter, startWith, take} from 'rxjs/operators';\r\nimport {MatAccordion} from './accordion';\r\nimport {matExpansionAnimations} from './expansion-animations';\r\nimport {MatExpansionPanelContent} from './expansion-panel-content';\r\n\r\n\r\n/** MatExpansionPanel's states. */\r\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\r\n\r\n/** Counter for generating unique element ids. */\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * `<mat-expansion-panel>`\r\n *\r\n * This component can be used as a single element to show expandable content, or as one of\r\n * multiple children of an element with the MatAccordion directive attached.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  styleUrls: ['./expansion-panel.css'],\r\n  selector: 'mat-expansion-panel',\r\n  exportAs: 'matExpansionPanel',\r\n  templateUrl: './expansion-panel.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled', 'expanded'],\r\n  outputs: ['opened', 'closed', 'expandedChange'],\r\n  animations: [matExpansionAnimations.bodyExpansion],\r\n  providers: [\r\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\r\n    // to the same accordion.\r\n    {provide: MatAccordion, useValue: undefined},\r\n  ],\r\n  host: {\r\n    'class': 'mat-expansion-panel',\r\n    '[class.mat-expanded]': 'expanded',\r\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\r\n  }\r\n})\r\nexport class MatExpansionPanel extends CdkAccordionItem\r\n  implements AfterContentInit, OnChanges, OnDestroy {\r\n  /** Whether the toggle indicator should be hidden. */\r\n  @Input()\r\n  get hideToggle(): boolean { return this._hideToggle; }\r\n  set hideToggle(value: boolean) {\r\n    this._hideToggle = coerceBooleanProperty(value);\r\n  }\r\n  private _hideToggle = false;\r\n\r\n  /** An event emitted after the body's expansion animation happens. */\r\n  @Output() afterExpand = new EventEmitter<void>();\r\n\r\n  /** An event emitted after the body's collapse animation happens. */\r\n  @Output() afterCollapse = new EventEmitter<void>();\r\n\r\n  /** Stream that emits for changes in `@Input` properties. */\r\n  readonly _inputChanges = new Subject<SimpleChanges>();\r\n\r\n  /** Optionally defined accordion the expansion panel belongs to. */\r\n  accordion: MatAccordion;\r\n\r\n  /** Content that will be rendered lazily. */\r\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\r\n\r\n  /** Portal holding the user's content. */\r\n  _portal: TemplatePortal;\r\n\r\n  /** ID for the associated header element. Used for a11y labelling. */\r\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\r\n\r\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\r\n              private _viewContainerRef: ViewContainerRef) {\r\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\r\n    this.accordion = accordion;\r\n  }\r\n\r\n  /** Whether the expansion indicator should be hidden. */\r\n  _getHideToggle(): boolean {\r\n    if (this.accordion) {\r\n      return this.accordion.hideToggle;\r\n    }\r\n    return this.hideToggle;\r\n  }\r\n\r\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\r\n  _hasSpacing(): boolean {\r\n    if (this.accordion) {\r\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Gets the expanded state string. */\r\n  _getExpandedState(): MatExpansionPanelState {\r\n    return this.expanded ? 'expanded' : 'collapsed';\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this._lazyContent) {\r\n      // Render the content as soon as the panel becomes open.\r\n      this.opened.pipe(\r\n        startWith(null!),\r\n        filter(() => this.expanded && !this._portal),\r\n        take(1)\r\n      ).subscribe(() => {\r\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this._inputChanges.next(changes);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n    this._inputChanges.complete();\r\n  }\r\n\r\n  _bodyAnimation(event: AnimationEvent) {\r\n    const classList = event.element.classList;\r\n    const cssClass = 'mat-expanded';\r\n    const {phaseName, toState, fromState} = event;\r\n\r\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\r\n    // order to prevent the cases where switching too early would cause the animation to jump.\r\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\r\n    // with doing it via change detection.\r\n    if (phaseName === 'done' && toState === 'expanded') {\r\n      classList.add(cssClass);\r\n    }\r\n    if (phaseName === 'start' && toState === 'collapsed') {\r\n      classList.remove(cssClass);\r\n    }\r\n\r\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\r\n      this.afterExpand.emit();\r\n    }\r\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\r\n      this.afterCollapse.emit();\r\n    }\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: 'mat-action-row',\r\n  host: {\r\n    class: 'mat-action-row'\r\n  }\r\n})\r\nexport class MatExpansionPanelActionRow {}\r\n"]}