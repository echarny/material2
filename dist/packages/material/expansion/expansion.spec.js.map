{"version":3,"file":"expansion.spec.js","sourceRoot":"","sources":["../../../../src/lib/expansion/expansion.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {async, TestBed, fakeAsync, tick, ComponentFixture, flush} from '@angular/core/testing';\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatExpansionModule, MatExpansionPanel} from './index';\r\nimport {SPACE, ENTER} from '@angular/cdk/keycodes';\r\nimport {dispatchKeyboardEvent} from '@angular/cdk/testing';\r\n\r\n\r\ndescribe('MatExpansionPanel', () => {\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        MatExpansionModule,\r\n        NoopAnimationsModule,\r\n      ],\r\n      declarations: [\r\n        PanelWithContent,\r\n        PanelWithContentInNgIf,\r\n        PanelWithCustomMargin,\r\n        LazyPanelWithContent,\r\n        LazyPanelOpenOnLoad,\r\n        PanelWithTwoWayBinding,\r\n      ],\r\n    });\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  it('should expand and collapse the panel', fakeAsync(() => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    const contentEl = fixture.nativeElement.querySelector('.mat-expansion-panel-content');\r\n    const headerEl = fixture.nativeElement.querySelector('.mat-expansion-panel-header');\r\n    fixture.detectChanges();\r\n\r\n    expect(headerEl.classList).not.toContain('mat-expanded');\r\n    expect(contentEl.classList).not.toContain('mat-expanded');\r\n\r\n    fixture.componentInstance.expanded = true;\r\n    fixture.detectChanges();\r\n    flush();\r\n\r\n    expect(headerEl.classList).toContain('mat-expanded');\r\n    expect(contentEl.classList).toContain('mat-expanded');\r\n  }));\r\n\r\n  it('should be able to render panel content lazily', fakeAsync(() => {\r\n    const fixture = TestBed.createComponent(LazyPanelWithContent);\r\n    const content = fixture.debugElement.query(\r\n      By.css('.mat-expansion-panel-content')).nativeElement;\r\n    fixture.detectChanges();\r\n\r\n    expect(content.textContent.trim()).toBe('', 'Expected content element to be empty.');\r\n\r\n    fixture.componentInstance.expanded = true;\r\n    fixture.detectChanges();\r\n\r\n    expect(content.textContent.trim())\r\n        .toContain('Some content', 'Expected content to be rendered.');\r\n  }));\r\n\r\n  it('should render the content for a lazy-loaded panel that is opened on init', fakeAsync(() => {\r\n    const fixture = TestBed.createComponent(LazyPanelOpenOnLoad);\r\n    const content = fixture.debugElement.query(\r\n      By.css('.mat-expansion-panel-content')).nativeElement;\r\n    fixture.detectChanges();\r\n\r\n    expect(content.textContent.trim())\r\n        .toContain('Some content', 'Expected content to be rendered.');\r\n  }));\r\n\r\n  it('emit correct events for change in panel expanded state', () => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    fixture.componentInstance.expanded = true;\r\n    fixture.detectChanges();\r\n    expect(fixture.componentInstance.openCallback).toHaveBeenCalled();\r\n\r\n    fixture.componentInstance.expanded = false;\r\n    fixture.detectChanges();\r\n    expect(fixture.componentInstance.closeCallback).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should create a unique panel id for each panel', () => {\r\n    const fixtureOne = TestBed.createComponent(PanelWithContent);\r\n    const headerElOne = fixtureOne.nativeElement.querySelector('.mat-expansion-panel-header');\r\n    const fixtureTwo = TestBed.createComponent(PanelWithContent);\r\n    const headerElTwo = fixtureTwo.nativeElement.querySelector('.mat-expansion-panel-header');\r\n    fixtureOne.detectChanges();\r\n    fixtureTwo.detectChanges();\r\n\r\n    const panelIdOne = headerElOne.getAttribute('aria-controls');\r\n    const panelIdTwo = headerElTwo.getAttribute('aria-controls');\r\n    expect(panelIdOne).not.toBe(panelIdTwo);\r\n  });\r\n\r\n  it('should set `aria-labelledby` of the content to the header id', () => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    const headerEl = fixture.nativeElement.querySelector('.mat-expansion-panel-header');\r\n    const contentEl = fixture.nativeElement.querySelector('.mat-expansion-panel-content');\r\n\r\n    fixture.detectChanges();\r\n\r\n    const headerId = headerEl.getAttribute('id');\r\n    const contentLabel = contentEl.getAttribute('aria-labelledby');\r\n\r\n    expect(headerId).toBeTruthy();\r\n    expect(contentLabel).toBeTruthy();\r\n    expect(headerId).toBe(contentLabel);\r\n  });\r\n\r\n  it('should set the proper role on the content element', () => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    const contentEl = fixture.nativeElement.querySelector('.mat-expansion-panel-content');\r\n\r\n    expect(contentEl.getAttribute('role')).toBe('region');\r\n  });\r\n\r\n  it('should toggle the panel when pressing SPACE on the header', () => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    const headerEl = fixture.nativeElement.querySelector('.mat-expansion-panel-header');\r\n\r\n    spyOn(fixture.componentInstance.panel, 'toggle');\r\n\r\n    const event = dispatchKeyboardEvent(headerEl, 'keydown', SPACE);\r\n\r\n    fixture.detectChanges();\r\n\r\n    expect(fixture.componentInstance.panel.toggle).toHaveBeenCalled();\r\n    expect(event.defaultPrevented).toBe(true);\r\n  });\r\n\r\n  it('should toggle the panel when pressing ENTER on the header', () => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    const headerEl = fixture.nativeElement.querySelector('.mat-expansion-panel-header');\r\n\r\n    spyOn(fixture.componentInstance.panel, 'toggle');\r\n\r\n    const event = dispatchKeyboardEvent(headerEl, 'keydown', ENTER);\r\n\r\n    fixture.detectChanges();\r\n\r\n    expect(fixture.componentInstance.panel.toggle).toHaveBeenCalled();\r\n    expect(event.defaultPrevented).toBe(true);\r\n  });\r\n\r\n  it('should not be able to focus content while closed', fakeAsync(() => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    fixture.componentInstance.expanded = true;\r\n    fixture.detectChanges();\r\n    tick(250);\r\n\r\n    const button = fixture.debugElement.query(By.css('button')).nativeElement;\r\n\r\n    button.focus();\r\n    expect(document.activeElement).toBe(button, 'Expected button to start off focusable.');\r\n\r\n    button.blur();\r\n    fixture.componentInstance.expanded = false;\r\n    fixture.detectChanges();\r\n    tick(250);\r\n\r\n    button.focus();\r\n    expect(document.activeElement).not.toBe(button, 'Expected button to no longer be focusable.');\r\n  }));\r\n\r\n  it('should not override the panel margin if it is not inside an accordion', fakeAsync(() => {\r\n    const fixture = TestBed.createComponent(PanelWithCustomMargin);\r\n    fixture.detectChanges();\r\n\r\n    const panel = fixture.debugElement.query(By.css('mat-expansion-panel'));\r\n    let styles = getComputedStyle(panel.nativeElement);\r\n\r\n    expect(panel.componentInstance._hasSpacing()).toBe(false);\r\n    expect(styles.marginTop).toBe('13px');\r\n    expect(styles.marginBottom).toBe('13px');\r\n    expect(styles.marginLeft).toBe('37px');\r\n    expect(styles.marginRight).toBe('37px');\r\n\r\n    fixture.componentInstance.expanded = true;\r\n    fixture.detectChanges();\r\n    tick(250);\r\n\r\n    styles = getComputedStyle(panel.nativeElement);\r\n\r\n    expect(panel.componentInstance._hasSpacing()).toBe(false);\r\n    expect(styles.marginTop).toBe('13px');\r\n    expect(styles.marginBottom).toBe('13px');\r\n    expect(styles.marginLeft).toBe('37px');\r\n    expect(styles.marginRight).toBe('37px');\r\n  }));\r\n\r\n  it('should be able to hide the toggle', () => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    const header = fixture.debugElement.query(By.css('.mat-expansion-panel-header')).nativeElement;\r\n\r\n    fixture.detectChanges();\r\n\r\n    expect(header.querySelector('.mat-expansion-indicator'))\r\n        .toBeTruthy('Expected indicator to be shown.');\r\n\r\n    fixture.componentInstance.hideToggle = true;\r\n    fixture.detectChanges();\r\n\r\n    expect(header.querySelector('.mat-expansion-indicator'))\r\n        .toBeFalsy('Expected indicator to be hidden.');\r\n  });\r\n\r\n  it('should update the indicator rotation when the expanded state is toggled programmatically',\r\n    fakeAsync(() => {\r\n      const fixture = TestBed.createComponent(PanelWithContent);\r\n\r\n      fixture.detectChanges();\r\n      tick(250);\r\n\r\n      const arrow = fixture.debugElement.query(By.css('.mat-expansion-indicator')).nativeElement;\r\n\r\n      expect(arrow.style.transform).toBe('rotate(0deg)', 'Expected no rotation.');\r\n\r\n      fixture.componentInstance.expanded = true;\r\n      fixture.detectChanges();\r\n      tick(250);\r\n\r\n      expect(arrow.style.transform).toBe('rotate(180deg)', 'Expected 180 degree rotation.');\r\n    }));\r\n\r\n  it('should make sure accordion item runs ngOnDestroy when expansion panel is destroyed', () => {\r\n    const fixture = TestBed.createComponent(PanelWithContentInNgIf);\r\n    fixture.detectChanges();\r\n    let destroyedOk = false;\r\n    fixture.componentInstance.panel.destroyed.subscribe(() => destroyedOk = true);\r\n    fixture.componentInstance.expansionShown = false;\r\n    fixture.detectChanges();\r\n    expect(destroyedOk).toBe(true);\r\n  });\r\n\r\n  it('should support two-way binding of the `expanded` property', () => {\r\n    const fixture = TestBed.createComponent(PanelWithTwoWayBinding);\r\n    const header = fixture.debugElement.query(By.css('mat-expansion-panel-header')).nativeElement;\r\n\r\n    fixture.detectChanges();\r\n    expect(fixture.componentInstance.expanded).toBe(false);\r\n\r\n    header.click();\r\n    fixture.detectChanges();\r\n    expect(fixture.componentInstance.expanded).toBe(true);\r\n\r\n    header.click();\r\n    fixture.detectChanges();\r\n    expect(fixture.componentInstance.expanded).toBe(false);\r\n  });\r\n\r\n  it('should not set the mat-expanded class until the open animation is done', fakeAsync(() => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    const contentEl = fixture.nativeElement.querySelector('.mat-expansion-panel-content');\r\n\r\n    fixture.detectChanges();\r\n    expect(contentEl.classList).not.toContain('mat-expanded',\r\n        'Expected class not to be there on init');\r\n\r\n    fixture.componentInstance.expanded = true;\r\n    fixture.detectChanges();\r\n    expect(contentEl.classList).not.toContain('mat-expanded',\r\n        'Expected class not to be added immediately after becoming expanded');\r\n\r\n    flush();\r\n    expect(contentEl.classList).toContain('mat-expanded',\r\n        'Expected class to be added after the animation has finished');\r\n  }));\r\n\r\n  it('should emit events for body expanding and collapsing animations', fakeAsync(() => {\r\n    const fixture = TestBed.createComponent(PanelWithContent);\r\n    fixture.detectChanges();\r\n    let afterExpand = 0;\r\n    let afterCollapse = 0;\r\n    fixture.componentInstance.panel.afterExpand.subscribe(() => afterExpand++);\r\n    fixture.componentInstance.panel.afterCollapse.subscribe(() => afterCollapse++);\r\n\r\n    fixture.componentInstance.expanded = true;\r\n    fixture.detectChanges();\r\n    flush();\r\n    expect(afterExpand).toBe(1);\r\n    expect(afterCollapse).toBe(0);\r\n\r\n    fixture.componentInstance.expanded = false;\r\n    fixture.detectChanges();\r\n    flush();\r\n    expect(afterExpand).toBe(1);\r\n    expect(afterCollapse).toBe(1);\r\n  }));\r\n\r\n  describe('disabled state', () => {\r\n    let fixture: ComponentFixture<PanelWithContent>;\r\n    let panel: HTMLElement;\r\n    let header: HTMLElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(PanelWithContent);\r\n      fixture.detectChanges();\r\n      panel = fixture.debugElement.query(By.css('mat-expansion-panel')).nativeElement;\r\n      header = fixture.debugElement.query(By.css('mat-expansion-panel-header')).nativeElement;\r\n    });\r\n\r\n    it('should toggle the aria-disabled attribute on the header', () => {\r\n      expect(header.getAttribute('aria-disabled')).toBe('false');\r\n\r\n      fixture.componentInstance.disabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(header.getAttribute('aria-disabled')).toBe('true');\r\n    });\r\n\r\n    it('should toggle the expansion indicator', () => {\r\n      expect(panel.querySelector('.mat-expansion-indicator')).toBeTruthy();\r\n\r\n      fixture.componentInstance.disabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(panel.querySelector('.mat-expansion-indicator')).toBeFalsy();\r\n    });\r\n\r\n    it('should not be able to toggle the panel via a user action if disabled', () => {\r\n      expect(fixture.componentInstance.panel.expanded).toBe(false);\r\n      expect(header.classList).not.toContain('mat-expanded');\r\n\r\n      fixture.componentInstance.disabled = true;\r\n      fixture.detectChanges();\r\n\r\n      header.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.panel.expanded).toBe(false);\r\n      expect(header.classList).not.toContain('mat-expanded');\r\n    });\r\n\r\n    it('should be able to toggle a disabled expansion panel programmatically', () => {\r\n      expect(fixture.componentInstance.panel.expanded).toBe(false);\r\n      expect(header.classList).not.toContain('mat-expanded');\r\n\r\n      fixture.componentInstance.disabled = true;\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.expanded = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.panel.expanded).toBe(true);\r\n      expect(header.classList).toContain('mat-expanded');\r\n    });\r\n\r\n  });\r\n});\r\n\r\n\r\n@Component({\r\n  template: `\r\n  <mat-expansion-panel [expanded]=\"expanded\"\r\n                      [hideToggle]=\"hideToggle\"\r\n                      [disabled]=\"disabled\"\r\n                      (opened)=\"openCallback()\"\r\n                      (closed)=\"closeCallback()\">\r\n    <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\r\n    <p>Some content</p>\r\n    <button>I am a button</button>\r\n  </mat-expansion-panel>`\r\n})\r\nclass PanelWithContent {\r\n  expanded = false;\r\n  hideToggle = false;\r\n  disabled = false;\r\n  openCallback = jasmine.createSpy('openCallback');\r\n  closeCallback = jasmine.createSpy('closeCallback');\r\n  @ViewChild(MatExpansionPanel) panel: MatExpansionPanel;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n  <div *ngIf=\"expansionShown\">\r\n    <mat-expansion-panel>\r\n      <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\r\n    </mat-expansion-panel>\r\n  </div>`\r\n})\r\nclass PanelWithContentInNgIf {\r\n  expansionShown = true;\r\n  @ViewChild(MatExpansionPanel) panel: MatExpansionPanel;\r\n}\r\n\r\n@Component({\r\n  styles: [\r\n    `mat-expansion-panel {\r\n      margin: 13px 37px;\r\n    }`\r\n  ],\r\n  template: `\r\n  <mat-expansion-panel [expanded]=\"expanded\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores officia, aliquam dicta\r\n    corrupti maxime voluptate accusamus impedit atque incidunt pariatur.\r\n  </mat-expansion-panel>`\r\n})\r\nclass PanelWithCustomMargin {\r\n  expanded = false;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n  <mat-expansion-panel [expanded]=\"expanded\">\r\n    <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\r\n\r\n    <ng-template matExpansionPanelContent>\r\n      <p>Some content</p>\r\n      <button>I am a button</button>\r\n    </ng-template>\r\n  </mat-expansion-panel>`\r\n})\r\nclass LazyPanelWithContent {\r\n  expanded = false;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n  <mat-expansion-panel [expanded]=\"true\">\r\n    <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\r\n\r\n    <ng-template matExpansionPanelContent>\r\n      <p>Some content</p>\r\n    </ng-template>\r\n  </mat-expansion-panel>`\r\n})\r\nclass LazyPanelOpenOnLoad {}\r\n\r\n\r\n@Component({\r\n  template: `\r\n  <mat-expansion-panel [(expanded)]=\"expanded\">\r\n    <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\r\n  </mat-expansion-panel>`\r\n})\r\nclass PanelWithTwoWayBinding {\r\n  expanded = false;\r\n}\r\n"]}