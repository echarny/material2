{"version":3,"file":"accordion.spec.js","sourceRoot":"","sources":["../../../../src/lib/expansion/accordion.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {async, TestBed} from '@angular/core/testing';\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatExpansionModule, MatAccordion, MatExpansionPanel} from './index';\r\n\r\n\r\ndescribe('MatAccordion', () => {\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        BrowserAnimationsModule,\r\n        MatExpansionModule\r\n      ],\r\n      declarations: [\r\n        NestedPanel,\r\n        SetOfItems,\r\n      ],\r\n    });\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  it('should ensure only one item is expanded at a time', () => {\r\n    const fixture = TestBed.createComponent(SetOfItems);\r\n    const items = fixture.debugElement.queryAll(By.css('.mat-expansion-panel'));\r\n\r\n    fixture.componentInstance.firstPanelExpanded = true;\r\n    fixture.detectChanges();\r\n    expect(items[0].classes['mat-expanded']).toBeTruthy();\r\n    expect(items[1].classes['mat-expanded']).toBeFalsy();\r\n\r\n    fixture.componentInstance.secondPanelExpanded = true;\r\n    fixture.detectChanges();\r\n    expect(items[0].classes['mat-expanded']).toBeFalsy();\r\n    expect(items[1].classes['mat-expanded']).toBeTruthy();\r\n  });\r\n\r\n  it('should allow multiple items to be expanded simultaneously', () => {\r\n    const fixture = TestBed.createComponent(SetOfItems);\r\n    const panels = fixture.debugElement.queryAll(By.css('.mat-expansion-panel'));\r\n\r\n    fixture.componentInstance.multi = true;\r\n    fixture.componentInstance.firstPanelExpanded = true;\r\n    fixture.componentInstance.secondPanelExpanded = true;\r\n    fixture.detectChanges();\r\n    expect(panels[0].classes['mat-expanded']).toBeTruthy();\r\n    expect(panels[1].classes['mat-expanded']).toBeTruthy();\r\n  });\r\n\r\n  it('should expand or collapse all enabled items', () => {\r\n    const fixture = TestBed.createComponent(SetOfItems);\r\n    const panels = fixture.debugElement.queryAll(By.css('.mat-expansion-panel'));\r\n\r\n    fixture.componentInstance.multi = true;\r\n    fixture.componentInstance.secondPanelExpanded = true;\r\n    fixture.detectChanges();\r\n    expect(panels[0].classes['mat-expanded']).toBeFalsy();\r\n    expect(panels[1].classes['mat-expanded']).toBeTruthy();\r\n\r\n    fixture.componentInstance.accordion.openAll();\r\n    fixture.detectChanges();\r\n    expect(panels[0].classes['mat-expanded']).toBeTruthy();\r\n    expect(panels[1].classes['mat-expanded']).toBeTruthy();\r\n\r\n    fixture.componentInstance.accordion.closeAll();\r\n    fixture.detectChanges();\r\n    expect(panels[0].classes['mat-expanded']).toBeFalsy();\r\n    expect(panels[1].classes['mat-expanded']).toBeFalsy();\r\n  });\r\n\r\n  it('should not expand or collapse disabled items', () => {\r\n    const fixture = TestBed.createComponent(SetOfItems);\r\n    const panels = fixture.debugElement.queryAll(By.css('.mat-expansion-panel'));\r\n\r\n    fixture.componentInstance.multi = true;\r\n    fixture.componentInstance.secondPanelDisabled = true;\r\n    fixture.detectChanges();\r\n    fixture.componentInstance.accordion.openAll();\r\n    fixture.detectChanges();\r\n    expect(panels[0].classes['mat-expanded']).toBeTruthy();\r\n    expect(panels[1].classes['mat-expanded']).toBeFalsy();\r\n\r\n    fixture.componentInstance.accordion.closeAll();\r\n    fixture.detectChanges();\r\n    expect(panels[0].classes['mat-expanded']).toBeFalsy();\r\n    expect(panels[1].classes['mat-expanded']).toBeFalsy();\r\n  });\r\n\r\n  it('should not register nested panels to the same accordion', () => {\r\n    const fixture = TestBed.createComponent(NestedPanel);\r\n    const innerPanel = fixture.componentInstance.innerPanel;\r\n    const outerPanel = fixture.componentInstance.outerPanel;\r\n\r\n    expect(innerPanel.accordion).not.toBe(outerPanel.accordion);\r\n  });\r\n});\r\n\r\n\r\n@Component({template: `\r\n  <mat-accordion [multi]=\"multi\">\r\n    <mat-expansion-panel [expanded]=\"firstPanelExpanded\">\r\n      <mat-expansion-panel-header>Summary</mat-expansion-panel-header>\r\n      <p>Content</p>\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel [expanded]=\"secondPanelExpanded\" [disabled]=\"secondPanelDisabled\">\r\n      <mat-expansion-panel-header>Summary</mat-expansion-panel-header>\r\n      <p>Content</p>\r\n    </mat-expansion-panel>\r\n  </mat-accordion>`})\r\nclass SetOfItems {\r\n  @ViewChild(MatAccordion) accordion: MatAccordion;\r\n\r\n  multi: boolean = false;\r\n  firstPanelExpanded: boolean = false;\r\n  secondPanelExpanded: boolean = false;\r\n  secondPanelDisabled: boolean = false;\r\n}\r\n\r\n@Component({template: `\r\n  <mat-accordion>\r\n    <mat-expansion-panel #outerPanel=\"matExpansionPanel\">\r\n      <mat-expansion-panel-header>Outer Panel</mat-expansion-panel-header>\r\n      <mat-expansion-panel #innerPanel=\"matExpansionPanel\">\r\n        <mat-expansion-panel-header>Inner Panel</mat-expansion-panel-header>\r\n        <p>Content</p>\r\n      </mat-expansion-panel>\r\n    </mat-expansion-panel>\r\n  </mat-accordion>`})\r\nclass NestedPanel {\r\n  @ViewChild('outerPanel') outerPanel: MatExpansionPanel;\r\n  @ViewChild('innerPanel') innerPanel: MatExpansionPanel;\r\n}\r\n"]}