{"version":3,"file":"divider.spec.js","sourceRoot":"","sources":["../../../../src/lib/divider/divider.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {fakeAsync, ComponentFixture, TestBed} from '@angular/core/testing';\r\nimport {Component} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MatDividerModule} from './divider-module';\r\n\r\n\r\ndescribe('MatDivider', () => {\r\n\r\n  let fixture: ComponentFixture<MatDividerTestComponent>;\r\n\r\n  beforeEach(fakeAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatDividerModule],\r\n      declarations: [MatDividerTestComponent],\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n    fixture = TestBed.createComponent(MatDividerTestComponent);\r\n  }));\r\n\r\n  it('should apply vertical class to vertical divider', () => {\r\n    fixture.componentInstance.vertical = true;\r\n    fixture.detectChanges();\r\n\r\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\r\n    expect(divider.nativeElement.classList).toContain('mat-divider');\r\n    expect(divider.nativeElement.classList).toContain('mat-divider-vertical');\r\n  });\r\n\r\n  it('should apply horizontal class to horizontal divider', () => {\r\n    fixture.componentInstance.vertical = false;\r\n    fixture.detectChanges();\r\n\r\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\r\n    expect(divider.nativeElement.classList).toContain('mat-divider');\r\n    expect(divider.nativeElement.classList).not.toContain('mat-divider-vertical');\r\n    expect(divider.nativeElement.classList).toContain('mat-divider-horizontal');\r\n  });\r\n\r\n  it('should apply inset class to inset divider', () => {\r\n    fixture.componentInstance.inset = true;\r\n    fixture.detectChanges();\r\n\r\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\r\n    expect(divider.nativeElement.classList).toContain('mat-divider');\r\n    expect(divider.nativeElement.classList).toContain('mat-divider-inset');\r\n  });\r\n\r\n  it('should apply inset and vertical classes to vertical inset divider', () => {\r\n    fixture.componentInstance.vertical = true;\r\n    fixture.componentInstance.inset = true;\r\n    fixture.detectChanges();\r\n\r\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\r\n    expect(divider.nativeElement.classList).toContain('mat-divider');\r\n    expect(divider.nativeElement.classList).toContain('mat-divider-inset');\r\n    expect(divider.nativeElement.classList).toContain('mat-divider-vertical');\r\n  });\r\n\r\n  it('should add aria roles properly', () => {\r\n    fixture.detectChanges();\r\n\r\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\r\n    expect(divider.nativeElement.getAttribute('role')).toBe('separator');\r\n  });\r\n});\r\n\r\n@Component({\r\n  template: `<mat-divider [vertical]=\"vertical\" [inset]=\"inset\"></mat-divider>`\r\n})\r\nclass MatDividerTestComponent {\r\n  vertical: boolean;\r\n  inset: boolean;\r\n}\r\n"]}