{"version":3,"file":"table-data-source.js","sourceRoot":"","sources":["../../../../src/lib/table/table-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {_isNumberValue} from '@angular/cdk/coercion';\r\nimport {DataSource} from '@angular/cdk/table';\r\nimport {\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  merge,\r\n  Observable,\r\n  of as observableOf,\r\n  Subscription\r\n} from 'rxjs';\r\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\r\nimport {MatSort, Sort} from '@angular/material/sort';\r\nimport {map} from 'rxjs/operators';\r\n\r\n/**\r\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\r\n * flaky browser support and the value not being defined in Closure's typings.\r\n */\r\nconst MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/**\r\n * Data source that accepts a client-side data array and includes native support of filtering,\r\n * sorting (using MatSort), and pagination (using MatPaginator).\r\n *\r\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\r\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\r\n * which defines how row data is converted to a string for filter matching.\r\n */\r\nexport class MatTableDataSource<T> extends DataSource<T> {\r\n  /** Stream that emits when a new data array is set on the data source. */\r\n  private readonly _data: BehaviorSubject<T[]>;\r\n\r\n  /** Stream emitting render data to the table (depends on ordered data changes). */\r\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\r\n\r\n  /** Stream that emits when a new filter string is set on the data source. */\r\n  private readonly _filter = new BehaviorSubject<string>('');\r\n\r\n  /**\r\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\r\n   * as filtering, sorting, pagination, or base data changes.\r\n   */\r\n  _renderChangesSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * The filtered set of data that has been matched by the filter string, or all the data if there\r\n   * is no filter. Useful for knowing the set of data the table represents.\r\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\r\n   * shown to the user rather than all the data.\r\n   */\r\n  filteredData: T[];\r\n\r\n  /** Array of data that should be rendered by the table, where each object represents one row. */\r\n  get data() { return this._data.value; }\r\n  set data(data: T[]) { this._data.next(data); }\r\n\r\n  /**\r\n   * Filter term that should be used to filter out objects from the data array. To override how\r\n   * data objects match to this filter string, provide a custom function for filterPredicate.\r\n   */\r\n  get filter(): string { return this._filter.value; }\r\n  set filter(filter: string) { this._filter.next(filter); }\r\n\r\n  /**\r\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\r\n   * emitted by the MatSort will trigger an update to the table's rendered data.\r\n   */\r\n  get sort(): MatSort | null { return this._sort; }\r\n  set sort(sort: MatSort|null) {\r\n    this._sort = sort;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _sort: MatSort|null;\r\n\r\n  /**\r\n   * Instance of the MatPaginator component used by the table to control what page of the data is\r\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\r\n   * table's rendered data.\r\n   *\r\n   * Note that the data source uses the paginator's properties to calculate which page of data\r\n   * should be displayed. If the paginator receives its properties as template inputs,\r\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\r\n   * initialized before assigning it to this data source.\r\n   */\r\n  get paginator(): MatPaginator | null { return this._paginator; }\r\n  set paginator(paginator: MatPaginator|null) {\r\n    this._paginator = paginator;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _paginator: MatPaginator|null;\r\n\r\n  /**\r\n   * Data accessor function that is used for accessing data properties for sorting through\r\n   * the default sortData function.\r\n   * This default function assumes that the sort header IDs (which defaults to the column name)\r\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n   * May be set to a custom function for different behavior.\r\n   * @param data Data object that is being accessed.\r\n   * @param sortHeaderId The name of the column that represents the data.\r\n   */\r\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\r\n      (data: T, sortHeaderId: string): string|number => {\r\n    const value: any = data[sortHeaderId];\r\n\r\n    if (_isNumberValue(value)) {\r\n      const numberValue = Number(value);\r\n\r\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\r\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\r\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\r\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\r\n   * By default, the function retrieves the active sort and its direction and compares data\r\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\r\n   * of data ordering.\r\n   * @param data The array of data that should be sorted.\r\n   * @param sort The connected MatSort that holds the current sort state.\r\n   */\r\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\r\n    const active = sort.active;\r\n    const direction = sort.direction;\r\n    if (!active || direction == '') { return data; }\r\n\r\n    return data.sort((a, b) => {\r\n      let valueA = this.sortingDataAccessor(a, active);\r\n      let valueB = this.sortingDataAccessor(b, active);\r\n\r\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n      // one value exists while the other doesn't. In this case, existing value should come first.\r\n      // This avoids inconsistent results when comparing values to undefined/null.\r\n      // If neither value exists, return 0 (equal).\r\n      let comparatorResult = 0;\r\n      if (valueA != null && valueB != null) {\r\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n        if (valueA > valueB) {\r\n          comparatorResult = 1;\r\n        } else if (valueA < valueB) {\r\n          comparatorResult = -1;\r\n        }\r\n      } else if (valueA != null) {\r\n        comparatorResult = 1;\r\n      } else if (valueB != null) {\r\n        comparatorResult = -1;\r\n      }\r\n\r\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if a data object matches the data source's filter string. By default, each data object\r\n   * is converted to a string of its properties and returns true if the filter has\r\n   * at least one occurrence in that string. By default, the filter string has its whitespace\r\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n   * filter matching.\r\n   * @param data Data object used to check against the filter.\r\n   * @param filter Filter string that has been set on the data source.\r\n   * @returns Whether the filter matches against the data\r\n   */\r\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\r\n    // Transform the data into a lowercase string of all property values.\r\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\r\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\r\n\r\n    // Transform the filter by converting it to lowercase and removing whitespace.\r\n    const transformedFilter = filter.trim().toLowerCase();\r\n\r\n    return dataStr.indexOf(transformedFilter) != -1;\r\n  }\r\n\r\n  constructor(initialData: T[] = []) {\r\n    super();\r\n    this._data = new BehaviorSubject<T[]>(initialData);\r\n    this._updateChangeSubscription();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n   * changes occur, process the current state of the filter, sort, and pagination along with\r\n   * the provided base data and send it to the table for rendering.\r\n   */\r\n  _updateChangeSubscription() {\r\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\r\n    // The events should emit whenever the component emits a change or initializes, or if no\r\n    // component is provided, a stream with just a null event should be provided.\r\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\r\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\r\n    // they purely act as a signal to progress in the pipeline.\r\n    const sortChange: Observable<Sort|null> = this._sort ?\r\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\r\n        observableOf(null);\r\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\r\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\r\n        observableOf(null);\r\n\r\n    const dataStream = this._data;\r\n    // Watch for base data or filter changes to provide a filtered set of data.\r\n    const filteredData = combineLatest(dataStream, this._filter)\r\n      .pipe(map(([data]) => this._filterData(data)));\r\n    // Watch for filtered data or sort changes to provide an ordered set of data.\r\n    const orderedData = combineLatest(filteredData, sortChange)\r\n      .pipe(map(([data]) => this._orderData(data)));\r\n    // Watch for ordered data or page changes to provide a paged set of data.\r\n    const paginatedData = combineLatest(orderedData, pageChange)\r\n      .pipe(map(([data]) => this._pageData(data)));\r\n    // Watched for paged data changes and send the result to the table to render.\r\n    this._renderChangesSubscription.unsubscribe();\r\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\r\n  }\r\n\r\n  /**\r\n   * Returns a filtered data array where each filter object contains the filter string within\r\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\r\n   * as provided.\r\n   */\r\n  _filterData(data: T[]) {\r\n    // If there is a filter string, filter out data that does not contain it.\r\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\r\n    // May be overridden for customization.\r\n    this.filteredData =\r\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\r\n\r\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\r\n\r\n    return this.filteredData;\r\n  }\r\n\r\n  /**\r\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n   * data array as provided. Uses the default data accessor for data lookup, unless a\r\n   * sortDataAccessor function is defined.\r\n   */\r\n  _orderData(data: T[]): T[] {\r\n    // If there is no active sort or direction, return the data without trying to sort.\r\n    if (!this.sort) { return data; }\r\n\r\n    return this.sortData(data.slice(), this.sort);\r\n  }\r\n\r\n  /**\r\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\r\n   * index and length. If there is no paginator provided, returns the data array as provided.\r\n   */\r\n  _pageData(data: T[]): T[] {\r\n    if (!this.paginator) { return data; }\r\n\r\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n    return data.slice().splice(startIndex, this.paginator.pageSize);\r\n  }\r\n\r\n  /**\r\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n   * guard against making property changes within a round of change detection.\r\n   */\r\n  _updatePaginator(filteredDataLength: number) {\r\n    Promise.resolve().then(() => {\r\n      if (!this.paginator) { return; }\r\n\r\n      this.paginator.length = filteredDataLength;\r\n\r\n      // If the page index is set beyond the page, reduce it to the last page.\r\n      if (this.paginator.pageIndex > 0) {\r\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\r\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it connects to the data source.\r\n   * @docs-private\r\n   */\r\n  connect() { return this._renderData; }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it is destroyed. No-op.\r\n   * @docs-private\r\n   */\r\n  disconnect() { }\r\n}\r\n"]}