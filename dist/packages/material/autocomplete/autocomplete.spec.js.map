{"version":3,"file":"autocomplete.spec.js","sourceRoot":"","sources":["../../../../src/lib/autocomplete/autocomplete.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directionality} from '@angular/cdk/bidi';\r\nimport {DOWN_ARROW, ENTER, ESCAPE, SPACE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {Overlay, OverlayContainer} from '@angular/cdk/overlay';\r\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\r\nimport {\r\n  createKeyboardEvent,\r\n  dispatchFakeEvent,\r\n  dispatchKeyboardEvent,\r\n  MockNgZone,\r\n  typeInElement,\r\n} from '@angular/cdk/testing';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Provider,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewChildren,\r\n  Type,\r\n} from '@angular/core';\r\nimport {\r\n  async,\r\n  ComponentFixture,\r\n  fakeAsync,\r\n  flush,\r\n  inject,\r\n  TestBed,\r\n  tick,\r\n} from '@angular/core/testing';\r\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\r\nimport {MatFormField, MatFormFieldModule} from '@angular/material/form-field';\r\nimport {By} from '@angular/platform-browser';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {Observable, Subject, Subscription} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {MatInputModule} from '../input/index';\r\nimport {\r\n  getMatAutocompleteMissingPanelError,\r\n  MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,\r\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n  MatAutocomplete,\r\n  MatAutocompleteModule,\r\n  MatAutocompleteSelectedEvent,\r\n  MatAutocompleteTrigger,\r\n} from './index';\r\n\r\n\r\ndescribe('MatAutocomplete', () => {\r\n  let overlayContainer: OverlayContainer;\r\n  let overlayContainerElement: HTMLElement;\r\n  let zone: MockNgZone;\r\n\r\n  // Creates a test component fixture.\r\n  function createComponent<T>(component: Type<T>, providers: Provider[] = []) {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        MatAutocompleteModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        NoopAnimationsModule\r\n      ],\r\n      declarations: [component],\r\n      providers: [\r\n        {provide: NgZone, useFactory: () => zone = new MockNgZone()},\r\n        ...providers\r\n      ]\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n\r\n    inject([OverlayContainer], (oc: OverlayContainer) => {\r\n      overlayContainer = oc;\r\n      overlayContainerElement = oc.getContainerElement();\r\n    })();\r\n\r\n    return TestBed.createComponent<T>(component);\r\n  }\r\n\r\n  afterEach(inject([OverlayContainer], (currentOverlayContainer: OverlayContainer) => {\r\n    // Since we're resetting the testing module in some of the tests,\r\n    // we can potentially have multiple overlay containers.\r\n    currentOverlayContainer.ngOnDestroy();\r\n    overlayContainer.ngOnDestroy();\r\n  }));\r\n\r\n  describe('panel toggling', () => {\r\n    let fixture: ComponentFixture<SimpleAutocomplete>;\r\n    let input: HTMLInputElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\r\n    });\r\n\r\n    it('should open the panel when the input is focused', () => {\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected panel state to start out closed.`);\r\n\r\n      dispatchFakeEvent(input, 'focusin');\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(true, `Expected panel state to read open when input is focused.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toContain('Alabama', `Expected panel to display when input is focused.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toContain('California', `Expected panel to display when input is focused.`);\r\n    });\r\n\r\n    it('should not open the panel on focus if the input is readonly', fakeAsync(() => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n      input.readOnly = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(trigger.panelOpen).toBe(false, 'Expected panel state to start out closed.');\r\n      dispatchFakeEvent(input, 'focusin');\r\n      flush();\r\n\r\n      fixture.detectChanges();\r\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to stay closed.');\r\n    }));\r\n\r\n    it('should not open using the arrow keys when the input is readonly', fakeAsync(() => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n      input.readOnly = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(trigger.panelOpen).toBe(false, 'Expected panel state to start out closed.');\r\n      dispatchKeyboardEvent(input, 'keydown', DOWN_ARROW);\r\n      flush();\r\n\r\n      fixture.detectChanges();\r\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to stay closed.');\r\n    }));\r\n\r\n    it('should open the panel programmatically', () => {\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected panel state to start out closed.`);\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(true, `Expected panel state to read open when opened programmatically.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toContain('Alabama', `Expected panel to display when opened programmatically.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toContain('California', `Expected panel to display when opened programmatically.`);\r\n    });\r\n\r\n    it('should show the panel when the first open is after the initial zone stabilization',\r\n      async(() => {\r\n        // Note that we're running outside the Angular zone, in order to be able\r\n        // to test properly without the subscription from `_subscribeToClosingActions`\r\n        // giving us a false positive.\r\n        fixture.ngZone!.runOutsideAngular(() => {\r\n          fixture.componentInstance.trigger.openPanel();\r\n\r\n          Promise.resolve().then(() => {\r\n            expect(fixture.componentInstance.panel.showPanel)\r\n                .toBe(true, `Expected panel to be visible.`);\r\n          });\r\n        });\r\n      }));\r\n\r\n    it('should close the panel when the user clicks away', fakeAsync(() => {\r\n      dispatchFakeEvent(input, 'focusin');\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n      dispatchFakeEvent(document, 'click');\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected clicking outside the panel to set its state to closed.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toEqual('', `Expected clicking outside the panel to close the panel.`);\r\n    }));\r\n\r\n    it('should close the panel when the user taps away on a touch device', fakeAsync(() => {\r\n      dispatchFakeEvent(input, 'focus');\r\n      fixture.detectChanges();\r\n      flush();\r\n      dispatchFakeEvent(document, 'touchend');\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected tapping outside the panel to set its state to closed.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toEqual('', `Expected tapping outside the panel to close the panel.`);\r\n    }));\r\n\r\n    it('should close the panel when an option is clicked', fakeAsync(() => {\r\n      dispatchFakeEvent(input, 'focusin');\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      const option = overlayContainerElement.querySelector('mat-option') as HTMLElement;\r\n      option.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected clicking an option to set the panel state to closed.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toEqual('', `Expected clicking an option to close the panel.`);\r\n    }));\r\n\r\n    it('should close the panel when a newly created option is clicked', fakeAsync(() => {\r\n      dispatchFakeEvent(input, 'focusin');\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      // Filter down the option list to a subset of original options ('Alabama', 'California')\r\n      typeInElement('al', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      let options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[0].click();\r\n\r\n      // Changing value from 'Alabama' to 'al' to re-populate the option list,\r\n      // ensuring that 'California' is created new.\r\n      dispatchFakeEvent(input, 'focusin');\r\n      typeInElement('al', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      options = overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected clicking a new option to set the panel state to closed.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toEqual('', `Expected clicking a new option to close the panel.`);\r\n    }));\r\n\r\n    it('should close the panel programmatically', () => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.closePanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected closing programmatically to set the panel state to closed.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toEqual('', `Expected closing programmatically to close the panel.`);\r\n    });\r\n\r\n    it('should not throw when attempting to close the panel of a destroyed autocomplete', () => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n\r\n      trigger.openPanel();\r\n      fixture.detectChanges();\r\n      fixture.destroy();\r\n\r\n      expect(() => trigger.closePanel()).not.toThrow();\r\n    });\r\n\r\n    it('should hide the panel when the options list is empty', fakeAsync(() => {\r\n      dispatchFakeEvent(input, 'focusin');\r\n      fixture.detectChanges();\r\n\r\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel') as HTMLElement;\r\n\r\n      expect(panel.classList)\r\n          .toContain('mat-autocomplete-visible', `Expected panel to start out visible.`);\r\n\r\n      // Filter down the option list such that no options match the value\r\n      typeInElement('af', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      expect(panel.classList)\r\n          .toContain('mat-autocomplete-hidden', `Expected panel to hide itself when empty.`);\r\n    }));\r\n\r\n    it('should keep the label floating until the panel closes', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      expect(fixture.componentInstance.formField.floatLabel)\r\n          .toEqual('always', 'Expected label to float as soon as panel opens.');\r\n\r\n      zone.simulateZoneExit();\r\n      fixture.detectChanges();\r\n\r\n      const options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.formField.floatLabel)\r\n          .toEqual('auto', 'Expected label to return to auto state after panel closes.');\r\n    }));\r\n\r\n    it('should not open the panel when the `input` event is invoked on a non-focused input', () => {\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected panel state to start out closed.`);\r\n\r\n      input.value = 'Alabama';\r\n      dispatchFakeEvent(input, 'input');\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected panel state to stay closed.`);\r\n    });\r\n\r\n   it('should not mess with label placement if set to never', fakeAsync(() => {\r\n      fixture.componentInstance.floatLabel = 'never';\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      expect(fixture.componentInstance.formField.floatLabel)\r\n          .toEqual('never', 'Expected label to stay static.');\r\n      flush();\r\n      fixture.detectChanges();\r\n\r\n      const options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.formField.floatLabel)\r\n          .toEqual('never', 'Expected label to stay in static state after close.');\r\n    }));\r\n\r\n    it('should not mess with label placement if set to always', fakeAsync(() => {\r\n      fixture.componentInstance.floatLabel = 'always';\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      expect(fixture.componentInstance.formField.floatLabel)\r\n          .toEqual('always', 'Expected label to stay elevated on open.');\r\n      flush();\r\n      fixture.detectChanges();\r\n\r\n      const options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.formField.floatLabel)\r\n          .toEqual('always', 'Expected label to stay elevated after close.');\r\n    }));\r\n\r\n    it('should toggle the visibility when typing and closing the panel', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel')!.classList)\r\n          .toContain('mat-autocomplete-visible', 'Expected panel to be visible.');\r\n\r\n      typeInElement('x', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel')!.classList)\r\n          .toContain('mat-autocomplete-hidden', 'Expected panel to be hidden.');\r\n\r\n      fixture.componentInstance.trigger.closePanel();\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      typeInElement('al', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel')!.classList)\r\n          .toContain('mat-autocomplete-visible', 'Expected panel to be visible.');\r\n    }));\r\n\r\n    it('should animate the label when the input is focused', () => {\r\n      const inputContainer = fixture.componentInstance.formField;\r\n\r\n      spyOn(inputContainer, '_animateAndLockLabel');\r\n      expect(inputContainer._animateAndLockLabel).not.toHaveBeenCalled();\r\n\r\n      dispatchFakeEvent(fixture.debugElement.query(By.css('input')).nativeElement, 'focusin');\r\n      expect(inputContainer._animateAndLockLabel).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should provide the open state of the panel', fakeAsync(() => {\r\n      expect(fixture.componentInstance.panel.isOpen).toBeFalsy(\r\n        `Expected the panel to be unopened initially.`);\r\n\r\n      dispatchFakeEvent(input, 'focusin');\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      expect(fixture.componentInstance.panel.isOpen).toBeTruthy(\r\n        `Expected the panel to be opened on focus.`);\r\n    }));\r\n\r\n    it('should emit an event when the panel is opened', () => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.openedSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not emit the `opened` event when no options are being shown', () => {\r\n      fixture.componentInstance.filteredStates = fixture.componentInstance.states = [];\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.openedSpy).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not emit the opened event multiple times while typing', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.openedSpy).toHaveBeenCalledTimes(1);\r\n\r\n      typeInElement('Alabam', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.openedSpy).toHaveBeenCalledTimes(1);\r\n    }));\r\n\r\n    it('should emit an event when the panel is closed', () => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.closePanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.closedSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not emit the `closed` event when no options were shown', () => {\r\n      fixture.componentInstance.filteredStates = fixture.componentInstance.states = [];\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.closePanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.closedSpy).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not be able to open the panel if the autocomplete is disabled', () => {\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected panel state to start out closed.`);\r\n\r\n      fixture.componentInstance.autocompleteDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      dispatchFakeEvent(input, 'focusin');\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected panel to remain closed.`);\r\n    });\r\n\r\n    it('should continue to update the model if the autocomplete is disabled', () => {\r\n      fixture.componentInstance.autocompleteDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      typeInElement('hello', input);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.stateCtrl.value).toBe('hello');\r\n    });\r\n\r\n  });\r\n\r\n  it('should have the correct text direction in RTL', () => {\r\n    const rtlFixture = createComponent(SimpleAutocomplete, [\r\n      {provide: Directionality, useFactory: () => ({value: 'rtl'})},\r\n    ]);\r\n\r\n    rtlFixture.detectChanges();\r\n    rtlFixture.componentInstance.trigger.openPanel();\r\n    rtlFixture.detectChanges();\r\n\r\n    const boundingBox =\r\n        overlayContainerElement.querySelector('.cdk-overlay-connected-position-bounding-box')!;\r\n    expect(boundingBox.getAttribute('dir')).toEqual('rtl');\r\n  });\r\n\r\n  it('should update the panel direction if it changes for the trigger', () => {\r\n    const dirProvider = {value: 'rtl'};\r\n    const rtlFixture = createComponent(SimpleAutocomplete, [\r\n      {provide: Directionality, useFactory: () => dirProvider},\r\n    ]);\r\n\r\n    rtlFixture.detectChanges();\r\n    rtlFixture.componentInstance.trigger.openPanel();\r\n    rtlFixture.detectChanges();\r\n\r\n    let boundingBox =\r\n        overlayContainerElement.querySelector('.cdk-overlay-connected-position-bounding-box')!;\r\n    expect(boundingBox.getAttribute('dir')).toEqual('rtl');\r\n\r\n    rtlFixture.componentInstance.trigger.closePanel();\r\n    rtlFixture.detectChanges();\r\n\r\n    dirProvider.value = 'ltr';\r\n    rtlFixture.componentInstance.trigger.openPanel();\r\n    rtlFixture.detectChanges();\r\n\r\n    boundingBox =\r\n        overlayContainerElement.querySelector('.cdk-overlay-connected-position-bounding-box')!;\r\n    expect(boundingBox.getAttribute('dir')).toEqual('ltr');\r\n  });\r\n\r\n  it('should be able to set a custom value for the `autocomplete` attribute', () => {\r\n    const fixture = createComponent(AutocompleteWithNativeAutocompleteAttribute);\r\n    const input = fixture.nativeElement.querySelector('input');\r\n\r\n    fixture.detectChanges();\r\n\r\n    expect(input.getAttribute('autocomplete')).toBe('changed');\r\n  });\r\n\r\n  it('should not throw when typing in an element with a null and disabled autocomplete', () => {\r\n    const fixture = createComponent(InputWithoutAutocompleteAndDisabled);\r\n    fixture.detectChanges();\r\n\r\n    expect(() => {\r\n      dispatchKeyboardEvent(fixture.nativeElement.querySelector('input'), 'keydown', SPACE);\r\n      fixture.detectChanges();\r\n    }).not.toThrow();\r\n  });\r\n\r\n  describe('forms integration', () => {\r\n    let fixture: ComponentFixture<SimpleAutocomplete>;\r\n    let input: HTMLInputElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n\r\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\r\n    });\r\n\r\n    it('should update control value as user types with input value', () => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      typeInElement('a', input);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.stateCtrl.value)\r\n          .toEqual('a', 'Expected control value to be updated as user types.');\r\n\r\n      typeInElement('al', input);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.stateCtrl.value)\r\n          .toEqual('al', 'Expected control value to be updated as user types.');\r\n    });\r\n\r\n    it('should update control value when option is selected with option value', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      const options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.stateCtrl.value)\r\n          .toEqual({code: 'CA', name: 'California'},\r\n              'Expected control value to equal the selected option value.');\r\n    }));\r\n\r\n    it('should update the control back to a string if user types after an option is selected',\r\n      fakeAsync(() => {\r\n        fixture.componentInstance.trigger.openPanel();\r\n        fixture.detectChanges();\r\n        zone.simulateZoneExit();\r\n\r\n        const options =\r\n            overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n        options[1].click();\r\n        fixture.detectChanges();\r\n\r\n        typeInElement('Californi', input);\r\n        fixture.detectChanges();\r\n        tick();\r\n\r\n        expect(fixture.componentInstance.stateCtrl.value)\r\n            .toEqual('Californi', 'Expected control value to revert back to string.');\r\n      }));\r\n\r\n    it('should fill the text field with display value when an option is selected', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      const options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(input.value)\r\n          .toContain('California', `Expected text field to fill with selected value.`);\r\n    }));\r\n\r\n    it('should fill the text field with value if displayWith is not set', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      fixture.componentInstance.panel.displayWith = null;\r\n      fixture.componentInstance.options.toArray()[1].value = 'test value';\r\n      fixture.detectChanges();\r\n\r\n      const options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n\r\n      fixture.detectChanges();\r\n      expect(input.value)\r\n          .toContain('test value', `Expected input to fall back to selected option's value.`);\r\n    }));\r\n\r\n    it('should fill the text field correctly if value is set to obj programmatically',\r\n      fakeAsync(() => {\r\n        fixture.componentInstance.stateCtrl.setValue({code: 'AL', name: 'Alabama'});\r\n        fixture.detectChanges();\r\n        tick();\r\n        fixture.detectChanges();\r\n\r\n        expect(input.value)\r\n            .toContain('Alabama', `Expected input to fill with matching option's viewValue.`);\r\n      }));\r\n\r\n    it('should clear the text field if value is reset programmatically', fakeAsync(() => {\r\n      typeInElement('Alabama', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      fixture.componentInstance.stateCtrl.reset();\r\n      tick();\r\n\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(input.value).toEqual('', `Expected input value to be empty after reset.`);\r\n    }));\r\n\r\n    it('should disable input in view when disabled programmatically', () => {\r\n      const formFieldElement =\r\n          fixture.debugElement.query(By.css('.mat-form-field')).nativeElement;\r\n\r\n      expect(input.disabled)\r\n          .toBe(false, `Expected input to start out enabled in view.`);\r\n      expect(formFieldElement.classList.contains('mat-form-field-disabled'))\r\n          .toBe(false, `Expected input underline to start out with normal styles.`);\r\n\r\n      fixture.componentInstance.stateCtrl.disable();\r\n      fixture.detectChanges();\r\n\r\n      expect(input.disabled)\r\n          .toBe(true, `Expected input to be disabled in view when disabled programmatically.`);\r\n      expect(formFieldElement.classList.contains('mat-form-field-disabled'))\r\n          .toBe(true, `Expected input underline to display disabled styles.`);\r\n    });\r\n\r\n    it('should mark the autocomplete control as dirty as user types', () => {\r\n      expect(fixture.componentInstance.stateCtrl.dirty)\r\n          .toBe(false, `Expected control to start out pristine.`);\r\n\r\n      typeInElement('a', input);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.stateCtrl.dirty)\r\n          .toBe(true, `Expected control to become dirty when the user types into the input.`);\r\n    });\r\n\r\n    it('should mark the autocomplete control as dirty when an option is selected', fakeAsync(() => {\r\n      expect(fixture.componentInstance.stateCtrl.dirty)\r\n          .toBe(false, `Expected control to start out pristine.`);\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      const options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.stateCtrl.dirty)\r\n          .toBe(true, `Expected control to become dirty when an option was selected.`);\r\n    }));\r\n\r\n    it('should not mark the control dirty when the value is set programmatically', () => {\r\n      expect(fixture.componentInstance.stateCtrl.dirty)\r\n          .toBe(false, `Expected control to start out pristine.`);\r\n\r\n      fixture.componentInstance.stateCtrl.setValue('AL');\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.stateCtrl.dirty)\r\n          .toBe(false, `Expected control to stay pristine if value is set programmatically.`);\r\n    });\r\n\r\n    it('should mark the autocomplete control as touched on blur', () => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      expect(fixture.componentInstance.stateCtrl.touched)\r\n          .toBe(false, `Expected control to start out untouched.`);\r\n\r\n      dispatchFakeEvent(input, 'blur');\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.stateCtrl.touched)\r\n          .toBe(true, `Expected control to become touched on blur.`);\r\n    });\r\n\r\n    it('should disable the input when used with a value accessor and without `matInput`', () => {\r\n      overlayContainer.ngOnDestroy();\r\n      fixture.destroy();\r\n      TestBed.resetTestingModule();\r\n\r\n      const plainFixture = createComponent(PlainAutocompleteInputWithFormControl);\r\n      plainFixture.detectChanges();\r\n      input = plainFixture.nativeElement.querySelector('input');\r\n\r\n      expect(input.disabled).toBe(false);\r\n\r\n      plainFixture.componentInstance.formControl.disable();\r\n      plainFixture.detectChanges();\r\n\r\n      expect(input.disabled).toBe(true);\r\n    });\r\n\r\n  });\r\n\r\n  describe('keyboard events', () => {\r\n    let fixture: ComponentFixture<SimpleAutocomplete>;\r\n    let input: HTMLInputElement;\r\n    let DOWN_ARROW_EVENT: KeyboardEvent;\r\n    let UP_ARROW_EVENT: KeyboardEvent;\r\n    let ENTER_EVENT: KeyboardEvent;\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n\r\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\r\n      DOWN_ARROW_EVENT = createKeyboardEvent('keydown', DOWN_ARROW);\r\n      UP_ARROW_EVENT = createKeyboardEvent('keydown', UP_ARROW);\r\n      ENTER_EVENT = createKeyboardEvent('keydown', ENTER);\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n    }));\r\n\r\n    it('should not focus the option when DOWN key is pressed', () => {\r\n      spyOn(fixture.componentInstance.options.first, 'focus');\r\n\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      expect(fixture.componentInstance.options.first.focus).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not close the panel when DOWN key is pressed', () => {\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(true, `Expected panel state to stay open when DOWN key is pressed.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toContain('Alabama', `Expected panel to keep displaying when DOWN key is pressed.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toContain('California', `Expected panel to keep displaying when DOWN key is pressed.`);\r\n    });\r\n\r\n    it('should set the active item to the first option when DOWN key is pressed', () => {\r\n      const componentInstance = fixture.componentInstance;\r\n      const optionEls =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n\r\n      expect(componentInstance.trigger.panelOpen)\r\n          .toBe(true, 'Expected first down press to open the pane.');\r\n\r\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      expect(componentInstance.trigger.activeOption === componentInstance.options.first)\r\n          .toBe(true, 'Expected first option to be active.');\r\n      expect(optionEls[0].classList).toContain('mat-active');\r\n      expect(optionEls[1].classList).not.toContain('mat-active');\r\n\r\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      expect(componentInstance.trigger.activeOption === componentInstance.options.toArray()[1])\r\n          .toBe(true, 'Expected second option to be active.');\r\n      expect(optionEls[0].classList).not.toContain('mat-active');\r\n      expect(optionEls[1].classList).toContain('mat-active');\r\n    });\r\n\r\n    it('should set the active item to the last option when UP key is pressed', () => {\r\n      const componentInstance = fixture.componentInstance;\r\n      const optionEls =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n\r\n      expect(componentInstance.trigger.panelOpen)\r\n          .toBe(true, 'Expected first up press to open the pane.');\r\n\r\n      componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      expect(componentInstance.trigger.activeOption === componentInstance.options.last)\r\n          .toBe(true, 'Expected last option to be active.');\r\n      expect(optionEls[10].classList).toContain('mat-active');\r\n      expect(optionEls[0].classList).not.toContain('mat-active');\r\n\r\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      expect(componentInstance.trigger.activeOption === componentInstance.options.first)\r\n          .toBe(true, 'Expected first option to be active.');\r\n      expect(optionEls[0].classList).toContain('mat-active');\r\n    });\r\n\r\n    it('should set the active item properly after filtering', fakeAsync(() => {\r\n      const componentInstance = fixture.componentInstance;\r\n\r\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      tick();\r\n      fixture.detectChanges();\r\n    }));\r\n\r\n    it('should set the active item properly after filtering', () => {\r\n      const componentInstance = fixture.componentInstance;\r\n\r\n      typeInElement('o', input);\r\n      fixture.detectChanges();\r\n\r\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      const optionEls =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n\r\n      expect(componentInstance.trigger.activeOption === componentInstance.options.first)\r\n          .toBe(true, 'Expected first option to be active.');\r\n      expect(optionEls[0].classList).toContain('mat-active');\r\n      expect(optionEls[1].classList).not.toContain('mat-active');\r\n    });\r\n\r\n    it('should fill the text field when an option is selected with ENTER', fakeAsync(() => {\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      flush();\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\r\n      fixture.detectChanges();\r\n      expect(input.value)\r\n          .toContain('Alabama', `Expected text field to fill with selected value on ENTER.`);\r\n    }));\r\n\r\n    it('should prevent the default enter key action', fakeAsync(() => {\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      flush();\r\n\r\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\r\n\r\n      expect(ENTER_EVENT.defaultPrevented)\r\n          .toBe(true, 'Expected the default action to have been prevented.');\r\n    }));\r\n\r\n    it('should not prevent the default enter action for a closed panel after a user action', () => {\r\n      fixture.componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.closePanel();\r\n      fixture.detectChanges();\r\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\r\n\r\n      expect(ENTER_EVENT.defaultPrevented).toBe(false, 'Default action should not be prevented.');\r\n    });\r\n\r\n    it('should fill the text field, not select an option, when SPACE is entered', () => {\r\n      typeInElement('New', input);\r\n      fixture.detectChanges();\r\n\r\n      const SPACE_EVENT = createKeyboardEvent('keydown', SPACE);\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger._handleKeydown(SPACE_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      expect(input.value).not.toContain('New York', `Expected option not to be selected on SPACE.`);\r\n    });\r\n\r\n    it('should mark the control dirty when selecting an option from the keyboard', fakeAsync(() => {\r\n      expect(fixture.componentInstance.stateCtrl.dirty)\r\n          .toBe(false, `Expected control to start out pristine.`);\r\n\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      flush();\r\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.stateCtrl.dirty)\r\n          .toBe(true, `Expected control to become dirty when option was selected by ENTER.`);\r\n    }));\r\n\r\n    it('should open the panel again when typing after making a selection', fakeAsync(() => {\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      flush();\r\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(false, `Expected panel state to read closed after ENTER key.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toEqual('', `Expected panel to close after ENTER key.`);\r\n\r\n      dispatchFakeEvent(input, 'focusin');\r\n      typeInElement('Alabama', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(true, `Expected panel state to read open when typing in input.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toContain('Alabama', `Expected panel to display when typing in input.`);\r\n    }));\r\n\r\n    it('should not open the panel if the `input` event was dispatched with changing the value',\r\n      fakeAsync(() => {\r\n        const trigger = fixture.componentInstance.trigger;\r\n\r\n        dispatchFakeEvent(input, 'focusin');\r\n        typeInElement('A', input);\r\n        fixture.detectChanges();\r\n        tick();\r\n\r\n        expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\r\n\r\n        trigger.closePanel();\r\n        fixture.detectChanges();\r\n\r\n        expect(trigger.panelOpen).toBe(false, 'Expected panel to be closed.');\r\n\r\n        // Dispatch the event without actually changing the value\r\n        // to simulate what happen in some cases on IE.\r\n        dispatchFakeEvent(input, 'input');\r\n        fixture.detectChanges();\r\n        tick();\r\n\r\n        expect(trigger.panelOpen).toBe(false, 'Expected panel to stay closed.');\r\n      }));\r\n\r\n    it('should scroll to active options below the fold', () => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n      const scrollContainer =\r\n          document.querySelector('.cdk-overlay-pane .mat-autocomplete-panel')!;\r\n\r\n      trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n      expect(scrollContainer.scrollTop).toEqual(0, `Expected panel not to scroll.`);\r\n\r\n      // These down arrows will set the 6th option active, below the fold.\r\n      [1, 2, 3, 4, 5].forEach(() => trigger._handleKeydown(DOWN_ARROW_EVENT));\r\n\r\n      // Expect option bottom minus the panel height (288 - 256 = 32)\r\n      expect(scrollContainer.scrollTop)\r\n          .toEqual(32, `Expected panel to reveal the sixth option.`);\r\n    });\r\n\r\n    it('should scroll to active options on UP arrow', () => {\r\n      const scrollContainer = document.querySelector('.cdk-overlay-pane .mat-autocomplete-panel')!;\r\n\r\n      fixture.componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      // Expect option bottom minus the panel height (528 - 256 = 272)\r\n      expect(scrollContainer.scrollTop).toEqual(272, `Expected panel to reveal last option.`);\r\n    });\r\n\r\n    it('should not scroll to active options that are fully in the panel', () => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n      const scrollContainer = document.querySelector('.cdk-overlay-pane .mat-autocomplete-panel')!;\r\n\r\n      trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      expect(scrollContainer.scrollTop).toEqual(0, `Expected panel not to scroll.`);\r\n\r\n      // These down arrows will set the 6th option active, below the fold.\r\n      [1, 2, 3, 4, 5].forEach(() => trigger._handleKeydown(DOWN_ARROW_EVENT));\r\n\r\n      // Expect option bottom minus the panel height (288 - 256 = 32)\r\n      expect(scrollContainer.scrollTop)\r\n          .toEqual(32, `Expected panel to reveal the sixth option.`);\r\n\r\n      // These up arrows will set the 2nd option active\r\n      [4, 3, 2, 1].forEach(() => trigger._handleKeydown(UP_ARROW_EVENT));\r\n\r\n      // Expect no scrolling to have occurred. Still showing bottom of 6th option.\r\n      expect(scrollContainer.scrollTop)\r\n          .toEqual(32, `Expected panel not to scroll up since sixth option still fully visible.`);\r\n    });\r\n\r\n    it('should scroll to active options that are above the panel', () => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n      const scrollContainer = document.querySelector('.cdk-overlay-pane .mat-autocomplete-panel')!;\r\n\r\n      trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      expect(scrollContainer.scrollTop).toEqual(0, `Expected panel not to scroll.`);\r\n\r\n      // These down arrows will set the 7th option active, below the fold.\r\n      [1, 2, 3, 4, 5, 6].forEach(() => trigger._handleKeydown(DOWN_ARROW_EVENT));\r\n\r\n      // These up arrows will set the 2nd option active\r\n      [5, 4, 3, 2, 1].forEach(() => trigger._handleKeydown(UP_ARROW_EVENT));\r\n\r\n      // Expect to show the top of the 2nd option at the top of the panel\r\n      expect(scrollContainer.scrollTop)\r\n          .toEqual(48, `Expected panel to scroll up when option is above panel.`);\r\n    });\r\n\r\n    it('should close the panel when pressing escape', fakeAsync(() => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n      const escapeEvent = createKeyboardEvent('keydown', ESCAPE);\r\n      const stopPropagationSpy = spyOn(escapeEvent, 'stopPropagation').and.callThrough();\r\n\r\n      input.focus();\r\n      flush();\r\n      fixture.detectChanges();\r\n\r\n      expect(document.activeElement).toBe(input, 'Expected input to be focused.');\r\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\r\n\r\n      trigger._handleKeydown(escapeEvent);\r\n      fixture.detectChanges();\r\n\r\n      expect(document.activeElement).toBe(input, 'Expected input to continue to be focused.');\r\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to be closed.');\r\n      expect(stopPropagationSpy).toHaveBeenCalled();\r\n    }));\r\n\r\n    it('should prevent the default action when pressing escape', fakeAsync(() => {\r\n      const escapeEvent = dispatchKeyboardEvent(input, 'keydown', ESCAPE);\r\n      fixture.detectChanges();\r\n\r\n      expect(escapeEvent.defaultPrevented).toBe(true);\r\n    }));\r\n\r\n    it('should close the panel when pressing ALT + UP_ARROW', fakeAsync(() => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n      const upArrowEvent = createKeyboardEvent('keydown', UP_ARROW);\r\n      Object.defineProperty(upArrowEvent, 'altKey', {get: () => true});\r\n\r\n      input.focus();\r\n      flush();\r\n      fixture.detectChanges();\r\n\r\n      expect(document.activeElement).toBe(input, 'Expected input to be focused.');\r\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\r\n\r\n      trigger._handleKeydown(upArrowEvent);\r\n      fixture.detectChanges();\r\n\r\n      expect(document.activeElement).toBe(input, 'Expected input to continue to be focused.');\r\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to be closed.');\r\n    }));\r\n\r\n    it('should close the panel when tabbing away from a trigger without results', fakeAsync(() => {\r\n      fixture.componentInstance.states = [];\r\n      fixture.componentInstance.filteredStates = [];\r\n      fixture.detectChanges();\r\n      input.focus();\r\n      flush();\r\n\r\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel'))\r\n          .toBeTruthy('Expected panel to be rendered.');\r\n\r\n      dispatchKeyboardEvent(input, 'keydown', TAB);\r\n      fixture.detectChanges();\r\n\r\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel'))\r\n          .toBeFalsy('Expected panel to be removed.');\r\n    }));\r\n\r\n    it('should reset the active option when closing with the escape key', fakeAsync(() => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n\r\n      trigger.openPanel();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\r\n      expect(!!trigger.activeOption).toBe(false, 'Expected no active option.');\r\n\r\n      // Press the down arrow a few times.\r\n      [1, 2, 3].forEach(() => {\r\n        trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n        tick();\r\n        fixture.detectChanges();\r\n      });\r\n\r\n      // Note that this casts to a boolean, in order to prevent Jasmine\r\n      // from crashing when trying to stringify the option if the test fails.\r\n      expect(!!trigger.activeOption).toBe(true, 'Expected to find an active option.');\r\n\r\n      trigger._handleKeydown(createKeyboardEvent('keydown', ESCAPE));\r\n      tick();\r\n\r\n      expect(!!trigger.activeOption).toBe(false, 'Expected no active options.');\r\n    }));\r\n\r\n    it('should reset the active option when closing by selecting with enter', fakeAsync(() => {\r\n      const trigger = fixture.componentInstance.trigger;\r\n\r\n      trigger.openPanel();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\r\n      expect(!!trigger.activeOption).toBe(false, 'Expected no active option.');\r\n\r\n      // Press the down arrow a few times.\r\n      [1, 2, 3].forEach(() => {\r\n        trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n        tick();\r\n        fixture.detectChanges();\r\n      });\r\n\r\n      // Note that this casts to a boolean, in order to prevent Jasmine\r\n      // from crashing when trying to stringify the option if the test fails.\r\n      expect(!!trigger.activeOption).toBe(true, 'Expected to find an active option.');\r\n\r\n      trigger._handleKeydown(ENTER_EVENT);\r\n      tick();\r\n\r\n      expect(!!trigger.activeOption).toBe(false, 'Expected no active options.');\r\n    }));\r\n\r\n  });\r\n\r\n  describe('option groups', () => {\r\n    let fixture: ComponentFixture<AutocompleteWithGroups>;\r\n    let DOWN_ARROW_EVENT: KeyboardEvent;\r\n    let UP_ARROW_EVENT: KeyboardEvent;\r\n    let container: HTMLElement;\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = createComponent(AutocompleteWithGroups);\r\n      fixture.detectChanges();\r\n\r\n      DOWN_ARROW_EVENT = createKeyboardEvent('keydown', DOWN_ARROW);\r\n      UP_ARROW_EVENT = createKeyboardEvent('keydown', UP_ARROW);\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      tick();\r\n      fixture.detectChanges();\r\n      container = document.querySelector('.mat-autocomplete-panel') as HTMLElement;\r\n    }));\r\n\r\n    it('should scroll to active options below the fold', fakeAsync(() => {\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      tick();\r\n      fixture.detectChanges();\r\n      expect(container.scrollTop).toBe(0, 'Expected the panel not to scroll.');\r\n\r\n      // Press the down arrow five times.\r\n      [1, 2, 3, 4, 5].forEach(() => {\r\n        fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n        tick();\r\n      });\r\n\r\n      // <option bottom> - <panel height> + <2x group labels> = 128\r\n      // 288 - 256 + 96 = 128\r\n      expect(container.scrollTop)\r\n          .toBe(128, 'Expected panel to reveal the sixth option.');\r\n    }));\r\n\r\n    it('should scroll to active options on UP arrow', fakeAsync(() => {\r\n      fixture.componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      // <option bottom> - <panel height> + <3x group label> = 464\r\n      // 576 - 256 + 144 = 464\r\n      expect(container.scrollTop).toBe(464, 'Expected panel to reveal last option.');\r\n    }));\r\n\r\n    it('should scroll to active options that are above the panel', fakeAsync(() => {\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      tick();\r\n      fixture.detectChanges();\r\n      expect(container.scrollTop).toBe(0, 'Expected panel not to scroll.');\r\n\r\n      // These down arrows will set the 7th option active, below the fold.\r\n      [1, 2, 3, 4, 5, 6].forEach(() => {\r\n        fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n        tick();\r\n      });\r\n\r\n      // These up arrows will set the 2nd option active\r\n      [5, 4, 3, 2, 1].forEach(() => {\r\n        fixture.componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\r\n        tick();\r\n      });\r\n\r\n      // Expect to show the top of the 2nd option at the top of the panel.\r\n      // It is offset by 48, because there's a group label above it.\r\n      expect(container.scrollTop)\r\n          .toBe(96, 'Expected panel to scroll up when option is above panel.');\r\n    }));\r\n  });\r\n\r\n  describe('aria', () => {\r\n    let fixture: ComponentFixture<SimpleAutocomplete>;\r\n    let input: HTMLInputElement;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n\r\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\r\n    });\r\n\r\n    it('should set role of input to combobox', () => {\r\n      expect(input.getAttribute('role'))\r\n          .toEqual('combobox', 'Expected role of input to be combobox.');\r\n    });\r\n\r\n    it('should set role of autocomplete panel to listbox', () => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      const panel = fixture.debugElement.query(By.css('.mat-autocomplete-panel')).nativeElement;\r\n\r\n      expect(panel.getAttribute('role'))\r\n          .toEqual('listbox', 'Expected role of the panel to be listbox.');\r\n    });\r\n\r\n    it('should set aria-autocomplete to list', () => {\r\n      expect(input.getAttribute('aria-autocomplete'))\r\n          .toEqual('list', 'Expected aria-autocomplete attribute to equal list.');\r\n    });\r\n\r\n    it('should set aria-activedescendant based on the active option', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(input.hasAttribute('aria-activedescendant'))\r\n          .toBe(false, 'Expected aria-activedescendant to be absent if no active item.');\r\n\r\n      const DOWN_ARROW_EVENT = createKeyboardEvent('keydown', DOWN_ARROW);\r\n\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      expect(input.getAttribute('aria-activedescendant'))\r\n          .toEqual(fixture.componentInstance.options.first.id,\r\n              'Expected aria-activedescendant to match the active item after 1 down arrow.');\r\n\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      expect(input.getAttribute('aria-activedescendant'))\r\n          .toEqual(fixture.componentInstance.options.toArray()[1].id,\r\n              'Expected aria-activedescendant to match the active item after 2 down arrows.');\r\n    }));\r\n\r\n    it('should set aria-expanded based on whether the panel is open', () => {\r\n      expect(input.getAttribute('aria-expanded'))\r\n          .toBe('false', 'Expected aria-expanded to be false while panel is closed.');\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(input.getAttribute('aria-expanded'))\r\n          .toBe('true', 'Expected aria-expanded to be true while panel is open.');\r\n\r\n      fixture.componentInstance.trigger.closePanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(input.getAttribute('aria-expanded'))\r\n          .toBe('false', 'Expected aria-expanded to be false when panel closes again.');\r\n    });\r\n\r\n    it('should set aria-expanded properly when the panel is hidden', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      expect(input.getAttribute('aria-expanded'))\r\n          .toBe('true', 'Expected aria-expanded to be true while panel is open.');\r\n\r\n      typeInElement('zz', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      expect(input.getAttribute('aria-expanded'))\r\n          .toBe('false', 'Expected aria-expanded to be false when panel hides itself.');\r\n    }));\r\n\r\n    it('should set aria-owns based on the attached autocomplete', () => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      const panel = fixture.debugElement.query(By.css('.mat-autocomplete-panel')).nativeElement;\r\n\r\n      expect(input.getAttribute('aria-owns'))\r\n          .toBe(panel.getAttribute('id'), 'Expected aria-owns to match attached autocomplete.');\r\n    });\r\n\r\n    it('should not set aria-owns while the autocomplete is closed', () => {\r\n      expect(input.getAttribute('aria-owns')).toBeFalsy();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      expect(input.getAttribute('aria-owns')).toBeTruthy();\r\n    });\r\n\r\n    it('should restore focus to the input when clicking to select a value', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      const option = overlayContainerElement.querySelector('mat-option') as HTMLElement;\r\n\r\n      // Focus the option manually since the synthetic click may not do it.\r\n      option.focus();\r\n      option.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(document.activeElement).toBe(input, 'Expected focus to be restored to the input.');\r\n    }));\r\n\r\n    it('should remove autocomplete-specific aria attributes when autocomplete is disabled', () => {\r\n      fixture.componentInstance.autocompleteDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(input.getAttribute('role')).toBeFalsy();\r\n      expect(input.getAttribute('aria-autocomplete')).toBeFalsy();\r\n      expect(input.getAttribute('aria-expanded')).toBeFalsy();\r\n      expect(input.getAttribute('aria-owns')).toBeFalsy();\r\n    });\r\n\r\n  });\r\n\r\n  describe('Fallback positions', () => {\r\n    it('should use below positioning by default', fakeAsync(() => {\r\n      let fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n      fixture.detectChanges();\r\n\r\n      const inputBottom = inputReference.getBoundingClientRect().bottom;\r\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\r\n      const panelTop = panel.getBoundingClientRect().top;\r\n\r\n      expect(Math.floor(inputBottom))\r\n          .toEqual(Math.floor(panelTop), `Expected panel top to match input bottom by default.`);\r\n      expect(panel.classList).not.toContain('mat-autocomplete-panel-above');\r\n    }));\r\n\r\n    it('should reposition the panel on scroll', () => {\r\n      let scrolledSubject = new Subject();\r\n      let spacer = document.createElement('div');\r\n      let fixture = createComponent(SimpleAutocomplete, [{\r\n        provide: ScrollDispatcher,\r\n        useValue: {scrolled: () => scrolledSubject.asObservable()}\r\n      }]);\r\n\r\n      fixture.detectChanges();\r\n\r\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\r\n      spacer.style.height = '1000px';\r\n      document.body.appendChild(spacer);\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      window.scroll(0, 100);\r\n      scrolledSubject.next();\r\n      fixture.detectChanges();\r\n\r\n      const inputBottom = inputReference.getBoundingClientRect().bottom;\r\n      const panel = overlayContainerElement.querySelector('.cdk-overlay-pane')!;\r\n      const panelTop = panel.getBoundingClientRect().top;\r\n\r\n      expect(Math.floor(inputBottom)).toEqual(Math.floor(panelTop),\r\n          'Expected panel top to match input bottom after scrolling.');\r\n\r\n      document.body.removeChild(spacer);\r\n      window.scroll(0, 0);\r\n    });\r\n\r\n    it('should fall back to above position if panel cannot fit below', fakeAsync(() => {\r\n      let fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\r\n\r\n      // Push the autocomplete trigger down so it won't have room to open \"below\"\r\n      inputReference.style.bottom = '0';\r\n      inputReference.style.position = 'fixed';\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n      fixture.detectChanges();\r\n\r\n      const inputTop = inputReference.getBoundingClientRect().top;\r\n      const panel = overlayContainerElement.querySelector('.cdk-overlay-pane')!;\r\n      const panelBottom = panel.getBoundingClientRect().bottom;\r\n\r\n      expect(Math.floor(inputTop))\r\n          .toEqual(Math.floor(panelBottom), `Expected panel to fall back to above position.`);\r\n\r\n      expect(panel.querySelector('.mat-autocomplete-panel')!.classList)\r\n          .toContain('mat-autocomplete-panel-above');\r\n    }));\r\n\r\n    it('should allow the panel to expand when the number of results increases', fakeAsync(() => {\r\n      let fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n\r\n      let inputEl = fixture.debugElement.query(By.css('input')).nativeElement;\r\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\r\n\r\n      // Push the element down so it has a little bit of space, but not enough to render.\r\n      inputReference.style.bottom = '10px';\r\n      inputReference.style.position = 'fixed';\r\n\r\n      // Type enough to only show one option.\r\n      typeInElement('California', inputEl);\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      let panel = overlayContainerElement.querySelector('.cdk-overlay-pane')!;\r\n      let initialPanelHeight = panel.getBoundingClientRect().height;\r\n\r\n      fixture.componentInstance.trigger.closePanel();\r\n      fixture.detectChanges();\r\n\r\n      // Change the text so we get more than one result.\r\n      typeInElement('C', inputEl);\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      panel = overlayContainerElement.querySelector('.cdk-overlay-pane')!;\r\n\r\n      expect(panel.getBoundingClientRect().height).toBeGreaterThan(initialPanelHeight);\r\n    }));\r\n\r\n    it('should align panel properly when filtering in \"above\" position', fakeAsync(() => {\r\n      let fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n\r\n      let input = fixture.debugElement.query(By.css('input')).nativeElement;\r\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\r\n\r\n      // Push the autocomplete trigger down so it won't have room to open \"below\"\r\n      inputReference.style.bottom = '0';\r\n      inputReference.style.position = 'fixed';\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      typeInElement('f', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      const inputTop = inputReference.getBoundingClientRect().top;\r\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\r\n      const panelBottom = panel.getBoundingClientRect().bottom;\r\n\r\n      expect(Math.floor(inputTop))\r\n          .toEqual(Math.floor(panelBottom), `Expected panel to stay aligned after filtering.`);\r\n    }));\r\n\r\n    it('should fall back to above position when requested if options are added while ' +\r\n        'the panel is open', fakeAsync(() => {\r\n      let fixture = createComponent(SimpleAutocomplete);\r\n      fixture.componentInstance.states = fixture.componentInstance.states.slice(0, 1);\r\n      fixture.componentInstance.filteredStates = fixture.componentInstance.states.slice();\r\n      fixture.detectChanges();\r\n\r\n      let inputEl = fixture.debugElement.query(By.css('input')).nativeElement;\r\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\r\n\r\n      // Push the element down so it has a little bit of space, but not enough to render.\r\n      inputReference.style.bottom = '75px';\r\n      inputReference.style.position = 'fixed';\r\n\r\n      dispatchFakeEvent(inputEl, 'focusin');\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n      fixture.detectChanges();\r\n\r\n      let panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\r\n      let inputRect = inputReference.getBoundingClientRect();\r\n      let panelRect = panel.getBoundingClientRect();\r\n\r\n      expect(Math.floor(panelRect.top))\r\n        .toBe(Math.floor(inputRect.bottom),\r\n          `Expected panel top to be below input before repositioning.`);\r\n\r\n      for (let i = 0; i < 20; i++) {\r\n        fixture.componentInstance.filteredStates.push({code: 'FK', name: 'Fake State'});\r\n        fixture.detectChanges();\r\n      }\r\n\r\n      // Request a position update now that there are too many suggestions to fit in the viewport.\r\n      fixture.componentInstance.trigger.updatePosition();\r\n\r\n      inputRect = inputReference.getBoundingClientRect();\r\n      panelRect = panel.getBoundingClientRect();\r\n\r\n      expect(Math.floor(panelRect.bottom))\r\n        .toBe(Math.floor(inputRect.top),\r\n          `Expected panel to fall back to above position after repositioning.`);\r\n      tick();\r\n    }));\r\n\r\n    it('should not throw if a panel reposition is requested while the panel is closed', () => {\r\n        let fixture = createComponent(SimpleAutocomplete);\r\n        fixture.detectChanges();\r\n\r\n        expect(() => fixture.componentInstance.trigger.updatePosition()).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('Option selection', () => {\r\n    let fixture: ComponentFixture<SimpleAutocomplete>;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n    });\r\n\r\n    it('should deselect any other selected option', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      let options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[0].click();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n      fixture.detectChanges();\r\n\r\n      let componentOptions = fixture.componentInstance.options.toArray();\r\n      expect(componentOptions[0].selected)\r\n          .toBe(true, `Clicked option should be selected.`);\r\n\r\n      options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(componentOptions[0].selected)\r\n          .toBe(false, `Previous option should not be selected.`);\r\n      expect(componentOptions[1].selected)\r\n          .toBe(true, `New Clicked option should be selected.`);\r\n    }));\r\n\r\n    it('should call deselect only on the previous selected option', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      let options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[0].click();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n      fixture.detectChanges();\r\n\r\n      let componentOptions = fixture.componentInstance.options.toArray();\r\n      componentOptions.forEach(option => spyOn(option, 'deselect'));\r\n\r\n      expect(componentOptions[0].selected)\r\n          .toBe(true, `Clicked option should be selected.`);\r\n\r\n      options =\r\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n      options[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(componentOptions[0].deselect).toHaveBeenCalled();\r\n      componentOptions.slice(1).forEach(option => expect(option.deselect).not.toHaveBeenCalled());\r\n    }));\r\n\r\n    it('should be able to preselect the first option', fakeAsync(() => {\r\n      fixture.componentInstance.trigger.autocomplete.autoActiveFirstOption = true;\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n      fixture.detectChanges();\r\n\r\n      expect(overlayContainerElement.querySelectorAll('mat-option')[0].classList)\r\n          .toContain('mat-active', 'Expected first option to be highlighted.');\r\n    }));\r\n\r\n    it('should be able to configure preselecting the first option globally', fakeAsync(() => {\r\n      overlayContainer.ngOnDestroy();\r\n      fixture.destroy();\r\n      TestBed.resetTestingModule();\r\n      fixture = createComponent(SimpleAutocomplete, [\r\n        {provide: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, useValue: {autoActiveFirstOption: true}}\r\n      ]);\r\n\r\n      fixture.detectChanges();\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n      fixture.detectChanges();\r\n\r\n      expect(overlayContainerElement.querySelectorAll('mat-option')[0].classList)\r\n          .toContain('mat-active', 'Expected first option to be highlighted.');\r\n    }));\r\n\r\n    it('should handle `optionSelections` being accessed too early', fakeAsync(() => {\r\n      overlayContainer.ngOnDestroy();\r\n      fixture.destroy();\r\n      fixture = TestBed.createComponent(SimpleAutocomplete);\r\n\r\n      let spy = jasmine.createSpy('option selection spy');\r\n      let subscription: Subscription;\r\n\r\n      expect(fixture.componentInstance.trigger.autocomplete).toBeFalsy();\r\n      expect(() => {\r\n        subscription = fixture.componentInstance.trigger.optionSelections.subscribe(spy);\r\n      }).not.toThrow();\r\n\r\n      fixture.detectChanges();\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      const option = overlayContainerElement.querySelector('mat-option') as HTMLElement;\r\n\r\n      option.click();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      expect(spy).toHaveBeenCalledWith(jasmine.any(MatOptionSelectionChange));\r\n      subscription!.unsubscribe();\r\n    }));\r\n\r\n    it('should reposition the panel when the amount of options changes', fakeAsync(() => {\r\n      let formField = fixture.debugElement.query(By.css('.mat-form-field')).nativeElement;\r\n      let inputReference = formField.querySelector('.mat-form-field-flex');\r\n      let input = inputReference.querySelector('input');\r\n\r\n      formField.style.bottom = '100px';\r\n      formField.style.position = 'fixed';\r\n\r\n      typeInElement('Cali', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n      zone.simulateZoneExit();\r\n      fixture.detectChanges();\r\n\r\n      const inputBottom = inputReference.getBoundingClientRect().bottom;\r\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\r\n      const panelTop = panel.getBoundingClientRect().top;\r\n\r\n      expect(Math.floor(inputBottom)).toBe(Math.floor(panelTop),\r\n          `Expected panel top to match input bottom when there is only one option.`);\r\n\r\n      typeInElement('', input);\r\n      fixture.detectChanges();\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      const inputTop = inputReference.getBoundingClientRect().top;\r\n      const panelBottom = panel.getBoundingClientRect().bottom;\r\n\r\n      expect(Math.floor(inputTop)).toBe(Math.floor(panelBottom),\r\n          `Expected panel switch to the above position if the options no longer fit.`);\r\n    }));\r\n\r\n  });\r\n\r\n  describe('panel closing', () => {\r\n    let fixture: ComponentFixture<SimpleAutocomplete>;\r\n    let input: HTMLInputElement;\r\n    let trigger: MatAutocompleteTrigger;\r\n    let closingActionSpy: jasmine.Spy;\r\n    let closingActionsSub: Subscription;\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n\r\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      trigger = fixture.componentInstance.trigger;\r\n      closingActionSpy = jasmine.createSpy('closing action listener');\r\n      closingActionsSub = trigger.panelClosingActions.subscribe(closingActionSpy);\r\n    }));\r\n\r\n    afterEach(() => {\r\n      closingActionsSub.unsubscribe();\r\n    });\r\n\r\n    it('should emit panel close event when clicking away', () => {\r\n      expect(closingActionSpy).not.toHaveBeenCalled();\r\n      dispatchFakeEvent(document, 'click');\r\n      expect(closingActionSpy).toHaveBeenCalledWith(null);\r\n    });\r\n\r\n    it('should emit panel close event when tabbing out', () => {\r\n      const tabEvent = createKeyboardEvent('keydown', TAB);\r\n      input.focus();\r\n\r\n      expect(closingActionSpy).not.toHaveBeenCalled();\r\n      trigger._handleKeydown(tabEvent);\r\n      expect(closingActionSpy).toHaveBeenCalledWith(null);\r\n    });\r\n\r\n    it('should not emit when tabbing away from a closed panel', () => {\r\n      const tabEvent = createKeyboardEvent('keydown', TAB);\r\n\r\n      input.focus();\r\n      zone.simulateZoneExit();\r\n\r\n      trigger._handleKeydown(tabEvent);\r\n\r\n      // Ensure that it emitted once while the panel was open.\r\n      expect(closingActionSpy).toHaveBeenCalledTimes(1);\r\n\r\n      trigger._handleKeydown(tabEvent);\r\n\r\n      // Ensure that it didn't emit again when tabbing out again.\r\n      expect(closingActionSpy).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should emit panel close event when selecting an option', () => {\r\n      const option = overlayContainerElement.querySelector('mat-option') as HTMLElement;\r\n\r\n      expect(closingActionSpy).not.toHaveBeenCalled();\r\n      option.click();\r\n      expect(closingActionSpy).toHaveBeenCalledWith(jasmine.any(MatOptionSelectionChange));\r\n    });\r\n\r\n    it('should close the panel when pressing escape', () => {\r\n      const escapeEvent = createKeyboardEvent('keydown', ESCAPE);\r\n\r\n      expect(closingActionSpy).not.toHaveBeenCalled();\r\n      trigger._handleKeydown(escapeEvent);\r\n      expect(closingActionSpy).toHaveBeenCalledWith(null);\r\n    });\r\n  });\r\n\r\n  describe('without matInput', () => {\r\n    let fixture: ComponentFixture<AutocompleteWithNativeInput>;\r\n\r\n    beforeEach(() => {\r\n      fixture = createComponent(AutocompleteWithNativeInput);\r\n      fixture.detectChanges();\r\n    });\r\n\r\n    it('should not throw when clicking outside', fakeAsync(() => {\r\n      dispatchFakeEvent(fixture.debugElement.query(By.css('input')).nativeElement, 'focus');\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      expect(() => dispatchFakeEvent(document, 'click')).not.toThrow();\r\n    }));\r\n  });\r\n\r\n  describe('misc', () => {\r\n\r\n    it('should allow basic use without any forms directives', () => {\r\n      expect(() => {\r\n        const fixture = createComponent(AutocompleteWithoutForms);\r\n        fixture.detectChanges();\r\n\r\n        const input = fixture.debugElement.query(By.css('input')).nativeElement;\r\n        typeInElement('d', input);\r\n        fixture.detectChanges();\r\n\r\n        const options =\r\n            overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n        expect(options.length).toBe(1);\r\n      }).not.toThrowError();\r\n    });\r\n\r\n    it('should display an empty input when the value is undefined with ngModel', () => {\r\n      const fixture = createComponent(AutocompleteWithNgModel);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.debugElement.query(By.css('input')).nativeElement.value).toBe('');\r\n    });\r\n\r\n    it('should display the number when the selected option is the number zero', fakeAsync(() => {\r\n      const fixture = createComponent(AutocompleteWithNumbers);\r\n\r\n      fixture.componentInstance.selectedNumber = 0;\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(fixture.debugElement.query(By.css('input')).nativeElement.value).toBe('0');\r\n    }));\r\n\r\n    it('should work when input is wrapped in ngIf', () => {\r\n      const fixture = createComponent(NgIfAutocomplete);\r\n      fixture.detectChanges();\r\n\r\n      dispatchFakeEvent(fixture.debugElement.query(By.css('input')).nativeElement, 'focusin');\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.trigger.panelOpen)\r\n          .toBe(true, `Expected panel state to read open when input is focused.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toContain('One', `Expected panel to display when input is focused.`);\r\n      expect(overlayContainerElement.textContent)\r\n          .toContain('Two', `Expected panel to display when input is focused.`);\r\n    });\r\n\r\n    it('should filter properly with ngIf after setting the active item', () => {\r\n      const fixture = createComponent(NgIfAutocomplete);\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      fixture.detectChanges();\r\n\r\n      const DOWN_ARROW_EVENT = createKeyboardEvent('keydown', DOWN_ARROW);\r\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\r\n      fixture.detectChanges();\r\n\r\n      const input = fixture.debugElement.query(By.css('input')).nativeElement;\r\n      typeInElement('o', input);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.matOptions.length).toBe(2);\r\n    });\r\n\r\n    it('should throw if the user attempts to open the panel too early', () => {\r\n      const fixture = createComponent(AutocompleteWithoutPanel);\r\n      fixture.detectChanges();\r\n\r\n      expect(() => {\r\n        fixture.componentInstance.trigger.openPanel();\r\n      }).toThrow(getMatAutocompleteMissingPanelError());\r\n    });\r\n\r\n    it('should not throw on init, even if the panel is not defined', fakeAsync(() => {\r\n      expect(() => {\r\n        const fixture = createComponent(AutocompleteWithoutPanel);\r\n        fixture.componentInstance.control.setValue('Something');\r\n        fixture.detectChanges();\r\n        tick();\r\n      }).not.toThrow();\r\n    }));\r\n\r\n    it('should hide the label with a preselected form control value ' +\r\n      'and a disabled floating label', fakeAsync(() => {\r\n        const fixture = createComponent(AutocompleteWithFormsAndNonfloatingLabel);\r\n\r\n        fixture.detectChanges();\r\n        tick();\r\n        fixture.detectChanges();\r\n\r\n        const input = fixture.nativeElement.querySelector('input');\r\n        const label = fixture.nativeElement.querySelector('.mat-form-field-label');\r\n\r\n        expect(input.value).toBe('California');\r\n        expect(label.classList).not.toContain('mat-form-field-empty');\r\n      }));\r\n\r\n    it('should transfer the mat-autocomplete classes to the panel element', fakeAsync(() => {\r\n      const fixture = createComponent(SimpleAutocomplete);\r\n      fixture.detectChanges();\r\n\r\n      fixture.componentInstance.trigger.openPanel();\r\n      tick();\r\n      fixture.detectChanges();\r\n\r\n      const autocomplete = fixture.debugElement.nativeElement.querySelector('mat-autocomplete');\r\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\r\n\r\n      expect(autocomplete.classList).not.toContain('class-one');\r\n      expect(autocomplete.classList).not.toContain('class-two');\r\n\r\n      expect(panel.classList).toContain('class-one');\r\n      expect(panel.classList).toContain('class-two');\r\n    }));\r\n\r\n    it('should reset correctly when closed programmatically', fakeAsync(() => {\r\n      const scrolledSubject = new Subject();\r\n      const fixture = createComponent(SimpleAutocomplete, [\r\n        {\r\n          provide: ScrollDispatcher,\r\n          useValue: {scrolled: () => scrolledSubject.asObservable()}\r\n        },\r\n        {\r\n          provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n          useFactory: (overlay: Overlay) => () => overlay.scrollStrategies.close(),\r\n          deps: [Overlay]\r\n        }\r\n      ]);\r\n\r\n      fixture.detectChanges();\r\n      const trigger = fixture.componentInstance.trigger;\r\n\r\n      trigger.openPanel();\r\n      fixture.detectChanges();\r\n      zone.simulateZoneExit();\r\n\r\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\r\n\r\n      scrolledSubject.next();\r\n      fixture.detectChanges();\r\n\r\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to be closed.');\r\n    }));\r\n\r\n    it('should handle autocomplete being attached to number inputs', fakeAsync(() => {\r\n      const fixture = createComponent(AutocompleteWithNumberInputAndNgModel);\r\n      fixture.detectChanges();\r\n      const input = fixture.debugElement.query(By.css('input')).nativeElement;\r\n\r\n      typeInElement('1337', input);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.selectedValue).toBe(1337);\r\n    }));\r\n\r\n  });\r\n\r\n  it('should have correct width when opened', () => {\r\n    const widthFixture = createComponent(SimpleAutocomplete);\r\n    widthFixture.componentInstance.width = 300;\r\n    widthFixture.detectChanges();\r\n\r\n    widthFixture.componentInstance.trigger.openPanel();\r\n    widthFixture.detectChanges();\r\n\r\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\r\n    // Firefox, edge return a decimal value for width, so we need to parse and round it to verify\r\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(300);\r\n\r\n    widthFixture.componentInstance.trigger.closePanel();\r\n    widthFixture.detectChanges();\r\n\r\n    widthFixture.componentInstance.width = 500;\r\n    widthFixture.detectChanges();\r\n\r\n    widthFixture.componentInstance.trigger.openPanel();\r\n    widthFixture.detectChanges();\r\n\r\n    // Firefox, edge return a decimal value for width, so we need to parse and round it to verify\r\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(500);\r\n  });\r\n\r\n  it('should update the width while the panel is open', () => {\r\n    const widthFixture = createComponent(SimpleAutocomplete);\r\n\r\n    widthFixture.componentInstance.width = 300;\r\n    widthFixture.detectChanges();\r\n\r\n    widthFixture.componentInstance.trigger.openPanel();\r\n    widthFixture.detectChanges();\r\n\r\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\r\n    const input = widthFixture.debugElement.query(By.css('input')).nativeElement;\r\n\r\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(300);\r\n\r\n    widthFixture.componentInstance.width = 500;\r\n    widthFixture.detectChanges();\r\n\r\n    input.focus();\r\n    dispatchFakeEvent(input, 'input');\r\n    widthFixture.detectChanges();\r\n\r\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(500);\r\n  });\r\n\r\n  it('should update the panel width if the window is resized', fakeAsync(() => {\r\n    const widthFixture = createComponent(SimpleAutocomplete);\r\n\r\n    widthFixture.componentInstance.width = 300;\r\n    widthFixture.detectChanges();\r\n\r\n    widthFixture.componentInstance.trigger.openPanel();\r\n    widthFixture.detectChanges();\r\n\r\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\r\n\r\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(300);\r\n\r\n    widthFixture.componentInstance.width = 400;\r\n    widthFixture.detectChanges();\r\n\r\n    dispatchFakeEvent(window, 'resize');\r\n    tick(20);\r\n\r\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(400);\r\n  }));\r\n\r\n  it('should have panel width match host width by default', () => {\r\n    const widthFixture = createComponent(SimpleAutocomplete);\r\n\r\n    widthFixture.componentInstance.width = 300;\r\n    widthFixture.detectChanges();\r\n\r\n    widthFixture.componentInstance.trigger.openPanel();\r\n    widthFixture.detectChanges();\r\n\r\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\r\n\r\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(300);\r\n  });\r\n\r\n  it('should have panel width set to string value', () => {\r\n    const widthFixture = createComponent(SimpleAutocomplete);\r\n\r\n    widthFixture.componentInstance.width = 300;\r\n    widthFixture.detectChanges();\r\n\r\n    widthFixture.componentInstance.trigger.autocomplete.panelWidth = 'auto';\r\n    widthFixture.componentInstance.trigger.openPanel();\r\n    widthFixture.detectChanges();\r\n\r\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\r\n\r\n    expect(overlayPane.style.width).toBe('auto');\r\n  });\r\n\r\n  it('should have panel width set to number value', () => {\r\n    const widthFixture = createComponent(SimpleAutocomplete);\r\n\r\n    widthFixture.componentInstance.width = 300;\r\n    widthFixture.detectChanges();\r\n\r\n    widthFixture.componentInstance.trigger.autocomplete.panelWidth = 400;\r\n    widthFixture.componentInstance.trigger.openPanel();\r\n    widthFixture.detectChanges();\r\n\r\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\r\n\r\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(400);\r\n  });\r\n\r\n  it('should show the panel when the options are initialized later within a component with ' +\r\n    'OnPush change detection', fakeAsync(() => {\r\n      let fixture = createComponent(AutocompleteWithOnPushDelay);\r\n\r\n      fixture.detectChanges();\r\n      dispatchFakeEvent(fixture.debugElement.query(By.css('input')).nativeElement, 'focusin');\r\n      tick(1000);\r\n\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      Promise.resolve().then(() => {\r\n        let panel = overlayContainerElement.querySelector('.mat-autocomplete-panel') as HTMLElement;\r\n        let visibleClass = 'mat-autocomplete-visible';\r\n\r\n        fixture.detectChanges();\r\n        expect(panel.classList).toContain(visibleClass, `Expected panel to be visible.`);\r\n      });\r\n    }));\r\n\r\n  it('should emit an event when an option is selected', fakeAsync(() => {\r\n    let fixture = createComponent(AutocompleteWithSelectEvent);\r\n\r\n    fixture.detectChanges();\r\n    fixture.componentInstance.trigger.openPanel();\r\n    zone.simulateZoneExit();\r\n    fixture.detectChanges();\r\n\r\n    let options = overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n    let spy = fixture.componentInstance.optionSelected;\r\n\r\n    options[1].click();\r\n    tick();\r\n    fixture.detectChanges();\r\n\r\n    expect(spy).toHaveBeenCalledTimes(1);\r\n\r\n    let event = spy.calls.mostRecent().args[0] as MatAutocompleteSelectedEvent;\r\n\r\n    expect(event.source).toBe(fixture.componentInstance.autocomplete);\r\n    expect(event.option.value).toBe('Washington');\r\n  }));\r\n\r\n  it('should emit an event when a newly-added option is selected', fakeAsync(() => {\r\n    let fixture = createComponent(AutocompleteWithSelectEvent);\r\n\r\n    fixture.detectChanges();\r\n    fixture.componentInstance.trigger.openPanel();\r\n    tick();\r\n    fixture.detectChanges();\r\n\r\n    fixture.componentInstance.states.push('Puerto Rico');\r\n    fixture.detectChanges();\r\n    tick();\r\n    fixture.detectChanges();\r\n\r\n    let options = overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\r\n    let spy = fixture.componentInstance.optionSelected;\r\n\r\n    options[3].click();\r\n    tick();\r\n    fixture.detectChanges();\r\n\r\n    expect(spy).toHaveBeenCalledTimes(1);\r\n\r\n    let event = spy.calls.mostRecent().args[0] as MatAutocompleteSelectedEvent;\r\n\r\n    expect(event.source).toBe(fixture.componentInstance.autocomplete);\r\n    expect(event.option.value).toBe('Puerto Rico');\r\n  }));\r\n\r\n  it('should be able to set a custom panel connection element', () => {\r\n    const fixture = createComponent(AutocompleteWithDifferentOrigin);\r\n\r\n    fixture.detectChanges();\r\n    fixture.componentInstance.trigger.openPanel();\r\n    fixture.detectChanges();\r\n    zone.simulateZoneExit();\r\n\r\n    const overlayRect =\r\n        overlayContainerElement.querySelector('.cdk-overlay-pane')!.getBoundingClientRect();\r\n    const originRect = fixture.nativeElement.querySelector('.origin').getBoundingClientRect();\r\n\r\n    expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect.bottom),\r\n        'Expected autocomplete panel to align with the bottom of the new origin.');\r\n  });\r\n});\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field [floatLabel]=\"floatLabel\" [style.width.px]=\"width\">\r\n      <input\r\n        matInput\r\n        placeholder=\"State\"\r\n        [matAutocomplete]=\"auto\"\r\n        [matAutocompleteDisabled]=\"autocompleteDisabled\"\r\n        [formControl]=\"stateCtrl\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete class=\"class-one class-two\" #auto=\"matAutocomplete\" [displayWith]=\"displayFn\"\r\n      [disableRipple]=\"disableRipple\" (opened)=\"openedSpy()\" (closed)=\"closedSpy()\">\r\n      <mat-option *ngFor=\"let state of filteredStates\" [value]=\"state\">\r\n        <span>{{ state.code }}: {{ state.name }}</span>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass SimpleAutocomplete implements OnDestroy {\r\n  stateCtrl = new FormControl();\r\n  filteredStates: any[];\r\n  valueSub: Subscription;\r\n  floatLabel = 'auto';\r\n  width: number;\r\n  disableRipple = false;\r\n  autocompleteDisabled = false;\r\n  openedSpy = jasmine.createSpy('autocomplete opened spy');\r\n  closedSpy = jasmine.createSpy('autocomplete closed spy');\r\n\r\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\r\n  @ViewChild(MatAutocomplete) panel: MatAutocomplete;\r\n  @ViewChild(MatFormField) formField: MatFormField;\r\n  @ViewChildren(MatOption) options: QueryList<MatOption>;\r\n\r\n  states = [\r\n    {code: 'AL', name: 'Alabama'},\r\n    {code: 'CA', name: 'California'},\r\n    {code: 'FL', name: 'Florida'},\r\n    {code: 'KS', name: 'Kansas'},\r\n    {code: 'MA', name: 'Massachusetts'},\r\n    {code: 'NY', name: 'New York'},\r\n    {code: 'OR', name: 'Oregon'},\r\n    {code: 'PA', name: 'Pennsylvania'},\r\n    {code: 'TN', name: 'Tennessee'},\r\n    {code: 'VA', name: 'Virginia'},\r\n    {code: 'WY', name: 'Wyoming'},\r\n  ];\r\n\r\n\r\n  constructor() {\r\n    this.filteredStates = this.states;\r\n    this.valueSub = this.stateCtrl.valueChanges.subscribe(val => {\r\n      this.filteredStates = val ? this.states.filter((s) => s.name.match(new RegExp(val, 'gi')))\r\n                                : this.states;\r\n    });\r\n  }\r\n\r\n  displayFn(value: any): string {\r\n    return value ? value.name : value;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.valueSub.unsubscribe();\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field *ngIf=\"isVisible\">\r\n      <input matInput placeholder=\"Choose\" [matAutocomplete]=\"auto\" [formControl]=\"optionCtrl\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\r\n         {{option}}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass NgIfAutocomplete {\r\n  optionCtrl = new FormControl();\r\n  filteredOptions: Observable<any>;\r\n  isVisible = true;\r\n  options = ['One', 'Two', 'Three'];\r\n\r\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\r\n  @ViewChildren(MatOption) matOptions: QueryList<MatOption>;\r\n\r\n  constructor() {\r\n    this.filteredOptions = this.optionCtrl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((val: string) => {\r\n        return val ? this.options.filter(option => new RegExp(val, 'gi').test(option))\r\n                    : this.options.slice();\r\n      }));\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"State\" [matAutocomplete]=\"auto\"\r\n      (input)=\"onInput($event.target?.value)\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let state of filteredStates\" [value]=\"state\">\r\n        <span> {{ state }}  </span>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithoutForms {\r\n  filteredStates: any[];\r\n  states = ['Alabama', 'California', 'Florida'];\r\n\r\n  constructor() {\r\n    this.filteredStates = this.states.slice();\r\n  }\r\n\r\n  onInput(value: any) {\r\n    this.filteredStates = this.states.filter(s => new RegExp(value, 'gi').test(s));\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"State\" [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedState\"\r\n      (ngModelChange)=\"onInput($event)\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let state of filteredStates\" [value]=\"state\">\r\n        <span>{{ state }}</span>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithNgModel {\r\n  filteredStates: any[];\r\n  selectedState: string;\r\n  states = ['New York', 'Washington', 'Oregon'];\r\n\r\n  constructor() {\r\n    this.filteredStates = this.states.slice();\r\n  }\r\n\r\n  onInput(value: any) {\r\n    this.filteredStates = this.states.filter(s => new RegExp(value, 'gi').test(s));\r\n  }\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Number\" [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedNumber\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let number of numbers\" [value]=\"number\">\r\n        <span>{{ number }}</span>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithNumbers {\r\n  selectedNumber: number;\r\n  numbers = [0, 1, 2];\r\n}\r\n\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <mat-form-field>\r\n      <input type=\"text\" matInput [matAutocomplete]=\"auto\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let option of options\" [value]=\"option\">{{ option }}</mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithOnPushDelay implements OnInit {\r\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\r\n  options: string[];\r\n\r\n  ngOnInit() {\r\n    setTimeout(() => {\r\n      this.options = ['One'];\r\n    }, 1000);\r\n  }\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <input placeholder=\"Choose\" [matAutocomplete]=\"auto\" [formControl]=\"optionCtrl\">\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\r\n         {{option}}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithNativeInput {\r\n  optionCtrl = new FormControl();\r\n  filteredOptions: Observable<any>;\r\n  options = ['En', 'To', 'Tre', 'Fire', 'Fem'];\r\n\r\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\r\n  @ViewChildren(MatOption) matOptions: QueryList<MatOption>;\r\n\r\n  constructor() {\r\n    this.filteredOptions = this.optionCtrl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((val: string) => {\r\n        return val ? this.options.filter(option => new RegExp(val, 'gi').test(option))\r\n                    : this.options.slice();\r\n      }));\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  template: `<input placeholder=\"Choose\" [matAutocomplete]=\"auto\" [formControl]=\"control\">`\r\n})\r\nclass AutocompleteWithoutPanel {\r\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\r\n  control = new FormControl();\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field floatLabel=\"never\">\r\n      <input placeholder=\"State\" matInput [matAutocomplete]=\"auto\" [formControl]=\"formControl\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option value=\"California\">California</mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithFormsAndNonfloatingLabel {\r\n  formControl = new FormControl('California');\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"State\" [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedState\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-optgroup *ngFor=\"let group of stateGroups\" [label]=\"group.label\">\r\n        <mat-option *ngFor=\"let state of group.states\" [value]=\"state\">\r\n          <span>{{ state }}</span>\r\n        </mat-option>\r\n      </mat-optgroup>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithGroups {\r\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\r\n  selectedState: string;\r\n  stateGroups = [\r\n    {\r\n      title: 'One',\r\n      states: ['Alabama', 'California', 'Florida', 'Oregon']\r\n    },\r\n    {\r\n      title: 'Two',\r\n      states: ['Kansas', 'Massachusetts', 'New York', 'Pennsylvania']\r\n    },\r\n    {\r\n      title: 'Three',\r\n      states: ['Tennessee', 'Virginia', 'Wyoming', 'Alaska']\r\n    }\r\n  ];\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"State\" [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedState\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"optionSelected($event)\">\r\n      <mat-option *ngFor=\"let state of states\" [value]=\"state\">\r\n        <span>{{ state }}</span>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithSelectEvent {\r\n  selectedState: string;\r\n  states = ['New York', 'Washington', 'Oregon'];\r\n  optionSelected = jasmine.createSpy('optionSelected callback');\r\n\r\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\r\n  @ViewChild(MatAutocomplete) autocomplete: MatAutocomplete;\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <input [formControl]=\"formControl\" [matAutocomplete]=\"auto\"/>\r\n    <mat-autocomplete #auto=\"matAutocomplete\"></mat-autocomplete>\r\n  `\r\n})\r\nclass PlainAutocompleteInputWithFormControl {\r\n  formControl = new FormControl();\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-form-field>\r\n      <input type=\"number\" matInput [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedValue\">\r\n    </mat-form-field>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let value of values\" [value]=\"value\">{{value}}</mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithNumberInputAndNgModel {\r\n  selectedValue: number;\r\n  values = [1, 2, 3];\r\n}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <div>\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          [matAutocomplete]=\"auto\"\r\n          [matAutocompleteConnectedTo]=\"origin\"\r\n          [(ngModel)]=\"selectedValue\">\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div\r\n      class=\"origin\"\r\n      matAutocompleteOrigin\r\n      #origin=\"matAutocompleteOrigin\"\r\n      style=\"margin-top: 50px\">\r\n      Connection element\r\n    </div>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let value of values\" [value]=\"value\">{{value}}</mat-option>\r\n    </mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithDifferentOrigin {\r\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\r\n  selectedValue: string;\r\n  values = ['one', 'two', 'three'];\r\n}\r\n\r\n@Component({\r\n  template: `\r\n    <input autocomplete=\"changed\" [(ngModel)]=\"value\" [matAutocomplete]=\"auto\"/>\r\n    <mat-autocomplete #auto=\"matAutocomplete\"></mat-autocomplete>\r\n  `\r\n})\r\nclass AutocompleteWithNativeAutocompleteAttribute {\r\n  value: string;\r\n}\r\n\r\n@Component({\r\n  template: '<input [matAutocomplete]=\"null\" matAutocompleteDisabled>'\r\n})\r\nclass InputWithoutAutocompleteAndDisabled {\r\n}\r\n"]}