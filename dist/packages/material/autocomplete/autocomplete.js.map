{"version":3,"file":"autocomplete.js","sourceRoot":"","sources":["../../../../src/lib/autocomplete/autocomplete.ts"],"names":[],"mappings":";;;;;;;;;;;;AAOA,sCAgBuB;AACvB,+CAMgC;AAChC,0CAA6D;AAC7D,kDAA4D;;;;;AAO5D,IAAI,4BAA4B,GAAG,CAAC,CAAC;;AAGrC;AAAA;IACE;IAES,MAAuB;IAEvB,MAAiB;QAFjB,WAAM,GAAN,MAAM,CAAiB;QAEvB,WAAM,GAAN,MAAM,CAAW;KAAK;uCA/CjC;IAgDC,CAAA;AANY,oEAA4B;;;AAUzC;;;AAAA;;;8BApDA;IAoDmC,CAAA;AAAtB,kDAAmB;AACnB,QAAA,yBAAyB,GAAG,yBAAkB,CAAC,mBAAmB,CAAC;;AASnE,QAAA,gCAAgC,GACzC,IAAI,qBAAc,CAAgC,kCAAkC,EAAE;IACpF,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,wCAAwC;CAClD,CAAC;;AAGN;IACE,MAAM,CAAC,EAAC,qBAAqB,EAAE,KAAK,EAAC,CAAC;CACvC;AAFD,4FAEC;;IAkBoC,mCAAyB;IAuE5D,yBACU,kBAAqC,EACrC,WAAuB,EACW;QAH5C,YAIE,iBAAO,SAGR;QANS,wBAAkB,GAAlB,kBAAkB,CAAmB;QACrC,iBAAW,GAAX,WAAW,CAAY;;0BAlEZ,KAAK;wBAIP,KAAK;;4BAegC,IAAI;;+BAqBxD,IAAI,mBAAY,EAAgC;;uBAGJ,IAAI,mBAAY,EAAQ;;uBAGxB,IAAI,mBAAY,EAAQ;2BAajC,EAAE;;mBAG5B,sBAAoB,4BAA4B,EAAI;QAQ/D,KAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC,QAAQ,CAAC,qBAAqB,CAAC;;KAChE;IApED,sBAAI,mCAAM;QADV,8CAA8C;;QAC9C,cAAwB,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;;;OAAA;0BAuB5D,kDAAqB;;;;;sBAAc,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC;aAC1E,UAA0B,KAAc;YACtC,IAAI,CAAC,sBAAsB,GAAG,gCAAqB,CAAC,KAAK,CAAC,CAAC;SAC5D;;;;0BAwBG,sCAAS;;;;;kBAAC,KAAa;;YACzB,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1B,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,EAAxC,CAAwC,CAAC,CAAC;gBAChF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,GAAG,EAAE,CAAC;aAC/C;;;;;IAgBH,4CAAkB,GAAlB;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,iCAA0B,CAAY,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;;QAEtF,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;IAED;;;OAGG;;;;;IACH,uCAAa;;;;IAAb,UAAc,SAAiB;QAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;SAChD;KACF;IAED,qCAAqC;;IACrC,uCAAa;IAAb;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KAC5D;IAED,8DAA8D;;IAC9D,wCAAc;IAAd;QACE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;QAC7D,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QAC7D,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;IAED,gCAAgC;;IAChC,0CAAgB;IAAhB,UAAiB,MAAiB;QAChC,IAAM,KAAK,GAAG,IAAI,4BAA4B,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC7D,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACjC;;gBAjIF,gBAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,kBAAkB;oBAC5B,WAAW,EAAE,mBAAmB;oBAChC,SAAS,EAAE,CAAC,kBAAkB,CAAC;oBAC/B,aAAa,EAAE,wBAAiB,CAAC,IAAI;oBACrC,eAAe,EAAE,8BAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,iBAAiB;oBAC3B,MAAM,EAAE,CAAC,eAAe,CAAC;oBACzB,IAAI,EAAE;wBACJ,OAAO,EAAE,kBAAkB;qBAC5B;oBACD,SAAS,EAAE;wBACT,EAAC,OAAO,EAAE,kCAA2B,EAAE,WAAW,EAAE,eAAe,EAAC;qBACrE;iBACF;;;;gBAvEC,wBAAiB;gBANjB,iBAAU;gDAwJP,aAAM,SAAC,wCAAgC;;;6BA5DzC,gBAAS,SAAC,kBAAW;0BAGrB,gBAAS,SAAC,OAAO;4BAGjB,sBAAe,SAAC,gBAAS,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE;iCAGhD,sBAAe,SAAC,kBAAW;gCAG3B,YAAK;0CAML,YAAK;+BAWL,YAAK;mCAGL,aAAM;2BAIN,aAAM;2BAGN,aAAM;8BAMN,YAAK,SAAC,OAAO;;0BApJhB;EAyFqC,iCAAyB;AAAjD,0CAAe","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Input,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n  InjectionToken,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {\r\n  MatOption,\r\n  MatOptgroup,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  mixinDisableRipple,\r\n  CanDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n\r\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueAutocompleteIdCounter = 0;\r\n\r\n/** Event object that is emitted when an autocomplete option is selected. */\r\nexport class MatAutocompleteSelectedEvent {\r\n  constructor(\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    public source: MatAutocomplete,\r\n    /** Option that was selected. */\r\n    public option: MatOption) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatAutocomplete.\r\n/** @docs-private */\r\nexport class MatAutocompleteBase {}\r\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\r\n\r\n/** Default `mat-autocomplete` options that can be overridden. */\r\nexport interface MatAutocompleteDefaultOptions {\r\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\r\n  autoActiveFirstOption?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\r\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\r\n  return {autoActiveFirstOption: false};\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-autocomplete',\r\n  templateUrl: 'autocomplete.html',\r\n  styleUrls: ['autocomplete.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  exportAs: 'matAutocomplete',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'class': 'mat-autocomplete'\r\n  },\r\n  providers: [\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\r\n  ]\r\n})\r\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\r\n  CanDisableRipple {\r\n\r\n  /** Manages active item in option list based on key events. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** Whether the autocomplete panel should be visible, depending on option length. */\r\n  showPanel: boolean = false;\r\n\r\n  /** Whether the autocomplete panel is open. */\r\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\r\n  _isOpen: boolean = false;\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n  /** Element for the panel containing the autocomplete options. */\r\n  @ViewChild('panel') panel: ElementRef;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Function that maps an option's control value to its display value in the trigger. */\r\n  @Input() displayWith: ((value: any) => string) | null = null;\r\n\r\n  /**\r\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n   */\r\n  @Input()\r\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\r\n  set autoActiveFirstOption(value: boolean) {\r\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\r\n  }\r\n  private _autoActiveFirstOption: boolean;\r\n\r\n  /**\r\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\r\n   * match the width of its host.\r\n   */\r\n  @Input() panelWidth: string | number;\r\n\r\n  /** Event that is emitted whenever an option from the list is selected. */\r\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\r\n      new EventEmitter<MatAutocompleteSelectedEvent>();\r\n\r\n  /** Event that is emitted when the autocomplete panel is opened. */\r\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Event that is emitted when the autocomplete panel is closed. */\r\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n   * inside the overlay container to allow for easy styling.\r\n   */\r\n  @Input('class')\r\n  set classList(value: string) {\r\n    if (value && value.length) {\r\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\r\n      this._elementRef.nativeElement.className = '';\r\n    }\r\n  }\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _elementRef: ElementRef,\r\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\r\n    super();\r\n\r\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\r\n    // Set the initial visibility state.\r\n    this._setVisibility();\r\n  }\r\n\r\n  /**\r\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n   * above or below the fold, as they are not actually being focused when active.\r\n   */\r\n  _setScrollTop(scrollTop: number): void {\r\n    if (this.panel) {\r\n      this.panel.nativeElement.scrollTop = scrollTop;\r\n    }\r\n  }\r\n\r\n  /** Returns the panel's scrollTop. */\r\n  _getScrollTop(): number {\r\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n  }\r\n\r\n  /** Panel should hide itself when the option list is empty. */\r\n  _setVisibility() {\r\n    this.showPanel = !!this.options.length;\r\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\r\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Emits the `select` event. */\r\n  _emitSelectEvent(option: MatOption): void {\r\n    const event = new MatAutocompleteSelectedEvent(this, option);\r\n    this.optionSelected.emit(event);\r\n  }\r\n}\r\n\r\n"]}