{"version":3,"file":"button.spec.js","sourceRoot":"","sources":["../../../../src/lib/button/button.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {async, ComponentFixture, TestBed} from '@angular/core/testing';\r\nimport {Component, DebugElement} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MatButtonModule, MatButton} from './index';\r\nimport {MatRipple, ThemePalette} from '@angular/material/core';\r\n\r\n\r\ndescribe('MatButton', () => {\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatButtonModule],\r\n      declarations: [TestApp],\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  // General button tests\r\n  it('should apply class based on color attribute', () => {\r\n    let fixture = TestBed.createComponent(TestApp);\r\n\r\n    let testComponent = fixture.debugElement.componentInstance;\r\n    let buttonDebugElement = fixture.debugElement.query(By.css('button'));\r\n    let aDebugElement = fixture.debugElement.query(By.css('a'));\r\n\r\n    testComponent.buttonColor = 'primary';\r\n    fixture.detectChanges();\r\n    expect(buttonDebugElement.nativeElement.classList.contains('mat-primary')).toBe(true);\r\n    expect(aDebugElement.nativeElement.classList.contains('mat-primary')).toBe(true);\r\n\r\n    testComponent.buttonColor = 'accent';\r\n    fixture.detectChanges();\r\n    expect(buttonDebugElement.nativeElement.classList.contains('mat-accent')).toBe(true);\r\n    expect(aDebugElement.nativeElement.classList.contains('mat-accent')).toBe(true);\r\n\r\n    testComponent.buttonColor = null;\r\n    fixture.detectChanges();\r\n\r\n    expect(buttonDebugElement.nativeElement.classList).not.toContain('mat-accent');\r\n    expect(aDebugElement.nativeElement.classList).not.toContain('mat-accent');\r\n  });\r\n\r\n  it('should expose the ripple instance', () => {\r\n    const fixture = TestBed.createComponent(TestApp);\r\n    const button = fixture.debugElement.query(By.css('button')).componentInstance as MatButton;\r\n\r\n    expect(button.ripple).toBeTruthy();\r\n  });\r\n\r\n  it('should should not clear previous defined classes', () => {\r\n    let fixture = TestBed.createComponent(TestApp);\r\n    let testComponent = fixture.debugElement.componentInstance;\r\n    let buttonDebugElement = fixture.debugElement.query(By.css('button'));\r\n\r\n    buttonDebugElement.nativeElement.classList.add('custom-class');\r\n\r\n    testComponent.buttonColor = 'primary';\r\n    fixture.detectChanges();\r\n\r\n    expect(buttonDebugElement.nativeElement.classList.contains('mat-primary')).toBe(true);\r\n    expect(buttonDebugElement.nativeElement.classList.contains('custom-class')).toBe(true);\r\n\r\n    testComponent.buttonColor = 'accent';\r\n    fixture.detectChanges();\r\n\r\n    expect(buttonDebugElement.nativeElement.classList.contains('mat-primary')).toBe(false);\r\n    expect(buttonDebugElement.nativeElement.classList.contains('mat-accent')).toBe(true);\r\n    expect(buttonDebugElement.nativeElement.classList.contains('custom-class')).toBe(true);\r\n  });\r\n\r\n  describe('button[mat-fab]', () => {\r\n    it('should have accent palette by default', () => {\r\n      const fixture = TestBed.createComponent(TestApp);\r\n      const fabButtonDebugEl = fixture.debugElement.query(By.css('button[mat-fab]'));\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(fabButtonDebugEl.nativeElement.classList)\r\n        .toContain('mat-accent', 'Expected fab buttons to use accent palette by default');\r\n    });\r\n  });\r\n\r\n  describe('button[mat-mini-fab]', () => {\r\n    it('should have accent palette by default', () => {\r\n      const fixture = TestBed.createComponent(TestApp);\r\n      const miniFabButtonDebugEl = fixture.debugElement.query(By.css('button[mat-mini-fab]'));\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(miniFabButtonDebugEl.nativeElement.classList)\r\n        .toContain('mat-accent', 'Expected mini-fab buttons to use accent palette by default');\r\n    });\r\n  });\r\n\r\n  // Regular button tests\r\n  describe('button[mat-button]', () => {\r\n    it('should handle a click on the button', () => {\r\n      let fixture = TestBed.createComponent(TestApp);\r\n      let testComponent = fixture.debugElement.componentInstance;\r\n      let buttonDebugElement = fixture.debugElement.query(By.css('button'));\r\n\r\n      buttonDebugElement.nativeElement.click();\r\n      expect(testComponent.clickCount).toBe(1);\r\n    });\r\n\r\n    it('should not increment if disabled', () => {\r\n      let fixture = TestBed.createComponent(TestApp);\r\n      let testComponent = fixture.debugElement.componentInstance;\r\n      let buttonDebugElement = fixture.debugElement.query(By.css('button'));\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      buttonDebugElement.nativeElement.click();\r\n\r\n      expect(testComponent.clickCount).toBe(0);\r\n    });\r\n\r\n    it('should disable the native button element', () => {\r\n      let fixture = TestBed.createComponent(TestApp);\r\n      let buttonNativeElement = fixture.nativeElement.querySelector('button');\r\n      expect(buttonNativeElement.disabled).toBeFalsy('Expected button not to be disabled');\r\n\r\n      fixture.componentInstance.isDisabled = true;\r\n      fixture.detectChanges();\r\n      expect(buttonNativeElement.disabled).toBeTruthy('Expected button to be disabled');\r\n    });\r\n\r\n  });\r\n\r\n  // Anchor button tests\r\n  describe('a[mat-button]', () => {\r\n    it('should not redirect if disabled', () => {\r\n      let fixture = TestBed.createComponent(TestApp);\r\n      let testComponent = fixture.debugElement.componentInstance;\r\n      let buttonDebugElement = fixture.debugElement.query(By.css('a'));\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      buttonDebugElement.nativeElement.click();\r\n    });\r\n\r\n    it('should remove tabindex if disabled', () => {\r\n      let fixture = TestBed.createComponent(TestApp);\r\n      let testComponent = fixture.debugElement.componentInstance;\r\n      let buttonDebugElement = fixture.debugElement.query(By.css('a'));\r\n      expect(buttonDebugElement.nativeElement.getAttribute('tabIndex')).toBe(null);\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n      expect(buttonDebugElement.nativeElement.getAttribute('tabIndex')).toBe('-1');\r\n    });\r\n\r\n    it('should add aria-disabled attribute if disabled', () => {\r\n      let fixture = TestBed.createComponent(TestApp);\r\n      let testComponent = fixture.debugElement.componentInstance;\r\n      let buttonDebugElement = fixture.debugElement.query(By.css('a'));\r\n      fixture.detectChanges();\r\n      expect(buttonDebugElement.nativeElement.getAttribute('aria-disabled')).toBe('false');\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n      expect(buttonDebugElement.nativeElement.getAttribute('aria-disabled')).toBe('true');\r\n    });\r\n\r\n    it('should not add aria-disabled attribute if disabled is false', () => {\r\n      let fixture = TestBed.createComponent(TestApp);\r\n      let testComponent = fixture.debugElement.componentInstance;\r\n      let buttonDebugElement = fixture.debugElement.query(By.css('a'));\r\n      fixture.detectChanges();\r\n      expect(buttonDebugElement.nativeElement.getAttribute('aria-disabled'))\r\n        .toBe('false', 'Expect aria-disabled=\"false\"');\r\n      expect(buttonDebugElement.nativeElement.getAttribute('disabled'))\r\n        .toBeNull('Expect disabled=\"false\"');\r\n\r\n      testComponent.isDisabled = false;\r\n      fixture.detectChanges();\r\n      expect(buttonDebugElement.nativeElement.getAttribute('aria-disabled'))\r\n        .toBe('false', 'Expect no aria-disabled');\r\n      expect(buttonDebugElement.nativeElement.getAttribute('disabled'))\r\n        .toBeNull('Expect no disabled');\r\n    });\r\n\r\n    it('should be able to set a custom tabindex', () => {\r\n      let fixture = TestBed.createComponent(TestApp);\r\n      let testComponent = fixture.debugElement.componentInstance;\r\n      let buttonElement = fixture.debugElement.query(By.css('a')).nativeElement;\r\n\r\n      fixture.componentInstance.tabIndex = 3;\r\n      fixture.detectChanges();\r\n\r\n      expect(buttonElement.getAttribute('tabIndex'))\r\n          .toBe('3', 'Expected custom tabindex to be set');\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(buttonElement.getAttribute('tabIndex'))\r\n          .toBe('-1', 'Expected custom tabindex to be overwritten when disabled.');\r\n    });\r\n  });\r\n\r\n  // Ripple tests.\r\n  describe('button ripples', () => {\r\n    let fixture: ComponentFixture<TestApp>;\r\n    let testComponent: TestApp;\r\n    let buttonDebugElement: DebugElement;\r\n    let buttonRippleDebugElement: DebugElement;\r\n    let buttonRippleInstance: MatRipple;\r\n    let anchorDebugElement: DebugElement;\r\n    let anchorRippleDebugElement: DebugElement;\r\n    let anchorRippleInstance: MatRipple;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(TestApp);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.componentInstance;\r\n\r\n      buttonDebugElement = fixture.debugElement.query(By.css('button[mat-button]'));\r\n      buttonRippleDebugElement = buttonDebugElement.query(By.directive(MatRipple));\r\n      buttonRippleInstance = buttonRippleDebugElement.injector.get<MatRipple>(MatRipple);\r\n\r\n      anchorDebugElement = fixture.debugElement.query(By.css('a[mat-button]'));\r\n      anchorRippleDebugElement = anchorDebugElement.query(By.directive(MatRipple));\r\n      anchorRippleInstance = anchorRippleDebugElement.injector.get<MatRipple>(MatRipple);\r\n    });\r\n\r\n    it('should disable the ripple if matRippleDisabled input is set', () => {\r\n      expect(buttonRippleInstance.disabled).toBeFalsy();\r\n\r\n      testComponent.rippleDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(buttonRippleInstance.disabled).toBeTruthy();\r\n    });\r\n\r\n    it('should disable the ripple when the button is disabled', () => {\r\n      expect(buttonRippleInstance.disabled).toBeFalsy(\r\n        'Expected an enabled button[mat-button] to have an enabled ripple'\r\n      );\r\n      expect(anchorRippleInstance.disabled).toBeFalsy(\r\n        'Expected an enabled a[mat-button] to have an enabled ripple'\r\n      );\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(buttonRippleInstance.disabled).toBeTruthy(\r\n        'Expected a disabled button[mat-button] not to have an enabled ripple'\r\n      );\r\n      expect(anchorRippleInstance.disabled).toBeTruthy(\r\n        'Expected a disabled a[mat-button] not to have an enabled ripple'\r\n      );\r\n    });\r\n  });\r\n});\r\n\r\n/** Test component that contains an MatButton. */\r\n@Component({\r\n  selector: 'test-app',\r\n  template: `\r\n    <button [tabIndex]=\"tabIndex\" mat-button type=\"button\" (click)=\"increment()\"\r\n      [disabled]=\"isDisabled\" [color]=\"buttonColor\" [disableRipple]=\"rippleDisabled\">\r\n      Go\r\n    </button>\r\n    <a [tabIndex]=\"tabIndex\" href=\"http://www.google.com\" mat-button [disabled]=\"isDisabled\"\r\n      [color]=\"buttonColor\">\r\n      Link\r\n    </a>\r\n    <button mat-fab>Fab Button</button>\r\n    <button mat-mini-fab>Mini Fab Button</button>\r\n  `\r\n})\r\nclass TestApp {\r\n  clickCount: number = 0;\r\n  isDisabled: boolean = false;\r\n  rippleDisabled: boolean = false;\r\n  buttonColor: ThemePalette;\r\n  tabIndex: number;\r\n\r\n  increment() {\r\n    this.clickCount++;\r\n  }\r\n}\r\n"]}