{"version":3,"file":"menu-directive.js","sourceRoot":"","sources":["../../../../src/lib/menu/menu-directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  TemplateRef,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\r\nimport {startWith, switchMap, take} from 'rxjs/operators';\r\nimport {matMenuAnimations} from './menu-animations';\r\nimport {MatMenuContent} from './menu-content';\r\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\nimport {AnimationEvent} from '@angular/animations';\r\n\r\n\r\n/** Default `mat-menu` options that can be overridden. */\r\nexport interface MatMenuDefaultOptions {\r\n  /** The x-axis position of the menu. */\r\n  xPosition: MenuPositionX;\r\n\r\n  /** The y-axis position of the menu. */\r\n  yPosition: MenuPositionY;\r\n\r\n  /** Whether the menu should overlap the menu trigger. */\r\n  overlapTrigger: boolean;\r\n\r\n  /** Class to be applied to the menu's backdrop. */\r\n  backdropClass: string;\r\n\r\n  /** Whether the menu has a backdrop. */\r\n  hasBackdrop?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-menu`. */\r\nexport const MAT_MENU_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\r\n  return {\r\n    overlapTrigger: true,\r\n    xPosition: 'after',\r\n    yPosition: 'below',\r\n    backdropClass: 'cdk-overlay-transparent-backdrop',\r\n  };\r\n}\r\n/**\r\n * Start elevation for the menu panel.\r\n * @docs-private\r\n */\r\nconst MAT_MENU_BASE_ELEVATION = 2;\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-menu',\r\n  templateUrl: 'menu.html',\r\n  styleUrls: ['menu.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matMenu',\r\n  animations: [\r\n    matMenuAnimations.transformMenu,\r\n    matMenuAnimations.fadeInItems\r\n  ],\r\n  providers: [\r\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\r\n  ]\r\n})\r\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\r\n  private _keyManager: FocusKeyManager<MatMenuItem>;\r\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\r\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\r\n  private _previousElevation: string;\r\n\r\n  /** Menu items inside the current menu. */\r\n  private _items: MatMenuItem[] = [];\r\n\r\n  /** Emits whenever the amount of menu items changes. */\r\n  private _itemChanges = new Subject<MatMenuItem[]>();\r\n\r\n  /** Subscription to tab events on the menu panel */\r\n  private _tabSubscription = Subscription.EMPTY;\r\n\r\n  /** Config object to be passed into the menu's ngClass */\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Current state of the panel animation. */\r\n  _panelAnimationState: 'void' | 'enter' = 'void';\r\n\r\n  /** Emits whenever an animation on the menu completes. */\r\n  _animationDone = new Subject<AnimationEvent>();\r\n\r\n  /** Whether the menu is animating. */\r\n  _isAnimating: boolean;\r\n\r\n  /** Parent menu of the current menu panel. */\r\n  parentMenu: MatMenuPanel | undefined;\r\n\r\n  /** Layout direction of the menu. */\r\n  direction: Direction;\r\n\r\n  /** Class to be added to the backdrop element. */\r\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\r\n\r\n  /** Position of the menu in the X axis. */\r\n  @Input()\r\n  get xPosition(): MenuPositionX { return this._xPosition; }\r\n  set xPosition(value: MenuPositionX) {\r\n    if (value !== 'before' && value !== 'after') {\r\n      throwMatMenuInvalidPositionX();\r\n    }\r\n    this._xPosition = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** Position of the menu in the Y axis. */\r\n  @Input()\r\n  get yPosition(): MenuPositionY { return this._yPosition; }\r\n  set yPosition(value: MenuPositionY) {\r\n    if (value !== 'above' && value !== 'below') {\r\n      throwMatMenuInvalidPositionY();\r\n    }\r\n    this._yPosition = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\r\n\r\n  /**\r\n   * List of the items inside of a menu.\r\n   * @deprecated\r\n   * @breaking-change 7.0.0\r\n   */\r\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\r\n\r\n  /**\r\n   * Menu content that will be rendered lazily.\r\n   * @docs-private\r\n   */\r\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\r\n\r\n  /** Whether the menu should overlap its trigger. */\r\n  @Input()\r\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\r\n  set overlapTrigger(value: boolean) {\r\n    this._overlapTrigger = coerceBooleanProperty(value);\r\n  }\r\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\r\n\r\n  /** Whether the menu has a backdrop. */\r\n  @Input()\r\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\r\n  set hasBackdrop(value: boolean | undefined) {\r\n    this._hasBackdrop = coerceBooleanProperty(value);\r\n  }\r\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\r\n\r\n  /**\r\n   * This method takes classes set on the host mat-menu element and applies them on the\r\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing menu from outside the component.\r\n   * @param classes list of class names\r\n   */\r\n  @Input('class')\r\n  set panelClass(classes: string) {\r\n    if (classes && classes.length) {\r\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\r\n        obj[className] = true;\r\n        return obj;\r\n      }, {});\r\n\r\n      this._elementRef.nativeElement.className = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method takes classes set on the host mat-menu element and applies them on the\r\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing menu from outside the component.\r\n   * @deprecated Use `panelClass` instead.\r\n   * @breaking-change 7.0.0\r\n   */\r\n  @Input()\r\n  get classList(): string { return this.panelClass; }\r\n  set classList(classes: string) { this.panelClass = classes; }\r\n\r\n  /** Event emitted when the menu is closed. */\r\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\r\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\r\n\r\n  /**\r\n   * Event emitted when the menu is closed.\r\n   * @deprecated Switch to `closed` instead\r\n   * @breaking-change 7.0.0\r\n   */\r\n  @Output() close = this.closed;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _ngZone: NgZone,\r\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\r\n\r\n  ngOnInit() {\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\r\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabSubscription.unsubscribe();\r\n    this.closed.complete();\r\n  }\r\n\r\n  /** Stream that emits whenever the hovered menu item changes. */\r\n  _hovered(): Observable<MatMenuItem> {\r\n    return this._itemChanges.pipe(\r\n      startWith(this._items),\r\n      switchMap(items => merge(...items.map(item => item._hovered)))\r\n    );\r\n  }\r\n\r\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    const keyCode = event.keyCode;\r\n\r\n    switch (keyCode) {\r\n      case ESCAPE:\r\n        this.closed.emit('keydown');\r\n        event.stopPropagation();\r\n      break;\r\n      case LEFT_ARROW:\r\n        if (this.parentMenu && this.direction === 'ltr') {\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      case RIGHT_ARROW:\r\n        if (this.parentMenu && this.direction === 'rtl') {\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      default:\r\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\r\n          this._keyManager.setFocusOrigin('keyboard');\r\n        }\r\n\r\n        this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the first item in the menu.\r\n   * @param origin Action from which the focus originated. Used to set the correct styling.\r\n   */\r\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\r\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\r\n    if (this.lazyContent) {\r\n      this._ngZone.onStable.asObservable()\r\n        .pipe(take(1))\r\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\r\n    } else {\r\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\r\n   * the user to start from the first option when pressing the down arrow.\r\n   */\r\n  resetActiveItem() {\r\n    this._keyManager.setActiveItem(-1);\r\n  }\r\n\r\n  /**\r\n   * Sets the menu panel elevation.\r\n   * @param depth Number of parent menus that come before the menu.\r\n   */\r\n  setElevation(depth: number): void {\r\n    // The elevation starts at the base and increases by one for each level.\r\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\r\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\r\n\r\n    if (!customElevation || customElevation === this._previousElevation) {\r\n      if (this._previousElevation) {\r\n        this._classList[this._previousElevation] = false;\r\n      }\r\n\r\n      this._classList[newElevation] = true;\r\n      this._previousElevation = newElevation;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a menu item with the menu.\r\n   * @docs-private\r\n   */\r\n  addItem(item: MatMenuItem) {\r\n    // We register the items through this method, rather than picking them up through\r\n    // `ContentChildren`, because we need the items to be picked up by their closest\r\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\r\n    // all descendant items will bleed into the top-level menu in the case where the consumer\r\n    // has `mat-menu` instances nested inside each other.\r\n    if (this._items.indexOf(item) === -1) {\r\n      this._items.push(item);\r\n      this._itemChanges.next(this._items);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the menu.\r\n   * @docs-private\r\n   */\r\n  removeItem(item: MatMenuItem) {\r\n    const index = this._items.indexOf(item);\r\n\r\n    if (this._items.indexOf(item) > -1) {\r\n      this._items.splice(index, 1);\r\n      this._itemChanges.next(this._items);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds classes to the menu panel based on its position. Can be used by\r\n   * consumers to add specific styling based on the position.\r\n   * @param posX Position of the menu along the x axis.\r\n   * @param posY Position of the menu along the y axis.\r\n   * @docs-private\r\n   */\r\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\r\n    const classes = this._classList;\r\n    classes['mat-menu-before'] = posX === 'before';\r\n    classes['mat-menu-after'] = posX === 'after';\r\n    classes['mat-menu-above'] = posY === 'above';\r\n    classes['mat-menu-below'] = posY === 'below';\r\n  }\r\n\r\n  /** Starts the enter animation. */\r\n  _startAnimation() {\r\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\r\n    this._panelAnimationState = 'enter';\r\n  }\r\n\r\n  /** Resets the panel animation to its initial state. */\r\n  _resetAnimation() {\r\n    // @breaking-change 7.0.0 Combine with _startAnimation.\r\n    this._panelAnimationState = 'void';\r\n  }\r\n\r\n  /** Callback that is invoked when the panel animation completes. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    this._animationDone.next(event);\r\n    this._isAnimating = false;\r\n\r\n    // Scroll the content element to the top once the animation is done. This is necessary, because\r\n    // we move focus to the first item while it's still being animated, which can throw the browser\r\n    // off when it determines the scroll position. Alternatively we can move focus when the\r\n    // animation is done, however moving focus asynchronously will interrupt screen readers\r\n    // which are in the process of reading out the menu already. We take the `element` from\r\n    // the `event` since we can't use a `ViewChild` to access the pane.\r\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\r\n      event.element.scrollTop = 0;\r\n    }\r\n  }\r\n}\r\n"]}