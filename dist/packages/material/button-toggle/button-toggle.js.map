{"version":3,"file":"button-toggle.js","sourceRoot":"","sources":["../../../../src/lib/button-toggle/button-toggle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Attribute,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  mixinDisabled,\r\n  mixinDisableRipple\r\n} from '@angular/material/core';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\n\r\n/** Acceptable types for a button toggle. */\r\nexport type ToggleType = 'checkbox' | 'radio';\r\n\r\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\r\n/** @docs-private */\r\nexport class MatButtonToggleGroupBase {}\r\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\r\n\r\n/**\r\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatButtonToggleGroup),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * @deprecated Use `MatButtonToggleGroup` instead.\r\n * @breaking-change 7.0.0\r\n */\r\nexport class MatButtonToggleGroupMultiple {}\r\n\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Change event object emitted by MatButtonToggle. */\r\nexport class MatButtonToggleChange {\r\n  constructor(\r\n    /** The MatButtonToggle that emits the event. */\r\n    public source: MatButtonToggle,\r\n\r\n    /** The value assigned to the MatButtonToggle. */\r\n    public value: any) {}\r\n}\r\n\r\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\r\n@Directive({\r\n  selector: 'mat-button-toggle-group',\r\n  providers: [\r\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\r\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\r\n  ],\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'role': 'group',\r\n    'class': 'mat-button-toggle-group',\r\n    '[class.mat-button-toggle-vertical]': 'vertical'\r\n  },\r\n  exportAs: 'matButtonToggleGroup',\r\n})\r\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\r\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\r\n\r\n  private _vertical = false;\r\n  private _multiple = false;\r\n  private _selectionModel: SelectionModel<MatButtonToggle>;\r\n\r\n  /**\r\n   * Reference to the raw value that the consumer tried to assign. The real\r\n   * value will exaclude any values from this one that don't correspond to a\r\n   * toggle. Useful for the cases where the value is assigned before the toggles\r\n   * have been initialized or at the same that they're being swapped out.\r\n   */\r\n  private _rawValue: any;\r\n\r\n  /**\r\n   * The method to be called in order to update ngModel.\r\n   * Now `ngModel` binding is not supported in multiple selection mode.\r\n   */\r\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  _onTouched: () => any = () => {};\r\n\r\n  /** Child button toggle buttons. */\r\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\r\n\r\n  /** `name` attribute for the underlying `input` element. */\r\n  @Input()\r\n  get name(): string { return this._name; }\r\n  set name(value: string) {\r\n    this._name = value;\r\n\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\r\n    }\r\n  }\r\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether the toggle group is vertical. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Value of the toggle group. */\r\n  @Input()\r\n  get value(): any {\r\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\r\n\r\n    if (this.multiple) {\r\n      return selected.map(toggle => toggle.value);\r\n    }\r\n\r\n    return selected[0] ? selected[0].value : undefined;\r\n  }\r\n  set value(newValue: any) {\r\n    this._setSelectionByValue(newValue);\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  /**\r\n   * Event that emits whenever the value of the group changes.\r\n   * Used to facilitate two-way data binding.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange = new EventEmitter<any>();\r\n\r\n  /** Selected button toggles in the group. */\r\n  get selected() {\r\n    const selected = this._selectionModel.selected;\r\n    return this.multiple ? selected : (selected[0] || null);\r\n  }\r\n\r\n  /** Whether multiple button toggles can be selected. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Event emitted when the group's value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(private _changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value Value to be set to the model.\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  _emitChangeEvent(): void {\r\n    const selected = this.selected;\r\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\r\n    const event = new MatButtonToggleChange(source!, this.value);\r\n    this._controlValueAccessorChangeFn(event.value);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Syncs a button toggle's selected state with the model value.\r\n   * @param toggle Toggle to be synced.\r\n   * @param select Whether the toggle should be selected.\r\n   * @param isUserInput Whether the change was a result of a user interaction.\r\n   */\r\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\r\n    // Deselect the currently-selected toggle, if we're in single-selection\r\n    // mode and the button being toggled isn't selected at the moment.\r\n    if (!this.multiple && this.selected && !toggle.checked) {\r\n      (this.selected as MatButtonToggle).checked = false;\r\n    }\r\n\r\n    if (select) {\r\n      this._selectionModel.select(toggle);\r\n    } else {\r\n      this._selectionModel.deselect(toggle);\r\n    }\r\n\r\n    // Only emit the change event for user input.\r\n    if (isUserInput) {\r\n      this._emitChangeEvent();\r\n    }\r\n\r\n    // Note: we emit this one no matter whether it was a user interaction, because\r\n    // it is used by Angular to sync up the two-way data binding.\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  /** Checks whether a button toggle is selected. */\r\n  _isSelected(toggle: MatButtonToggle) {\r\n    return this._selectionModel.isSelected(toggle);\r\n  }\r\n\r\n  /** Determines whether a button toggle should be checked on init. */\r\n  _isPrechecked(toggle: MatButtonToggle) {\r\n    if (typeof this._rawValue === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    if (this.multiple && Array.isArray(this._rawValue)) {\r\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\r\n    }\r\n\r\n    return toggle.value === this._rawValue;\r\n  }\r\n\r\n  /** Updates the selection state of the toggles in the group based on a value. */\r\n  private _setSelectionByValue(value: any|any[]) {\r\n    this._rawValue = value;\r\n\r\n    if (!this._buttonToggles) {\r\n      return;\r\n    }\r\n\r\n    if (this.multiple && value) {\r\n      if (!Array.isArray(value)) {\r\n        throw Error('Value must be an array in multiple-selection mode.');\r\n      }\r\n\r\n      this._clearSelection();\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\r\n    } else {\r\n      this._clearSelection();\r\n      this._selectValue(value);\r\n    }\r\n  }\r\n\r\n  /** Clears the selected toggles. */\r\n  private _clearSelection() {\r\n    this._selectionModel.clear();\r\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\r\n  }\r\n\r\n  /** Selects a value if there's a toggle that corresponds to it. */\r\n  private _selectValue(value: any) {\r\n    const correspondingOption = this._buttonToggles.find(toggle => {\r\n      return toggle.value != null && toggle.value === value;\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      correspondingOption.checked = true;\r\n      this._selectionModel.select(correspondingOption);\r\n    }\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to the MatButtonToggle class.\r\n/** @docs-private */\r\nexport class MatButtonToggleBase {}\r\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\r\n\r\n/** Single button inside of a toggle group. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-button-toggle',\r\n  templateUrl: 'button-toggle.html',\r\n  styleUrls: ['button-toggle.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matButtonToggle',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\r\n    '[class.mat-button-toggle-checked]': 'checked',\r\n    '[class.mat-button-toggle-disabled]': 'disabled',\r\n    'class': 'mat-button-toggle',\r\n    // Clear out the native tabindex here since we forward it to the underlying button\r\n    '[attr.tabindex]': 'null',\r\n    '[attr.id]': 'id',\r\n  }\r\n})\r\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\r\n  CanDisableRipple, OnDestroy {\r\n\r\n  private _isSingleSelector = false;\r\n  private _checked = false;\r\n\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\r\n  _type: ToggleType;\r\n\r\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\r\n\r\n  /** The parent button toggle group (exclusive selection). Optional. */\r\n  buttonToggleGroup: MatButtonToggleGroup;\r\n\r\n  /** Unique ID for the underlying `button` element. */\r\n  get buttonId(): string { return `${this.id}-button`; }\r\n\r\n  /** The unique ID for this button toggle. */\r\n  @Input() id: string;\r\n\r\n  /** HTML's 'name' attribute used to group radios for unique selection. */\r\n  @Input() name: string;\r\n\r\n  /** MatButtonToggleGroup reads this to assign its own value. */\r\n  @Input() value: any;\r\n\r\n  /** Tabindex for the toggle. */\r\n  @Input() tabIndex: number | null;\r\n\r\n  /** Whether the button is checked. */\r\n  @Input()\r\n  get checked(): boolean {\r\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\r\n  }\r\n  set checked(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._checked) {\r\n      this._checked = newValue;\r\n\r\n      if (this.buttonToggleGroup) {\r\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\r\n      }\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\r\n  }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Event emitted when the group value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _elementRef: ElementRef<HTMLElement>,\r\n              private _focusMonitor: FocusMonitor,\r\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\r\n              @Attribute('tabindex') defaultTabIndex: string) {\r\n    super();\r\n\r\n    const parsedTabIndex = Number(defaultTabIndex);\r\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\r\n    this.buttonToggleGroup = toggleGroup;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\r\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\r\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\r\n\r\n    if (this._isSingleSelector) {\r\n      this.name = this.buttonToggleGroup.name;\r\n    }\r\n\r\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\r\n      this.checked = true;\r\n    }\r\n\r\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._buttonElement.nativeElement.focus();\r\n  }\r\n\r\n  /** Checks the button toggle due to an interaction with the underlying native button. */\r\n  _onButtonClick() {\r\n    const newChecked = this._isSingleSelector ? true : !this._checked;\r\n\r\n    if (newChecked !== this._checked) {\r\n      this._checked = newChecked;\r\n      if (this.buttonToggleGroup) {\r\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\r\n        this.buttonToggleGroup._onTouched();\r\n      }\r\n    }\r\n    // Emit a change event when it's the single selector\r\n    this.change.emit(new MatButtonToggleChange(this, this.value));\r\n  }\r\n\r\n  /**\r\n   * Marks the button toggle as needing checking for change detection.\r\n   * This method is exposed because the parent button toggle group will directly\r\n   * update bound properties of the radio button.\r\n   */\r\n  _markForCheck() {\r\n    // When the group value changes, the button will not be notified.\r\n    // Use `markForCheck` to explicit update button toggle's status.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n"]}