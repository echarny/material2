{"version":3,"file":"button-toggle.spec.js","sourceRoot":"","sources":["../../../../src/lib/button-toggle/button-toggle.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {dispatchMouseEvent} from '@angular/cdk/testing';\r\nimport {Component, DebugElement, QueryList, ViewChild, ViewChildren} from '@angular/core';\r\nimport {ComponentFixture, fakeAsync, flush, TestBed, tick} from '@angular/core/testing';\r\nimport {FormControl, FormsModule, NgModel, ReactiveFormsModule} from '@angular/forms';\r\nimport {By} from '@angular/platform-browser';\r\nimport {\r\n  MatButtonToggle,\r\n  MatButtonToggleChange,\r\n  MatButtonToggleGroup,\r\n  MatButtonToggleGroupMultiple,\r\n  MatButtonToggleModule,\r\n} from './index';\r\n\r\ndescribe('MatButtonToggle with forms', () => {\r\n\r\n  beforeEach(fakeAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatButtonToggleModule, FormsModule, ReactiveFormsModule],\r\n      declarations: [\r\n        ButtonToggleGroupWithNgModel,\r\n        ButtonToggleGroupWithFormControl,\r\n      ],\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  describe('using FormControl', () => {\r\n    let fixture: ComponentFixture<ButtonToggleGroupWithFormControl>;\r\n    let groupDebugElement: DebugElement;\r\n    let groupInstance: MatButtonToggleGroup;\r\n    let testComponent: ButtonToggleGroupWithFormControl;\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = TestBed.createComponent(ButtonToggleGroupWithFormControl);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n\r\n      groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\r\n      groupInstance = groupDebugElement.injector.get<MatButtonToggleGroup>(MatButtonToggleGroup);\r\n    }));\r\n\r\n    it('should toggle the disabled state', () => {\r\n      testComponent.control.disable();\r\n\r\n      expect(groupInstance.disabled).toBe(true);\r\n\r\n      testComponent.control.enable();\r\n\r\n      expect(groupInstance.disabled).toBe(false);\r\n    });\r\n\r\n    it('should set the value', () => {\r\n      testComponent.control.setValue('green');\r\n\r\n      expect(groupInstance.value).toBe('green');\r\n\r\n      testComponent.control.setValue('red');\r\n\r\n      expect(groupInstance.value).toBe('red');\r\n    });\r\n\r\n    it('should register the on change callback', () => {\r\n      let spy = jasmine.createSpy('onChange callback');\r\n\r\n      testComponent.control.registerOnChange(spy);\r\n      testComponent.control.setValue('blue');\r\n\r\n      expect(spy).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('button toggle group with ngModel and change event', () => {\r\n    let fixture: ComponentFixture<ButtonToggleGroupWithNgModel>;\r\n    let groupDebugElement: DebugElement;\r\n    let buttonToggleDebugElements: DebugElement[];\r\n    let groupInstance: MatButtonToggleGroup;\r\n    let buttonToggleInstances: MatButtonToggle[];\r\n    let testComponent: ButtonToggleGroupWithNgModel;\r\n    let groupNgModel: NgModel;\r\n    let buttonToggleLabels: HTMLElement[];\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = TestBed.createComponent(ButtonToggleGroupWithNgModel);\r\n      fixture.detectChanges();\r\n      testComponent = fixture.debugElement.componentInstance;\r\n\r\n      groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\r\n      groupInstance = groupDebugElement.injector.get<MatButtonToggleGroup>(MatButtonToggleGroup);\r\n      groupNgModel = groupDebugElement.injector.get<NgModel>(NgModel);\r\n\r\n      buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MatButtonToggle));\r\n      buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\r\n      buttonToggleLabels = buttonToggleDebugElements.map(\r\n        debugEl => debugEl.query(By.css('button')).nativeElement);\r\n\r\n      fixture.detectChanges();\r\n    }));\r\n\r\n    it('should update the model before firing change event', fakeAsync(() => {\r\n      expect(testComponent.modelValue).toBeUndefined();\r\n      expect(testComponent.lastEvent).toBeUndefined();\r\n\r\n      buttonToggleLabels[0].click();\r\n      fixture.detectChanges();\r\n\r\n      tick();\r\n      expect(testComponent.modelValue).toBe('red');\r\n      expect(testComponent.lastEvent.value).toBe('red');\r\n    }));\r\n\r\n    it('should set individual radio names based on the group name', () => {\r\n      expect(groupInstance.name).toBeTruthy();\r\n      for (let buttonToggle of buttonToggleInstances) {\r\n        expect(buttonToggle.name).toBe(groupInstance.name);\r\n      }\r\n\r\n      groupInstance.name = 'new name';\r\n      for (let buttonToggle of buttonToggleInstances) {\r\n        expect(buttonToggle.name).toBe(groupInstance.name);\r\n      }\r\n    });\r\n\r\n    it('should check the corresponding button toggle on a group value change', () => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n      for (let buttonToggle of buttonToggleInstances) {\r\n        expect(buttonToggle.checked).toBeFalsy();\r\n      }\r\n\r\n      groupInstance.value = 'red';\r\n      for (let buttonToggle of buttonToggleInstances) {\r\n        expect(buttonToggle.checked).toBe(groupInstance.value === buttonToggle.value);\r\n      }\r\n\r\n      const selected = groupInstance.selected as MatButtonToggle;\r\n\r\n      expect(selected.value).toBe(groupInstance.value);\r\n    });\r\n\r\n    it('should have the correct FormControl state initially and after interaction',\r\n      fakeAsync(() => {\r\n        expect(groupNgModel.valid).toBe(true);\r\n        expect(groupNgModel.pristine).toBe(true);\r\n        expect(groupNgModel.touched).toBe(false);\r\n\r\n        buttonToggleInstances[1].checked = true;\r\n        fixture.detectChanges();\r\n        tick();\r\n\r\n        expect(groupNgModel.valid).toBe(true);\r\n        expect(groupNgModel.pristine).toBe(true);\r\n        expect(groupNgModel.touched).toBe(false);\r\n\r\n        buttonToggleLabels[2].click();\r\n        fixture.detectChanges();\r\n        tick();\r\n\r\n        expect(groupNgModel.valid).toBe(true);\r\n        expect(groupNgModel.pristine).toBe(false);\r\n        expect(groupNgModel.touched).toBe(true);\r\n      }));\r\n\r\n    it('should update the ngModel value when selecting a button toggle', fakeAsync(() => {\r\n      buttonToggleLabels[1].click();\r\n      fixture.detectChanges();\r\n\r\n      tick();\r\n\r\n      expect(testComponent.modelValue).toBe('green');\r\n    }));\r\n\r\n    it('should show a ripple on label click', () => {\r\n      const groupElement = groupDebugElement.nativeElement;\r\n\r\n      expect(groupElement.querySelectorAll('.mat-ripple-element').length).toBe(0);\r\n\r\n      dispatchMouseEvent(buttonToggleLabels[0], 'mousedown');\r\n      dispatchMouseEvent(buttonToggleLabels[0], 'mouseup');\r\n\r\n      expect(groupElement.querySelectorAll('.mat-ripple-element').length).toBe(1);\r\n    });\r\n\r\n    it('should allow ripples to be disabled', () => {\r\n      const groupElement = groupDebugElement.nativeElement;\r\n\r\n      testComponent.disableRipple = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(groupElement.querySelectorAll('.mat-ripple-element').length).toBe(0);\r\n\r\n      dispatchMouseEvent(buttonToggleLabels[0], 'mousedown');\r\n      dispatchMouseEvent(buttonToggleLabels[0], 'mouseup');\r\n\r\n      expect(groupElement.querySelectorAll('.mat-ripple-element').length).toBe(0);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('MatButtonToggle without forms', () => {\r\n\r\n  beforeEach(fakeAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [MatButtonToggleModule],\r\n      declarations: [\r\n        ButtonTogglesInsideButtonToggleGroup,\r\n        ButtonTogglesInsideButtonToggleGroupMultiple,\r\n        FalsyButtonTogglesInsideButtonToggleGroupMultiple,\r\n        ButtonToggleGroupWithInitialValue,\r\n        StandaloneButtonToggle,\r\n        ButtonToggleWithAriaLabel,\r\n        ButtonToggleWithAriaLabelledby,\r\n        RepeatedButtonTogglesWithPreselectedValue,\r\n        ButtonToggleWithTabindex,\r\n      ],\r\n    });\r\n\r\n    TestBed.compileComponents();\r\n  }));\r\n\r\n  describe('inside of an exclusive selection group', () => {\r\n\r\n    let fixture: ComponentFixture<ButtonTogglesInsideButtonToggleGroup>;\r\n    let groupDebugElement: DebugElement;\r\n    let groupNativeElement: HTMLElement;\r\n    let buttonToggleDebugElements: DebugElement[];\r\n    let buttonToggleNativeElements: HTMLElement[];\r\n    let buttonToggleLabelElements: HTMLLabelElement[];\r\n    let groupInstance: MatButtonToggleGroup;\r\n    let buttonToggleInstances: MatButtonToggle[];\r\n    let testComponent: ButtonTogglesInsideButtonToggleGroup;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(ButtonTogglesInsideButtonToggleGroup);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n\r\n      groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\r\n      groupNativeElement = groupDebugElement.nativeElement;\r\n      groupInstance = groupDebugElement.injector.get<MatButtonToggleGroup>(MatButtonToggleGroup);\r\n\r\n      buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MatButtonToggle));\r\n\r\n      buttonToggleNativeElements = buttonToggleDebugElements\r\n        .map(debugEl => debugEl.nativeElement);\r\n\r\n      buttonToggleLabelElements = fixture.debugElement.queryAll(By.css('button'))\r\n        .map(debugEl => debugEl.nativeElement);\r\n\r\n      buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\r\n    });\r\n\r\n    it('should set individual button toggle names based on the group name', () => {\r\n      expect(groupInstance.name).toBeTruthy();\r\n      for (let buttonToggle of buttonToggleInstances) {\r\n        expect(buttonToggle.name).toBe(groupInstance.name);\r\n      }\r\n    });\r\n\r\n    it('should disable click interactions when the group is disabled', () => {\r\n      testComponent.isGroupDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      buttonToggleNativeElements[0].click();\r\n      expect(buttonToggleInstances[0].checked).toBe(false);\r\n      expect(buttonToggleInstances[0].disabled).toBe(true);\r\n\r\n      testComponent.isGroupDisabled = false;\r\n      fixture.detectChanges();\r\n\r\n      expect(buttonToggleInstances[0].disabled).toBe(false);\r\n\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(buttonToggleInstances[0].checked).toBe(true);\r\n    });\r\n\r\n    it('should update the group value when one of the toggles changes', () => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('test1');\r\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\r\n    });\r\n\r\n    it('should propagate the value change back up via a two-way binding', () => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('test1');\r\n      expect(testComponent.groupValue).toBe('test1');\r\n    });\r\n\r\n    it('should update the group and toggles when one of the button toggles is clicked', () => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('test1');\r\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\r\n      expect(buttonToggleInstances[0].checked).toBe(true);\r\n      expect(buttonToggleInstances[1].checked).toBe(false);\r\n\r\n      buttonToggleLabelElements[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('test2');\r\n      expect(groupInstance.selected).toBe(buttonToggleInstances[1]);\r\n      expect(buttonToggleInstances[0].checked).toBe(false);\r\n      expect(buttonToggleInstances[1].checked).toBe(true);\r\n    });\r\n\r\n    it('should check a button toggle upon interaction with underlying native radio button', () => {\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(buttonToggleInstances[0].checked).toBe(true);\r\n      expect(groupInstance.value);\r\n    });\r\n\r\n    it('should change the vertical state', () => {\r\n      expect(groupNativeElement.classList).not.toContain('mat-button-toggle-vertical');\r\n\r\n      groupInstance.vertical = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(groupNativeElement.classList).toContain('mat-button-toggle-vertical');\r\n    });\r\n\r\n    it('should emit a change event from button toggles', fakeAsync(() => {\r\n      expect(buttonToggleInstances[0].checked).toBe(false);\r\n\r\n      let changeSpy = jasmine.createSpy('button-toggle change listener');\r\n      buttonToggleInstances[0].change.subscribe(changeSpy);\r\n\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(changeSpy).toHaveBeenCalledTimes(1);\r\n\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      // Always emit change event when button toggle is clicked\r\n      expect(changeSpy).toHaveBeenCalledTimes(2);\r\n    }));\r\n\r\n    it('should emit a change event from the button toggle group', fakeAsync(() => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n\r\n      let changeSpy = jasmine.createSpy('button-toggle-group change listener');\r\n      groupInstance.change.subscribe(changeSpy);\r\n\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(changeSpy).toHaveBeenCalled();\r\n\r\n      buttonToggleLabelElements[1].click();\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(changeSpy).toHaveBeenCalledTimes(2);\r\n    }));\r\n\r\n    it('should update the group and button toggles when updating the group value', () => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n\r\n      testComponent.groupValue = 'test1';\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('test1');\r\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\r\n      expect(buttonToggleInstances[0].checked).toBe(true);\r\n      expect(buttonToggleInstances[1].checked).toBe(false);\r\n\r\n      testComponent.groupValue = 'test2';\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('test2');\r\n      expect(groupInstance.selected).toBe(buttonToggleInstances[1]);\r\n      expect(buttonToggleInstances[0].checked).toBe(false);\r\n      expect(buttonToggleInstances[1].checked).toBe(true);\r\n    });\r\n\r\n    it('should deselect all of the checkboxes when the group value is cleared', () => {\r\n      buttonToggleInstances[0].checked = true;\r\n\r\n      expect(groupInstance.value).toBeTruthy();\r\n\r\n      groupInstance.value = null;\r\n\r\n      expect(buttonToggleInstances.every(toggle => !toggle.checked)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('with initial value and change event', () => {\r\n\r\n    it('should not fire an initial change event', () => {\r\n      let fixture = TestBed.createComponent(ButtonToggleGroupWithInitialValue);\r\n      let testComponent = fixture.debugElement.componentInstance;\r\n      let groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\r\n      let groupInstance: MatButtonToggleGroup = groupDebugElement.injector\r\n          .get<MatButtonToggleGroup>(MatButtonToggleGroup);\r\n\r\n      fixture.detectChanges();\r\n\r\n      // Note that we cast to a boolean, because the event has some circular references\r\n      // which will crash the runner when Jasmine attempts to stringify them.\r\n      expect(!!testComponent.lastEvent).toBe(false);\r\n      expect(groupInstance.value).toBe('red');\r\n\r\n      groupInstance.value = 'green';\r\n      fixture.detectChanges();\r\n\r\n      expect(!!testComponent.lastEvent).toBe(false);\r\n      expect(groupInstance.value).toBe('green');\r\n    });\r\n\r\n  });\r\n\r\n  describe('inside of a multiple selection group', () => {\r\n    let fixture: ComponentFixture<ButtonTogglesInsideButtonToggleGroupMultiple>;\r\n    let groupDebugElement: DebugElement;\r\n    let groupNativeElement: HTMLElement;\r\n    let buttonToggleDebugElements: DebugElement[];\r\n    let buttonToggleNativeElements: HTMLElement[];\r\n    let buttonToggleLabelElements: HTMLLabelElement[];\r\n    let groupInstance: MatButtonToggleGroup;\r\n    let buttonToggleInstances: MatButtonToggle[];\r\n    let testComponent: ButtonTogglesInsideButtonToggleGroupMultiple;\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = TestBed.createComponent(ButtonTogglesInsideButtonToggleGroupMultiple);\r\n      fixture.detectChanges();\r\n\r\n      testComponent = fixture.debugElement.componentInstance;\r\n\r\n      groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\r\n      groupNativeElement = groupDebugElement.nativeElement;\r\n      groupInstance = groupDebugElement.injector.get<MatButtonToggleGroup>(MatButtonToggleGroup);\r\n\r\n      buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MatButtonToggle));\r\n      buttonToggleNativeElements = buttonToggleDebugElements\r\n        .map(debugEl => debugEl.nativeElement);\r\n      buttonToggleLabelElements = fixture.debugElement.queryAll(By.css('button'))\r\n        .map(debugEl => debugEl.nativeElement);\r\n      buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\r\n    }));\r\n\r\n    it('should disable click interactions when the group is disabled', () => {\r\n      testComponent.isGroupDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      buttonToggleNativeElements[0].click();\r\n      expect(buttonToggleInstances[0].checked).toBe(false);\r\n    });\r\n\r\n    it('should check a button toggle when clicked', () => {\r\n      expect(buttonToggleInstances.every(buttonToggle => !buttonToggle.checked)).toBe(true);\r\n\r\n      let nativeCheckboxLabel = buttonToggleDebugElements[0].query(By.css('button')).nativeElement;\r\n\r\n      nativeCheckboxLabel.click();\r\n\r\n      expect(groupInstance.value).toEqual(['eggs']);\r\n      expect(buttonToggleInstances[0].checked).toBe(true);\r\n    });\r\n\r\n    it('should allow for multiple toggles to be selected', () => {\r\n      buttonToggleInstances[0].checked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toEqual(['eggs']);\r\n      expect(buttonToggleInstances[0].checked).toBe(true);\r\n\r\n      buttonToggleInstances[1].checked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toEqual(['eggs', 'flour']);\r\n      expect(buttonToggleInstances[1].checked).toBe(true);\r\n      expect(buttonToggleInstances[0].checked).toBe(true);\r\n    });\r\n\r\n    it('should check a button toggle upon interaction with underlying native checkbox', () => {\r\n      let nativeCheckboxButton = buttonToggleDebugElements[0].query(By.css('button')).nativeElement;\r\n\r\n      nativeCheckboxButton.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toEqual(['eggs']);\r\n      expect(buttonToggleInstances[0].checked).toBe(true);\r\n    });\r\n\r\n    it('should change the vertical state', () => {\r\n      expect(groupNativeElement.classList).not.toContain('mat-button-toggle-vertical');\r\n\r\n      groupInstance.vertical = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(groupNativeElement.classList).toContain('mat-button-toggle-vertical');\r\n    });\r\n\r\n    it('should deselect a button toggle when selected twice', fakeAsync(() => {\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(buttonToggleInstances[0].checked).toBe(true);\r\n      expect(groupInstance.value).toEqual(['eggs']);\r\n\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(groupInstance.value).toEqual([]);\r\n      expect(buttonToggleInstances[0].checked).toBe(false);\r\n    }));\r\n\r\n    it('should emit a change event for state changes', fakeAsync(() => {\r\n      expect(buttonToggleInstances[0].checked).toBe(false);\r\n\r\n      let changeSpy = jasmine.createSpy('button-toggle change listener');\r\n      buttonToggleInstances[0].change.subscribe(changeSpy);\r\n\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(changeSpy).toHaveBeenCalled();\r\n      expect(groupInstance.value).toEqual(['eggs']);\r\n\r\n      buttonToggleLabelElements[0].click();\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(groupInstance.value).toEqual([]);\r\n\r\n      // The default browser behavior is to emit an event, when the value was set\r\n      // to false. That's because the current input type is set to `checkbox` when\r\n      // using the multiple mode.\r\n      expect(changeSpy).toHaveBeenCalledTimes(2);\r\n    }));\r\n\r\n    it('should throw when attempting to assign a non-array value', () => {\r\n      expect(() => {\r\n        groupInstance.value = 'not-an-array';\r\n      }).toThrowError(/Value must be an array/);\r\n    });\r\n\r\n    it('should be able to query for the deprecated `MatButtonToggleGroupMultiple`', () => {\r\n      expect(fixture.debugElement.query(By.directive(MatButtonToggleGroupMultiple))).toBeTruthy();\r\n    });\r\n\r\n  });\r\n\r\n  describe('as standalone', () => {\r\n    let fixture: ComponentFixture<StandaloneButtonToggle>;\r\n    let buttonToggleDebugElement: DebugElement;\r\n    let buttonToggleNativeElement: HTMLElement;\r\n    let buttonToggleLabelElement: HTMLLabelElement;\r\n    let buttonToggleInstance: MatButtonToggle;\r\n    let buttonToggleButtonElement: HTMLButtonElement;\r\n\r\n    beforeEach(fakeAsync(() => {\r\n      fixture = TestBed.createComponent(StandaloneButtonToggle);\r\n      fixture.detectChanges();\r\n\r\n      buttonToggleDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\r\n      buttonToggleNativeElement = buttonToggleDebugElement.nativeElement;\r\n      buttonToggleLabelElement = fixture.debugElement\r\n          .query(By.css('.mat-button-toggle-label-content')).nativeElement;\r\n      buttonToggleInstance = buttonToggleDebugElement.componentInstance;\r\n      buttonToggleButtonElement =\r\n          buttonToggleNativeElement.querySelector('button')! as HTMLButtonElement;\r\n    }));\r\n\r\n    it('should toggle when clicked', fakeAsync(() => {\r\n      buttonToggleLabelElement.click();\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      expect(buttonToggleInstance.checked).toBe(true);\r\n\r\n      buttonToggleLabelElement.click();\r\n      fixture.detectChanges();\r\n      flush();\r\n\r\n      expect(buttonToggleInstance.checked).toBe(false);\r\n    }));\r\n\r\n    it('should emit a change event for state changes', fakeAsync(() => {\r\n\r\n      expect(buttonToggleInstance.checked).toBe(false);\r\n\r\n      let changeSpy = jasmine.createSpy('button-toggle change listener');\r\n      buttonToggleInstance.change.subscribe(changeSpy);\r\n\r\n      buttonToggleLabelElement.click();\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(changeSpy).toHaveBeenCalled();\r\n\r\n      buttonToggleLabelElement.click();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      // The default browser behavior is to emit an event, when the value was set\r\n      // to false. That's because the current input type is set to `checkbox`.\r\n      expect(changeSpy).toHaveBeenCalledTimes(2);\r\n    }));\r\n\r\n    it('should focus on underlying input element when focus() is called', () => {\r\n      let nativeButton = buttonToggleDebugElement.query(By.css('button')).nativeElement;\r\n      expect(document.activeElement).not.toBe(nativeButton);\r\n\r\n      buttonToggleInstance.focus();\r\n      fixture.detectChanges();\r\n\r\n      expect(document.activeElement).toBe(nativeButton);\r\n    });\r\n\r\n    it('should not assign a name to the underlying input if one is not passed in', () => {\r\n      expect(buttonToggleButtonElement.getAttribute('name')).toBeFalsy();\r\n    });\r\n\r\n    it('should have correct aria-pressed attribute', () => {\r\n      expect(buttonToggleButtonElement.getAttribute('aria-pressed'))\r\n          .toBe('false');\r\n\r\n      buttonToggleLabelElement.click();\r\n\r\n      fixture.detectChanges();\r\n\r\n      expect(buttonToggleButtonElement.getAttribute('aria-pressed'))\r\n        .toBe('true');\r\n    });\r\n  });\r\n\r\n  describe('aria-label handling ', () => {\r\n    it('should not set the aria-label attribute if none is provided', () => {\r\n      let fixture = TestBed.createComponent(StandaloneButtonToggle);\r\n      let checkboxDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\r\n      let checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      let buttonElement = checkboxNativeElement.querySelector('button') as HTMLButtonElement;\r\n\r\n      fixture.detectChanges();\r\n      expect(buttonElement.hasAttribute('aria-label')).toBe(false);\r\n    });\r\n\r\n    it('should use the provided aria-label', () => {\r\n      let fixture = TestBed.createComponent(ButtonToggleWithAriaLabel);\r\n      let checkboxDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\r\n      let checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      let buttonElement = checkboxNativeElement.querySelector('button') as HTMLButtonElement;\r\n\r\n      fixture.detectChanges();\r\n      expect(buttonElement.getAttribute('aria-label')).toBe('Super effective');\r\n    });\r\n  });\r\n\r\n  describe('with provided aria-labelledby ', () => {\r\n    let checkboxDebugElement: DebugElement;\r\n    let checkboxNativeElement: HTMLElement;\r\n    let buttonElement: HTMLButtonElement;\r\n\r\n    it('should use the provided aria-labelledby', () => {\r\n      let fixture = TestBed.createComponent(ButtonToggleWithAriaLabelledby);\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      buttonElement = checkboxNativeElement.querySelector('button') as HTMLButtonElement;\r\n\r\n      fixture.detectChanges();\r\n      expect(buttonElement.getAttribute('aria-labelledby')).toBe('some-id');\r\n    });\r\n\r\n    it('should not assign aria-labelledby if none is provided', () => {\r\n      let fixture = TestBed.createComponent(StandaloneButtonToggle);\r\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\r\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\r\n      buttonElement = checkboxNativeElement.querySelector('button') as HTMLButtonElement;\r\n\r\n      fixture.detectChanges();\r\n      expect(buttonElement.getAttribute('aria-labelledby')).toBe(null);\r\n    });\r\n  });\r\n\r\n  describe('with tabindex ', () => {\r\n    it('should forward the tabindex to the underlying button', () => {\r\n      const fixture = TestBed.createComponent(ButtonToggleWithTabindex);\r\n      fixture.detectChanges();\r\n\r\n      const button = fixture.nativeElement.querySelector('.mat-button-toggle button');\r\n\r\n      expect(button.getAttribute('tabindex')).toBe('3');\r\n    });\r\n\r\n    it('should clear the tabindex from the host element', () => {\r\n      const fixture = TestBed.createComponent(ButtonToggleWithTabindex);\r\n      fixture.detectChanges();\r\n\r\n      const host = fixture.nativeElement.querySelector('.mat-button-toggle');\r\n\r\n      expect(host.hasAttribute('tabindex')).toBe(false);\r\n    });\r\n  });\r\n\r\n  it('should not throw on init when toggles are repeated and there is an initial value', () => {\r\n    const fixture = TestBed.createComponent(RepeatedButtonTogglesWithPreselectedValue);\r\n\r\n    expect(() => fixture.detectChanges()).not.toThrow();\r\n    expect(fixture.componentInstance.toggleGroup.value).toBe('Two');\r\n    expect(fixture.componentInstance.toggles.toArray()[1].checked).toBe(true);\r\n  });\r\n\r\n  it('should maintain the selected state when the value and toggles are swapped out at ' +\r\n    'the same time', () => {\r\n      const fixture = TestBed.createComponent(RepeatedButtonTogglesWithPreselectedValue);\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.toggleGroup.value).toBe('Two');\r\n      expect(fixture.componentInstance.toggles.toArray()[1].checked).toBe(true);\r\n\r\n      fixture.componentInstance.possibleValues = ['Five', 'Six', 'Seven'];\r\n      fixture.componentInstance.value = 'Seven';\r\n      fixture.detectChanges();\r\n\r\n      expect(fixture.componentInstance.toggleGroup.value).toBe('Seven');\r\n      expect(fixture.componentInstance.toggles.toArray()[2].checked).toBe(true);\r\n    });\r\n\r\n  it('should select falsy button toggle value in multiple selection', () => {\r\n    const fixture = TestBed.createComponent(FalsyButtonTogglesInsideButtonToggleGroupMultiple);\r\n    fixture.detectChanges();\r\n\r\n    expect(fixture.componentInstance.toggles.toArray()[0].checked).toBe(true);\r\n    expect(fixture.componentInstance.toggles.toArray()[1].checked).toBe(false);\r\n    expect(fixture.componentInstance.toggles.toArray()[2].checked).toBe(false);\r\n\r\n    fixture.componentInstance.value = [0, false];\r\n    fixture.detectChanges();\r\n\r\n    expect(fixture.componentInstance.toggles.toArray()[0].checked).toBe(true);\r\n    expect(fixture.componentInstance.toggles.toArray()[1].checked).toBe(false);\r\n    expect(fixture.componentInstance.toggles.toArray()[2].checked).toBe(true);\r\n  });\r\n});\r\n\r\n@Component({\r\n  template: `\r\n  <mat-button-toggle-group [disabled]=\"isGroupDisabled\"\r\n                           [vertical]=\"isVertical\"\r\n                           [(value)]=\"groupValue\">\r\n    <mat-button-toggle value=\"test1\">Test1</mat-button-toggle>\r\n    <mat-button-toggle value=\"test2\">Test2</mat-button-toggle>\r\n    <mat-button-toggle value=\"test3\">Test3</mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n  `\r\n})\r\nclass ButtonTogglesInsideButtonToggleGroup {\r\n  isGroupDisabled: boolean = false;\r\n  isVertical: boolean = false;\r\n  groupValue: string;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n  <mat-button-toggle-group [(ngModel)]=\"modelValue\" (change)=\"lastEvent = $event\">\r\n    <mat-button-toggle *ngFor=\"let option of options\" [value]=\"option.value\"\r\n                       [disableRipple]=\"disableRipple\">\r\n      {{option.label}}\r\n    </mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n  `\r\n})\r\nclass ButtonToggleGroupWithNgModel {\r\n  modelValue: string;\r\n  options = [\r\n    {label: 'Red', value: 'red'},\r\n    {label: 'Green', value: 'green'},\r\n    {label: 'Blue', value: 'blue'},\r\n  ];\r\n  lastEvent: MatButtonToggleChange;\r\n  disableRipple = false;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n  <mat-button-toggle-group [disabled]=\"isGroupDisabled\" [vertical]=\"isVertical\" multiple>\r\n    <mat-button-toggle value=\"eggs\">Eggs</mat-button-toggle>\r\n    <mat-button-toggle value=\"flour\">Flour</mat-button-toggle>\r\n    <mat-button-toggle value=\"sugar\">Sugar</mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n  `\r\n})\r\nclass ButtonTogglesInsideButtonToggleGroupMultiple {\r\n  isGroupDisabled: boolean = false;\r\n  isVertical: boolean = false;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n  <mat-button-toggle-group multiple [value]=\"value\">\r\n    <mat-button-toggle [value]=\"0\">Eggs</mat-button-toggle>\r\n    <mat-button-toggle [value]=\"null\">Flour</mat-button-toggle>\r\n    <mat-button-toggle [value]=\"false\">Sugar</mat-button-toggle>\r\n    <mat-button-toggle>Sugar</mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n  `\r\n})\r\nclass FalsyButtonTogglesInsideButtonToggleGroupMultiple {\r\n  value: ('' | number | null | undefined | boolean)[] = [0];\r\n  @ViewChildren(MatButtonToggle) toggles: QueryList<MatButtonToggle>;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n  <mat-button-toggle>Yes</mat-button-toggle>\r\n  `\r\n})\r\nclass StandaloneButtonToggle { }\r\n\r\n@Component({\r\n  template: `\r\n  <mat-button-toggle-group (change)=\"lastEvent = $event\" value=\"red\">\r\n    <mat-button-toggle value=\"red\">Value Red</mat-button-toggle>\r\n    <mat-button-toggle value=\"green\">Value Green</mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n  `\r\n})\r\nclass ButtonToggleGroupWithInitialValue {\r\n  lastEvent: MatButtonToggleChange;\r\n}\r\n\r\n@Component({\r\n  template: `\r\n  <mat-button-toggle-group [formControl]=\"control\">\r\n    <mat-button-toggle value=\"red\">Value Red</mat-button-toggle>\r\n    <mat-button-toggle value=\"green\">Value Green</mat-button-toggle>\r\n    <mat-button-toggle value=\"blue\">Value Blue</mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n  `\r\n})\r\nclass ButtonToggleGroupWithFormControl {\r\n  control = new FormControl();\r\n}\r\n\r\n/** Simple test component with an aria-label set. */\r\n@Component({\r\n  template: `<mat-button-toggle aria-label=\"Super effective\"></mat-button-toggle>`\r\n})\r\nclass ButtonToggleWithAriaLabel { }\r\n\r\n/** Simple test component with an aria-label set. */\r\n@Component({\r\n  template: `<mat-button-toggle aria-labelledby=\"some-id\"></mat-button-toggle>`\r\n})\r\nclass ButtonToggleWithAriaLabelledby {}\r\n\r\n\r\n@Component({\r\n  template: `\r\n    <mat-button-toggle-group [(value)]=\"value\">\r\n      <mat-button-toggle *ngFor=\"let toggle of possibleValues\" [value]=\"toggle\">\r\n        {{toggle}}\r\n      </mat-button-toggle>\r\n    </mat-button-toggle-group>\r\n  `\r\n})\r\nclass RepeatedButtonTogglesWithPreselectedValue {\r\n  @ViewChild(MatButtonToggleGroup) toggleGroup: MatButtonToggleGroup;\r\n  @ViewChildren(MatButtonToggle) toggles: QueryList<MatButtonToggle>;\r\n\r\n  possibleValues = ['One', 'Two', 'Three'];\r\n  value = 'Two';\r\n}\r\n\r\n\r\n@Component({\r\n  template: `<mat-button-toggle tabindex=\"3\"></mat-button-toggle>`\r\n})\r\nclass ButtonToggleWithTabindex {}\r\n\r\n"]}