{"version":3,"file":"material-autocomplete.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Input,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n  InjectionToken,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {\r\n  MatOption,\r\n  MatOptgroup,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  mixinDisableRipple,\r\n  CanDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n\r\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueAutocompleteIdCounter = 0;\r\n\r\n/** Event object that is emitted when an autocomplete option is selected. */\r\nexport class MatAutocompleteSelectedEvent {\r\n  constructor(\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    public source: MatAutocomplete,\r\n    /** Option that was selected. */\r\n    public option: MatOption) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatAutocomplete.\r\n/** @docs-private */\r\nexport class MatAutocompleteBase {}\r\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\r\n\r\n/** Default `mat-autocomplete` options that can be overridden. */\r\nexport interface MatAutocompleteDefaultOptions {\r\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\r\n  autoActiveFirstOption?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\r\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\r\n  return {autoActiveFirstOption: false};\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-autocomplete',\r\n  templateUrl: 'autocomplete.html',\r\n  styleUrls: ['autocomplete.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  exportAs: 'matAutocomplete',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'class': 'mat-autocomplete'\r\n  },\r\n  providers: [\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\r\n  ]\r\n})\r\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\r\n  CanDisableRipple {\r\n\r\n  /** Manages active item in option list based on key events. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** Whether the autocomplete panel should be visible, depending on option length. */\r\n  showPanel: boolean = false;\r\n\r\n  /** Whether the autocomplete panel is open. */\r\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\r\n  _isOpen: boolean = false;\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n  /** Element for the panel containing the autocomplete options. */\r\n  @ViewChild('panel') panel: ElementRef;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Function that maps an option's control value to its display value in the trigger. */\r\n  @Input() displayWith: ((value: any) => string) | null = null;\r\n\r\n  /**\r\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n   */\r\n  @Input()\r\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\r\n  set autoActiveFirstOption(value: boolean) {\r\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\r\n  }\r\n  private _autoActiveFirstOption: boolean;\r\n\r\n  /**\r\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\r\n   * match the width of its host.\r\n   */\r\n  @Input() panelWidth: string | number;\r\n\r\n  /** Event that is emitted whenever an option from the list is selected. */\r\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\r\n      new EventEmitter<MatAutocompleteSelectedEvent>();\r\n\r\n  /** Event that is emitted when the autocomplete panel is opened. */\r\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Event that is emitted when the autocomplete panel is closed. */\r\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n   * inside the overlay container to allow for easy styling.\r\n   */\r\n  @Input('class')\r\n  set classList(value: string) {\r\n    if (value && value.length) {\r\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\r\n      this._elementRef.nativeElement.className = '';\r\n    }\r\n  }\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _elementRef: ElementRef,\r\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\r\n    super();\r\n\r\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\r\n    // Set the initial visibility state.\r\n    this._setVisibility();\r\n  }\r\n\r\n  /**\r\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n   * above or below the fold, as they are not actually being focused when active.\r\n   */\r\n  _setScrollTop(scrollTop: number): void {\r\n    if (this.panel) {\r\n      this.panel.nativeElement.scrollTop = scrollTop;\r\n    }\r\n  }\r\n\r\n  /** Returns the panel's scrollTop. */\r\n  _getScrollTop(): number {\r\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n  }\r\n\r\n  /** Panel should hide itself when the option list is empty. */\r\n  _setVisibility() {\r\n    this.showPanel = !!this.options.length;\r\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\r\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Emits the `select` event. */\r\n  _emitSelectEvent(option: MatOption): void {\r\n    const event = new MatAutocompleteSelectedEvent(this, option);\r\n    this.optionSelected.emit(event);\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  FlexibleConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  ScrollStrategy,\r\n  ViewportRuler,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Host,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  _countGroupLabelsBeforeOption,\r\n  _getOptionScrollPosition,\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\r\nimport {MatAutocomplete} from './autocomplete';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\r\n\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the scrollTop of the panel. Because we are not\r\n * actually focusing the active item, scroll must be handled manually.\r\n */\r\n\r\n/** The height of each autocomplete option. */\r\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\r\n\r\n/** The total height of the autocomplete panel. */\r\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\r\n\r\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\r\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n */\r\nexport function getMatAutocompleteMissingPanelError(): Error {\r\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\r\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\r\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\r\n  host: {\r\n    '[attr.autocomplete]': 'autocompleteAttribute',\r\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\r\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\r\n    '[attr.aria-activedescendant]': 'activeOption?.id',\r\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\r\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\r\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n    '(focusin)': '_handleFocus()',\r\n    '(blur)': '_onTouched()',\r\n    '(input)': '_handleInput($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  exportAs: 'matAutocompleteTrigger',\r\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\r\n})\r\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\r\n  private _overlayRef: OverlayRef | null;\r\n  private _portal: TemplatePortal;\r\n  private _componentDestroyed = false;\r\n  private _autocompleteDisabled = false;\r\n\r\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\r\n  private _previousValue: string | number | null;\r\n\r\n  /** Strategy that is used to position the panel. */\r\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\r\n\r\n  /** Whether or not the label state is being overridden. */\r\n  private _manuallyFloatingLabel = false;\r\n\r\n  /** The subscription for closing actions (some are bound to document). */\r\n  private _closingActionsSubscription: Subscription;\r\n\r\n  /** Subscription to viewport size changes. */\r\n  private _viewportSubscription = Subscription.EMPTY;\r\n\r\n  /** Stream of keyboard events that can close the panel. */\r\n  private readonly _closeKeyEventStream = new Subject<void>();\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when autocomplete has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The autocomplete panel to be attached to this trigger. */\r\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\r\n\r\n  /**\r\n   * Reference relative to which to position the autocomplete panel.\r\n   * Defaults to the autocomplete trigger element.\r\n   */\r\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\r\n\r\n  /**\r\n   * `autocomplete` attribute to be set on the input element.\r\n   * @docs-private\r\n   */\r\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\r\n\r\n  /**\r\n   * Whether the autocomplete is disabled. When disabled, the element will\r\n   * act as a regular input and the user won't be able to open the panel.\r\n   */\r\n  @Input('matAutocompleteDisabled')\r\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\r\n  set autocompleteDisabled(value: boolean) {\r\n    this._autocompleteDisabled = coerceBooleanProperty(value);\r\n  }\r\n\r\n  constructor(private _element: ElementRef, private _overlay: Overlay,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              private _zone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Host() private _formField: MatFormField,\r\n              @Optional() @Inject(DOCUMENT) private _document: any,\r\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\r\n              private _viewportRuler?: ViewportRuler) {}\r\n\r\n  ngOnDestroy() {\r\n    this._viewportSubscription.unsubscribe();\r\n    this._componentDestroyed = true;\r\n    this._destroyPanel();\r\n    this._closeKeyEventStream.complete();\r\n  }\r\n\r\n  /** Whether or not the autocomplete panel is open. */\r\n  get panelOpen(): boolean {\r\n    return this._overlayAttached && this.autocomplete.showPanel;\r\n  }\r\n  private _overlayAttached: boolean = false;\r\n\r\n  /** Opens the autocomplete suggestion panel. */\r\n  openPanel(): void {\r\n    this._attachOverlay();\r\n    this._floatLabel();\r\n  }\r\n\r\n  /** Closes the autocomplete suggestion panel. */\r\n  closePanel(): void {\r\n    this._resetLabel();\r\n\r\n    if (!this._overlayAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.panelOpen) {\r\n      // Only emit if the panel was visible.\r\n      this.autocomplete.closed.emit();\r\n    }\r\n\r\n    this.autocomplete._isOpen = this._overlayAttached = false;\r\n\r\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n      this._overlayRef.detach();\r\n      this._closingActionsSubscription.unsubscribe();\r\n    }\r\n\r\n    // Note that in some cases this can end up being called after the component is destroyed.\r\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\r\n    if (!this._componentDestroyed) {\r\n      // We need to trigger change detection manually, because\r\n      // `fromEvent` doesn't seem to do it at the proper time.\r\n      // This ensures that the label is reset when the\r\n      // user clicks outside.\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\r\n   * within the viewport.\r\n   */\r\n  updatePosition(): void {\r\n    if (this._overlayAttached) {\r\n      this._overlayRef!.updatePosition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A stream of actions that should close the autocomplete panel, including\r\n   * when an option is selected, on blur, and when TAB is pressed.\r\n   */\r\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\r\n    return merge(\r\n      this.optionSelections,\r\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\r\n      this._closeKeyEventStream,\r\n      this._outsideClickStream,\r\n      this._overlayRef ?\r\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\r\n          observableOf()\r\n    ).pipe(\r\n      // Normalize the output so we return a consistent type.\r\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\r\n    );\r\n  }\r\n\r\n  /** Stream of autocomplete option selections. */\r\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.autocomplete && this.autocomplete.options) {\r\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\r\n    // Return a stream that we'll replace with the real one once everything is in place.\r\n    return this._zone.onStable\r\n        .asObservable()\r\n        .pipe(take(1), switchMap(() => this.optionSelections));\r\n  });\r\n\r\n  /** The currently active option, coerced to MatOption type. */\r\n  get activeOption(): MatOption | null {\r\n    if (this.autocomplete && this.autocomplete._keyManager) {\r\n      return this.autocomplete._keyManager.activeItem;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stream of clicks outside of the autocomplete panel. */\r\n  private get _outsideClickStream(): Observable<any> {\r\n    if (!this._document) {\r\n      return observableOf(null);\r\n    }\r\n\r\n    return merge(\r\n      fromEvent(this._document, 'click'),\r\n      fromEvent(this._document, 'touchend')\r\n    )\r\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\r\n      const clickTarget = event.target as HTMLElement;\r\n      const formField = this._formField ?\r\n          this._formField._elementRef.nativeElement : null;\r\n\r\n      return this._overlayAttached &&\r\n              clickTarget !== this._element.nativeElement &&\r\n              (!formField || !formField.contains(clickTarget)) &&\r\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\r\n    }));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => {}) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this._element.nativeElement.disabled = isDisabled;\r\n  }\r\n\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n\r\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\r\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\r\n    // the input value to the one that it had on focus, however it won't dispatch any events\r\n    // which means that the model value will be out of sync with the view.\r\n    if (keyCode === ESCAPE) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\r\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\r\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\r\n      this._resetActiveItem();\r\n      this._closeKeyEventStream.next();\r\n      event.stopPropagation();\r\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\r\n      this.activeOption._selectViaInteraction();\r\n      this._resetActiveItem();\r\n      event.preventDefault();\r\n    } else if (this.autocomplete) {\r\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\r\n\r\n      if (this.panelOpen || keyCode === TAB) {\r\n        this.autocomplete._keyManager.onKeydown(event);\r\n      } else if (isArrowKey && this._canOpen()) {\r\n        this.openPanel();\r\n      }\r\n\r\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n        this._scrollToOption();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleInput(event: KeyboardEvent): void {\r\n    let target = event.target as HTMLInputElement;\r\n    let value: number | string | null = target.value;\r\n\r\n    // Based on `NumberValueAccessor` from forms.\r\n    if (target.type === 'number') {\r\n      value = value == '' ? null : parseFloat(value);\r\n    }\r\n\r\n    // If the input has a placeholder, IE will fire the `input` event on page load,\r\n    // focus and blur, in addition to when the user actually changed the value. To\r\n    // filter out all of the extra events, we save the value on focus and between\r\n    // `input` events, and we check whether it changed.\r\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\r\n    if (this._previousValue !== value && document.activeElement === event.target) {\r\n      this._previousValue = value;\r\n      this._onChange(value);\r\n\r\n      if (this._canOpen()) {\r\n        this.openPanel();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleFocus(): void {\r\n    if (this._canOpen()) {\r\n      this._previousValue = this._element.nativeElement.value;\r\n      this._attachOverlay();\r\n      this._floatLabel(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n   * This causes the value to jump when selecting an option with the mouse.\r\n   * This method manually floats the label until the panel can be closed.\r\n   * @param shouldAnimate Whether the label should be animated when it is floated.\r\n   */\r\n  private _floatLabel(shouldAnimate = false): void {\r\n    if (this._formField && this._formField.floatLabel === 'auto') {\r\n      if (shouldAnimate) {\r\n        this._formField._animateAndLockLabel();\r\n      } else {\r\n        this._formField.floatLabel = 'always';\r\n      }\r\n\r\n      this._manuallyFloatingLabel = true;\r\n    }\r\n  }\r\n\r\n  /** If the label has been manually elevated, return it to its normal state. */\r\n  private _resetLabel(): void  {\r\n    if (this._manuallyFloatingLabel) {\r\n      this._formField.floatLabel = 'auto';\r\n      this._manuallyFloatingLabel = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given that we are not actually focusing active options, we must manually adjust scroll\r\n   * to reveal options below the fold. First, we find the offset of the option from the top\r\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\r\n   * the panel height + the option height, so the active option will be just visible at the\r\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\r\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\r\n   * not adjusted.\r\n   */\r\n  private _scrollToOption(): void {\r\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(index,\r\n        this.autocomplete.options, this.autocomplete.optionGroups);\r\n\r\n    const newScrollPosition = _getOptionScrollPosition(\r\n      index + labelCount,\r\n      AUTOCOMPLETE_OPTION_HEIGHT,\r\n      this.autocomplete._getScrollTop(),\r\n      AUTOCOMPLETE_PANEL_HEIGHT\r\n    );\r\n\r\n    this.autocomplete._setScrollTop(newScrollPosition);\r\n  }\r\n\r\n  /**\r\n   * This method listens to a stream of panel closing actions and resets the\r\n   * stream every time the option list changes.\r\n   */\r\n  private _subscribeToClosingActions(): Subscription {\r\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\r\n    const optionChanges = this.autocomplete.options.changes.pipe(\r\n      tap(() => this._positionStrategy.reapplyLastPosition()),\r\n      // Defer emitting to the stream until the next tick, because changing\r\n      // bindings in here will cause \"changed after checked\" errors.\r\n      delay(0)\r\n    );\r\n\r\n    // When the zone is stable initially, and when the option list changes...\r\n    return merge(firstStable, optionChanges)\r\n      .pipe(\r\n        // create a new stream of panelClosingActions, replacing any previous streams\r\n        // that were created, and flatten it so our stream only emits closing events...\r\n        switchMap(() => {\r\n          this._resetActiveItem();\r\n          this.autocomplete._setVisibility();\r\n\r\n          if (this.panelOpen) {\r\n            this._overlayRef!.updatePosition();\r\n          }\r\n\r\n          return this.panelClosingActions;\r\n        }),\r\n        // when the first closing event occurs...\r\n        take(1)\r\n      )\r\n      // set the value, close the panel, and complete.\r\n      .subscribe(event => this._setValueAndClose(event));\r\n  }\r\n\r\n  /** Destroys the autocomplete suggestion panel. */\r\n  private _destroyPanel(): void {\r\n    if (this._overlayRef) {\r\n      this.closePanel();\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\r\n\r\n  private _setTriggerValue(value: any): void {\r\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\r\n      this.autocomplete.displayWith(value) :\r\n      value;\r\n\r\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n    const inputValue = toDisplay != null ? toDisplay : '';\r\n\r\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\r\n    // through change detection.\r\n    if (this._formField) {\r\n      this._formField._control.value = inputValue;\r\n    } else {\r\n      this._element.nativeElement.value = inputValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method closes the panel, and if a value is specified, also sets the associated\r\n   * control to that value. It will also mark the control as dirty if this interaction\r\n   * stemmed from the user.\r\n   */\r\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\r\n    if (event && event.source) {\r\n      this._clearPreviousSelectedOption(event.source);\r\n      this._setTriggerValue(event.source.value);\r\n      this._onChange(event.source.value);\r\n      this._element.nativeElement.focus();\r\n      this.autocomplete._emitSelectEvent(event.source);\r\n    }\r\n\r\n    this.closePanel();\r\n  }\r\n\r\n  /**\r\n   * Clear any previous selected option and emit a selection change event for this option\r\n   */\r\n  private _clearPreviousSelectedOption(skip: MatOption) {\r\n    this.autocomplete.options.forEach(option => {\r\n      if (option != skip && option.selected) {\r\n        option.deselect();\r\n      }\r\n    });\r\n  }\r\n\r\n  private _attachOverlay(): void {\r\n    if (!this.autocomplete) {\r\n      throw getMatAutocompleteMissingPanelError();\r\n    }\r\n\r\n    if (!this._overlayRef) {\r\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\r\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\r\n\r\n      if (this._viewportRuler) {\r\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\r\n          if (this.panelOpen && this._overlayRef) {\r\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // Update the panel width and direction, in case anything has changed.\r\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\r\n    }\r\n\r\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._portal);\r\n      this._closingActionsSubscription = this._subscribeToClosingActions();\r\n    }\r\n\r\n    const wasOpen = this.panelOpen;\r\n\r\n    this.autocomplete._setVisibility();\r\n    this.autocomplete._isOpen = this._overlayAttached = true;\r\n\r\n    // We need to do an extra `panelOpen` check in here, because the\r\n    // autocomplete won't be shown if there are no options.\r\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\r\n      this.autocomplete.opened.emit();\r\n    }\r\n  }\r\n\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getOverlayPosition(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      width: this._getPanelWidth(),\r\n      direction: this._dir\r\n    });\r\n  }\r\n\r\n  private _getOverlayPosition(): PositionStrategy {\r\n    this._positionStrategy = this._overlay.position()\r\n      .flexibleConnectedTo(this._getConnectedElement())\r\n      .withFlexibleDimensions(false)\r\n      .withPush(false)\r\n      .withPositions([\r\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\r\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\r\n      ]);\r\n\r\n    // The overlay edge connected to the trigger should have squared corners, while\r\n    // the opposite end has rounded corners. We apply a CSS class to swap the\r\n    // border-radius based on the overlay position.\r\n    this._positionStrategy.positionChanges.subscribe(({connectionPair}) => {\r\n      if (this.autocomplete) {\r\n        this.autocomplete._classList['mat-autocomplete-panel-above'] =\r\n            connectionPair.originY === 'top';\r\n      }\r\n    });\r\n\r\n    return this._positionStrategy;\r\n  }\r\n\r\n  private _getConnectedElement(): ElementRef {\r\n    if (this.connectedTo) {\r\n      return this.connectedTo.elementRef;\r\n    }\r\n\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\r\n  }\r\n\r\n  private _getPanelWidth(): number | string {\r\n    return this.autocomplete.panelWidth || this._getHostWidth();\r\n  }\r\n\r\n  /** Returns the width of the input element, so the panel width can match it. */\r\n  private _getHostWidth(): number {\r\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n  }\r\n\r\n  /**\r\n   * Resets the active item to -1 so arrow events will activate the\r\n   * correct options, or to 0 if the consumer opted into it.\r\n   */\r\n  private _resetActiveItem(): void {\r\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\r\n  }\r\n\r\n  /** Determines whether the panel can be opened. */\r\n  private _canOpen(): boolean {\r\n    const element: HTMLInputElement = this._element.nativeElement;\r\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef} from '@angular/core';\r\n\r\n/**\r\n * Directive applied to an element to make it usable\r\n * as a connection point for an autocomplete panel.\r\n */\r\n@Directive({\r\n  selector: '[matAutocompleteOrigin]',\r\n  exportAs: 'matAutocompleteOrigin',\r\n})\r\nexport class MatAutocompleteOrigin {\r\n  constructor(\r\n      /** Reference to the element on which the directive is applied. */\r\n      public elementRef: ElementRef<HTMLElement>) { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\r\nimport {MatAutocomplete} from './autocomplete';\r\nimport {\r\n  MatAutocompleteTrigger,\r\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n} from './autocomplete-trigger';\r\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\r\n\r\n@NgModule({\r\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\r\n  exports: [\r\n    MatAutocomplete,\r\n    MatOptionModule,\r\n    MatAutocompleteTrigger,\r\n    MatAutocompleteOrigin,\r\n    MatCommonModule\r\n  ],\r\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\r\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\r\n})\r\nexport class MatAutocompleteModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","getMatAutocompleteMissingPanelError","Error","setPrototypeOf","__proto__","Array","p","hasOwnProperty","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","mixinDisableRipple","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","_this","_super","call","showPanel","_isOpen","displayWith","optionSelected","EventEmitter","opened","closed","_classList","id","_autoActiveFirstOption","tslib_1.__extends","defineProperty","value","coerceBooleanProperty","length","split","forEach","className","trim","nativeElement","ngAfterContentInit","_keyManager","ActiveDescendantKeyManager","options","withWrap","_setVisibility","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","emit","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","exportAs","inputs","host","class","providers","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","undefined","decorators","Inject","propDecorators","ContentChildren","MatOption","descendants","optionGroups","MatOptgroup","Input","panelWidth","Output","classList","MatAutocompleteOrigin","elementRef","Directive","ElementRef","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","_element","_overlay","_viewContainerRef","_zone","_scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","Subscription","EMPTY","_closeKeyEventStream","Subject","_onChange","_onTouched","autocompleteAttribute","_overlayAttached","optionSelections","defer","autocomplete","merge","apply","map","onSelectionChange","onStable","asObservable","pipe","take","switchMap","ngOnDestroy","unsubscribe","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","panelOpen","_overlayRef","hasAttached","detach","_closingActionsSubscription","detectChanges","updatePosition","tabOut","filter","_outsideClickStream","detachments","observableOf","MatOptionSelectionChange","activeItem","fromEvent","clickTarget","formField","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","ESCAPE","preventDefault","UP_ARROW","altKey","_resetActiveItem","next","stopPropagation","activeOption","ENTER","_selectViaInteraction","prevActiveItem","isArrowKey","DOWN_ARROW","TAB","onKeydown","_canOpen","_scrollToOption","_handleInput","target","parseFloat","_previousValue","document","activeElement","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","index","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","newScrollPosition","_getOptionScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","changes","tap","_positionStrategy","reapplyLastPosition","delay","panelClosingActions","subscribe","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","selected","deselect","updateSize","width","_getPanelWidth","_portal","TemplatePortal","_getOverlayConfig","change","attach","wasOpen","OverlayConfig","positionStrategy","_getOverlayPosition","scrollStrategy","direction","position","flexibleConnectedTo","_getConnectedElement","withFlexibleDimensions","withPush","withPositions","originX","originY","overlayX","overlayY","positionChanges","_a","connectionPair","connectedTo","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","[attr.autocomplete]","[attr.role]","[attr.aria-autocomplete]","[attr.aria-activedescendant]","[attr.aria-expanded]","[attr.aria-owns]","(focusin)","(blur)","(input)","(keydown)","ViewContainerRef","NgZone","ChangeDetectorRef","Directionality","Optional","MatFormField","Host","DOCUMENT","ViewportRuler","autocompleteDisabled","NgModule","imports","MatOptionModule","OverlayModule","MatCommonModule","CommonModule","exports","declarations","MatAutocompleteModule"],"mappings":"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"}