{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\r\nimport {\r\n  AfterContentInit,\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {Subject, Subscription} from 'rxjs';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\nimport {MatMonthView} from './month-view';\r\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\r\nimport {MatYearView} from './year-view';\r\n\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\r\n\r\n/** Default header for MatCalendar */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-calendar-header',\r\n  templateUrl: 'calendar-header.html',\r\n  exportAs: 'matCalendarHeader',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendarHeader<D> {\r\n  constructor(private _intl: MatDatepickerIntl,\r\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  /** The label for the current calendar view. */\r\n  get periodButtonText(): string {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter\r\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\r\n              .toLocaleUpperCase();\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\r\n    }\r\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\r\n    const firstYearInView = this._dateAdapter.getYearName(\r\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\r\n    const lastYearInView = this._dateAdapter.getYearName(\r\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\r\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\r\n  }\r\n\r\n  get periodButtonLabel(): string {\r\n    return this.calendar.currentView == 'month' ?\r\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\r\n\r\n  /** The label for the the previous button. */\r\n  get prevButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.prevMonthLabel,\r\n      'year': this._intl.prevYearLabel,\r\n      'multi-year': this._intl.prevMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** The label for the the next button. */\r\n  get nextButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.nextMonthLabel,\r\n      'year': this._intl.nextYearLabel,\r\n      'multi-year': this._intl.nextMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  currentPeriodClicked(): void {\r\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  previousClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\r\n            this._dateAdapter.addCalendarYears(\r\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\r\n            );\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  nextClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\r\n            this._dateAdapter.addCalendarYears(\r\n                this.calendar.activeDate,\r\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\r\n            );\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  previousEnabled(): boolean {\r\n    if (!this.calendar.minDate) {\r\n      return true;\r\n    }\r\n    return !this.calendar.minDate ||\r\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  nextEnabled(): boolean {\r\n    return !this.calendar.maxDate ||\r\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n    }\r\n    // Otherwise we are in 'multi-year' view.\r\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\r\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\r\n  }\r\n}\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.css'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  exportAs: 'matCalendar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\r\n  /** An input indicating the type of the header component, if set. */\r\n  @Input() headerComponent: ComponentType<any>;\r\n\r\n  /** A portal containing the header component type for this calendar. */\r\n  _calendarHeaderPortal: Portal<any>;\r\n\r\n  private _intlChanges: Subscription;\r\n\r\n  /**\r\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n   * We need to schedule it, rather than do it immediately, because we have to wait\r\n   * for Angular to re-evaluate the view children.\r\n   */\r\n  private _moveFocusOnNextTick = false;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt; }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: MatCalendarView = 'month';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the year chosen in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the month chosen in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\r\n\r\n  /** Reference to the current multi-year view component. */\r\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get activeDate(): D { return this._clampedActiveDate; }\r\n  set activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n    this.stateChanges.next();\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  get currentView(): MatCalendarView { return this._currentView; }\r\n  set currentView(value: MatCalendarView) {\r\n    this._currentView = value;\r\n    this._moveFocusOnNextTick = true;\r\n  }\r\n  private _currentView: MatCalendarView;\r\n\r\n  /**\r\n   * Emits whenever there is a state change that the header may need to respond to.\r\n   */\r\n  stateChanges = new Subject<void>();\r\n\r\n  constructor(_intl: MatDatepickerIntl,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => {\r\n      _changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\r\n    this.activeDate = this.startAt || this._dateAdapter.today();\r\n\r\n    // Assign to the private property since we don't want to move focus on init.\r\n    this._currentView = this.startView;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._moveFocusOnNextTick) {\r\n      this._moveFocusOnNextTick = false;\r\n      this.focusActiveCell();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this._getCurrentViewComponent();\r\n\r\n      if (view) {\r\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\r\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\r\n        this._changeDetectorRef.detectChanges();\r\n        view._init();\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  focusActiveCell() {\r\n    this._getCurrentViewComponent()._focusActiveCell();\r\n  }\r\n\r\n  /** Updates today's date after an update of the active date */\r\n  updateTodaysDate() {\r\n    let view = this.currentView == 'month' ? this.monthView :\r\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\r\n\r\n    view.ngAfterContentInit();\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D): void {\r\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\r\n\r\n  /** Handles year selection in the multiyear view. */\r\n  _yearSelectedInMultiYearView(normalizedYear: D) {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelectedInYearView(normalizedMonth: D) {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  _userSelected(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles year/month selection in the multi-year/year views. */\r\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\r\n    this.activeDate = date;\r\n    this.currentView = view;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Returns the component instance that corresponds to the current calendar view. */\r\n  private _getCurrentViewComponent() {\r\n    return this.monthView || this.yearView || this.multiYearView;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n  group,\r\n  query,\r\n  animateChild,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by the Material datepicker. */\r\nexport const matDatepickerAnimations: {\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n  readonly fadeInCalendar: AnimationTriggerMetadata;\r\n} = {\r\n  /** Transforms the height of the datepicker's calendar. */\r\n  transformPanel: trigger('transformPanel', [\r\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\r\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\r\n    transition('void => enter', group([\r\n      query('@fadeInCalendar', animateChild()),\r\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\r\n    ])),\r\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\r\n  ]),\r\n\r\n  /** Fades in the content of the calendar. */\r\n  fadeInCalendar: trigger('fadeInCalendar', [\r\n    state('void', style({opacity: 0})),\r\n    state('enter', style({opacity: 1})),\r\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {take, filter} from 'rxjs/operators';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\r\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\r\nimport {merge, Subject, Subscription} from 'rxjs';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MatDatepickerInput} from './datepicker-input';\r\nimport {MatCalendar} from './calendar';\r\nimport {matDatepickerAnimations} from './datepicker-animations';\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n// Boilerplate for applying mixins to MatDatepickerContent.\r\n/** @docs-private */\r\nexport class MatDatepickerContentBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  styleUrls: ['datepicker-content.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[@transformPanel]': '\"enter\"',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n  },\r\n  animations: [\r\n    matDatepickerAnimations.transformPanel,\r\n    matDatepickerAnimations.fadeInCalendar,\r\n  ],\r\n  exportAs: 'matDatepickerContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color'],\r\n})\r\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\r\n  implements AfterViewInit, CanColor {\r\n\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\r\n\r\n  /** Reference to the datepicker that created the overlay. */\r\n  datepicker: MatDatepicker<D>;\r\n\r\n  /** Whether the datepicker is above or below the input. */\r\n  _isAbove: boolean;\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    super(elementRef);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._calendar.focusActiveCell();\r\n  }\r\n}\r\n\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker',\r\n  template: '',\r\n  exportAs: 'matDatepicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\r\n  /** An input indicating the type of the custom header component for the calendar, if set. */\r\n  @Input() calendarHeaderComponent: ComponentType<any>;\r\n\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: 'month' | 'year' = 'month';\r\n\r\n  /** Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return this._color ||\r\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\r\n  }\r\n  set color(value: ThemePalette) {\r\n    this._color = value;\r\n  }\r\n  _color: ThemePalette;\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean { return this._touchUi; }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this._datepickerInput ?\r\n        this._datepickerInput.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /**\r\n   * Emits selected year in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits selected month in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : this.close(); }\r\n  private _opened = false;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id: string = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null { return this._validSelected; }\r\n  set _selected(value: D | null) { this._validSelected = value; }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\r\n\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  _datepickerInput: MatDatepickerInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly _disabledChange = new Subject<boolean>();\r\n\r\n  /** Emits new selected date when selected date changes. */\r\n  readonly _selectedChanged = new Subject<D>();\r\n\r\n  constructor(private _dialog: MatDialog,\r\n              private _overlay: Overlay,\r\n              private _ngZone: NgZone,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /** Selects the given date */\r\n  select(date: D): void {\r\n    let oldValue = this._selected;\r\n    this._selected = date;\r\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\r\n      this._selectedChanged.next(date);\r\n    }\r\n  }\r\n\r\n  /** Emits the selected year in multiyear view */\r\n  _selectYear(normalizedYear: D): void {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Emits selected month in year view */\r\n  _selectMonth(normalizedMonth: D): void {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: MatDatepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('A MatDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog',\r\n    });\r\n\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n    this._setColor();\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\r\n                                                                          this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\r\n      this._popupComponentRef.instance.datepicker = this;\r\n      this._setColor();\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => {\r\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n        return event.keyCode === ESCAPE ||\r\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\r\n      }))\r\n    ).subscribe(() => this.close());\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn('.mat-datepicker-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withPush(false)\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Passes the current theme color along to the calendar overlay. */\r\n  private _setColor(): void {\r\n    const color = this.color;\r\n    if (this._popupComponentRef) {\r\n      this._popupComponentRef.instance.color = color;\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.componentInstance.color = color;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators\r\n} from '@angular/forms';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatDatepicker} from './datepicker';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport class MatDatepickerInputEvent<D> {\r\n  /** The new value for the target datepicker input. */\r\n  value: D | null;\r\n\r\n  constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    public target: MatDatepickerInput<D>,\r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    public targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n\r\n/** Directive used to connect an input to a MatDatepicker. */\r\n@Directive({\r\n  selector: 'input[matDatepicker]',\r\n  providers: [\r\n    MAT_DATEPICKER_VALUE_ACCESSOR,\r\n    MAT_DATEPICKER_VALIDATORS,\r\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\r\n  ],\r\n  host: {\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onBlur()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  },\r\n  exportAs: 'matDatepickerInput',\r\n})\r\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set matDatepicker(value: MatDatepicker<D>) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    this._datepicker = value;\r\n    this._datepicker._registerInput(this);\r\n    this._datepickerSubscription.unsubscribe();\r\n\r\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\r\n      this.value = selected;\r\n      this._cvaOnChange(selected);\r\n      this._onTouched();\r\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n    });\r\n  }\r\n  _datepicker: MatDatepicker<D>;\r\n\r\n  /** Function that can be used to filter out dates within the datepicker. */\r\n  @Input()\r\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\r\n    this._dateFilter = value;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null) => boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null { return this._value; }\r\n  set value(value: D | null) {\r\n    value = this._dateAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n    const oldDate = this.value;\r\n    this._value = value;\r\n    this._formatValue(value);\r\n\r\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n  }\r\n  private _value: D | null;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null { return this._min; }\r\n  set min(value: D | null) {\r\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _min: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null { return this._max; }\r\n  set max(value: D | null) {\r\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _max: D | null;\r\n\r\n  /** Whether the datepicker-input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return !!this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n    const element = this._elementRef.nativeElement;\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n\r\n    // We need to null check the `blur` method, because it's undefined during SSR.\r\n    if (newValue && element.blur) {\r\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n      // is problematic, because it would mean that it triggers another change detection cycle,\r\n      // which then causes a changed after checked error if the input element was focused before.\r\n      element.blur();\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\r\n      new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\r\n      new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<D | null>();\r\n\r\n  /** Emits when the disabled state has changed */\r\n  _disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {};\r\n\r\n  private _cvaOnChange: (value: any) => void = () => {};\r\n\r\n  private _validatorOnChange = () => {};\r\n\r\n  private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n  private _localeSubscription = Subscription.EMPTY;\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid ?\r\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\r\n  }\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.min || !controlValue ||\r\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\r\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.max || !controlValue ||\r\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\r\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n        null : {'matDatepickerFilter': true};\r\n  }\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn | null =\r\n      Validators.compose(\r\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid = false;\r\n\r\n  constructor(\r\n      private _elementRef: ElementRef,\r\n      @Optional() public _dateAdapter: DateAdapter<D>,\r\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n      @Optional() private _formField: MatFormField) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  /** @docs-private */\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  /** @docs-private */\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\r\n   */\r\n  getPopupConnectionElementRef(): ElementRef {\r\n    return this.getConnectedOverlayOrigin();\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: D): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n    date = this._getValidDateOrNull(date);\r\n\r\n    if (!this._dateAdapter.sameDate(date, this._value)) {\r\n      this._value = date;\r\n      this._cvaOnChange(date);\r\n      this._valueChange.emit(date);\r\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n  }\r\n\r\n  _onChange() {\r\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /** Returns the palette used by the input's form field, if any. */\r\n  _getThemePalette() {\r\n    return this._formField ? this._formField.color : undefined;\r\n  }\r\n\r\n  /** Handles blur events on the input. */\r\n  _onBlur() {\r\n    // Reformat the input only if we have a valid value.\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n\r\n    this._onTouched();\r\n  }\r\n\r\n  /** Formats a value and sets it on the input element. */\r\n  private _formatValue(value: D | null) {\r\n    this._elementRef.nativeElement.value =\r\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {merge, of as observableOf, Subscription} from 'rxjs';\r\nimport {MatDatepicker} from './datepicker';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\n\r\n\r\n/** Can be used to override the icon of a `matDatepickerToggle`. */\r\n@Directive({\r\n  selector: '[matDatepickerToggleIcon]'\r\n})\r\nexport class MatDatepickerToggleIcon {}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  styleUrls: ['datepicker-toggle.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-toggle',\r\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\r\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\r\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\r\n  },\r\n  exportAs: 'matDatepickerToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  /** Datepicker instance that the button will toggle. */\r\n  @Input('for') datepicker: MatDatepicker<D>;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\r\n\r\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  _open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\r\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\r\n        this.datepicker._datepickerInput._disabledChange : observableOf();\r\n    const datepickerToggled = this.datepicker ?\r\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\r\n        observableOf();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      datepickerDisabled,\r\n      inputDisabled,\r\n      datepickerToggled\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatCalendar, MatCalendarHeader} from './calendar';\r\nimport {MatCalendarBody} from './calendar-body';\r\nimport {\r\n  MatDatepicker,\r\n  MatDatepickerContent,\r\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n} from './datepicker';\r\nimport {MatDatepickerInput} from './datepicker-input';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\r\nimport {MatMonthView} from './month-view';\r\nimport {MatMultiYearView} from './multi-year-view';\r\nimport {MatYearView} from './year-view';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n    PortalModule,\r\n  ],\r\n  exports: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatMultiYearView,\r\n    MatCalendarHeader,\r\n  ],\r\n  declarations: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatMultiYearView,\r\n    MatCalendarHeader,\r\n  ],\r\n  providers: [\r\n    MatDatepickerIntl,\r\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n  ],\r\n  entryComponents: [\r\n    MatDatepickerContent,\r\n    MatCalendarHeader,\r\n  ]\r\n})\r\nexport class MatDatepickerModule {}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\r\n      `custom implementation.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n\r\n/** Datepicker data that requires internationalization. */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatDatepickerIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the calendar popup (used by screen readers). */\r\n  calendarLabel: string = 'Calendar';\r\n\r\n  /** A label for the button used to open the calendar popup (used by screen readers). */\r\n  openCalendarLabel: string = 'Open calendar';\r\n\r\n  /** A label for the previous month button (used by screen readers). */\r\n  prevMonthLabel: string = 'Previous month';\r\n\r\n  /** A label for the next month button (used by screen readers). */\r\n  nextMonthLabel: string = 'Next month';\r\n\r\n  /** A label for the previous year button (used by screen readers). */\r\n  prevYearLabel: string = 'Previous year';\r\n\r\n  /** A label for the next year button (used by screen readers). */\r\n  nextYearLabel: string = 'Next year';\r\n\r\n  /** A label for the previous multi-year button (used by screen readers). */\r\n  prevMultiYearLabel: string = 'Previous 20 years';\r\n\r\n  /** A label for the next multi-year button (used by screen readers). */\r\n  nextMultiYearLabel: string = 'Next 20 years';\r\n\r\n  /** A label for the 'switch to month view' button (used by screen readers). */\r\n  switchToMonthViewLabel: string = 'Choose date';\r\n\r\n  /** A label for the 'switch to year view' button (used by screen readers). */\r\n  switchToMultiYearViewLabel: string = 'Choose month and year';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {take} from 'rxjs/operators';\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class MatCalendarCell {\r\n  constructor(public value: number,\r\n              public displayValue: string,\r\n              public ariaLabel: string,\r\n              public enabled: boolean) {}\r\n}\r\n\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.css'],\r\n  host: {\r\n    'class': 'mat-calendar-body',\r\n    'role': 'grid',\r\n    'attr.aria-readonly': 'true'\r\n  },\r\n  exportAs: 'matCalendarBody',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendarBody {\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: MatCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** The value in the table that is currently selected. */\r\n  @Input() selectedValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols = 7;\r\n\r\n  /** Whether to allow selection of disabled cells. */\r\n  @Input() allowDisabledSelection = false;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell = 0;\r\n\r\n  /**\r\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n   * maintained even as the table resizes.\r\n   */\r\n  @Input() cellAspectRatio = 1;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\r\n\r\n  _cellClicked(cell: MatCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  get _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length ?\r\n        this.numCols - this.rows[0].length : 0;\r\n  }\r\n\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\r\n      });\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'matMonthView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatMonthView<D> implements AfterContentInit {\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number | null;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: {long: string, narrow: string}[];\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              @Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    if (this._selectedDate != date) {\r\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n              this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\r\n          this._userSelection.emit();\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel =\r\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n            .toLocaleUpperCase();\r\n\r\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n            this._dateAdapter.getYear(this.activeDate),\r\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      this._weeks[this._weeks.length - 1]\r\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return !!date &&\r\n        (!this.dateFilter || this.dateFilter(date)) &&\r\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n        this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter} from '@angular/material/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-multi-year-view',\r\n  templateUrl: 'multi-year-view.html',\r\n  exportAs: 'matMultiYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatMultiYearView<D> implements AfterContentInit {\r\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\r\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new year is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected year. This doesn't imply a change on the selected date */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the currently displayed years. */\r\n  _years: MatCalendarCell[][];\r\n\r\n  /** The year that today falls on. */\r\n  _todayYear: number;\r\n\r\n  /** The year of the selected date. Null if the selected date is null. */\r\n  _selectedYear: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Initializes this multi-year view. */\r\n  _init() {\r\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    let activeOffset = activeYear % yearsPerPage;\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(activeYear - activeOffset + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map(year => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(year: number) {\r\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\r\n    let month = this._dateAdapter.getMonth(this.activeDate);\r\n    let daysInMonth =\r\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\r\n        break;\r\n      case ENTER:\r\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\r\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (year === undefined || year === null ||\r\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'matYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatYearView<D> implements AfterContentInit {\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected month. This doesn't imply a change on the selected date */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              @Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    const normalizedDate =\r\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\r\n\r\n    this.monthSelected.emit(normalizedDate);\r\n\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\r\n\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n        month => this._createCellForMonth(month, monthNames[month])));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n        this._dateAdapter.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._dateAdapter.format(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n        this._dateFormats.display.monthYearA11yLabel);\r\n    return new MatCalendarCell(\r\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (month === undefined || month === null ||\r\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n"],"names":["this","currentView","view","MatCalendar","decorators","styles","host","class","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ctorParameters","type","MatDatepickerIntl","propDecorators","headerComponent","Input","startAt","minDate","maxDate","dateFilter","selectedChange","Output","yearSelected","monthSelected","_userSelection","monthView","ViewChild","args","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","transformPanel","trigger","state","style","opacity","transform","transition","group","query","animateChild","animate","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_elementRef","_MatDatepickerContentMixinBase","mixinColor","MatDatepickerContent","elementRef","_super","call","tslib_1.__extends","prototype","ngAfterViewInit","_calendar","focusActiveCell","Component","selector","template","[@transformPanel]","[class.mat-datepicker-content-touch]","animations","inputs","_overlay","_ngZone","_viewContainerRef","_scrollStrategy","_dateAdapter","_dir","_document","createMissingDateImplError","Object","defineProperty","MatDatepicker","get","set","enumerable","configurable","newValue","_disabled","_disabledChange","next","_inputSubscription","unsubscribe","complete","_popupRef","dispose","_popupComponentRef","_selected","date","sameDate","oldValue","_selectedChanged","_datepickerInput","Error","input","_valueChange","subscribe","value","_this","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","emit","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","focus","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_setColor","_createPopup","attach","instance","onStable","asObservable","pipe","take","hasBackdrop","backdropClass","direction","scrollStrategy","create","overlayConfig","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPush","withPositions","originX","originY","overlayX","overlayY","color","MatDialog","undefined","Inject","DateAdapter","Optional","Directionality","DOCUMENT","calendarHeaderComponent","disabled","opened","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","EventEmitter","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","selected","_value","isValid","oldDate","_formatValue","_min","_max","coerceBooleanProperty","element","blur","ngOnDestroy","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","altKey","DOWN_ARROW","open","preventDefault","_onInput","parse","_onChange","_getThemePalette","_onBlur","format","display","obj","isDateInstance","Directive","providers","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MAT_DATE_FORMATS","MatFormField","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_intl","_changeDetectorRef","_stateChanges","ngOnChanges","changes","_watchStateChanges","ngAfterContentInit","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","markForCheck","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","ContentChild","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","PortalModule","exports","MatCalendarBody","MatCalendarHeader","declarations","entryComponents","MatDatepickerModule","__extends","d","b","__","constructor","extendStatics","provider","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","providedIn","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","_focusActiveCell","runOutsideAngular","querySelector","role","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","isRtl","_isRtl","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","UP_ARROW","HOME","getDate","END","getNumDaysInMonth","PAGE_UP","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","dateA11yLabel","d1","d2","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","changeDetectorRef","stateChanges","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","ChangeDetectorRef","_intlChanges","_moveFocusOnNextTick","_currentView","startView","change","firstChange","_getCurrentViewComponent"],"mappings":"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"}