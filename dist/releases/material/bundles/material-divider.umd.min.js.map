{"version":3,"file":"material-divider.umd.min.js","sources":["../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-divider',\r\n  host: {\r\n    'role': 'separator',\r\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n    '[class.mat-divider-vertical]': 'vertical',\r\n    '[class.mat-divider-horizontal]': '!vertical',\r\n    '[class.mat-divider-inset]': 'inset',\r\n    'class': 'mat-divider'\r\n  },\r\n  template: '',\r\n  styleUrls: ['divider.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDivider {\r\n  /** Whether the divider is vertically aligned. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\r\n  private _vertical: boolean = false;\r\n\r\n  /** Whether the divider is an inset divider. */\r\n  @Input()\r\n  get inset(): boolean { return this._inset; }\r\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\r\n  private _inset: boolean = false;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatDivider} from './divider';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, CommonModule],\r\n  exports: [MatDivider, MatCommonModule],\r\n  declarations: [MatDivider],\r\n})\r\nexport class MatDividerModule {}\r\n"],"names":["this","_vertical","_inset","Object","defineProperty","MatDivider","prototype","value","coerceBooleanProperty","type","Component","args","selector","host","role","[attr.aria-orientation]","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","class","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgModule","imports","MatCommonModule","CommonModule","exports","declarations","MatDividerModule"],"mappings":";;;;;;;6jBAgCAA,KAAAC,WAA+B,EAM/BD,KAAAE,QAA4B,EAH5B,MALAC,QAAAC,eAAMC,EAANC,UAAA,gBAAA,WAA4B,MAAON,MAAKC,eACtC,SAAaM,GAAkBP,KAAKC,UAAYO,EAAAA,sBAAsBD,oCAKxEJ,OAAAC,eAAMC,EAANC,UAAA,aAAA,WAAyB,MAAON,MAAKE,YACnC,SAAUK,GAAkBP,KAAKE,OAASM,EAAAA,sBAAsBD,mDA1BlEE,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEC,MACFC,KAAA,YACMC,0BAAN,uCACIC,+BAAJ,WACIC,iCAAJ,YACIC,4BAAJ,QACIC,MAAJ,eAEAC,SAAA,GACAC,QAAA,+SACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,+EAYAtB,gCCnCA,sBAcAI,KAACmB,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,gBAAiBC,EAAAA,cAC3BC,SAAU3B,EAAYyB,EAAAA,iBACtBG,cAAe5B,OAjBjB6B"}