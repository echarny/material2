{"version":3,"file":"table.js","sources":["../../../src/cdk/table/table-module.ts","../../../src/cdk/table/table.ts","../../../src/cdk/table/sticky-styler.ts","../../../src/cdk/table/table-errors.ts","../../../src/cdk/table/row.ts","../../../src/cdk/table/cell.ts","../../../src/cdk/table/can-stick.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {HeaderRowOutlet, DataRowOutlet, CdkTable, FooterRowOutlet} from './table';\r\nimport {\r\n  CdkCellOutlet, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow,\r\n  CdkRowDef\r\n} from './row';\r\nimport {\r\n  CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef,\r\n  CdkFooterCellDef, CdkFooterCell\r\n} from './cell';\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n  CdkTable,\r\n  CdkRowDef,\r\n  CdkCellDef,\r\n  CdkCellOutlet,\r\n  CdkHeaderCellDef,\r\n  CdkFooterCellDef,\r\n  CdkColumnDef,\r\n  CdkCell,\r\n  CdkRow,\r\n  CdkHeaderCell,\r\n  CdkFooterCell,\r\n  CdkHeaderRow,\r\n  CdkHeaderRowDef,\r\n  CdkFooterRow,\r\n  CdkFooterRowDef,\r\n  DataRowOutlet,\r\n  HeaderRowOutlet,\r\n  FooterRowOutlet,\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: EXPORTED_DECLARATIONS,\r\n  declarations: EXPORTED_DECLARATIONS\r\n\r\n})\r\nexport class CdkTableModule { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentChecked,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  isDevMode,\r\n  IterableChangeRecord,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  QueryList,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {CdkColumnDef} from './cell';\r\nimport {\r\n  BaseRowDef,\r\n  CdkCellOutlet,\r\n  CdkCellOutletMultiRowContext,\r\n  CdkCellOutletRowContext,\r\n  CdkFooterRowDef,\r\n  CdkHeaderRowDef,\r\n  CdkRowDef\r\n} from './row';\r\nimport {\r\n  getTableDuplicateColumnNameError,\r\n  getTableMissingMatchingRowDefError,\r\n  getTableMissingRowDefsError,\r\n  getTableMultipleDefaultRowDefsError,\r\n  getTableUnknownColumnError,\r\n  getTableUnknownDataSourceError\r\n} from './table-errors';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {StickyStyler} from './sticky-styler';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\n\r\n/** Interface used to provide an outlet for rows to be inserted into. */\r\nexport interface RowOutlet {\r\n  viewContainer: ViewContainerRef;\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[rowOutlet]'})\r\nexport class DataRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[headerRowOutlet]'})\r\nexport class HeaderRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[footerRowOutlet]'})\r\nexport class FooterRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\r\n}\r\n\r\n/**\r\n * The table template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n * @docs-private\r\n */\r\nexport const CDK_TABLE_TEMPLATE = `\r\n  <ng-container headerRowOutlet></ng-container>\r\n  <ng-container rowOutlet></ng-container>\r\n  <ng-container footerRowOutlet></ng-container>`;\r\n\r\n/**\r\n * Interface used to conveniently type the possible context interfaces for the render row.\r\n * @docs-private\r\n */\r\nexport interface RowContext<T>\r\n    extends CdkCellOutletMultiRowContext<T>, CdkCellOutletRowContext<T> { }\r\n\r\n/**\r\n * Class used to conveniently type the embedded view ref for rows with a context.\r\n * @docs-private\r\n */\r\nabstract class RowViewRef<T> extends EmbeddedViewRef<RowContext<T>> { }\r\n\r\n/**\r\n * Set of properties that represents the identity of a single rendered row.\r\n *\r\n * When the table needs to determine the list of rows to render, it will do so by iterating through\r\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\r\n * is false, there is only one template per data object). For each pair of data object and row\r\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\r\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\r\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\r\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\r\n *\r\n * @docs-private\r\n */\r\nexport interface RenderRow<T> {\r\n  data: T;\r\n  dataIndex: number;\r\n  rowDef: CdkRowDef<T>;\r\n}\r\n\r\n/**\r\n * A data table that can render a header row, data rows, and a footer row.\r\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\r\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\r\n * connect function that will return an Observable stream that emits the data array to render.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-table, table[cdk-table]',\r\n  exportAs: 'cdkTable',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-table',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CdkTable<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\r\n  /** Latest data provided by the data source. */\r\n  protected _data: T[];\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  /** List of the rendered rows as identified by their `RenderRow` object. */\r\n  private _renderRows: RenderRow<T>[];\r\n\r\n  /** Subscription that listens for the data provided by the data source. */\r\n  private _renderChangeSubscription: Subscription | null;\r\n\r\n  /**\r\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\r\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\r\n   * any custom column definitions added to `_customColumnDefs`.\r\n   */\r\n  private _columnDefsByName = new Map<string,  CdkColumnDef>();\r\n\r\n  /**\r\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\r\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\r\n   */\r\n  private _rowDefs: CdkRowDef<T>[];\r\n\r\n  /**\r\n   * Set of all header row definitions that can be used by this table. Populated by the rows\r\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\r\n   * `_customHeaderRowDefs`.\r\n   */\r\n  private _headerRowDefs: CdkHeaderRowDef[];\r\n\r\n  /**\r\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\r\n   * using `ContentChildren` as well as any custom row definitions added to\r\n   * `_customFooterRowDefs`.\r\n   */\r\n  private _footerRowDefs: CdkFooterRowDef[];\r\n\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<RenderRow<T>>;\r\n\r\n  /** Stores the row definition that does not have a when predicate. */\r\n  private _defaultRowDef: CdkRowDef<T> | null;\r\n\r\n  /**\r\n   * Column definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * column definitions as *it's* content child.\r\n   */\r\n  private _customColumnDefs = new Set<CdkColumnDef>();\r\n\r\n  /**\r\n   * Data row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * built-in data rows as *it's* content child.\r\n   */\r\n  private _customRowDefs = new Set<CdkRowDef<T>>();\r\n\r\n  /**\r\n   * Header row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * built-in header rows as *it's* content child.\r\n   */\r\n  private _customHeaderRowDefs = new Set<CdkHeaderRowDef>();\r\n\r\n  /**\r\n   * Footer row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\r\n   * built-in footer row as *it's* content child.\r\n   */\r\n  private _customFooterRowDefs = new Set<CdkFooterRowDef>();\r\n\r\n  /**\r\n   * Whether the header row definition has been changed. Triggers an update to the header row after\r\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n   */\r\n  private _headerRowDefChanged = true;\r\n\r\n  /**\r\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\r\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n   */\r\n  private _footerRowDefChanged = true;\r\n\r\n  /**\r\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\r\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\r\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\r\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\r\n   * and understand which rows are added/moved/removed.\r\n   *\r\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\r\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\r\n   * contains an array of created pairs. The array is necessary to handle cases where the data\r\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\r\n   * stored.\r\n   */\r\n  private _cachedRenderRowsMap = new Map<T, WeakMap<CdkRowDef<T>, RenderRow<T>[]>>();\r\n\r\n  /** Whether the table is applied to a native `<table>`. */\r\n  private _isNativeHtmlTable: boolean;\r\n\r\n  /**\r\n   * Utility class that is responsible for applying the appropriate sticky positioning styles to\r\n   * the table's rows and cells.\r\n   */\r\n  private _stickyStyler: StickyStyler;\r\n\r\n  /**\r\n   * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\r\n   * table subclasses.\r\n   */\r\n  protected stickyCssClass: string = 'cdk-table-sticky';\r\n\r\n  /**\r\n   * Tracking function that will be used to check the differences in data changes. Used similarly\r\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\r\n   * relative to the function to know if a row should be added/removed/moved.\r\n   * Accepts a function that takes two parameters, `index` and `item`.\r\n   */\r\n  @Input()\r\n  get trackBy(): TrackByFunction<T> { return this._trackByFn; }\r\n  set trackBy(fn: TrackByFunction<T>) {\r\n    if (isDevMode() &&\r\n        fn != null && typeof fn !== 'function' &&\r\n        <any>console && <any>console.warn) {\r\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\r\n    }\r\n    this._trackByFn = fn;\r\n  }\r\n  private _trackByFn: TrackByFunction<T>;\r\n\r\n  /**\r\n   * The table's source of data, which can be provided in three ways (in order of complexity):\r\n   *   - Simple data array (each object represents one table row)\r\n   *   - Stream that emits a data array each time the array changes\r\n   *   - `DataSource` object that implements the connect/disconnect interface.\r\n   *\r\n   * If a data array is provided, the table must be notified when the array's objects are\r\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\r\n   * render the diff since the last table render. If the data array reference is changed, the table\r\n   * will automatically trigger an update to the rows.\r\n   *\r\n   * When providing an Observable stream, the table will trigger an update automatically when the\r\n   * stream emits a new array of data.\r\n   *\r\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\r\n   * provided by the connect function and trigger updates when that stream emits new data array\r\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\r\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\r\n   * subscriptions registered during the connect process).\r\n   */\r\n  @Input()\r\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\r\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\r\n  private _dataSource: DataSource<T> | Observable<T[]> | T[] | T[];\r\n\r\n  /**\r\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\r\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\r\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\r\n   * defined in the table, or otherwise the default row which does not have a when predicate.\r\n   */\r\n  @Input()\r\n  get multiTemplateDataRows(): boolean { return this._multiTemplateDataRows; }\r\n  set multiTemplateDataRows(v: boolean) {\r\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\r\n    if (this._rowOutlet.viewContainer.length) {\r\n      this._forceRenderDataRows();\r\n    }\r\n  }\r\n  _multiTemplateDataRows: boolean = false;\r\n\r\n  // TODO(andrewseguin): Remove max value as the end index\r\n  //   and instead calculate the view on init and scroll.\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   */\r\n  viewChange: BehaviorSubject<{start: number, end: number}> =\r\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\r\n  @ViewChild(DataRowOutlet) _rowOutlet: DataRowOutlet;\r\n  @ViewChild(HeaderRowOutlet) _headerRowOutlet: HeaderRowOutlet;\r\n  @ViewChild(FooterRowOutlet) _footerRowOutlet: FooterRowOutlet;\r\n\r\n  /**\r\n   * The column definitions provided by the user that contain what the header, data, and footer\r\n   * cells should render for each column.\r\n   */\r\n  @ContentChildren(CdkColumnDef) _contentColumnDefs: QueryList<CdkColumnDef>;\r\n\r\n  /** Set of data row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkRowDef) _contentRowDefs: QueryList<CdkRowDef<T>>;\r\n\r\n  /** Set of header row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkHeaderRowDef) _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\r\n\r\n  /** Set of footer row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkFooterRowDef) _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\r\n\r\n  constructor(protected readonly _differs: IterableDiffers,\r\n              protected readonly _changeDetectorRef: ChangeDetectorRef,\r\n              protected readonly _elementRef: ElementRef,\r\n              @Attribute('role') role: string,\r\n              @Optional() protected readonly _dir: Directionality) {\r\n    if (!role) {\r\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\r\n    }\r\n\r\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._setupStickyStyler();\r\n\r\n    if (this._isNativeHtmlTable) {\r\n      this._applyNativeTableSections();\r\n    }\r\n\r\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\r\n    // the user has provided a custom trackBy, return the result of that function as evaluated\r\n    // with the values of the `RenderRow`'s data and index.\r\n    this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\r\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\r\n    this._cacheRowDefs();\r\n    this._cacheColumnDefs();\r\n\r\n    // Make sure that the user has at least added header, footer, or data row def.\r\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\r\n      throw getTableMissingRowDefsError();\r\n    }\r\n\r\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\r\n    this._renderUpdatedColumns();\r\n\r\n    // If the header row definition has been changed, trigger a render to the header row.\r\n    if (this._headerRowDefChanged) {\r\n      this._forceRenderHeaderRows();\r\n      this._headerRowDefChanged = false;\r\n    }\r\n\r\n    // If the footer row definition has been changed, trigger a render to the footer row.\r\n    if (this._footerRowDefChanged) {\r\n      this._forceRenderFooterRows();\r\n      this._footerRowDefChanged = false;\r\n    }\r\n\r\n    // If there is a data source and row definitions, connect to the data source unless a\r\n    // connection has already been made.\r\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\r\n      this._observeRenderChanges();\r\n    }\r\n\r\n    this._checkStickyStates();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rowOutlet.viewContainer.clear();\r\n    this._headerRowOutlet.viewContainer.clear();\r\n    this._footerRowOutlet.viewContainer.clear();\r\n\r\n    this._cachedRenderRowsMap.clear();\r\n\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    if (this.dataSource instanceof DataSource) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\r\n   * input or retrieved through an Observable stream (directly or from a DataSource).\r\n   * Checks for differences in the data since the last diff to perform only the necessary\r\n   * changes (add/remove/move rows).\r\n   *\r\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\r\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\r\n   * an array, this function will need to be called to render any changes.\r\n   */\r\n  renderRows() {\r\n    this._renderRows = this._getAllRenderRows();\r\n    const changes = this._dataDiffer.diff(this._renderRows);\r\n    if (!changes) { return; }\r\n\r\n    const viewContainer = this._rowOutlet.viewContainer;\r\n    changes.forEachOperation(\r\n        (record: IterableChangeRecord<RenderRow<T>>, prevIndex: number, currentIndex: number) => {\r\n          if (record.previousIndex == null) {\r\n            this._insertRow(record.item, currentIndex);\r\n          } else if (currentIndex == null) {\r\n            viewContainer.remove(prevIndex);\r\n          } else {\r\n            const view = <RowViewRef<T>>viewContainer.get(prevIndex);\r\n            viewContainer.move(view!, currentIndex);\r\n          }\r\n        });\r\n\r\n    // Update the meta context of a row's context data (index, count, first, last, ...)\r\n    this._updateRowIndexContext();\r\n\r\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\r\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\r\n    changes.forEachIdentityChange((record: IterableChangeRecord<RenderRow<T>>) => {\r\n      const rowView = <RowViewRef<T>>viewContainer.get(record.currentIndex!);\r\n      rowView.context.$implicit = record.item.data;\r\n    });\r\n\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /**\r\n   * Sets the header row definition to be used. Overrides the header row definition gathered by\r\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\r\n   * table's content is checked.\r\n   * @docs-private\r\n   * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  setHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs = new Set([headerRowDef]);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /**\r\n   * Sets the footer row definition to be used. Overrides the footer row definition gathered by\r\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\r\n   * table's content is checked.\r\n   * @docs-private\r\n   * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  setFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs = new Set([footerRowDef]);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /** Adds a column definition that was not included as part of the content children. */\r\n  addColumnDef(columnDef: CdkColumnDef) {\r\n    this._customColumnDefs.add(columnDef);\r\n  }\r\n\r\n  /** Removes a column definition that was not included as part of the content children. */\r\n  removeColumnDef(columnDef: CdkColumnDef) {\r\n    this._customColumnDefs.delete(columnDef);\r\n  }\r\n\r\n  /** Adds a row definition that was not included as part of the content children. */\r\n  addRowDef(rowDef: CdkRowDef<T>) {\r\n    this._customRowDefs.add(rowDef);\r\n  }\r\n\r\n  /** Removes a row definition that was not included as part of the content children. */\r\n  removeRowDef(rowDef: CdkRowDef<T>) {\r\n    this._customRowDefs.delete(rowDef);\r\n  }\r\n\r\n  /** Adds a header row definition that was not included as part of the content children. */\r\n  addHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs.add(headerRowDef);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /** Removes a header row definition that was not included as part of the content children. */\r\n  removeHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs.delete(headerRowDef);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /** Adds a footer row definition that was not included as part of the content children. */\r\n  addFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs.add(footerRowDef);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /** Removes a footer row definition that was not included as part of the content children. */\r\n  removeFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs.delete(footerRowDef);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /**\r\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\r\n   * automatically called when the header row changes its displayed set of columns, or if its\r\n   * sticky input changes. May be called manually for cases where the cell content changes outside\r\n   * of these events.\r\n   */\r\n  updateStickyHeaderRowStyles() {\r\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\r\n\r\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\r\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\r\n   * automatically called when the footer row changes its displayed set of columns, or if its\r\n   * sticky input changes. May be called manually for cases where the cell content changes outside\r\n   * of these events.\r\n   */\r\n  updateStickyFooterRowStyles() {\r\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\r\n\r\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\r\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\r\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the left and right. Then sticky styles are added for the left and right according\r\n   * to the column definitions for each cell in each row. This is automatically called when\r\n   * the data source provides a new set of data or when a column definition changes its sticky\r\n   * input. May be called manually for cases where the cell content changes outside of these events.\r\n   */\r\n  updateStickyColumnStyles() {\r\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n    const dataRows = this._getRenderedRows(this._rowOutlet);\r\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n\r\n    // Clear the left and right positioning from all columns in the table across all rows since\r\n    // sticky columns span across all table sections (header, data, footer)\r\n    this._stickyStyler.clearStickyPositioning(\r\n        [...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\r\n\r\n    // Update the sticky styles for each header row depending on the def's sticky state\r\n    headerRows.forEach((headerRow, i) => {\r\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\r\n    });\r\n\r\n    // Update the sticky styles for each data row depending on its def's sticky state\r\n    this._rowDefs.forEach(rowDef => {\r\n      // Collect all the rows rendered with this row definition.\r\n      const rows: HTMLElement[] = [];\r\n      for (let i = 0; i < dataRows.length; i++) {\r\n        if (this._renderRows[i].rowDef === rowDef) {\r\n          rows.push(dataRows[i]);\r\n        }\r\n      }\r\n\r\n      this._addStickyColumnStyles(rows, rowDef);\r\n    });\r\n\r\n    // Update the sticky styles for each footer row depending on the def's sticky state\r\n    footerRows.forEach((footerRow, i) => {\r\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\r\n    });\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Get the list of RenderRow objects to render according to the current list of data and defined\r\n   * row definitions. If the previous list already contained a particular pair, it should be reused\r\n   * so that the differ equates their references.\r\n   */\r\n  private _getAllRenderRows(): RenderRow<T>[] {\r\n    const renderRows: RenderRow<T>[] = [];\r\n\r\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\r\n    // new cache while unused ones can be picked up by garbage collection.\r\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\r\n    this._cachedRenderRowsMap = new Map();\r\n\r\n    // For each data object, get the list of rows that should be rendered, represented by the\r\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\r\n    for (let i = 0; i < this._data.length; i++) {\r\n      let data = this._data[i];\r\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\r\n\r\n      if (!this._cachedRenderRowsMap.has(data)) {\r\n        this._cachedRenderRowsMap.set(data, new WeakMap());\r\n      }\r\n\r\n      for (let j = 0; j < renderRowsForData.length; j++) {\r\n        let renderRow = renderRowsForData[j];\r\n\r\n        const cache = this._cachedRenderRowsMap.get(renderRow.data)!;\r\n        if (cache.has(renderRow.rowDef)) {\r\n          cache.get(renderRow.rowDef)!.push(renderRow);\r\n        } else {\r\n          cache.set(renderRow.rowDef, [renderRow]);\r\n        }\r\n        renderRows.push(renderRow);\r\n      }\r\n    }\r\n\r\n    return renderRows;\r\n  }\r\n\r\n  /**\r\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\r\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\r\n   * `(T, CdkRowDef)` pair.\r\n   */\r\n  private _getRenderRowsForData(\r\n      data: T, dataIndex: number, cache?: WeakMap<CdkRowDef<T>, RenderRow<T>[]>): RenderRow<T>[] {\r\n    const rowDefs = this._getRowDefs(data, dataIndex);\r\n\r\n    return rowDefs.map(rowDef => {\r\n      const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef)! : [];\r\n      if (cachedRenderRows.length) {\r\n        const dataRow = cachedRenderRows.shift()!;\r\n        dataRow.dataIndex = dataIndex;\r\n        return dataRow;\r\n      } else {\r\n        return {data, rowDef, dataIndex};\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Update the map containing the content's column definitions. */\r\n  private _cacheColumnDefs() {\r\n    this._columnDefsByName.clear();\r\n\r\n    const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\r\n    columnDefs.forEach(columnDef => {\r\n      if (this._columnDefsByName.has(columnDef.name)) {\r\n        throw getTableDuplicateColumnNameError(columnDef.name);\r\n      }\r\n      this._columnDefsByName.set(columnDef.name, columnDef);\r\n    });\r\n  }\r\n\r\n  /** Update the list of all available row definitions that can be used. */\r\n  private _cacheRowDefs() {\r\n    this._headerRowDefs =\r\n        mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\r\n    this._footerRowDefs =\r\n        mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\r\n    this._rowDefs =\r\n        mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\r\n\r\n    // After all row definitions are determined, find the row definition to be considered default.\r\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\r\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\r\n      throw getTableMultipleDefaultRowDefsError();\r\n    }\r\n    this._defaultRowDef = defaultRowDefs[0];\r\n  }\r\n\r\n  /**\r\n   * Check if the header, data, or footer rows have changed what columns they want to display or\r\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\r\n   * re-render that section.\r\n   */\r\n  private _renderUpdatedColumns() {\r\n    const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => acc || !!def.getColumnsDiff();\r\n\r\n    // Force re-render data rows if the list of column definitions have changed.\r\n    if (this._rowDefs.reduce(columnsDiffReducer, false)) {\r\n      this._forceRenderDataRows();\r\n    }\r\n\r\n    // Force re-render header/footer rows if the list of column definitions have changed..\r\n    if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\r\n      this._forceRenderHeaderRows();\r\n    }\r\n\r\n    if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\r\n      this._forceRenderFooterRows();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n   * render change subscription if one exists. If the data source is null, interpret this by\r\n   * clearing the row outlet. Otherwise start listening for new data.\r\n   */\r\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    this._data = [];\r\n\r\n    if (this.dataSource instanceof DataSource) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n\r\n    // Stop listening for data from the previous data source.\r\n    if (this._renderChangeSubscription) {\r\n      this._renderChangeSubscription.unsubscribe();\r\n      this._renderChangeSubscription = null;\r\n    }\r\n\r\n    if (!dataSource) {\r\n      if (this._dataDiffer) {\r\n        this._dataDiffer.diff([]);\r\n      }\r\n      this._rowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._dataSource = dataSource;\r\n  }\r\n\r\n  /** Set up a subscription for the data provided by the data source. */\r\n  private _observeRenderChanges() {\r\n    // If no data source has been set, there is nothing to observe for changes.\r\n    if (!this.dataSource) { return; }\r\n\r\n    let dataStream: Observable<T[]> | undefined;\r\n\r\n    // Check if the datasource is a DataSource object by observing if it has a connect function.\r\n    // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\r\n    // checked as an instanceof DataSource<T> since the table should allow for data sources\r\n    // that did not explicitly extend DataSource<T>.\r\n    if ((this.dataSource as DataSource<T>).connect instanceof Function) {\r\n      dataStream = (this.dataSource as DataSource<T>).connect(this);\r\n    } else if (this.dataSource instanceof Observable) {\r\n      dataStream = this.dataSource;\r\n    } else if (Array.isArray(this.dataSource)) {\r\n      dataStream = observableOf(this.dataSource);\r\n    }\r\n\r\n    if (dataStream === undefined) {\r\n      throw getTableUnknownDataSourceError();\r\n    }\r\n\r\n    this._renderChangeSubscription = dataStream\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(data => {\r\n          this._data = data || [];\r\n          this.renderRows();\r\n        });\r\n  }\r\n\r\n  /**\r\n   * Clears any existing content in the header row outlet and creates a new embedded view\r\n   * in the outlet using the header row definition.\r\n   */\r\n  private _forceRenderHeaderRows() {\r\n    // Clear the header row outlet if any content exists.\r\n    if (this._headerRowOutlet.viewContainer.length > 0) {\r\n      this._headerRowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\r\n    this.updateStickyHeaderRowStyles();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n  /**\r\n   * Clears any existing content in the footer row outlet and creates a new embedded view\r\n   * in the outlet using the footer row definition.\r\n   */\r\n  private _forceRenderFooterRows() {\r\n    // Clear the footer row outlet if any content exists.\r\n    if (this._footerRowOutlet.viewContainer.length > 0) {\r\n      this._footerRowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\r\n    this.updateStickyFooterRowStyles();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\r\n  private _addStickyColumnStyles(rows: HTMLElement[], rowDef: BaseRowDef) {\r\n    const columnDefs = Array.from(rowDef.columns || []).map(c => this._columnDefsByName.get(c)!);\r\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\r\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\r\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\r\n  }\r\n\r\n  /** Gets the list of rows that have been rendered in the row outlet. */\r\n  _getRenderedRows(rowOutlet: RowOutlet) {\r\n    const renderedRows: HTMLElement[] = [];\r\n\r\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\r\n      const viewRef = (rowOutlet.viewContainer.get(i)! as EmbeddedViewRef<any>);\r\n      renderedRows.push(viewRef.rootNodes[0]);\r\n    }\r\n\r\n    return renderedRows;\r\n  }\r\n\r\n  /**\r\n   * Get the matching row definitions that should be used for this row data. If there is only\r\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\r\n   * predicate that returns true with the data. If none return true, return the default row\r\n   * definition.\r\n   */\r\n  _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[] {\r\n    if (this._rowDefs.length == 1) { return [this._rowDefs[0]]; }\r\n\r\n    let rowDefs: CdkRowDef<T>[] = [];\r\n    if (this.multiTemplateDataRows) {\r\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\r\n    } else {\r\n      let rowDef =\r\n          this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\r\n      if (rowDef) {\r\n        rowDefs.push(rowDef);\r\n      }\r\n    }\r\n\r\n    if (!rowDefs.length) {\r\n      throw getTableMissingMatchingRowDefError(data);\r\n    }\r\n\r\n    return rowDefs;\r\n  }\r\n\r\n  /**\r\n   * Create the embedded view for the data row template and place it in the correct index location\r\n   * within the data row view container.\r\n   */\r\n  private _insertRow(renderRow: RenderRow<T>, renderIndex: number) {\r\n    const rowDef = renderRow.rowDef;\r\n    const context: RowContext<T> = {$implicit: renderRow.data};\r\n    this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\r\n  }\r\n\r\n  /**\r\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\r\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\r\n   * of where to place the new row template in the outlet.\r\n   */\r\n  private _renderRow(\r\n      outlet: RowOutlet, rowDef: BaseRowDef, index: number, context: RowContext<T> = {}) {\r\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\r\n    outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\r\n\r\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\r\n      if (CdkCellOutlet.mostRecentCellOutlet) {\r\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n   * e.g. first/last/even/odd.\r\n   */\r\n  private _updateRowIndexContext() {\r\n    const viewContainer = this._rowOutlet.viewContainer;\r\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\r\n      const viewRef = viewContainer.get(renderIndex) as RowViewRef<T>;\r\n      const context = viewRef.context as RowContext<T>;\r\n      context.count = count;\r\n      context.first = renderIndex === 0;\r\n      context.last = renderIndex === count - 1;\r\n      context.even = renderIndex % 2 === 0;\r\n      context.odd = !context.even;\r\n\r\n      if (this.multiTemplateDataRows) {\r\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\r\n        context.renderIndex = renderIndex;\r\n      } else {\r\n        context.index = this._renderRows[renderIndex].dataIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Gets the column definitions for the provided row def. */\r\n  private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\r\n    if (!rowDef || !rowDef.columns) { return []; }\r\n    return Array.from(rowDef.columns, columnId => {\r\n      const column = this._columnDefsByName.get(columnId);\r\n\r\n      if (!column) {\r\n        throw getTableUnknownColumnError(columnId);\r\n      }\r\n\r\n      return rowDef.extractCellTemplate(column);\r\n    });\r\n  }\r\n\r\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\r\n  private _applyNativeTableSections() {\r\n    const sections = [\r\n      {tag: 'thead', outlet: this._headerRowOutlet},\r\n      {tag: 'tbody', outlet: this._rowOutlet},\r\n      {tag: 'tfoot', outlet: this._footerRowOutlet},\r\n    ];\r\n\r\n    for (const section of sections) {\r\n      const element = document.createElement(section.tag);\r\n      element.appendChild(section.outlet.elementRef.nativeElement);\r\n      this._elementRef.nativeElement.appendChild(element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\r\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\r\n   * `multiTemplateDataRows` or adding/removing row definitions.\r\n   */\r\n  private _forceRenderDataRows() {\r\n    this._dataDiffer.diff([]);\r\n    this._rowOutlet.viewContainer.clear();\r\n    this.renderRows();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /**\r\n   * Checks if there has been a change in sticky states since last check and applies the correct\r\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\r\n   * during a change detection and after the inputs are settled (after content check).\r\n   */\r\n  private _checkStickyStates() {\r\n    const stickyCheckReducer = (acc: boolean, d: CdkHeaderRowDef|CdkFooterRowDef|CdkColumnDef) => {\r\n      return acc || d.hasStickyChanged();\r\n    };\r\n\r\n    // Note that the check needs to occur for every definition since it notifies the definition\r\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\r\n    // remaining definitions and leave them in an unchecked state.\r\n\r\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyHeaderRowStyles();\r\n    }\r\n\r\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyFooterRowStyles();\r\n    }\r\n\r\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyColumnStyles();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\r\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\r\n   * stickiness when directionality changes.\r\n   */\r\n  private _setupStickyStyler() {\r\n    const direction: Direction = this._dir ? this._dir.value : 'ltr';\r\n    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction);\r\n    (this._dir ? this._dir.change : observableOf<Direction>())\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(value => {\r\n          this._stickyStyler.direction = value;\r\n          this.updateStickyColumnStyles();\r\n        });\r\n  }\r\n}\r\n\r\n/** Utility function that gets a merged list of the entries in a QueryList and values of a Set. */\r\nfunction  mergeQueryListAndSet<T>(queryList: QueryList<T>, set: Set<T>): T[] {\r\n  return queryList.toArray().concat(Array.from(set));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Directions that can be used when setting sticky positioning.\r\n * @docs-private\r\n */\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\nexport type StickyDirection = 'top' | 'bottom' | 'left' | 'right';\r\n\r\n/**\r\n * List of all possible directions that can be used for sticky positioning.\r\n * @docs-private\r\n */\r\nexport const STICKY_DIRECTIONS: StickyDirection[] = ['top', 'bottom', 'left', 'right'];\r\n\r\n/**\r\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\r\n * @docs-private\r\n */\r\nexport class StickyStyler {\r\n  /**\r\n   * @param isNativeHtmlTable Whether the sticky logic should be based on a table\r\n   *     that uses the native `<table>` element.\r\n   * @param stickCellCss The CSS class that will be applied to every row/cell that has\r\n   *     sticky positioning applied.\r\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\r\n   *     by reversing left/right positions.\r\n   */\r\n  constructor(private isNativeHtmlTable: boolean,\r\n              private stickCellCss: string,\r\n              public direction: Direction) { }\r\n\r\n  /**\r\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\r\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\r\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\r\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\r\n   */\r\n  clearStickyPositioning(rows: HTMLElement[], stickyDirections: StickyDirection[]) {\r\n    for (const row of rows) {\r\n      // If the row isn't an element (e.g. if it's an `ng-container`),\r\n      // it won't have inline styles or `children` so we skip it.\r\n      if (row.nodeType !== row.ELEMENT_NODE) {\r\n        continue;\r\n      }\r\n\r\n      this._removeStickyStyle(row, stickyDirections);\r\n\r\n      for (let i = 0; i < row.children.length; i++) {\r\n        const cell = row.children[i] as HTMLElement;\r\n        this._removeStickyStyle(cell, stickyDirections);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies sticky left and right positions to the cells of each row according to the sticky\r\n   * states of the rendered column definitions.\r\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\r\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\r\n   *     in this index position should be stuck to the start of the row.\r\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\r\n   *     in this index position should be stuck to the end of the row.\r\n   */\r\n  updateStickyColumns(\r\n      rows: HTMLElement[], stickyStartStates: boolean[], stickyEndStates: boolean[]) {\r\n    const hasStickyColumns =\r\n        stickyStartStates.some(state => state) || stickyEndStates.some(state => state);\r\n    if (!rows.length || !hasStickyColumns) {\r\n      return;\r\n    }\r\n\r\n    const firstRow = rows[0];\r\n    const numCells = firstRow.children.length;\r\n    const cellWidths: number[] = this._getCellWidths(firstRow);\r\n\r\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\r\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\r\n    const isRtl = this.direction === 'rtl';\r\n\r\n    for (const row of rows) {\r\n      for (let i = 0; i < numCells; i++) {\r\n        const cell = row.children[i] as HTMLElement;\r\n        if (stickyStartStates[i]) {\r\n          this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\r\n        }\r\n\r\n        if (stickyEndStates[i]) {\r\n          this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\r\n   * row itself otherwise.\r\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\r\n   *     sticky state and to the provided top or bottom position.\r\n   * @param stickyStates A list of boolean states where each state represents whether the row\r\n   *     should be stuck in the particular top or bottom position.\r\n   * @param position The position direction in which the row should be stuck if that row should be\r\n   *     sticky.\r\n   *\r\n   */\r\n  stickRows(rowsToStick: HTMLElement[], stickyStates: boolean[], position: 'top' | 'bottom') {\r\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\r\n    // position such that the last row stuck will be \"bottom: 0px\" and so on.\r\n    const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\r\n\r\n    let stickyHeight = 0;\r\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n      if (!stickyStates[rowIndex]) {\r\n        continue;\r\n      }\r\n\r\n      const row = rows[rowIndex];\r\n      if (this.isNativeHtmlTable) {\r\n        for (let j = 0; j < row.children.length; j++) {\r\n          const cell = row.children[j] as HTMLElement;\r\n          this._addStickyStyle(cell, position, stickyHeight);\r\n        }\r\n      } else {\r\n        // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\r\n        // If this is applied on a native table, Safari causes the header to fly in wrong direction.\r\n        this._addStickyStyle(row, position, stickyHeight);\r\n      }\r\n\r\n      stickyHeight += row.getBoundingClientRect().height;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\r\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\r\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\r\n   * the tfoot element.\r\n   */\r\n  updateStickyFooterContainer(tableElement: Element, stickyStates: boolean[]) {\r\n    if (!this.isNativeHtmlTable) {\r\n      return;\r\n    }\r\n\r\n    const tfoot = tableElement.querySelector('tfoot')!;\r\n    if (stickyStates.some(state => !state)) {\r\n      this._removeStickyStyle(tfoot, ['bottom']);\r\n    } else {\r\n      this._addStickyStyle(tfoot, 'bottom', 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\r\n   * the zIndex, removing each of the provided sticky directions, and removing the\r\n   * sticky position if there are no more directions.\r\n   */\r\n  _removeStickyStyle(element: HTMLElement, stickyDirections: StickyDirection[]) {\r\n    for (const dir of stickyDirections) {\r\n      element.style[dir] = '';\r\n    }\r\n    element.style.zIndex = this._getCalculatedZIndex(element);\r\n\r\n    // If the element no longer has any more sticky directions, remove sticky positioning and\r\n    // the sticky CSS class.\r\n    const hasDirection = STICKY_DIRECTIONS.some(dir => !!element.style[dir]);\r\n    if (!hasDirection) {\r\n      element.style.position = '';\r\n      element.classList.remove(this.stickCellCss);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\r\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\r\n   * direction and value.\r\n   */\r\n  _addStickyStyle(element: HTMLElement, dir: StickyDirection, dirValue: number) {\r\n    element.classList.add(this.stickCellCss);\r\n    element.style[dir] = `${dirValue}px`;\r\n    element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\r\n    element.style.zIndex = this._getCalculatedZIndex(element);\r\n  }\r\n\r\n  /**\r\n   * Calculate what the z-index should be for the element, depending on what directions (top,\r\n   * bottom, left, right) have been set. It should be true that elements with a top direction\r\n   * should have the highest index since these are elements like a table header. If any of those\r\n   * elements are also sticky in another direction, then they should appear above other elements\r\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\r\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\r\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\r\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\r\n   * elements.\r\n   */\r\n  _getCalculatedZIndex(element: HTMLElement): string {\r\n    const zIndexIncrements = {\r\n      top: 100,\r\n      bottom: 10,\r\n      left: 1,\r\n      right: 1,\r\n    };\r\n\r\n    let zIndex = 0;\r\n    for (const dir of STICKY_DIRECTIONS) {\r\n      if (element.style[dir]) {\r\n        zIndex += zIndexIncrements[dir];\r\n      }\r\n    }\r\n\r\n    return zIndex ? `${zIndex}` : '';\r\n  }\r\n\r\n  /** Gets the widths for each cell in the provided row. */\r\n  _getCellWidths(row: HTMLElement): number[] {\r\n    const cellWidths: number[] = [];\r\n    const firstRowCells = row.children;\r\n    for (let i = 0; i < firstRowCells.length; i++) {\r\n      let cell: HTMLElement = firstRowCells[i] as HTMLElement;\r\n      cellWidths.push(cell.getBoundingClientRect().width);\r\n    }\r\n\r\n    return cellWidths;\r\n  }\r\n\r\n  /**\r\n   * Determines the left and right positions of each sticky column cell, which will be the\r\n   * accumulation of all sticky column cell widths to the left and right, respectively.\r\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n   */\r\n  _getStickyStartColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\r\n    const positions: number[] = [];\r\n    let nextPosition = 0;\r\n\r\n    for (let i = 0; i < widths.length; i++) {\r\n      if (stickyStates[i]) {\r\n        positions[i] = nextPosition;\r\n        nextPosition += widths[i];\r\n      }\r\n    }\r\n\r\n    return positions;\r\n  }\r\n\r\n  /**\r\n   * Determines the left and right positions of each sticky column cell, which will be the\r\n   * accumulation of all sticky column cell widths to the left and right, respectively.\r\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n   */\r\n  _getStickyEndColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\r\n    const positions: number[] = [];\r\n    let nextPosition = 0;\r\n\r\n    for (let i = widths.length; i > 0; i--) {\r\n      if (stickyStates[i]) {\r\n        positions[i] = nextPosition;\r\n        nextPosition += widths[i];\r\n      }\r\n    }\r\n\r\n    return positions;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an error to be thrown when attempting to find an unexisting column.\r\n * @param id Id whose lookup failed.\r\n * @docs-private\r\n */\r\nexport function getTableUnknownColumnError(id: string) {\r\n  return Error(`Could not find column with id \"${id}\".`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when two column definitions have the same name.\r\n * @docs-private\r\n */\r\nexport function getTableDuplicateColumnNameError(name: string) {\r\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\r\n * @docs-private\r\n */\r\nexport function getTableMultipleDefaultRowDefsError() {\r\n  return Error(`There can only be one default row without a when predicate function.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\r\n * @docs-private\r\n */\r\nexport function getTableMissingMatchingRowDefError(data: any) {\r\n  return Error(`Could not find a matching row definition for the` +\r\n      `provided row data: ${JSON.stringify(data)}`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there is no row definitions present in the content.\r\n * @docs-private\r\n */\r\nexport function getTableMissingRowDefsError() {\r\n  return Error('Missing definitions for header, footer, and row; ' +\r\n      'cannot determine which columns should be rendered.');\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when the data source does not match the compatible types.\r\n * @docs-private\r\n */\r\nexport function getTableUnknownDataSourceError() {\r\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CdkCellDef, CdkColumnDef} from './cell';\r\nimport {CanStick, mixinHasStickyInput} from './can-stick';\r\n\r\n/**\r\n * The row template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n */\r\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\r\n\r\n/**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n */\r\nexport abstract class BaseRowDef implements OnChanges {\r\n  /** The columns to be displayed on this row. */\r\n  columns: Iterable<string>;\r\n\r\n  /** Differ used to check if any changes were made to the columns. */\r\n  protected _columnsDiffer: IterableDiffer<any>;\r\n\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>,\r\n              protected _differs: IterableDiffers) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\r\n    // of the columns property or an empty array if none is provided.\r\n    if (!this._columnsDiffer) {\r\n      const columns = (changes['columns'] && changes['columns'].currentValue) || [];\r\n      this._columnsDiffer = this._differs.find(columns).create();\r\n      this._columnsDiffer.diff(columns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the difference between the current columns and the columns from the last diff, or null\r\n   * if there is no difference.\r\n   */\r\n  getColumnsDiff(): IterableChanges<any> | null {\r\n    return this._columnsDiffer.diff(this.columns);\r\n  }\r\n\r\n  /** Gets this row def's relevant cell template from the provided column def. */\r\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\r\n    if (this instanceof CdkHeaderRowDef) {\r\n      return column.headerCell.template;\r\n    } if (this instanceof CdkFooterRowDef) {\r\n      return column.footerCell.template;\r\n    } else {\r\n      return column.cell.template;\r\n    }\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkHeaderRowDef.\r\n/** @docs-private */\r\nexport class CdkHeaderRowDefBase extends BaseRowDef {}\r\nexport const _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\r\n\r\n/**\r\n * Header row definition for the CDK table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkHeaderRowDef]',\r\n  inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\r\n})\r\nexport class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkFooterRowDef.\r\n/** @docs-private */\r\nexport class CdkFooterRowDefBase extends BaseRowDef {}\r\nexport const _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\r\n\r\n/**\r\n * Footer row definition for the CDK table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkFooterRowDef]',\r\n  inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\r\n})\r\nexport class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n}\r\n\r\n/**\r\n * Data row definition for the CDK table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\n@Directive({\r\n  selector: '[cdkRowDef]',\r\n  inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\r\n})\r\nexport class CdkRowDef<T> extends BaseRowDef {\r\n  /**\r\n   * Function that should return true if this row template should be used for the provided index\r\n   * and row data. If left undefined, this row will be considered the default row template to use\r\n   * when no other when functions return true for the data.\r\n   * For every row, there must be at least one when function that passes or an undefined to default.\r\n   */\r\n  when: (index: number, rowData: T) => boolean;\r\n\r\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\r\n  //   if this template should be used.\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n}\r\n\r\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\r\nexport interface CdkCellOutletRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\r\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\r\n * `renderIndex`.\r\n */\r\nexport interface CdkCellOutletMultiRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  dataIndex?: number;\r\n\r\n  /** Index location of the rendered row that this cell is located within. */\r\n  renderIndex?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Outlet for rendering cells inside of a row or header row.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[cdkCellOutlet]'})\r\nexport class CdkCellOutlet implements OnDestroy {\r\n  /** The ordered list of cells to render within this outlet's view container */\r\n  cells: CdkCellDef[];\r\n\r\n  /** The data context to be provided to each cell */\r\n  context: any;\r\n\r\n  /**\r\n   * Static property containing the latest constructed instance of this class.\r\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\r\n   * createEmbeddedView. After one of these components are created, this property will provide\r\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\r\n   * construct the cells with the provided context.\r\n   */\r\n  static mostRecentCellOutlet: CdkCellOutlet | null = null;\r\n\r\n  constructor(public _viewContainer: ViewContainerRef) {\r\n    CdkCellOutlet.mostRecentCellOutlet = this;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // If this was the last outlet being rendered in the view, remove the reference\r\n    // from the static property after it has been destroyed to avoid leaking memory.\r\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\r\n      CdkCellOutlet.mostRecentCellOutlet = null;\r\n    }\r\n  }\r\n}\r\n\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-header-row, tr[cdk-header-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-header-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkHeaderRow { }\r\n\r\n\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-footer-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkFooterRow { }\r\n\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-row, tr[cdk-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkRow { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ContentChild, Directive, ElementRef, Input, TemplateRef} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CanStick, mixinHasStickyInput} from './can-stick';\r\n\r\n/** Base interface for a cell definition. Captures a column's cell template definition. */\r\nexport interface CellDef {\r\n  template: TemplateRef<any>;\r\n}\r\n\r\n/**\r\n * Cell definition for a CDK table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkCellDef]'})\r\nexport class CdkCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n\r\n/**\r\n * Header cell definition for a CDK table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkHeaderCellDef]'})\r\nexport class CdkHeaderCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n\r\n/**\r\n * Footer cell definition for a CDK table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkFooterCellDef]'})\r\nexport class CdkFooterCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkColumnDef.\r\n/** @docs-private */\r\nexport class CdkColumnDefBase {}\r\nexport const _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\r\n\r\n/**\r\n * Column definition for the CDK table.\r\n * Defines a set of cells available for a table column.\r\n */\r\n@Directive({\r\n  selector: '[cdkColumnDef]',\r\n  inputs: ['sticky']\r\n})\r\nexport class CdkColumnDef extends _CdkColumnDefBase implements CanStick {\r\n  /** Unique name for this column. */\r\n  @Input('cdkColumnDef')\r\n  get name(): string { return this._name; }\r\n  set name(name: string) {\r\n    // If the directive is set without a name (updated programatically), then this setter will\r\n    // trigger with an empty string and should not overwrite the programatically set value.\r\n    if (!name) { return; }\r\n\r\n    this._name = name;\r\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\r\n  }\r\n  _name: string;\r\n\r\n  /**\r\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\r\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\r\n   * has been changed.\r\n   */\r\n  @Input('stickyEnd')\r\n  get stickyEnd(): boolean { return this._stickyEnd; }\r\n  set stickyEnd(v: boolean) {\r\n    const prevValue = this._stickyEnd;\r\n    this._stickyEnd = coerceBooleanProperty(v);\r\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\r\n  }\r\n  _stickyEnd: boolean = false;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkCellDef) cell: CdkCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkHeaderCellDef) headerCell: CdkHeaderCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkFooterCellDef) footerCell: CdkFooterCellDef;\r\n\r\n  /**\r\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\r\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\r\n   * do not match are replaced by the '-' character.\r\n   */\r\n  cssClassFriendlyName: string;\r\n}\r\n\r\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\r\nexport class BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\r\n    elementRef.nativeElement.classList.add(columnClassName);\r\n  }\r\n}\r\n\r\n/** Header cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\r\n  host: {\r\n    'class': 'cdk-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n})\r\nexport class CdkHeaderCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Footer cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\r\n  host: {\r\n    'class': 'cdk-footer-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkFooterCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-cell, td[cdk-cell]',\r\n  host: {\r\n    'class': 'cdk-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n/** @docs-private */\r\nexport type Constructor<T> = new(...args: any[]) => T;\r\n\r\n/**\r\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\r\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n * @docs-private\r\n */\r\nexport interface CanStick {\r\n  /** Whether sticky positioning should be applied. */\r\n  sticky: boolean;\r\n\r\n  /** Whether the sticky input has changed since it was last checked. */\r\n  _hasStickyChanged: boolean;\r\n\r\n  /** Whether the sticky value has changed since this was last called. */\r\n  hasStickyChanged(): boolean;\r\n\r\n  /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n  resetStickyChanged(): void;\r\n}\r\n\r\n/**\r\n * Mixin to provide a directive with a function that checks if the sticky input has been\r\n * changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n */\r\nexport function mixinHasStickyInput<T extends Constructor<{}>>(base: T):\r\n    Constructor<CanStick> & T {\r\n  return class extends base {\r\n    /** Whether sticky positioning should be applied. */\r\n    get sticky(): boolean { return this._sticky; }\r\n    set sticky(v: boolean) {\r\n      const prevValue = this._sticky;\r\n      this._sticky = coerceBooleanProperty(v);\r\n      this._hasStickyChanged = prevValue !== this._sticky;\r\n    }\r\n    _sticky: boolean = false;\r\n\r\n    /** Whether the sticky input has changed since it was last checked. */\r\n    _hasStickyChanged: boolean = false;\r\n\r\n    /** Whether the sticky value has changed since this was last called. */\r\n    hasStickyChanged(): boolean {\r\n      const hasStickyChanged = this._hasStickyChanged;\r\n      this._hasStickyChanged = false;\r\n      return hasStickyChanged;\r\n    }\r\n\r\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n    resetStickyChanged() {\r\n      this._hasStickyChanged = false;\r\n    }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n"],"names":["observableOf"],"mappings":"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"}