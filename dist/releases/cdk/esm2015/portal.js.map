{"version":3,"file":"portal.js","sources":["../../../src/cdk/portal/portal-injector.ts","../../../src/cdk/portal/portal-directives.ts","../../../src/cdk/portal/dom-portal-outlet.ts","../../../src/cdk/portal/portal.ts","../../../src/cdk/portal/portal-errors.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injector} from '@angular/core';\r\n\r\n/**\r\n * Custom injector to be used when providing custom\r\n * injection tokens to components inside a portal.\r\n * @docs-private\r\n */\r\nexport class PortalInjector implements Injector {\r\n  constructor(\r\n    private _parentInjector: Injector,\r\n    private _customTokens: WeakMap<any, any>) { }\r\n\r\n  get(token: any, notFoundValue?: any): any {\r\n    const value = this._customTokens.get(token);\r\n\r\n    if (typeof value !== 'undefined') {\r\n      return value;\r\n    }\r\n\r\n    return this._parentInjector.get<any>(token, notFoundValue);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  NgModule,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal} from './portal';\r\n\r\n\r\n/**\r\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\r\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\r\n */\r\n@Directive({\r\n  selector: '[cdk-portal], [cdkPortal], [portal]',\r\n  exportAs: 'cdkPortal',\r\n})\r\nexport class CdkPortal extends TemplatePortal {\r\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\n}\r\n\r\n/**\r\n * Possible attached references to the CdkPortalOutlet.\r\n */\r\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\r\n\r\n\r\n/**\r\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\r\n * directly attached to it, enabling declarative use.\r\n *\r\n * Usage:\r\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\r\n */\r\n@Directive({\r\n  selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\r\n  exportAs: 'cdkPortalOutlet, cdkPortalHost',\r\n  inputs: ['portal: cdkPortalOutlet']\r\n})\r\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\r\n  /** Whether the portal component is initialized. */\r\n  private _isInitialized = false;\r\n\r\n  /** Reference to the currently-attached component/view ref. */\r\n  private _attachedRef: CdkPortalOutletAttachedRef;\r\n\r\n  constructor(\r\n      private _componentFactoryResolver: ComponentFactoryResolver,\r\n      private _viewContainerRef: ViewContainerRef) {\r\n    super();\r\n  }\r\n\r\n  /** Portal associated with the Portal outlet. */\r\n  get portal(): Portal<any> | null {\r\n    return this._attachedPortal;\r\n  }\r\n\r\n  set portal(portal: Portal<any> | null) {\r\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\r\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\r\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\r\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\r\n    if (this.hasAttached() && !portal && !this._isInitialized) {\r\n      return;\r\n    }\r\n\r\n    if (this.hasAttached()) {\r\n      super.detach();\r\n    }\r\n\r\n    if (portal) {\r\n      super.attach(portal);\r\n    }\r\n\r\n    this._attachedPortal = portal;\r\n  }\r\n\r\n  @Output() attached: EventEmitter<CdkPortalOutletAttachedRef> =\r\n      new EventEmitter<CdkPortalOutletAttachedRef>();\r\n\r\n  /** Component or view reference that is attached to the portal. */\r\n  get attachedRef(): CdkPortalOutletAttachedRef {\r\n    return this._attachedRef;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.dispose();\r\n    this._attachedPortal = null;\r\n    this._attachedRef = null;\r\n  }\r\n\r\n  /**\r\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\r\n   *\r\n   * @param portal Portal to be attached to the portal outlet.\r\n   * @returns Reference to the created component.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    portal.setAttachedHost(this);\r\n\r\n    // If the portal specifies an origin, use that as the logical location of the component\r\n    // in the application tree. Otherwise use the location of this PortalOutlet.\r\n    const viewContainerRef = portal.viewContainerRef != null ?\r\n        portal.viewContainerRef :\r\n        this._viewContainerRef;\r\n\r\n    const componentFactory =\r\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    const ref = viewContainerRef.createComponent(\r\n        componentFactory, viewContainerRef.length,\r\n        portal.injector || viewContainerRef.parentInjector);\r\n\r\n    super.setDisposeFn(() => ref.destroy());\r\n    this._attachedPortal = portal;\r\n    this._attachedRef = ref;\r\n    this.attached.emit(ref);\r\n\r\n    return ref;\r\n  }\r\n\r\n  /**\r\n   * Attach the given TemplatePortal to this PortlHost as an embedded View.\r\n   * @param portal Portal to be attached.\r\n   * @returns Reference to the created embedded view.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    portal.setAttachedHost(this);\r\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\r\n    super.setDisposeFn(() => this._viewContainerRef.clear());\r\n\r\n    this._attachedPortal = portal;\r\n    this._attachedRef = viewRef;\r\n    this.attached.emit(viewRef);\r\n\r\n    return viewRef;\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  exports: [CdkPortal, CdkPortalOutlet],\r\n  declarations: [CdkPortal, CdkPortalOutlet],\r\n})\r\nexport class PortalModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ApplicationRef,\r\n  Injector,\r\n} from '@angular/core';\r\nimport {BasePortalOutlet, ComponentPortal, TemplatePortal} from './portal';\r\n\r\n\r\n/**\r\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n */\r\nexport class DomPortalOutlet extends BasePortalOutlet {\r\n  constructor(\r\n      /** Element into which the content is projected. */\r\n      public outletElement: Element,\r\n      private _componentFactoryResolver: ComponentFactoryResolver,\r\n      private _appRef: ApplicationRef,\r\n      private _defaultInjector: Injector) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\n   * @param portal Portal to be attached\r\n   * @returns Reference to the created component.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    let componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    let componentRef: ComponentRef<T>;\r\n\r\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n    // for the component (in terms of Angular's component tree, not rendering).\r\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n    // and then manually attach the view to the application.\r\n    if (portal.viewContainerRef) {\r\n      componentRef = portal.viewContainerRef.createComponent(\r\n          componentFactory,\r\n          portal.viewContainerRef.length,\r\n          portal.injector || portal.viewContainerRef.parentInjector);\r\n\r\n      this.setDisposeFn(() => componentRef.destroy());\r\n    } else {\r\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\r\n      this._appRef.attachView(componentRef.hostView);\r\n      this.setDisposeFn(() => {\r\n        this._appRef.detachView(componentRef.hostView);\r\n        componentRef.destroy();\r\n      });\r\n    }\r\n    // At this point the component has been instantiated, so we move it to the location in the DOM\r\n    // where we want it to be rendered.\r\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\r\n\r\n    return componentRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches a template portal to the DOM as an embedded view.\r\n   * @param portal Portal to be attached.\r\n   * @returns Reference to the created embedded view.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    let viewContainer = portal.viewContainerRef;\r\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\r\n    viewRef.detectChanges();\r\n\r\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\r\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\r\n    // (e.g Overlay Container) To move the view to the specified host element. We just\r\n    // re-append the existing root nodes.\r\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\r\n\r\n    this.setDisposeFn((() => {\r\n      let index = viewContainer.indexOf(viewRef);\r\n      if (index !== -1) {\r\n        viewContainer.remove(index);\r\n      }\r\n    }));\r\n\r\n    // TODO(jelbourn): Return locals from view.\r\n    return viewRef;\r\n  }\r\n\r\n  /**\r\n   * Clears out a portal from the DOM.\r\n   */\r\n  dispose(): void {\r\n    super.dispose();\r\n    if (this.outletElement.parentNode != null) {\r\n      this.outletElement.parentNode.removeChild(this.outletElement);\r\n    }\r\n  }\r\n\r\n  /** Gets the root HTMLElement for an instantiated component. */\r\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    ElementRef,\r\n    ComponentRef,\r\n    EmbeddedViewRef,\r\n    Injector\r\n} from '@angular/core';\r\nimport {\r\n    throwNullPortalOutletError,\r\n    throwPortalAlreadyAttachedError,\r\n    throwNoPortalAttachedError,\r\n    throwNullPortalError,\r\n    throwPortalOutletAlreadyDisposedError,\r\n    throwUnknownPortalTypeError\r\n} from './portal-errors';\r\n\r\n/** Interface that can be used to generically type a class. */\r\nexport interface ComponentType<T> {\r\n  new (...args: any[]): T;\r\n}\r\n\r\n/**\r\n * A `Portal` is something that you want to render somewhere else.\r\n * It can be attach to / detached from a `PortalOutlet`.\r\n */\r\nexport abstract class Portal<T> {\r\n  private _attachedHost: PortalOutlet | null;\r\n\r\n  /** Attach this portal to a host. */\r\n  attach(host: PortalOutlet): T {\r\n    if (host == null) {\r\n      throwNullPortalOutletError();\r\n    }\r\n\r\n    if (host.hasAttached()) {\r\n      throwPortalAlreadyAttachedError();\r\n    }\r\n\r\n    this._attachedHost = host;\r\n    return <T> host.attach(this);\r\n  }\r\n\r\n  /** Detach this portal from its host */\r\n  detach(): void {\r\n    let host = this._attachedHost;\r\n\r\n    if (host == null) {\r\n      throwNoPortalAttachedError();\r\n    } else {\r\n      this._attachedHost = null;\r\n      host.detach();\r\n    }\r\n  }\r\n\r\n  /** Whether this portal is attached to a host. */\r\n  get isAttached(): boolean {\r\n    return this._attachedHost != null;\r\n  }\r\n\r\n  /**\r\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\r\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\r\n   */\r\n  setAttachedHost(host: PortalOutlet | null) {\r\n    this._attachedHost = host;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n */\r\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\r\n  /** The type of the component that will be instantiated for attachment. */\r\n  component: ComponentType<T>;\r\n\r\n  /**\r\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\r\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\r\n   * The origin is necessary when the host is outside of the Angular application context.\r\n   */\r\n  viewContainerRef?: ViewContainerRef | null;\r\n\r\n  /** [Optional] Injector used for the instantiation of the component. */\r\n  injector?: Injector | null;\r\n\r\n  constructor(\r\n      component: ComponentType<T>,\r\n      viewContainerRef?: ViewContainerRef | null,\r\n      injector?: Injector | null) {\r\n    super();\r\n    this.component = component;\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.injector = injector;\r\n  }\r\n}\r\n\r\n/**\r\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n */\r\nexport class TemplatePortal<C = any> extends Portal<C> {\r\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\r\n  templateRef: TemplateRef<C>;\r\n\r\n  /** Reference to the ViewContainer into which the template will be stamped out. */\r\n  viewContainerRef: ViewContainerRef;\r\n\r\n  /** Contextual data to be passed in to the embedded view. */\r\n  context: C | undefined;\r\n\r\n  constructor(template: TemplateRef<C>, viewContainerRef: ViewContainerRef, context?: C) {\r\n    super();\r\n    this.templateRef = template;\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.context = context;\r\n  }\r\n\r\n  get origin(): ElementRef {\r\n    return this.templateRef.elementRef;\r\n  }\r\n\r\n  /**\r\n   * Attach the the portal to the provided `PortalOutlet`.\r\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\r\n   * instance.\r\n   */\r\n  attach(host: PortalOutlet, context: C | undefined = this.context): C {\r\n    this.context = context;\r\n    return super.attach(host);\r\n  }\r\n\r\n  detach(): void {\r\n    this.context = undefined;\r\n    return super.detach();\r\n  }\r\n}\r\n\r\n\r\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\r\nexport interface PortalOutlet {\r\n  /** Attaches a portal to this outlet. */\r\n  attach(portal: Portal<any>): any;\r\n\r\n  /** Detaches the currently attached portal from this outlet. */\r\n  detach(): any;\r\n\r\n  /** Performs cleanup before the outlet is destroyed. */\r\n  dispose(): void;\r\n\r\n  /** Whether there is currently a portal attached to this outlet. */\r\n  hasAttached(): boolean;\r\n}\r\n\r\n\r\n/**\r\n * Partial implementation of PortalOutlet that handles attaching\r\n * ComponentPortal and TemplatePortal.\r\n */\r\nexport abstract class BasePortalOutlet implements PortalOutlet {\r\n  /** The portal currently attached to the host. */\r\n  protected _attachedPortal: Portal<any> | null;\r\n\r\n  /** A function that will permanently dispose this host. */\r\n  private _disposeFn: (() => void) | null;\r\n\r\n  /** Whether this host has already been permanently disposed. */\r\n  private _isDisposed: boolean = false;\r\n\r\n  /** Whether this host has an attached portal. */\r\n  hasAttached(): boolean {\r\n    return !!this._attachedPortal;\r\n  }\r\n\r\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\r\n  attach(portal: any): any;\r\n\r\n  /** Attaches a portal. */\r\n  attach(portal: Portal<any>): any {\r\n    if (!portal) {\r\n      throwNullPortalError();\r\n    }\r\n\r\n    if (this.hasAttached()) {\r\n      throwPortalAlreadyAttachedError();\r\n    }\r\n\r\n    if (this._isDisposed) {\r\n      throwPortalOutletAlreadyDisposedError();\r\n    }\r\n\r\n    if (portal instanceof ComponentPortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachComponentPortal(portal);\r\n    } else if (portal instanceof TemplatePortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachTemplatePortal(portal);\r\n    }\r\n\r\n    throwUnknownPortalTypeError();\r\n  }\r\n\r\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n\r\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\r\n\r\n  /** Detaches a previously attached portal. */\r\n  detach(): void {\r\n    if (this._attachedPortal) {\r\n      this._attachedPortal.setAttachedHost(null);\r\n      this._attachedPortal = null;\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n  }\r\n\r\n  /** Permanently dispose of this portal host. */\r\n  dispose(): void {\r\n    if (this.hasAttached()) {\r\n      this.detach();\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n    this._isDisposed = true;\r\n  }\r\n\r\n  /** @docs-private */\r\n  setDisposeFn(fn: () => void) {\r\n    this._disposeFn = fn;\r\n  }\r\n\r\n  private _invokeDisposeFn() {\r\n    if (this._disposeFn) {\r\n      this._disposeFn();\r\n      this._disposeFn = null;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Throws an exception when attempting to attach a null portal to a host.\r\n * @docs-private\r\n */\r\nexport function throwNullPortalError() {\r\n  throw Error('Must provide a portal to attach');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach a portal to a host that is already attached.\r\n * @docs-private\r\n */\r\nexport function throwPortalAlreadyAttachedError() {\r\n  throw Error('Host already has a portal attached');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach a portal to an already-disposed host.\r\n * @docs-private\r\n */\r\nexport function throwPortalOutletAlreadyDisposedError() {\r\n  throw Error('This PortalOutlet has already been disposed');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach an unknown portal type.\r\n * @docs-private\r\n */\r\nexport function throwUnknownPortalTypeError() {\r\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\r\n              'a ComponentPortal or a TemplatePortal.');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach a portal to a null host.\r\n * @docs-private\r\n */\r\nexport function throwNullPortalOutletError() {\r\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to detach a portal that is not attached.\r\n * @docs-private\r\n */\r\nexport function throwNoPortalAttachedError() {\r\n  throw Error('Attempting to detach a portal that is not attached to a host');\r\n}\r\n"],"names":[],"mappings":"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"}