{"version":3,"file":"cdk-tree.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/tree/tree-errors.ts","../../src/cdk/tree/control/base-tree-control.ts","../../src/cdk/tree/control/flat-tree-control.ts","../../src/cdk/tree/control/nested-tree-control.ts","../../src/cdk/tree/node.ts","../../src/cdk/tree/outlet.ts","../../src/cdk/tree/tree.ts","../../src/cdk/tree/nested-node.ts","../../src/cdk/tree/padding.ts","../../src/cdk/tree/toggle.ts","../../src/cdk/tree/tree-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an error to be thrown when there is no usable data.\r\n * @docs-private\r\n */\r\nexport function getTreeNoValidDataSourceError() {\r\n  return Error(`A valid data source must be provided.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\r\n * @docs-private\r\n */\r\nexport function getTreeMultipleDefaultNodeDefsError() {\r\n  return Error(`There can only be one default row without a when predicate function.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\r\n * @docs-private\r\n */\r\nexport function getTreeMissingMatchingNodeDefError() {\r\n  return Error(`Could not find a matching node definition for the provided node data.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are tree control.\r\n * @docs-private\r\n */\r\nexport function getTreeControlMissingError() {\r\n  return Error(`Could not find a tree control for the tree.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\r\n * @docs-private\r\n */\r\nexport function getTreeControlFunctionsMissingError() {\r\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {Observable} from 'rxjs';\r\nimport {TreeControl} from './tree-control';\r\n\r\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\r\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\r\n\r\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\r\n  abstract getDescendants(dataNode: T): T[];\r\n\r\n  /** Expands all data nodes in the tree. */\r\n  abstract expandAll(): void;\r\n\r\n  /** Saved data node for `expandAll` action. */\r\n  dataNodes: T[];\r\n\r\n  /** A selection model with multi-selection to track expansion status. */\r\n  expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\r\n\r\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\r\n  getLevel: (dataNode: T) => number;\r\n\r\n  /**\r\n   * Whether the data node is expandable. Returns true if expandable.\r\n   * This is for flat tree node.\r\n   */\r\n  isExpandable: (dataNode: T) => boolean;\r\n\r\n  /** Gets a stream that emits whenever the given data node's children change. */\r\n  getChildren: (dataNode: T) => (Observable<T[]> | T[]);\r\n\r\n  /** Toggles one single data node's expanded/collapsed state. */\r\n  toggle(dataNode: T): void {\r\n    this.expansionModel.toggle(dataNode);\r\n  }\r\n\r\n  /** Expands one single data node. */\r\n  expand(dataNode: T): void {\r\n    this.expansionModel.select(dataNode);\r\n  }\r\n\r\n  /** Collapses one single data node. */\r\n  collapse(dataNode: T): void {\r\n    this.expansionModel.deselect(dataNode);\r\n  }\r\n\r\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\r\n  isExpanded(dataNode: T): boolean {\r\n    return this.expansionModel.isSelected(dataNode);\r\n  }\r\n\r\n  /** Toggles a subtree rooted at `node` recursively. */\r\n  toggleDescendants(dataNode: T): void {\r\n    this.expansionModel.isSelected(dataNode)\r\n        ? this.collapseDescendants(dataNode)\r\n        : this.expandDescendants(dataNode);\r\n  }\r\n\r\n  /** Collapse all dataNodes in the tree. */\r\n  collapseAll(): void {\r\n    this.expansionModel.clear();\r\n  }\r\n\r\n  /** Expands a subtree rooted at given data node recursively. */\r\n  expandDescendants(dataNode: T): void {\r\n    let toBeProcessed = [dataNode];\r\n    toBeProcessed.push(...this.getDescendants(dataNode));\r\n    this.expansionModel.select(...toBeProcessed);\r\n  }\r\n\r\n  /** Collapses a subtree rooted at given data node recursively. */\r\n  collapseDescendants(dataNode: T): void {\r\n    let toBeProcessed = [dataNode];\r\n    toBeProcessed.push(...this.getDescendants(dataNode));\r\n    this.expansionModel.deselect(...toBeProcessed);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BaseTreeControl} from './base-tree-control';\r\n\r\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\r\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\r\n\r\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\r\n  constructor(public getLevel: (dataNode: T) => number,\r\n              public isExpandable: (dataNode: T) => boolean) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Gets a list of the data node's subtree of descendent data nodes.\r\n   *\r\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\r\n   * with correct levels.\r\n   */\r\n  getDescendants(dataNode: T): T[] {\r\n    const startIndex = this.dataNodes.indexOf(dataNode);\r\n    const results: T[] = [];\r\n\r\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\r\n    // The level of descendants of a tree node must be greater than the level of the given\r\n    // tree node.\r\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\r\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\r\n    // sibling of an ancestor.\r\n    for (let i = startIndex + 1;\r\n        i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\r\n        i++) {\r\n      results.push(this.dataNodes[i]);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Expands all data nodes in the tree.\r\n   *\r\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\r\n   * data nodes of the tree.\r\n   */\r\n  expandAll(): void {\r\n    this.expansionModel.select(...this.dataNodes);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Observable} from 'rxjs';\r\nimport {take} from 'rxjs/operators';\r\nimport {BaseTreeControl} from './base-tree-control';\r\n\r\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\r\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\r\n\r\n  /** Construct with nested tree function getChildren. */\r\n  constructor(public getChildren: (dataNode: T) => (Observable<T[]> | T[])) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Expands all dataNodes in the tree.\r\n   *\r\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\r\n   * data nodes of the tree.\r\n   */\r\n  expandAll(): void {\r\n    this.expansionModel.clear();\r\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) =>\r\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\r\n    this.expansionModel.select(...allNodes);\r\n  }\r\n\r\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\r\n  getDescendants(dataNode: T): T[] {\r\n    const descendants = [];\r\n    this._getDescendants(descendants, dataNode);\r\n    // Remove the node itself\r\n    return descendants.splice(1);\r\n  }\r\n\r\n  /** A helper function to get descendants recursively. */\r\n  protected _getDescendants(descendants: T[], dataNode: T): void {\r\n    descendants.push(dataNode);\r\n    const childrenNodes = this.getChildren(dataNode);\r\n    if (Array.isArray(childrenNodes)) {\r\n      childrenNodes.forEach((child: T) => this._getDescendants(descendants, child));\r\n    } else if (childrenNodes instanceof Observable) {\r\n      childrenNodes.pipe(take(1)).subscribe(children => {\r\n        children.forEach((child: T) => this._getDescendants(descendants, child));\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n\r\n/** Context provided to the tree node component. */\r\nexport class CdkTreeNodeOutletContext<T> {\r\n  /** Data for the node. */\r\n  $implicit: T;\r\n\r\n  /** Depth of the node. */\r\n  level: number;\r\n\r\n  /** Index location of the node. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total dataNodes. */\r\n  count?: number;\r\n\r\n  constructor(data: T) {\r\n    this.$implicit = data;\r\n  }\r\n}\r\n\r\n/**\r\n * Data node definition for the CdkTree.\r\n * Captures the node's template and a when predicate that describes when this node should be used.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodeDef]',\r\n  inputs: [\r\n    'when: cdkTreeNodeDefWhen'\r\n  ],\r\n})\r\nexport class CdkTreeNodeDef<T> {\r\n  /**\r\n   * Function that should return true if this node template should be used for the provided node\r\n   * data and index. If left undefined, this node will be considered the default node template to\r\n   * use when no other when functions return true for the data.\r\n   * For every node, there must be at least one when function that passes or an undefined to\r\n   * default.\r\n   */\r\n  when: (index: number, nodeData: T) => boolean;\r\n\r\n  /** @docs-private */\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  Directive,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\n\r\n/**\r\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodeOutlet]'\r\n})\r\nexport class CdkTreeNodeOutlet {\r\n  constructor(public viewContainer: ViewContainerRef) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  IterableChangeRecord,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  OnInit,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n  TrackByFunction\r\n} from '@angular/core';\r\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {TreeControl} from './control/tree-control';\r\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {\r\n  getTreeControlFunctionsMissingError,\r\n  getTreeControlMissingError,\r\n  getTreeMissingMatchingNodeDefError,\r\n  getTreeMultipleDefaultNodeDefsError,\r\n  getTreeNoValidDataSourceError\r\n} from './tree-errors';\r\n\r\n/**\r\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\r\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-tree',\r\n  exportAs: 'cdkTree',\r\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\r\n  host: {\r\n    'class': 'cdk-tree',\r\n    'role': 'tree',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CdkTree<T>\r\n    implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<T>;\r\n\r\n  /** Stores the node definition that does not have a when predicate. */\r\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\r\n\r\n  /** Data subscription */\r\n  private _dataSubscription: Subscription | null;\r\n\r\n  /** Level of nodes */\r\n  private _levels: Map<T, number> = new Map<T, number>();\r\n\r\n  /**\r\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\r\n   * stream of view window (what dataNodes are currently on screen).\r\n   * Data source can be an observable of data array, or a dara array to render.\r\n   */\r\n  @Input()\r\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\r\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\r\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\r\n\r\n  /** The tree controller */\r\n  @Input() treeControl: TreeControl<T>;\r\n\r\n  /**\r\n   * Tracking function that will be used to check the differences in data changes. Used similarly\r\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\r\n   * relative to the function to know if a node should be added/removed/moved.\r\n   * Accepts a function that takes two parameters, `index` and `item`.\r\n   */\r\n  @Input() trackBy: TrackByFunction<T>;\r\n\r\n  // Outlets within the tree's template where the dataNodes will be inserted.\r\n  @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\r\n\r\n  /** The tree node template for the tree */\r\n  @ContentChildren(CdkTreeNodeDef) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\r\n\r\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\r\n  //     Remove the MAX_VALUE in viewChange\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   */\r\n  viewChange =\r\n    new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  constructor(private _differs: IterableDiffers,\r\n              private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\r\n    if (!this.treeControl) {\r\n      throw getTreeControlMissingError();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._nodeOutlet.viewContainer.clear();\r\n\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\r\n      (this.dataSource as DataSource<T>).disconnect(this);\r\n    }\r\n\r\n    if (this._dataSubscription) {\r\n      this._dataSubscription.unsubscribe();\r\n      this._dataSubscription = null;\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\r\n    if (defaultNodeDefs.length > 1) {\r\n      throw getTreeMultipleDefaultNodeDefsError();\r\n    }\r\n    this._defaultNodeDef = defaultNodeDefs[0];\r\n\r\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\r\n      this._observeRenderChanges();\r\n    }\r\n  }\r\n\r\n\r\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\r\n  //     and nested trees.\r\n\r\n  /**\r\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n   * render change subscription if one exists. If the data source is null, interpret this by\r\n   * clearing the node outlet. Otherwise start listening for new data.\r\n   */\r\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\r\n      (this.dataSource as DataSource<T>).disconnect(this);\r\n    }\r\n\r\n    if (this._dataSubscription) {\r\n      this._dataSubscription.unsubscribe();\r\n      this._dataSubscription = null;\r\n    }\r\n\r\n    // Remove the all dataNodes if there is now no data source\r\n    if (!dataSource) {\r\n      this._nodeOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._dataSource = dataSource;\r\n    if (this._nodeDefs) {\r\n      this._observeRenderChanges();\r\n    }\r\n  }\r\n\r\n  /** Set up a subscription for the data provided by the data source. */\r\n  private _observeRenderChanges() {\r\n    let dataStream: Observable<T[]> | undefined;\r\n\r\n    // Cannot use `instanceof DataSource` since the data source could be a literal with\r\n    // `connect` function and may not extends DataSource.\r\n    if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\r\n      dataStream = (this._dataSource as DataSource<T>).connect(this);\r\n    } else if (this._dataSource instanceof Observable) {\r\n      dataStream = this._dataSource;\r\n    } else if (Array.isArray(this._dataSource)) {\r\n      dataStream = observableOf(this._dataSource);\r\n    }\r\n\r\n    if (dataStream) {\r\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\r\n        .subscribe(data => this.renderNodeChanges(data));\r\n    } else {\r\n      throw getTreeNoValidDataSourceError();\r\n    }\r\n  }\r\n\r\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\r\n  renderNodeChanges(data: T[], dataDiffer: IterableDiffer<T> = this._dataDiffer,\r\n                    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\r\n                    parentData?: T) {\r\n    const changes = dataDiffer.diff(data);\r\n    if (!changes) { return; }\r\n\r\n    changes.forEachOperation(\r\n      (item: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\r\n        if (item.previousIndex == null) {\r\n          this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\r\n        } else if (currentIndex == null) {\r\n          viewContainer.remove(adjustedPreviousIndex);\r\n          this._levels.delete(item.item);\r\n        } else {\r\n          const view = viewContainer.get(adjustedPreviousIndex);\r\n          viewContainer.move(view!, currentIndex);\r\n        }\r\n      });\r\n\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Finds the matching node definition that should be used for this node data. If there is only\r\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\r\n   * predicate that returns true with the data. If none return true, return the default node\r\n   * definition.\r\n   */\r\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\r\n    if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\r\n\r\n    const nodeDef =\r\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\r\n    if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\r\n\r\n    return nodeDef;\r\n  }\r\n\r\n  /**\r\n   * Create the embedded view for the data node template and place it in the correct index location\r\n   * within the data node view container.\r\n   */\r\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\r\n    const node = this._getNodeDef(nodeData, index);\r\n\r\n    // Node context that will be provided to created embedded view\r\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\r\n\r\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\r\n    // Otherwise, use the level of parent node.\r\n    if (this.treeControl.getLevel) {\r\n      context.level = this.treeControl.getLevel(nodeData);\r\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\r\n      context.level = this._levels.get(parentData)! + 1;\r\n    } else {\r\n      context.level = 0;\r\n    }\r\n    this._levels.set(nodeData, context.level);\r\n\r\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\r\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\r\n    container.createEmbeddedView(node.template, context, index);\r\n\r\n    // Set the data to just created `CdkTreeNode`.\r\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\r\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\r\n    if (CdkTreeNode.mostRecentTreeNode) {\r\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Tree node for CdkTree. It contains the data in the tree node.\r\n */\r\n@Directive({\r\n  selector: 'cdk-tree-node',\r\n  exportAs: 'cdkTreeNode',\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n    '[attr.role]': 'role',\r\n    'class': 'cdk-tree-node',\r\n  },\r\n})\r\nexport class CdkTreeNode<T> implements FocusableOption, OnDestroy {\r\n  /**\r\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\r\n   * in `CdkTree` and set the data to it.\r\n   */\r\n  static mostRecentTreeNode: CdkTreeNode<{}> | null = null;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _destroyed = new Subject<void>();\r\n\r\n  /** The tree node's data. */\r\n  get data(): T { return this._data; }\r\n  set data(value: T) {\r\n    this._data = value;\r\n    this._setRoleFromData();\r\n  }\r\n  protected _data: T;\r\n\r\n  get isExpanded(): boolean {\r\n    return this._tree.treeControl.isExpanded(this._data);\r\n  }\r\n\r\n  get level(): number {\r\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\r\n  }\r\n\r\n  /**\r\n   * The role of the node should be 'group' if it's an internal node,\r\n   * and 'treeitem' if it's a leaf node.\r\n   */\r\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              protected _tree: CdkTree<T>) {\r\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // If this is the last tree node being destroyed,\r\n    // clear out the reference to avoid leaking memory.\r\n    if (CdkTreeNode.mostRecentTreeNode === this) {\r\n      CdkTreeNode.mostRecentTreeNode = null;\r\n    }\r\n\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Focuses the menu item. Implements for FocusableOption. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  protected _setRoleFromData(): void {\r\n    if (this._tree.treeControl.isExpandable) {\r\n      this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\r\n    } else {\r\n      if (!this._tree.treeControl.getChildren) {\r\n        throw getTreeControlFunctionsMissingError();\r\n      }\r\n      const childrenNodes = this._tree.treeControl.getChildren(this._data);\r\n      if (Array.isArray(childrenNodes)) {\r\n        this._setRoleFromChildren(childrenNodes as T[]);\r\n      } else if (childrenNodes instanceof Observable) {\r\n        childrenNodes.pipe(takeUntil(this._destroyed))\r\n            .subscribe(children => this._setRoleFromChildren(children));\r\n      }\r\n    }\r\n  }\r\n\r\n  protected _setRoleFromChildren(children: T[]) {\r\n    this.role = children && children.length ? 'group' : 'treeitem';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AfterContentInit,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  IterableDiffers,\r\n  IterableDiffer,\r\n  OnDestroy,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\r\n\r\n/**\r\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\r\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\r\n * be added in the `cdkTreeNodeOutlet` in tree node template.\r\n * For example:\r\n *   ```html\r\n *   <cdk-mested-tree-node>\r\n *     {{node.name}}\r\n *     <ng-template cdkTreeNodeOutlet></ng-template>\r\n *   </cdk-tree-node>\r\n *   ```\r\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\r\n * like this:\r\n *   ```html\r\n *   <cdk-nested-tree-node>\r\n *     {{node.name}}\r\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\r\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\r\n *   </cdk-tree-node>\r\n *   ```\r\n */\r\n@Directive({\r\n  selector: 'cdk-nested-tree-node',\r\n  exportAs: 'cdkNestedTreeNode',\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.role]': 'role',\r\n    'class': 'cdk-tree-node cdk-nested-tree-node',\r\n  },\r\n  providers: [{provide: CdkTreeNode, useExisting: CdkNestedTreeNode}]\r\n})\r\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<T>;\r\n\r\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\r\n  protected _children: T[];\r\n\r\n  /** The children node placeholder. */\r\n  @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              protected _tree: CdkTree<T>,\r\n              protected _differs: IterableDiffers) {\r\n    super(_elementRef, _tree);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\r\n    if (!this._tree.treeControl.getChildren) {\r\n      throw getTreeControlFunctionsMissingError();\r\n    }\r\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\r\n    if (Array.isArray(childrenNodes)) {\r\n      this.updateChildrenNodes(childrenNodes as T[]);\r\n    } else if (childrenNodes instanceof Observable) {\r\n      childrenNodes.pipe(takeUntil(this._destroyed))\r\n        .subscribe(result => this.updateChildrenNodes(result));\r\n    }\r\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\r\n        .subscribe(() => this.updateChildrenNodes());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._clear();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  /** Add children dataNodes to the NodeOutlet */\r\n  protected updateChildrenNodes(children?: T[]): void {\r\n    if (children) {\r\n      this._children = children;\r\n    }\r\n    if (this.nodeOutlet.length && this._children) {\r\n      const viewContainer = this.nodeOutlet.first.viewContainer;\r\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\r\n    } else {\r\n      // Reset the data differ if there's no children nodes displayed\r\n      this._dataDiffer.diff([]);\r\n    }\r\n  }\r\n\r\n  /** Clear the children dataNodes. */\r\n  protected _clear(): void {\r\n    if (this.nodeOutlet && this.nodeOutlet.first) {\r\n      this.nodeOutlet.first.viewContainer.clear();\r\n      this._dataDiffer.diff([]);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {Directive, ElementRef, Input, OnDestroy, Optional, Renderer2} from '@angular/core';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\n\r\n/**\r\n * Indent for the children tree dataNodes.\r\n * This directive will add left-padding to the node to show hierarchy.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodePadding]',\r\n})\r\nexport class CdkTreeNodePadding<T> implements OnDestroy {\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\r\n  @Input('cdkTreeNodePadding')\r\n  get level(): number { return this._level; }\r\n  set level(value: number) {\r\n    this._level = coerceNumberProperty(value);\r\n    this._setPadding();\r\n  }\r\n  _level: number;\r\n\r\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\r\n  // TODO(tinayuangao): Make indent working with a string with unit, e.g. 10em\r\n  @Input('cdkTreeNodePaddingIndent')\r\n  get indent(): number { return this._indent; }\r\n  set indent(value: number) {\r\n    this._indent = coerceNumberProperty(value);\r\n    this._setPadding();\r\n  }\r\n  _indent: number = 40;\r\n\r\n  constructor(private _treeNode: CdkTreeNode<T>,\r\n              private _tree: CdkTree<T>,\r\n              private _renderer: Renderer2,\r\n              private _element: ElementRef,\r\n              @Optional() private _dir: Directionality) {\r\n    this._setPadding();\r\n    if (this._dir) {\r\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\r\n  _paddingIndent(): string|null {\r\n    const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\r\n      ? this._tree.treeControl.getLevel(this._treeNode.data)\r\n      : null;\r\n    const level = this._level || nodeLevel;\r\n    return level ? `${level * this._indent}px` : null;\r\n  }\r\n\r\n  _setPadding() {\r\n    const padding = this._paddingIndent();\r\n    const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\r\n\r\n    this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  Input,\r\n} from '@angular/core';\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\n\r\n/**\r\n * Node toggle to expand/collapse the node.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodeToggle]',\r\n  host: {\r\n    '(click)': '_toggle($event)',\r\n  }\r\n})\r\nexport class CdkTreeNodeToggle<T> {\r\n  /** Whether expand/collapse the node recursively. */\r\n  @Input('cdkTreeNodeToggleRecursive')\r\n  get recursive(): boolean { return this._recursive; }\r\n  set recursive(value: boolean) { this._recursive = coerceBooleanProperty(value); }\r\n  protected _recursive = false;\r\n\r\n  constructor(protected _tree: CdkTree<T>,\r\n              protected _treeNode: CdkTreeNode<T>) {}\r\n\r\n  _toggle(event: Event): void {\r\n    this.recursive\r\n      ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\r\n      : this._tree.treeControl.toggle(this._treeNode.data);\r\n\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {CdkTreeNodePadding} from './padding';\r\nimport {CdkTreeNodeToggle} from './toggle';\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\nimport {CdkTreeNodeDef} from './node';\r\nimport {CdkNestedTreeNode} from './nested-node';\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n  CdkNestedTreeNode,\r\n  CdkTreeNodeDef,\r\n  CdkTreeNodePadding,\r\n  CdkTreeNodeToggle,\r\n  CdkTree,\r\n  CdkTreeNode,\r\n  CdkTreeNodeOutlet,\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: EXPORTED_DECLARATIONS,\r\n  declarations: EXPORTED_DECLARATIONS,\r\n  providers: [FocusMonitor, CdkTreeNodeDef]\r\n})\r\nexport class CdkTreeModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","BaseTreeControl","expansionModel","SelectionModel","toggle","dataNode","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","apply","getDescendants","_a","FlatTreeControl","_super","getLevel","isExpandable","_this","call","tslib_1.__extends","startIndex","dataNodes","indexOf","results","i","length","expandAll","NestedTreeControl","getChildren","allNodes","reduce","accumulator","concat","descendants","_getDescendants","splice","childrenNodes","isArray","forEach","child","Observable","pipe","take","subscribe","children","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","type","Directive","args","selector","inputs","TemplateRef","CdkTreeNodeOutlet","viewContainer","ViewContainerRef","CdkTree","_differs","_changeDetectorRef","_onDestroy","Subject","_levels","Map","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","defineProperty","_dataSource","dataSource","_switchDataSource","ngOnInit","_dataDiffer","find","trackBy","treeControl","ngOnDestroy","_nodeOutlet","next","complete","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","filter","def","when","_defaultNodeDef","_observeRenderChanges","dataStream","connect","observableOf","takeUntil","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","node","context","level","has","set","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","Component","exportAs","host","class","role","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","Input","ViewChild","ContentChildren","_tree","_setRoleFromData","enumerable","configurable","_destroyed","_data","_setRoleFromChildren","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkNestedTreeNode","_elementRef","ngAfterContentInit","updateChildrenNodes","result","nodeOutlet","_clear","_children","providers","provide","useExisting","ElementRef","IterableDiffers","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","_indent","_setPadding","change","_level","value","coerceNumberProperty","_paddingIndent","nodeLevel","padding","paddingProp","setStyle","nativeElement","Renderer2","Directionality","decorators","Optional","indent","CdkTreeNodeToggle","_recursive","coerceBooleanProperty","_toggle","event","recursive","stopPropagation","(click)","EXPORTED_DECLARATIONS","NgModule","imports","CommonModule","exports","declarations","FocusMonitor","CdkTreeModule"],"mappings":"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"}