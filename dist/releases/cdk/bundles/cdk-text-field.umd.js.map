{"version":3,"file":"cdk-text-field.umd.js","sources":["../../src/cdk/text-field/text-field-module.ts","../../src/cdk/text-field/autosize.ts","../../src/cdk/text-field/autofill.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkAutofill} from './autofill';\r\nimport {CdkTextareaAutosize} from './autosize';\r\n\r\n\r\n@NgModule({\r\n  declarations: [CdkAutofill, CdkTextareaAutosize],\r\n  imports: [PlatformModule],\r\n  exports: [CdkAutofill, CdkTextareaAutosize],\r\n})\r\nexport class TextFieldModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  AfterViewInit,\r\n  DoCheck,\r\n  OnDestroy,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {auditTime, takeUntil} from 'rxjs/operators';\r\nimport {fromEvent, Subject} from 'rxjs';\r\n\r\n\r\n/** Directive to automatically resize a textarea to fit its content. */\r\n@Directive({\r\n  selector: 'textarea[cdkTextareaAutosize]',\r\n  exportAs: 'cdkTextareaAutosize',\r\n  host: {\r\n    'class': 'cdk-textarea-autosize',\r\n    // Textarea elements that have the directive applied should have a single row by default.\r\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n    'rows': '1',\r\n    '(input)': '_noopInputHandler()',\r\n  },\r\n})\r\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\r\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\r\n  private _previousValue: string;\r\n  private _initialHeight: string | null;\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  private _minRows: number;\r\n  private _maxRows: number;\r\n  private _enabled: boolean = true;\r\n\r\n  private _textareaElement: HTMLTextAreaElement;\r\n\r\n  /** Minimum amount of rows in the textarea. */\r\n  @Input('cdkAutosizeMinRows')\r\n  get minRows(): number { return this._minRows; }\r\n  set minRows(value: number) {\r\n    this._minRows = value;\r\n    this._setMinHeight();\r\n  }\r\n\r\n  /** Maximum amount of rows in the textarea. */\r\n  @Input('cdkAutosizeMaxRows')\r\n  get maxRows(): number { return this._maxRows; }\r\n  set maxRows(value: number) {\r\n    this._maxRows = value;\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  /** Whether autosizing is enabled or not */\r\n  @Input('cdkTextareaAutosize')\r\n  get enabled(): boolean { return this._enabled; }\r\n  set enabled(value: boolean) {\r\n    value = coerceBooleanProperty(value);\r\n\r\n    // Only act if the actual value changed. This specifically helps to not run\r\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\r\n    if (this._enabled !== value) {\r\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\r\n    }\r\n  }\r\n\r\n  /** Cached height of a textarea with a single row. */\r\n  private _cachedLineHeight: number;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _platform: Platform,\r\n    private _ngZone: NgZone) {\r\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n  }\r\n\r\n  /** Sets the minimum height of the textarea as determined by minRows. */\r\n  _setMinHeight(): void {\r\n    const minHeight = this.minRows && this._cachedLineHeight ?\r\n        `${this.minRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (minHeight)  {\r\n      this._setTextareaStyle('minHeight', minHeight);\r\n    }\r\n  }\r\n\r\n  /** Sets the maximum height of the textarea as determined by maxRows. */\r\n  _setMaxHeight(): void {\r\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\r\n        `${this.maxRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (maxHeight) {\r\n      this._setTextareaStyle('maxHeight', maxHeight);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._platform.isBrowser) {\r\n      // Remember the height which we started with in case autosizing is disabled\r\n      this._initialHeight = this._textareaElement.style.height;\r\n\r\n      this.resizeToFitContent();\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        fromEvent(window, 'resize')\r\n          .pipe(auditTime(16), takeUntil(this._destroyed))\r\n          .subscribe(() => this.resizeToFitContent(true));\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Sets a style property on the textarea element. */\r\n  private _setTextareaStyle(property: string, value: string): void {\r\n    this._textareaElement.style[property] = value;\r\n  }\r\n\r\n  /**\r\n   * Cache the height of a single-row textarea if it has not already been cached.\r\n   *\r\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\r\n   * maxRows. For the initial version, we will assume that the height of a single line in the\r\n   * textarea does not ever change.\r\n   */\r\n  private _cacheTextareaLineHeight(): void {\r\n    if (this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    // Use a clone element because we have to override some styles.\r\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\r\n    textareaClone.rows = 1;\r\n\r\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\r\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\r\n    // would affect the height.\r\n    textareaClone.style.position = 'absolute';\r\n    textareaClone.style.visibility = 'hidden';\r\n    textareaClone.style.border = 'none';\r\n    textareaClone.style.padding = '0';\r\n    textareaClone.style.height = '';\r\n    textareaClone.style.minHeight = '';\r\n    textareaClone.style.maxHeight = '';\r\n\r\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\r\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\r\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\r\n    // to hidden. This ensures that there is no invalid calculation of the line height.\r\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\r\n    textareaClone.style.overflow = 'hidden';\r\n\r\n    this._textareaElement.parentNode!.appendChild(textareaClone);\r\n    this._cachedLineHeight = textareaClone.clientHeight;\r\n    this._textareaElement.parentNode!.removeChild(textareaClone);\r\n\r\n    // Min and max heights have to be re-calculated if the cached line height changes\r\n    this._setMinHeight();\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this._platform.isBrowser) {\r\n      this.resizeToFitContent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize the textarea to fit its content.\r\n   * @param force Whether to force a height recalculation. By default the height will be\r\n   *    recalculated only if the value changed since the last call.\r\n   */\r\n  resizeToFitContent(force: boolean = false) {\r\n    // If autosizing is disabled, just skip everything else\r\n    if (!this._enabled) {\r\n      return;\r\n    }\r\n\r\n    this._cacheTextareaLineHeight();\r\n\r\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\r\n    // in checking the height of the textarea.\r\n    if (!this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n    const value = textarea.value;\r\n\r\n    // Only resize of the value changed since these calculations can be expensive.\r\n    if (value === this._previousValue && !force) {\r\n      return;\r\n    }\r\n\r\n    const placeholderText = textarea.placeholder;\r\n\r\n    // Reset the textarea height to auto in order to shrink back to its default size.\r\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\r\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\r\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\r\n    // need to be removed temporarily.\r\n    textarea.classList.add('cdk-textarea-autosize-measuring');\r\n    textarea.placeholder = '';\r\n\r\n    // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\r\n    // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\r\n    const height = textarea.scrollHeight - 4;\r\n\r\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\r\n    textarea.style.height = `${height}px`;\r\n    textarea.classList.remove('cdk-textarea-autosize-measuring');\r\n    textarea.placeholder = placeholderText;\r\n\r\n    // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\r\n    // We need to re-set the selection in order for it to scroll to the proper position.\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => requestAnimationFrame(() => {\r\n        const {selectionStart, selectionEnd} = textarea;\r\n\r\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\r\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\r\n        // between the time we requested the animation frame and when it was executed.\r\n        // Also note that we have to assert that the textarea is focused before we set the\r\n        // selection range. Setting the selection range on a non-focused textarea will cause\r\n        // it to receive focus on IE and Edge.\r\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\r\n          textarea.setSelectionRange(selectionStart, selectionEnd);\r\n        }\r\n      }));\r\n    }\r\n\r\n    this._previousValue = value;\r\n  }\r\n\r\n  /**\r\n   * Resets the textarea to it's original size\r\n   */\r\n  reset() {\r\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\r\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\r\n    if (this._initialHeight === undefined) {\r\n      return;\r\n    }\r\n    this._textareaElement.style.height = this._initialHeight;\r\n  }\r\n\r\n  _noopInputHandler() {\r\n    // no-op handler that ensures we're running change detection on input events.\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport {EMPTY, Observable, Subject} from 'rxjs';\r\n\r\n\r\n/** An event that is emitted when the autofill state of an input changes. */\r\nexport type AutofillEvent = {\r\n  /** The element whose autofill state changes. */\r\n  target: Element;\r\n  /** Whether the element is currently autofilled. */\r\n  isAutofilled: boolean;\r\n};\r\n\r\n\r\n/** Used to track info about currently monitored elements. */\r\ntype MonitoredElementInfo = {\r\n  subject: Subject<AutofillEvent>;\r\n  unlisten: () => void;\r\n};\r\n\r\n\r\n/** Options to pass to the animationstart listener. */\r\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\r\n\r\n\r\n/**\r\n * An injectable service that can be used to monitor the autofill state of an input.\r\n * Based on the following blog post:\r\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class AutofillMonitor implements OnDestroy {\r\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\r\n\r\n  constructor(private _platform: Platform, private _ngZone: NgZone) {}\r\n\r\n  /**\r\n   * Monitor for changes in the autofill state of the given input element.\r\n   * @param element The element to monitor.\r\n   * @return A stream of autofill state changes.\r\n   */\r\n  monitor(element: Element): Observable<AutofillEvent> {\r\n    if (!this._platform.isBrowser) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const info = this._monitoredElements.get(element);\r\n\r\n    if (info) {\r\n      return info.subject.asObservable();\r\n    }\r\n\r\n    const result = new Subject<AutofillEvent>();\r\n    const cssClass = 'cdk-text-field-autofilled';\r\n    const listener = (event: AnimationEvent) => {\r\n      // Animation events fire on initial element render, we check for the presence of the autofill\r\n      // CSS class to make sure this is a real change in state, not just the initial render before\r\n      // we fire off events.\r\n      if (event.animationName === 'cdk-text-field-autofill-start' &&\r\n          !element.classList.contains(cssClass)) {\r\n        element.classList.add(cssClass);\r\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: true}));\r\n      } else if (event.animationName === 'cdk-text-field-autofill-end' &&\r\n          element.classList.contains(cssClass)) {\r\n        element.classList.remove(cssClass);\r\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: false}));\r\n      }\r\n    };\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      element.addEventListener('animationstart', listener, listenerOptions);\r\n      element.classList.add('cdk-text-field-autofill-monitored');\r\n    });\r\n\r\n    this._monitoredElements.set(element, {\r\n      subject: result,\r\n      unlisten: () => {\r\n        element.removeEventListener('animationstart', listener, listenerOptions);\r\n      }\r\n    });\r\n\r\n    return result.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring the autofill state of the given input element.\r\n   * @param element The element to stop monitoring.\r\n   */\r\n  stopMonitoring(element: Element) {\r\n    const info = this._monitoredElements.get(element);\r\n\r\n    if (info) {\r\n      info.unlisten();\r\n      info.subject.complete();\r\n      element.classList.remove('cdk-text-field-autofill-monitored');\r\n      element.classList.remove('cdk-text-field-autofilled');\r\n      this._monitoredElements.delete(element);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\r\n  }\r\n}\r\n\r\n\r\n/** A directive that can be used to monitor the autofill state of an input. */\r\n@Directive({\r\n  selector: '[cdkAutofill]',\r\n})\r\nexport class CdkAutofill implements OnDestroy, OnInit {\r\n  /** Emits when the autofill state of the element changes. */\r\n  @Output() cdkAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\r\n\r\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\r\n\r\n  ngOnInit() {\r\n    this._autofillMonitor\r\n      .monitor(this._elementRef.nativeElement)\r\n      .subscribe(event => this.cdkAutofill.emit(event));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n}\r\n"],"names":["PlatformModule","NgModule","Input","NgZone","Platform","ElementRef","Directive","auditTime","takeUntil","fromEvent","coerceBooleanProperty","Subject","Output","EventEmitter","Injectable","EMPTY","supportsPassiveEventListeners"],"mappings":"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"}