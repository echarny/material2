{"version":3,"file":"cdk-platform.umd.min.js","sources":["../../src/cdk/platform/features/input-types.ts","../../src/cdk/platform/features/passive-listeners.ts","../../src/cdk/platform/features/scrolling.ts","../../src/cdk/platform/platform.ts","../../src/cdk/platform/platform-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Cached result Set of input types support by the current browser. */\r\nlet supportedInputTypes: Set<string>;\r\n\r\n/** Types of `<input>` that *might* be supported. */\r\nconst candidateInputTypes = [\r\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\r\n  // first changing it to something else:\r\n  // The specified value \"\" does not conform to the required format.\r\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\r\n  'color',\r\n  'button',\r\n  'checkbox',\r\n  'date',\r\n  'datetime-local',\r\n  'email',\r\n  'file',\r\n  'hidden',\r\n  'image',\r\n  'month',\r\n  'number',\r\n  'password',\r\n  'radio',\r\n  'range',\r\n  'reset',\r\n  'search',\r\n  'submit',\r\n  'tel',\r\n  'text',\r\n  'time',\r\n  'url',\r\n  'week',\r\n];\r\n\r\n/** @returns The input types supported by this browser. */\r\nexport function getSupportedInputTypes(): Set<string> {\r\n  // Result is cached.\r\n  if (supportedInputTypes) {\r\n    return supportedInputTypes;\r\n  }\r\n\r\n  // We can't check if an input type is not supported until we're on the browser, so say that\r\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\r\n  // just a helper function and can't inject it.\r\n  if (typeof document !== 'object' || !document) {\r\n    supportedInputTypes = new Set(candidateInputTypes);\r\n    return supportedInputTypes;\r\n  }\r\n\r\n  let featureTestInput = document.createElement('input');\r\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\r\n    featureTestInput.setAttribute('type', value);\r\n    return featureTestInput.type === value;\r\n  }));\r\n\r\n  return supportedInputTypes;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Cached result of whether the user's browser supports passive event listeners. */\r\nlet supportsPassiveEvents: boolean;\r\n\r\n/**\r\n * Checks whether the user's browser supports passive event listeners.\r\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n */\r\nexport function supportsPassiveEventListeners(): boolean {\r\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\r\n    try {\r\n      window.addEventListener('test', null!, Object.defineProperty({}, 'passive', {\r\n        get: () => supportsPassiveEvents = true\r\n      }));\r\n    } finally {\r\n      supportsPassiveEvents = supportsPassiveEvents || false;\r\n    }\r\n  }\r\n\r\n  return supportsPassiveEvents;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\r\nexport enum RtlScrollAxisType {\r\n  /**\r\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\r\n   * all the way right.\r\n   */\r\n  NORMAL,\r\n  /**\r\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\r\n   * all the way right.\r\n   */\r\n  NEGATED,\r\n  /**\r\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\r\n   * all the way right.\r\n   */\r\n  INVERTED\r\n}\r\n\r\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\r\nlet rtlScrollAxisType: RtlScrollAxisType;\r\n\r\n/** Check whether the browser supports scroll behaviors. */\r\nexport function supportsScrollBehavior(): boolean {\r\n  return !!(typeof document == 'object' && 'scrollBehavior' in document.documentElement.style);\r\n}\r\n\r\n/**\r\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\r\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\r\n */\r\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\r\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\r\n  if (typeof document !== 'object' || !document) {\r\n    return RtlScrollAxisType.NORMAL;\r\n  }\r\n\r\n  if (!rtlScrollAxisType) {\r\n    // Create a 1px wide scrolling container and a 2px wide content element.\r\n    const scrollContainer = document.createElement('div');\r\n    const containerStyle = scrollContainer.style;\r\n    scrollContainer.dir = 'rtl';\r\n    containerStyle.height = '1px';\r\n    containerStyle.width = '1px';\r\n    containerStyle.overflow = 'auto';\r\n    containerStyle.visibility = 'hidden';\r\n    containerStyle.pointerEvents = 'none';\r\n    containerStyle.position = 'absolute';\r\n\r\n    const content = document.createElement('div');\r\n    const contentStyle = content.style;\r\n    contentStyle.width = '2px';\r\n    contentStyle.height = '1px';\r\n\r\n    scrollContainer.appendChild(content);\r\n    document.body.appendChild(scrollContainer);\r\n\r\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\r\n\r\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\r\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\r\n    // dealing with one of the other two types of browsers.\r\n    if (scrollContainer.scrollLeft === 0) {\r\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\r\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\r\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\r\n      // return 0 when we read it again.\r\n      scrollContainer.scrollLeft = 1;\r\n      rtlScrollAxisType =\r\n          scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\r\n    }\r\n\r\n    scrollContainer.parentNode!.removeChild(scrollContainer);\r\n  }\r\n  return rtlScrollAxisType;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Inject, Injectable, Optional, PLATFORM_ID} from '@angular/core';\r\nimport {isPlatformBrowser} from '@angular/common';\r\n\r\n\r\n// Whether the current platform supports the V8 Break Iterator. The V8 check\r\n// is necessary to detect all Blink based browsers.\r\nconst hasV8BreakIterator = (typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator);\r\n\r\n/**\r\n * Service to detect the current platform by comparing the userAgent strings and\r\n * checking browser-specific global properties.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class Platform {\r\n  /**\r\n   * Whether the Angular application is being rendered in the browser.\r\n   * We want to use the Angular platform check because if the Document is shimmed\r\n   * without the navigator, the following checks will fail. This is preferred because\r\n   * sometimes the Document may be shimmed without the user's knowledge or intention\r\n   */\r\n  isBrowser: boolean = this._platformId ?\r\n      isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\r\n\r\n  /** Whether the current browser is Microsoft Edge. */\r\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\r\n\r\n  /** Whether the current rendering engine is Microsoft Trident. */\r\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\r\n\r\n  /** Whether the current rendering engine is Blink. */\r\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\r\n  BLINK: boolean = this.isBrowser && (!!((window as any).chrome || hasV8BreakIterator) &&\r\n      typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\r\n\r\n  /** Whether the current rendering engine is WebKit. */\r\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\r\n  // ensure that Webkit runs standalone and is not used as another engine's base.\r\n  WEBKIT: boolean = this.isBrowser &&\r\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\r\n\r\n  /** Whether the current platform is Apple iOS. */\r\n  IOS: boolean = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\r\n      !(window as any).MSStream;\r\n\r\n  /** Whether the current browser is Firefox. */\r\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\r\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\r\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\r\n  // instead of having an unstable check for Gecko.\r\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\r\n\r\n  /** Whether the current platform is Android. */\r\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\r\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\r\n\r\n  /** Whether the current browser is Safari. */\r\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\r\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\r\n  // Safari browser should also use Webkit as its layout engine.\r\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\r\n\r\n  /**\r\n   * @breaking-change v7.0.0 remove optional decorator\r\n   */\r\n  constructor(@Optional() @Inject(PLATFORM_ID) private _platformId?: Object) {\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\n\r\n\r\n@NgModule()\r\nexport class PlatformModule {}\r\n"],"names":["getSupportedInputTypes","supportedInputTypes","document","Set","candidateInputTypes","featureTestInput","createElement","filter","value","setAttribute","type","supportsPassiveEventListeners","supportsPassiveEvents","window","addEventListener","Object","defineProperty","get","supportsScrollBehavior","documentElement","style","getRtlScrollAxisType","RtlScrollAxisType","NORMAL","rtlScrollAxisType","scrollContainer","containerStyle","dir","height","width","overflow","visibility","pointerEvents","position","content","contentStyle","appendChild","body","scrollLeft","NEGATED","INVERTED","removeChild","hasV8BreakIterator","Intl","v8BreakIterator","Platform","_platformId","this","isBrowser","isPlatformBrowser","EDGE","test","navigator","userAgent","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","MSStream","FIREFOX","ANDROID","SAFARI","Injectable","args","providedIn","decorators","Optional","Inject","PLATFORM_ID","NgModule","PlatformModule"],"mappings":";;;;;;;+WA0CA,SAAAA,KAEE,GAAIC,EACF,MAAOA,EAMT,IAAwB,gBAAbC,YAA0BA,SAEnC,MADAD,GAAsB,GAAIE,KAAIC,EAIhC,IAAIC,GAAmBH,SAASI,cAAc,QAM9C,OALAL,GAAsB,GAAIE,KAAIC,EAAoBG,OAAO,SAAAC,GAEvD,MADAH,GAAiBI,aAAa,OAAQD,GAC/BH,EAAiBK,OAASF,KC5CrC,QAAAG,KACE,GAA6B,MAAzBC,GAAmD,mBAAXC,QAC1C,IACEA,OAAOC,iBAAiB,OAAM,KAASC,OAAOC,kBAAmB,WAC/DC,IAAK,WAAM,MAAAL,IAAwB,cAGrCA,EAAwBA,IAAyB,EAIrD,MAAOA,GCKT,QAAAM,KACE,SAA6B,gBAAZhB,WAAwB,kBAAoBA,UAASiB,gBAAgBC,OAOxF,QAAAC,KAEE,GAAwB,gBAAbnB,YAA0BA,SACnC,MAAOoB,GAAkBC,MAG3B,KAAKC,EAAmB,CAEtB,GAAMC,GAAkBvB,SAASI,cAAc,OACzCoB,EAAiBD,EAAgBL,KACvCK,GAAgBE,IAAM,MACtBD,EAAeE,OAAS,MACxBF,EAAeG,MAAQ,MACvBH,EAAeI,SAAW,OAC1BJ,EAAeK,WAAa,SAC5BL,EAAeM,cAAgB,OAC/BN,EAAeO,SAAW,UAE1B,IAAMC,GAAUhC,SAASI,cAAc,OACjC6B,EAAeD,EAAQd,KAC7Be,GAAaN,MAAQ,MACrBM,EAAaP,OAAS,MAEtBH,EAAgBW,YAAYF,GAC5BhC,SAASmC,KAAKD,YAAYX,GAE1BD,EAAoBF,EAAkBC,OAKH,IAA/BE,EAAgBa,aAKlBb,EAAgBa,WAAa,EAC7Bd,EACmC,IAA/BC,EAAgBa,WAAmBhB,EAAkBiB,QAAUjB,EAAkBkB,UAGvFf,EAA0B,WAAEgB,YAAYhB,GAE1C,MAAOD,GCpET,GHLIvB,GCAAW,EEKE8B,EAAsC,mBAATC,OAAwB,KAAcC,6BA0DvE,QAAFC,GAAuDC,GAAAC,KAAvDD,YAAuDA,EA5CvDC,KAAAC,UAAuBD,KAAKD,YACtBG,EAAAA,kBAAkBF,KAAKD,aAAmC,gBAAb5C,aAA2BA,SAG9E6C,KAAAG,KAAkBH,KAAKC,WAAa,UAAUG,KAAKC,UAAUC,WAG7DN,KAAAO,QAAqBP,KAAKC,WAAa,kBAAkBG,KAAKC,UAAUC,WAIxEN,KAAAQ,MAAmBR,KAAKC,cAAiB,OAAgBQ,SAAUd,IAC9C,mBAARe,OAAwBV,KAAKG,OAASH,KAAKO,QAKxDP,KAAAW,OAAoBX,KAAKC,WACnB,eAAeG,KAAKC,UAAUC,aAAeN,KAAKQ,QAAUR,KAAKG,OAASH,KAAKO,QAGrFP,KAAAY,IAAiBZ,KAAKC,WAAa,mBAAmBG,KAAKC,UAAUC,aAC9D,OAAgBO,SAOvBb,KAAAc,QAAqBd,KAAKC,WAAa,uBAAuBG,KAAKC,UAAUC,WAI7EN,KAAAe,QAAqBf,KAAKC,WAAa,WAAWG,KAAKC,UAAUC,aAAeN,KAAKO,QAMrFP,KAAAgB,OAAoBhB,KAAKC,WAAa,UAAUG,KAAKC,UAAUC,YAAcN,KAAKW,OAnElF,sBAoBAhD,KAACsD,EAAAA,WAADC,OAAaC,WAAY,+CAoDzBxD,KAAAK,OAAAoD,aAAAzD,KAAe0D,EAAAA,WAAf1D,KAA2B2D,EAAAA,OAA3BJ,MAAkCK,EAAAA,gJAxElCzB,gCCAA,sBAWAnC,KAAC6D,EAAAA,WAXDC,KJYMpE,GAKJ,QACA,SACA,WACA,OACA,iBACA,QACA,OACA,SACA,QACA,QACA,SACA,WACA,QACA,QACA,QACA,SACA,SACA,MACA,OACA,OACA,MACA,8GEVF,IAAIoB"}