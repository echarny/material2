{"version":3,"file":"scrolling.es5.js","sources":["../../../src/cdk-experimental/scrolling/scrolling-module.ts","../../../src/cdk-experimental/scrolling/auto-size-virtual-scroll.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkAutoSizeVirtualScroll} from './auto-size-virtual-scroll';\r\n\r\n\r\n@NgModule({\r\n  exports: [CdkAutoSizeVirtualScroll],\r\n  declarations: [CdkAutoSizeVirtualScroll],\r\n})\r\nexport class ScrollingModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {ListRange} from '@angular/cdk/collections';\r\nimport {\r\n  CdkVirtualScrollViewport,\r\n  VIRTUAL_SCROLL_STRATEGY,\r\n  VirtualScrollStrategy\r\n} from '@angular/cdk/scrolling';\r\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n\r\n/**\r\n * A class that tracks the size of items that have been seen and uses it to estimate the average\r\n * item size.\r\n */\r\nexport class ItemSizeAverager {\r\n  /** The total amount of weight behind the current average. */\r\n  private _totalWeight = 0;\r\n\r\n  /** The current average item size. */\r\n  private _averageItemSize: number;\r\n\r\n  /** The default size to use for items when no data is available. */\r\n  private _defaultItemSize: number;\r\n\r\n  /** @param defaultItemSize The default size to use for items when no data is available. */\r\n  constructor(defaultItemSize = 50) {\r\n    this._defaultItemSize = defaultItemSize;\r\n    this._averageItemSize = defaultItemSize;\r\n  }\r\n\r\n  /** Returns the average item size. */\r\n  getAverageItemSize(): number {\r\n    return this._averageItemSize;\r\n  }\r\n\r\n  /**\r\n   * Adds a measurement sample for the estimator to consider.\r\n   * @param range The measured range.\r\n   * @param size The measured size of the given range in pixels.\r\n   */\r\n  addSample(range: ListRange, size: number) {\r\n    const newTotalWeight = this._totalWeight + range.end - range.start;\r\n    if (newTotalWeight) {\r\n      const newAverageItemSize =\r\n          (size + this._averageItemSize * this._totalWeight) / newTotalWeight;\r\n      if (newAverageItemSize) {\r\n        this._averageItemSize = newAverageItemSize;\r\n        this._totalWeight = newTotalWeight;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Resets the averager. */\r\n  reset() {\r\n    this._averageItemSize = this._defaultItemSize;\r\n    this._totalWeight = 0;\r\n  }\r\n}\r\n\r\n\r\n/** Virtual scrolling strategy for lists with items of unknown or dynamic size. */\r\nexport class AutoSizeVirtualScrollStrategy implements VirtualScrollStrategy {\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  scrolledIndexChange = Observable.create(() => {\r\n    // TODO(mmalerba): Implement.\r\n    throw Error('cdk-virtual-scroll: scrolledIndexChange is currently not supported for the' +\r\n        ' autosize scroll strategy');\r\n  });\r\n\r\n  /** The attached viewport. */\r\n  private _viewport: CdkVirtualScrollViewport | null = null;\r\n\r\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\r\n  private _minBufferPx: number;\r\n\r\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\r\n  private _maxBufferPx: number;\r\n\r\n  /** The estimator used to estimate the size of unseen items. */\r\n  private _averager: ItemSizeAverager;\r\n\r\n  /** The last measured scroll offset of the viewport. */\r\n  private _lastScrollOffset: number;\r\n\r\n  /** The last measured size of the rendered content in the viewport. */\r\n  private _lastRenderedContentSize: number;\r\n\r\n  /** The last measured size of the rendered content in the viewport. */\r\n  private _lastRenderedContentOffset: number;\r\n\r\n  /**\r\n   * The number of consecutive cycles where removing extra items has failed. Failure here means that\r\n   * we estimated how many items we could safely remove, but our estimate turned out to be too much\r\n   * and it wasn't safe to remove that many elements.\r\n   */\r\n  private _removalFailures = 0;\r\n\r\n  /**\r\n   * @param minBufferPx The minimum amount of buffer rendered beyond the viewport (in pixels).\r\n   *     If the amount of buffer dips below this number, more items will be rendered.\r\n   * @param maxBufferPx The number of pixels worth of buffer to shoot for when rendering new items.\r\n   *     If the actual amount turns out to be less it will not necessarily trigger an additional\r\n   *     rendering cycle (as long as the amount of buffer is still greater than `minBufferPx`).\r\n   * @param averager The averager used to estimate the size of unseen items.\r\n   */\r\n  constructor(minBufferPx: number, maxBufferPx: number, averager = new ItemSizeAverager()) {\r\n    this._minBufferPx = minBufferPx;\r\n    this._maxBufferPx = maxBufferPx;\r\n    this._averager = averager;\r\n  }\r\n\r\n  /**\r\n   * Attaches this scroll strategy to a viewport.\r\n   * @param viewport The viewport to attach this strategy to.\r\n   */\r\n  attach(viewport: CdkVirtualScrollViewport) {\r\n    this._averager.reset();\r\n    this._viewport = viewport;\r\n    this._setScrollOffset();\r\n  }\r\n\r\n  /** Detaches this scroll strategy from the currently attached viewport. */\r\n  detach() {\r\n    this._viewport = null;\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onContentScrolled() {\r\n    if (this._viewport) {\r\n      this._updateRenderedContentAfterScroll();\r\n    }\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onDataLengthChanged() {\r\n    if (this._viewport) {\r\n      this._setScrollOffset();\r\n      this._checkRenderedContentSize();\r\n    }\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onContentRendered() {\r\n    if (this._viewport) {\r\n      this._checkRenderedContentSize();\r\n    }\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onRenderedOffsetChanged() {\r\n    if (this._viewport) {\r\n      this._checkRenderedContentOffset();\r\n    }\r\n  }\r\n\r\n  /** Scroll to the offset for the given index. */\r\n  scrollToIndex(): void {\r\n    // TODO(mmalerba): Implement.\r\n    throw Error('cdk-virtual-scroll: scrollToIndex is currently not supported for the autosize'\r\n        + ' scroll strategy');\r\n  }\r\n\r\n  /**\r\n   * Update the buffer parameters.\r\n   * @param minBufferPx The minimum amount of buffer rendered beyond the viewport (in pixels).\r\n   * @param maxBufferPx The number of buffer items to render beyond the edge of the viewport (in\r\n   *     pixels).\r\n   */\r\n  updateBufferSize(minBufferPx: number, maxBufferPx: number) {\r\n    if (maxBufferPx < minBufferPx) {\r\n      throw('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\r\n    }\r\n    this._minBufferPx = minBufferPx;\r\n    this._maxBufferPx = maxBufferPx;\r\n  }\r\n\r\n  /** Update the rendered content after the user scrolls. */\r\n  private _updateRenderedContentAfterScroll() {\r\n    const viewport = this._viewport!;\r\n\r\n    // The current scroll offset.\r\n    const scrollOffset = viewport.measureScrollOffset();\r\n    // The delta between the current scroll offset and the previously recorded scroll offset.\r\n    let scrollDelta = scrollOffset - this._lastScrollOffset;\r\n    // The magnitude of the scroll delta.\r\n    let scrollMagnitude = Math.abs(scrollDelta);\r\n\r\n    // The currently rendered range.\r\n    const renderedRange = viewport.getRenderedRange();\r\n\r\n    // If we're scrolling toward the top, we need to account for the fact that the predicted amount\r\n    // of content and the actual amount of scrollable space may differ. We address this by slowly\r\n    // correcting the difference on each scroll event.\r\n    let offsetCorrection = 0;\r\n    if (scrollDelta < 0) {\r\n      // The content offset we would expect based on the average item size.\r\n      const predictedOffset = renderedRange.start * this._averager.getAverageItemSize();\r\n      // The difference between the predicted size of the unrendered content at the beginning and\r\n      // the actual available space to scroll over. We need to reduce this to zero by the time the\r\n      // user scrolls to the top.\r\n      // - 0 indicates that the predicted size and available space are the same.\r\n      // - A negative number that the predicted size is smaller than the available space.\r\n      // - A positive number indicates the predicted size is larger than the available space\r\n      const offsetDifference = predictedOffset - this._lastRenderedContentOffset;\r\n      // The amount of difference to correct during this scroll event. We calculate this as a\r\n      // percentage of the total difference based on the percentage of the distance toward the top\r\n      // that the user scrolled.\r\n      offsetCorrection = Math.round(offsetDifference *\r\n          Math.max(0, Math.min(1, scrollMagnitude / (scrollOffset + scrollMagnitude))));\r\n\r\n      // Based on the offset correction above, we pretend that the scroll delta was bigger or\r\n      // smaller than it actually was, this way we can start to eliminate the difference.\r\n      scrollDelta = scrollDelta - offsetCorrection;\r\n      scrollMagnitude = Math.abs(scrollDelta);\r\n    }\r\n\r\n    // The current amount of buffer past the start of the viewport.\r\n    const startBuffer = this._lastScrollOffset - this._lastRenderedContentOffset;\r\n    // The current amount of buffer past the end of the viewport.\r\n    const endBuffer = (this._lastRenderedContentOffset + this._lastRenderedContentSize) -\r\n        (this._lastScrollOffset + viewport.getViewportSize());\r\n    // The amount of unfilled space that should be filled on the side the user is scrolling toward\r\n    // in order to safely absorb the scroll delta.\r\n    const underscan = scrollMagnitude + this._minBufferPx -\r\n        (scrollDelta < 0 ? startBuffer : endBuffer);\r\n\r\n    // Check if there's unfilled space that we need to render new elements to fill.\r\n    if (underscan > 0) {\r\n      // Check if the scroll magnitude was larger than the viewport size. In this case the user\r\n      // won't notice a discontinuity if we just jump to the new estimated position in the list.\r\n      // However, if the scroll magnitude is smaller than the viewport the user might notice some\r\n      // jitteriness if we just jump to the estimated position. Instead we make sure to scroll by\r\n      // the same number of pixels as the scroll magnitude.\r\n      if (scrollMagnitude >= viewport.getViewportSize()) {\r\n        this._setScrollOffset();\r\n      } else {\r\n        // The number of new items to render on the side the user is scrolling towards. Rather than\r\n        // just filling the underscan space, we actually fill enough to have a buffer size of\r\n        // `maxBufferPx`. This gives us a little wiggle room in case our item size estimate is off.\r\n        const addItems = Math.max(0, Math.ceil((underscan - this._minBufferPx + this._maxBufferPx) /\r\n            this._averager.getAverageItemSize()));\r\n        // The amount of filled space beyond what is necessary on the side the user is scrolling\r\n        // away from.\r\n        const overscan = (scrollDelta < 0 ? endBuffer : startBuffer) - this._minBufferPx +\r\n            scrollMagnitude;\r\n        // The number of currently rendered items to remove on the side the user is scrolling away\r\n        // from. If removal has failed in recent cycles we are less aggressive in how much we try to\r\n        // remove.\r\n        const unboundedRemoveItems = Math.floor(\r\n            overscan / this._averager.getAverageItemSize() / (this._removalFailures + 1));\r\n        const removeItems =\r\n            Math.min(renderedRange.end - renderedRange.start, Math.max(0, unboundedRemoveItems));\r\n\r\n        // The new range we will tell the viewport to render. We first expand it to include the new\r\n        // items we want rendered, we then contract the opposite side to remove items we no longer\r\n        // want rendered.\r\n        const range = this._expandRange(\r\n            renderedRange, scrollDelta < 0 ? addItems : 0, scrollDelta > 0 ? addItems : 0);\r\n        if (scrollDelta < 0) {\r\n          range.end = Math.max(range.start + 1, range.end - removeItems);\r\n        } else {\r\n          range.start = Math.min(range.end - 1, range.start + removeItems);\r\n        }\r\n\r\n        // The new offset we want to set on the rendered content. To determine this we measure the\r\n        // number of pixels we removed and then adjust the offset to the start of the rendered\r\n        // content or to the end of the rendered content accordingly (whichever one doesn't require\r\n        // that the newly added items to be rendered to calculate.)\r\n        let contentOffset: number;\r\n        let contentOffsetTo: 'to-start' | 'to-end';\r\n        if (scrollDelta < 0) {\r\n          let removedSize = viewport.measureRangeSize({\r\n            start: range.end,\r\n            end: renderedRange.end,\r\n          });\r\n          // Check that we're not removing too much.\r\n          if (removedSize <= overscan) {\r\n            contentOffset =\r\n                this._lastRenderedContentOffset + this._lastRenderedContentSize - removedSize;\r\n            this._removalFailures = 0;\r\n          } else {\r\n            // If the removal is more than the overscan can absorb just undo it and record the fact\r\n            // that the removal failed so we can be less aggressive next time.\r\n            range.end = renderedRange.end;\r\n            contentOffset = this._lastRenderedContentOffset + this._lastRenderedContentSize;\r\n            this._removalFailures++;\r\n          }\r\n          contentOffsetTo = 'to-end';\r\n        } else {\r\n          const removedSize = viewport.measureRangeSize({\r\n            start: renderedRange.start,\r\n            end: range.start,\r\n          });\r\n          // Check that we're not removing too much.\r\n          if (removedSize <= overscan) {\r\n            contentOffset = this._lastRenderedContentOffset + removedSize;\r\n            this._removalFailures = 0;\r\n          } else {\r\n            // If the removal is more than the overscan can absorb just undo it and record the fact\r\n            // that the removal failed so we can be less aggressive next time.\r\n            range.start = renderedRange.start;\r\n            contentOffset = this._lastRenderedContentOffset;\r\n            this._removalFailures++;\r\n          }\r\n          contentOffsetTo = 'to-start';\r\n        }\r\n\r\n        // Set the range and offset we calculated above.\r\n        viewport.setRenderedRange(range);\r\n        viewport.setRenderedContentOffset(contentOffset + offsetCorrection, contentOffsetTo);\r\n      }\r\n    } else if (offsetCorrection) {\r\n      // Even if the rendered range didn't change, we may still need to adjust the content offset to\r\n      // simulate scrolling slightly slower or faster than the user actually scrolled.\r\n      viewport.setRenderedContentOffset(this._lastRenderedContentOffset + offsetCorrection);\r\n    }\r\n\r\n    // Save the scroll offset to be compared to the new value on the next scroll event.\r\n    this._lastScrollOffset = scrollOffset;\r\n  }\r\n\r\n  /**\r\n   * Checks the size of the currently rendered content and uses it to update the estimated item size\r\n   * and estimated total content size.\r\n   */\r\n  private _checkRenderedContentSize() {\r\n    const viewport = this._viewport!;\r\n    this._lastRenderedContentSize = viewport.measureRenderedContentSize();\r\n    this._averager.addSample(viewport.getRenderedRange(), this._lastRenderedContentSize);\r\n    this._updateTotalContentSize(this._lastRenderedContentSize);\r\n  }\r\n\r\n  /** Checks the currently rendered content offset and saves the value for later use. */\r\n  private _checkRenderedContentOffset() {\r\n    const viewport = this._viewport!;\r\n    this._lastRenderedContentOffset = viewport.getOffsetToRenderedContentStart()!;\r\n  }\r\n\r\n  /**\r\n   * Sets the scroll offset and renders the content we estimate should be shown at that point.\r\n   * @param scrollOffset The offset to jump to. If not specified the scroll offset will not be\r\n   *     changed, but the rendered content will be recalculated based on our estimate of what should\r\n   *     be shown at the current scroll offset.\r\n   */\r\n  private _setScrollOffset(scrollOffset?: number) {\r\n    const viewport = this._viewport!;\r\n    if (scrollOffset == null) {\r\n      scrollOffset = viewport.measureScrollOffset();\r\n    } else {\r\n      viewport.setScrollOffset(scrollOffset);\r\n    }\r\n    this._lastScrollOffset = scrollOffset;\r\n    this._removalFailures = 0;\r\n\r\n    const itemSize = this._averager.getAverageItemSize();\r\n    const firstVisibleIndex =\r\n        Math.min(viewport.getDataLength() - 1, Math.floor(scrollOffset / itemSize));\r\n    const bufferSize = Math.ceil(this._maxBufferPx / itemSize);\r\n    const range = this._expandRange(\r\n        this._getVisibleRangeForIndex(firstVisibleIndex), bufferSize, bufferSize);\r\n\r\n    viewport.setRenderedRange(range);\r\n    viewport.setRenderedContentOffset(itemSize * range.start);\r\n  }\r\n\r\n  // TODO: maybe move to base class, can probably share with fixed size strategy.\r\n  /**\r\n   * Gets the visible range of data for the given start index. If the start index is too close to\r\n   * the end of the list it may be backed up to ensure the estimated size of the range is enough to\r\n   * fill the viewport.\r\n   * Note: must not be called if `this._viewport` is null\r\n   * @param startIndex The index to start the range at\r\n   * @return a range estimated to be large enough to fill the viewport when rendered.\r\n   */\r\n  private _getVisibleRangeForIndex(startIndex: number): ListRange {\r\n    const viewport = this._viewport!;\r\n    const range: ListRange = {\r\n      start: startIndex,\r\n      end: startIndex +\r\n          Math.ceil(viewport.getViewportSize() / this._averager.getAverageItemSize())\r\n    };\r\n    const extra = range.end - viewport.getDataLength();\r\n    if (extra > 0) {\r\n      range.start = Math.max(0, range.start - extra);\r\n    }\r\n    return range;\r\n  }\r\n\r\n  // TODO: maybe move to base class, can probably share with fixed size strategy.\r\n  /**\r\n   * Expand the given range by the given amount in either direction.\r\n   * Note: must not be called if `this._viewport` is null\r\n   * @param range The range to expand\r\n   * @param expandStart The number of items to expand the start of the range by.\r\n   * @param expandEnd The number of items to expand the end of the range by.\r\n   * @return The expanded range.\r\n   */\r\n  private _expandRange(range: ListRange, expandStart: number, expandEnd: number): ListRange {\r\n    const viewport = this._viewport!;\r\n    const start = Math.max(0, range.start - expandStart);\r\n    const end = Math.min(viewport.getDataLength(), range.end + expandEnd);\r\n    return {start, end};\r\n  }\r\n\r\n  /** Update the viewport's total content size. */\r\n  private _updateTotalContentSize(renderedContentSize: number) {\r\n    const viewport = this._viewport!;\r\n    const renderedRange = viewport.getRenderedRange();\r\n    const totalSize = renderedContentSize +\r\n        (viewport.getDataLength() - (renderedRange.end - renderedRange.start)) *\r\n        this._averager.getAverageItemSize();\r\n    viewport.setTotalContentSize(totalSize);\r\n  }\r\n}\r\n\r\n/**\r\n * Provider factory for `AutoSizeVirtualScrollStrategy` that simply extracts the already created\r\n * `AutoSizeVirtualScrollStrategy` from the given directive.\r\n * @param autoSizeDir The instance of `CdkAutoSizeVirtualScroll` to extract the\r\n *     `AutoSizeVirtualScrollStrategy` from.\r\n */\r\nexport function _autoSizeVirtualScrollStrategyFactory(autoSizeDir: CdkAutoSizeVirtualScroll) {\r\n  return autoSizeDir._scrollStrategy;\r\n}\r\n\r\n\r\n/** A virtual scroll strategy that supports unknown or dynamic size items. */\r\n@Directive({\r\n  selector: 'cdk-virtual-scroll-viewport[autosize]',\r\n  providers: [{\r\n    provide: VIRTUAL_SCROLL_STRATEGY,\r\n    useFactory: _autoSizeVirtualScrollStrategyFactory,\r\n    deps: [forwardRef(() => CdkAutoSizeVirtualScroll)],\r\n  }],\r\n})\r\nexport class CdkAutoSizeVirtualScroll implements OnChanges {\r\n  /**\r\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\r\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\r\n   */\r\n  @Input()\r\n  get minBufferPx(): number { return this._minBufferPx; }\r\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\r\n  _minBufferPx = 100;\r\n\r\n  /**\r\n   * The number of pixels worth of buffer to shoot for when rendering new items.\r\n   * If the actual amount turns out to be less it will not necessarily trigger an additional\r\n   * rendering cycle (as long as the amount of buffer is still greater than `minBufferPx`).\r\n   * Defaults to 200px.\r\n   */\r\n  @Input()\r\n  get maxBufferPx(): number { return this._maxBufferPx; }\r\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\r\n  _maxBufferPx = 200;\r\n\r\n  /** The scroll strategy used by this directive. */\r\n  _scrollStrategy = new AutoSizeVirtualScrollStrategy(this.minBufferPx, this.maxBufferPx);\r\n\r\n  ngOnChanges() {\r\n    this._scrollStrategy.updateBufferSize(this.minBufferPx, this.maxBufferPx);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;ACuBA,AAAA,IAAA;;;;AAAA,gBAAA,kBAAA,YAAA;;IAWE,SAAF,gBAAA,CAAc,eAAoB,EAAlC;QAAc,IAAd,eAAA,KAAA,KAAA,CAAA,EAAc,EAAA,eAAd,GAAA,EAAkC,CAAlC,EAAA;;;;QATA,IAAA,CAAA,YAAA,GAAyB,CAAC,CAA1B;QAUI,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;KACzC;;;;;;IAGD,gBAAF,CAAA,SAAA,CAAA,kBAAoB;;;;IAAlB,YAAF;QACI,OAAO,IAAI,CAAC,gBAAgB,CAAC;KAC9B,CAAH;;;;;;;;;;;;IAOE,gBAAF,CAAA,SAAA,CAAA,SAAW;;;;;;IAAT,UAAU,KAAgB,EAAE,IAAY,EAA1C;QACI,qBAAM,cAAc,GAAG,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;QACnE,IAAI,cAAc,EAAE;YAClB,qBAAM,kBAAkB,GACpB,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,IAAI,cAAc,CAAC;YACxE,IAAI,kBAAkB,EAAE;gBACtB,IAAI,CAAC,gBAAgB,GAAG,kBAAkB,CAAC;gBAC3C,IAAI,CAAC,YAAY,GAAG,cAAc,CAAC;aACpC;SACF;KACF,CAAH;;;;;;IAGE,gBAAF,CAAA,SAAA,CAAA,KAAO;;;;IAAL,YAAF;QACI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC9C,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;KACvB,CAAH;IAjEA,OAAA,gBAAA,CAAA;CAkEA,EAAA,CAAC,CAAA;;;;AAID,AAAA,IAAA;;;AAAA,6BAAA,kBAAA,YAAA;;;;;;;;;IA4CE,SAAF,6BAAA,CAAc,WAAmB,EAAE,WAAmB,EAAE,QAAiC,EAAzF;QAAwD,IAAxD,QAAA,KAAA,KAAA,CAAA,EAAwD,EAAA,QAAxD,GAAA,IAAuE,gBAAgB,EAAE,CAAzF,EAAA;;;;QA1CA,IAAA,CAAA,mBAAA,GAAwB,UAAU,CAAC,MAAM,CAAC,YAA1C;;YAEI,MAAM,KAAK,CAAC,4EAA4E;gBACpF,2BAA2B,CAAC,CAAC;SAClC,CAAC,CAAJ;;;;QAGA,IAAA,CAAA,SAAA,GAAuD,IAAI,CAA3D;;;;;;QAyBA,IAAA,CAAA,gBAAA,GAA6B,CAAC,CAA9B;QAWI,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;KAC3B;;;;;;;;;;IAMD,6BAAF,CAAA,SAAA,CAAA,MAAQ;;;;;IAAN,UAAO,QAAkC,EAA3C;QACI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB,CAAH;;;;;;IAGE,6BAAF,CAAA,SAAA,CAAA,MAAQ;;;;IAAN,YAAF;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACvB,CAAH;;;;;;IAGE,6BAAF,CAAA,SAAA,CAAA,iBAAmB;;;;IAAjB,YAAF;QACI,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,iCAAiC,EAAE,CAAC;SAC1C;KACF,CAAH;;;;;;IAGE,6BAAF,CAAA,SAAA,CAAA,mBAAqB;;;;IAAnB,YAAF;QACI,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,yBAAyB,EAAE,CAAC;SAClC;KACF,CAAH;;;;;;IAGE,6BAAF,CAAA,SAAA,CAAA,iBAAmB;;;;IAAjB,YAAF;QACI,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,yBAAyB,EAAE,CAAC;SAClC;KACF,CAAH;;;;;;IAGE,6BAAF,CAAA,SAAA,CAAA,uBAAyB;;;;IAAvB,YAAF;QACI,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,2BAA2B,EAAE,CAAC;SACpC;KACF,CAAH;;;;;;IAGE,6BAAF,CAAA,SAAA,CAAA,aAAe;;;;IAAb,YAAF;;QAEI,MAAM,KAAK,CAAC,+EAA+E;cACrF,kBAAkB,CAAC,CAAC;KAC3B,CAAH;;;;;;;;;;;;;;IAQE,6BAAF,CAAA,SAAA,CAAA,gBAAkB;;;;;;;IAAhB,UAAiB,WAAmB,EAAE,WAAmB,EAA3D;QACI,IAAI,WAAW,GAAG,WAAW,EAAE;YAC7B,OAAM,8EAA8E,EAAE;SACvF;QACD,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;KACjC,CAAH;;;;;IAGU,6BAAV,CAAA,SAAA,CAAA,iCAA2C;;;;;QACvC,qBAAM,QAAQ,sBAAG,IAAI,CAAC,SAAS,EAAC,CAAC;;QAGjC,qBAAM,YAAY,GAAG,QAAQ,CAAC,mBAAmB,EAAE,CAAC;;QAEpD,qBAAI,WAAW,GAAG,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC;;QAExD,qBAAI,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;;QAG5C,qBAAM,aAAa,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;;;;QAKlD,qBAAI,gBAAgB,GAAG,CAAC,CAAC;QACzB,IAAI,WAAW,GAAG,CAAC,EAAE;;YAEnB,qBAAM,eAAe,GAAG,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;;;;;;;YAOlF,qBAAM,gBAAgB,GAAG,eAAe,GAAG,IAAI,CAAC,0BAA0B,CAAC;;;;YAI3E,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB;gBAC1C,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,IAAI,YAAY,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;;;YAIlF,WAAW,GAAG,WAAW,GAAG,gBAAgB,CAAC;YAC7C,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SACzC;;QAGD,qBAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,0BAA0B,CAAC;;QAE7E,qBAAM,SAAS,GAAG,CAAC,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,wBAAwB;aAC7E,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,eAAe,EAAE,CAAC,CAAC;;;QAG1D,qBAAM,SAAS,GAAG,eAAe,GAAG,IAAI,CAAC,YAAY;aAChD,WAAW,GAAG,CAAC,GAAG,WAAW,GAAG,SAAS,CAAC,CAAC;;QAGhD,IAAI,SAAS,GAAG,CAAC,EAAE;;;;;;YAMjB,IAAI,eAAe,IAAI,QAAQ,CAAC,eAAe,EAAE,EAAE;gBACjD,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB;iBAAM;;;;gBAIL,qBAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY;oBACrF,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;;;gBAG1C,qBAAM,QAAQ,GAAG,CAAC,WAAW,GAAG,CAAC,GAAG,SAAS,GAAG,WAAW,IAAI,IAAI,CAAC,YAAY;oBAC5E,eAAe,CAAC;;;;gBAIpB,qBAAM,oBAAoB,GAAG,IAAI,CAAC,KAAK,CACnC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClF,qBAAM,WAAW,GACb,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC,CAAC;;;;gBAKzF,qBAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAC3B,aAAa,EAAE,WAAW,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,EAAE,WAAW,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC,CAAC;gBACnF,IAAI,WAAW,GAAG,CAAC,EAAE;oBACnB,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,GAAG,WAAW,CAAC,CAAC;iBAChE;qBAAM;oBACL,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,EAAE,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC;iBAClE;;;;;gBAMD,qBAAI,aAAa,GAAzB,KAAA,CAAiC,CAAC;gBAC1B,qBAAI,eAAe,GAA3B,KAAA,CAAkD,CAAC;gBAC3C,IAAI,WAAW,GAAG,CAAC,EAAE;oBACnB,qBAAI,WAAW,GAAG,QAAQ,CAAC,gBAAgB,CAAC;wBAC1C,KAAK,EAAE,KAAK,CAAC,GAAG;wBAChB,GAAG,EAAE,aAAa,CAAC,GAAG;qBACvB,CAAC,CAAC;;oBAEH,IAAI,WAAW,IAAI,QAAQ,EAAE;wBAC3B,aAAa;4BACT,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,wBAAwB,GAAG,WAAW,CAAC;wBAClF,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;qBAC3B;yBAAM;;;wBAGL,KAAK,CAAC,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC;wBAC9B,aAAa,GAAG,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,wBAAwB,CAAC;wBAChF,IAAI,CAAC,gBAAgB,EAAE,CAAC;qBACzB;oBACD,eAAe,GAAG,QAAQ,CAAC;iBAC5B;qBAAM;oBACL,qBAAM,WAAW,GAAG,QAAQ,CAAC,gBAAgB,CAAC;wBAC5C,KAAK,EAAE,aAAa,CAAC,KAAK;wBAC1B,GAAG,EAAE,KAAK,CAAC,KAAK;qBACjB,CAAC,CAAC;;oBAEH,IAAI,WAAW,IAAI,QAAQ,EAAE;wBAC3B,aAAa,GAAG,IAAI,CAAC,0BAA0B,GAAG,WAAW,CAAC;wBAC9D,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;qBAC3B;yBAAM;;;wBAGL,KAAK,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;wBAClC,aAAa,GAAG,IAAI,CAAC,0BAA0B,CAAC;wBAChD,IAAI,CAAC,gBAAgB,EAAE,CAAC;qBACzB;oBACD,eAAe,GAAG,UAAU,CAAC;iBAC9B;;gBAGD,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBACjC,QAAQ,CAAC,wBAAwB,CAAC,aAAa,GAAG,gBAAgB,EAAE,eAAe,CAAC,CAAC;aACtF;SACF;aAAM,IAAI,gBAAgB,EAAE;;;YAG3B,QAAQ,CAAC,wBAAwB,CAAC,IAAI,CAAC,0BAA0B,GAAG,gBAAgB,CAAC,CAAC;SACvF;;QAGD,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC;;;;;;;IAOhC,6BAAV,CAAA,SAAA,CAAA,yBAAmC;;;;;;QAC/B,qBAAM,QAAQ,sBAAG,IAAI,CAAC,SAAS,EAAC,CAAC;QACjC,IAAI,CAAC,wBAAwB,GAAG,QAAQ,CAAC,0BAA0B,EAAE,CAAC;QACtE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACrF,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;;;;;;IAItD,6BAAV,CAAA,SAAA,CAAA,2BAAqC;;;;;QACjC,qBAAM,QAAQ,sBAAG,IAAI,CAAC,SAAS,EAAC,CAAC;QACjC,IAAI,CAAC,0BAA0B,sBAAG,QAAQ,CAAC,+BAA+B,EAAE,EAAC,CAAC;;;;;;;;;IASxE,6BAAV,CAAA,SAAA,CAAA,gBAA0B;;;;;;;IAA1B,UAA2B,YAAqB,EAAhD;QACI,qBAAM,QAAQ,sBAAG,IAAI,CAAC,SAAS,EAAC,CAAC;QACjC,IAAI,YAAY,IAAI,IAAI,EAAE;YACxB,YAAY,GAAG,QAAQ,CAAC,mBAAmB,EAAE,CAAC;SAC/C;aAAM;YACL,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;SACxC;QACD,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC;QACtC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAE1B,qBAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;QACrD,qBAAM,iBAAiB,GACnB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC;QAChF,qBAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC;QAC3D,qBAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAC3B,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QAE9E,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACjC,QAAQ,CAAC,wBAAwB,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;IAYpD,6BAAV,CAAA,SAAA,CAAA,wBAAkC;;;;;;;;IAAlC,UAAmC,UAAkB,EAArD;QACI,qBAAM,QAAQ,sBAAG,IAAI,CAAC,SAAS,EAAC,CAAC;QACjC,qBAAM,KAAK,GAAc;YACvB,KAAK,EAAE,UAAU;YACjB,GAAG,EAAE,UAAU;gBACX,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;SAChF,CAAC;QACF,qBAAM,KAAK,GAAG,KAAK,CAAC,GAAG,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;QACnD,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;SAChD;QACD,OAAO,KAAK,CAAC;;;;;;;;;;IAYP,6BAAV,CAAA,SAAA,CAAA,YAAsB;;;;;;;;IAAtB,UAAuB,KAAgB,EAAE,WAAmB,EAAE,SAAiB,EAA/E;QACI,qBAAM,QAAQ,sBAAG,IAAI,CAAC,SAAS,EAAC,CAAC;QACjC,qBAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC;QACrD,qBAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,KAAK,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;QACtE,OAAO,EAAC,KAAK,EAAjB,KAAiB,EAAE,GAAG,EAAtB,GAAsB,EAAC,CAAC;;;;;;;IAId,6BAAV,CAAA,SAAA,CAAA,uBAAiC;;;;;IAAjC,UAAkC,mBAA2B,EAA7D;QACI,qBAAM,QAAQ,sBAAG,IAAI,CAAC,SAAS,EAAC,CAAC;QACjC,qBAAM,aAAa,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QAClD,qBAAM,SAAS,GAAG,mBAAmB;YACjC,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,KAAK,CAAC;gBACrE,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;QACxC,QAAQ,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;;IApa5C,OAAA,6BAAA,CAAA;CAsaA,EAAA,CAAC,CAAA;;;;;;;;AAQD,AAAA,SAAA,qCAAA,CAAsD,WAAqC,EAA3F;IACE,OAAO,WAAW,CAAC,eAAe,CAAC;CACpC;;;;;;QAoBD,IAAA,CAAA,YAAA,GAAiB,GAAG,CAApB;QAWA,IAAA,CAAA,YAAA,GAAiB,GAAG,CAApB;;;;QAGA,IAAA,CAAA,eAAA,GAAoB,IAAI,6BAA6B,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAzF;;IAhBA,MAAA,CAAA,cAAA,CAAM,wBAAN,CAAA,SAAA,EAAA,aAAiB,EAAjB;;;;;;QAAA,YAAA,EAA8B,OAAO,IAAI,CAAC,YAAY,CAAC,EAAvD;;;;;QACE,UAAgB,KAAa,EAA/B,EAAmC,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;IAUrF,MAAA,CAAA,cAAA,CAAM,wBAAN,CAAA,SAAA,EAAA,aAAiB,EAAjB;;;;;;;;QAAA,YAAA,EAA8B,OAAO,IAAI,CAAC,YAAY,CAAC,EAAvD;;;;;QACE,UAAgB,KAAa,EAA/B,EAAmC,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;;;;IAMnF,wBAAF,CAAA,SAAA,CAAA,WAAa;;;IAAX,YAAF;QACI,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAC3E,CAAH;;QAlCA,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACT,QAAQ,EAAE,uCAAuC;oBACjD,SAAS,EAAE,CAAC;4BACV,OAAO,EAAE,uBAAuB;4BAChC,UAAU,EAAE,qCAAqC;4BACjD,IAAI,EAAE,CAAC,UAAU,CAAC,YAAtB,EAA4B,OAAA,wBAAwB,CAApD,EAAoD,CAAC,CAAC;yBACnD,CAAC;iBACH,EAAD,EAAA;;;;QAMA,aAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,EAAA;QAWA,aAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,EAAA;;IA5cA,OAAA,wBAAA,CAAA;;;;;;;;;;;QDYA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;oBACR,OAAO,EAAE,CAAC,wBAAwB,CAAC;oBACnC,YAAY,EAAE,CAAC,wBAAwB,CAAC;iBACzC,EAAD,EAAA;;IAfA,OAAA,eAAA,CAAA;;;;;;;;;;;;;;;"}