{"version":3,"file":"dialog.js","sources":["../../../src/cdk-experimental/dialog/dialog-module.ts","../../../src/cdk-experimental/dialog/dialog.ts","../../../src/cdk-experimental/dialog/dialog-injectors.ts","../../../src/cdk-experimental/dialog/dialog-ref.ts","../../../src/cdk-experimental/dialog/dialog-container.ts","../../../src/cdk-experimental/dialog/dialog-config.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {Dialog} from './dialog';\r\nimport {CdkDialogContainer} from './dialog-container';\r\nimport {DialogConfig} from './dialog-config';\r\nimport {DialogRef} from './dialog-ref';\r\nimport {\r\n  DIALOG_CONFIG,\r\n  DIALOG_CONTAINER,\r\n  DIALOG_REF,\r\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\r\n} from './dialog-injectors';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    CdkDialogContainer,\r\n  ],\r\n  declarations: [\r\n    CdkDialogContainer,\r\n  ],\r\n  providers: [\r\n    Dialog,\r\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n    {provide: DIALOG_REF, useValue: DialogRef},\r\n    {provide: DIALOG_CONTAINER, useValue: CdkDialogContainer},\r\n    {provide: DIALOG_CONFIG, useValue: DialogConfig},\r\n  ],\r\n  entryComponents: [CdkDialogContainer],\r\n})\r\nexport class DialogModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  TemplateRef,\r\n  SkipSelf,\r\n  Optional,\r\n  Injectable,\r\n  Injector,\r\n  Inject,\r\n  ComponentRef\r\n} from '@angular/core';\r\nimport {ComponentPortal, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {of as observableOf, Observable, Subject, defer} from 'rxjs';\r\nimport {DialogRef} from './dialog-ref';\r\nimport {Location} from '@angular/common';\r\nimport {DialogConfig} from './dialog-config';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {CdkDialogContainer} from './dialog-container';\r\nimport {\r\n  ComponentType,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n} from '@angular/cdk/overlay';\r\nimport {startWith} from 'rxjs/operators';\r\n\r\nimport {\r\n  DIALOG_SCROLL_STRATEGY,\r\n  DIALOG_DATA,\r\n  DIALOG_REF,\r\n  DIALOG_CONTAINER,\r\n  DIALOG_CONFIG,\r\n} from './dialog-injectors';\r\n\r\n\r\n/**\r\n * Service to open modal dialogs.\r\n */\r\n@Injectable()\r\nexport class Dialog {\r\n  /** Stream that emits when all dialogs are closed. */\r\n  get _afterAllClosed(): Observable<void> {\r\n    return this._parentDialog ? this._parentDialog.afterAllClosed : this._afterAllClosedBase;\r\n  }\r\n  _afterAllClosedBase = new Subject<void>();\r\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\r\n      this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));\r\n\r\n  /** Stream that emits when a dialog is opened. */\r\n  get afterOpened(): Subject<DialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpened;\r\n  }\r\n  _afterOpened: Subject<DialogRef<any>> = new Subject();\r\n\r\n  /** Stream that emits when a dialog is opened. */\r\n  get openDialogs(): DialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogs;\r\n  }\r\n  _openDialogs: DialogRef<any>[] = [];\r\n\r\n  constructor(\r\n      private overlay: Overlay,\r\n      private injector: Injector,\r\n      @Inject(DIALOG_REF) private dialogRefConstructor,\r\n      @Inject(DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\r\n      @Optional() @SkipSelf() private _parentDialog: Dialog,\r\n      @Optional() location: Location) {\r\n\r\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\r\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\r\n    // the user is using the `HashLocationStrategy`).\r\n    if (!_parentDialog && location) {\r\n      location.subscribe(() => this.closeAll());\r\n    }\r\n  }\r\n\r\n  /** Gets an open dialog by id. */\r\n  getById(id: string): DialogRef<any> | undefined {\r\n    return this._openDialogs.find(ref  => ref.id === id);\r\n  }\r\n\r\n  /** Closes all open dialogs. */\r\n  closeAll(): void {\r\n    this.openDialogs.forEach(ref => ref.close());\r\n  }\r\n\r\n  /** Opens a dialog from a component. */\r\n  openFromComponent<T>(component: ComponentType<T>, config?: DialogConfig): DialogRef<any> {\r\n    config = this._applyConfigDefaults(config);\r\n\r\n    if (config.id && this.getById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef = this._attachDialogContentForComponent(component, dialogContainer,\r\n      overlayRef, config);\r\n\r\n    this.registerDialogRef(dialogRef);\r\n    return dialogRef;\r\n  }\r\n\r\n  /** Opens a dialog from a template. */\r\n  openFromTemplate<T>(template: TemplateRef<T>, config?: DialogConfig): DialogRef<any> {\r\n    config = this._applyConfigDefaults(config);\r\n\r\n    if (config.id && this.getById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef = this._attachDialogContentForTemplate(template, dialogContainer,\r\n      overlayRef, config);\r\n\r\n    this.registerDialogRef(dialogRef);\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Forwards emitting events for when dialogs are opened and all dialogs are closed.\r\n   */\r\n  private registerDialogRef(dialogRef: DialogRef<any>): void {\r\n    this.openDialogs.push(dialogRef);\r\n\r\n    const dialogOpenSub = dialogRef.afterOpened().subscribe(() => {\r\n      this.afterOpened.next(dialogRef);\r\n      dialogOpenSub.unsubscribe();\r\n    });\r\n\r\n    const dialogCloseSub = dialogRef.afterClosed().subscribe(() => {\r\n      let dialogIndex = this._openDialogs.indexOf(dialogRef);\r\n\r\n      if (dialogIndex > -1) {\r\n        this._openDialogs.splice(dialogIndex, 1);\r\n      }\r\n\r\n      if (!this._openDialogs.length) {\r\n        this._afterAllClosedBase.next();\r\n        dialogCloseSub.unsubscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates an overlay config from a dialog config.\r\n   * @param config The dialog configuration.\r\n   * @returns The overlay configuration.\r\n   */\r\n  protected _createOverlay(config: DialogConfig): OverlayRef {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this.overlay.position().global(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: config.panelClass,\r\n      hasBackdrop: config.hasBackdrop,\r\n      direction: config.direction,\r\n      minWidth: config.minWidth,\r\n      minHeight: config.minHeight,\r\n      maxWidth: config.maxWidth,\r\n      maxHeight: config.maxHeight\r\n    });\r\n\r\n    if (config.backdropClass) {\r\n      overlayConfig.backdropClass = config.backdropClass;\r\n    }\r\n    return this.overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n   * @param overlay Reference to the dialog's underlying overlay.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to a ComponentRef for the attached container.\r\n   */\r\n  protected _attachDialogContainer(overlay: OverlayRef, config: DialogConfig): CdkDialogContainer {\r\n    const container = config.containerComponent || this.injector.get(DIALOG_CONTAINER);\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this.injector, new WeakMap([\r\n      [DialogConfig, config]\r\n    ]));\r\n    const containerPortal = new ComponentPortal(container, config.viewContainerRef, injector);\r\n    const containerRef: ComponentRef<CdkDialogContainer> = overlay.attach(containerPortal);\r\n    containerRef.instance._config = config;\r\n\r\n    return containerRef.instance;\r\n  }\r\n\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  protected _attachDialogContentForComponent<T>(\r\n      componentOrTemplateRef: ComponentType<T>,\r\n      dialogContainer: CdkDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: DialogConfig): DialogRef<any> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\r\n\r\n    const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n    const contentRef = dialogContainer.attachComponentPortal(\r\n        new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n    dialogRef.componentInstance = contentRef.instance;\r\n\r\n    dialogRef.updateSize({width: config.width, height: config.height})\r\n             .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  protected _attachDialogContentForTemplate<T>(\r\n      componentOrTemplateRef: TemplateRef<T>,\r\n      dialogContainer: CdkDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: DialogConfig): DialogRef<any> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\r\n\r\n    dialogContainer.attachTemplatePortal(\r\n      new TemplatePortal<T>(componentOrTemplateRef, null!,\r\n        <any>{$implicit: config.data, dialogRef}));\r\n    dialogRef.updateSize({width: config.width, height: config.height})\r\n             .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n   * of a dialog to close itself and, optionally, to return a value.\r\n   * @param config Config object that is used to construct the dialog.\r\n   * @param dialogRef Reference to the dialog.\r\n   * @param container Dialog container element that wraps all of the contents.\r\n   * @returns The custom injector that can be used inside the dialog.\r\n   */\r\n  private _createInjector<T>(\r\n      config: DialogConfig,\r\n      dialogRef: DialogRef<T>,\r\n      dialogContainer: CdkDialogContainer): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injectionTokens = new WeakMap<any, any>([\r\n      [this.injector.get(DIALOG_REF), dialogRef],\r\n      [this.injector.get(DIALOG_CONTAINER), dialogContainer],\r\n      [DIALOG_DATA, config.data]\r\n    ]);\r\n\r\n    if (config.direction &&\r\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\r\n      injectionTokens.set(Directionality, {\r\n        value: config.direction,\r\n        change: observableOf()\r\n      });\r\n    }\r\n\r\n    return new PortalInjector(userInjector || this.injector, injectionTokens);\r\n  }\r\n\r\n  /**\r\n   * Expands the provided configuration object to include the default values for properties which\r\n   * are undefined.\r\n   */\r\n  private _applyConfigDefaults(config?: DialogConfig): DialogConfig {\r\n    const dialogConfig = this.injector.get(DIALOG_CONFIG) as typeof DialogConfig;\r\n    return {...new dialogConfig(), ...config};\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\nimport {ComponentType, Overlay, ScrollStrategy, BlockScrollStrategy} from '@angular/cdk/overlay';\r\nimport {DialogRef} from './dialog-ref';\r\nimport {CdkDialogContainer} from './dialog-container';\r\nimport {DialogConfig} from './dialog-config';\r\n\r\n/** Injection token for the Dialog's ScrollStrategy. */\r\nexport const DIALOG_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('DialogScrollStrategy');\r\n\r\n/** Injection token for the Dialog's Data. */\r\nexport const DIALOG_DATA = new InjectionToken<any>('DialogData');\r\n\r\n/** Injection token for the DialogRef constructor. */\r\nexport const DIALOG_REF = new InjectionToken<DialogRef<any>>('DialogRef');\r\n\r\n/** Injection token for the DialogConfig. */\r\nexport const DIALOG_CONFIG = new InjectionToken<DialogConfig>('DialogConfig');\r\n\r\n/** Injection token for the Dialog's DialogContainer component. */\r\nexport const DIALOG_CONTAINER =\r\n    new InjectionToken<ComponentType<CdkDialogContainer>>('DialogContainer');\r\n\r\n/** @docs-private */\r\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => BlockScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: DIALOG_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\r\nimport {OverlayRef, GlobalPositionStrategy, OverlaySizeConfig} from '@angular/cdk/overlay';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {Observable} from 'rxjs';\r\nimport {map, filter} from 'rxjs/operators';\r\nimport {DialogPosition} from './dialog-config';\r\nimport {CdkDialogContainer} from './dialog-container';\r\n\r\n/** Unique id for the created dialog. */\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Reference to a dialog opened via the Dialog service.\r\n */\r\nexport class DialogRef<T, R = any> {\r\n  /** The instance of the component in the dialog. */\r\n  componentInstance: T;\r\n\r\n  /** Whether the user is allowed to close the dialog. */\r\n  disableClose: boolean | undefined;\r\n\r\n  /** Result to be passed to afterClosed. */\r\n  private _result: R | undefined;\r\n\r\n  constructor(\r\n    public _overlayRef: OverlayRef,\r\n    protected _containerInstance: CdkDialogContainer,\r\n    readonly id: string = `dialog-${uniqueId++}`) {\r\n\r\n    // If the dialog has a backdrop, handle clicks from the backdrop.\r\n    if (_containerInstance._config.hasBackdrop) {\r\n      _overlayRef.backdropClick().subscribe(() => {\r\n        if (!this.disableClose) {\r\n          this.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    this.beforeClosed().subscribe(() => {\r\n      this._overlayRef.detachBackdrop();\r\n    });\r\n\r\n    this.afterClosed().subscribe(() => {\r\n      this._overlayRef.detach();\r\n      this._overlayRef.dispose();\r\n      this.componentInstance = null!;\r\n    });\r\n\r\n    // Close when escape keydown event occurs\r\n    _overlayRef.keydownEvents()\r\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\r\n      .subscribe(() => this.close());\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay's backdrop has been clicked. */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._overlayRef.backdropClick();\r\n  }\r\n\r\n  /**\r\n   * Close the dialog.\r\n   * @param dialogResult Optional result to return to the dialog opener.\r\n   */\r\n  close(dialogResult?: R): void {\r\n    this._result = dialogResult;\r\n    this._containerInstance._startExiting();\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's position.\r\n   * @param position New dialog position.\r\n   */\r\n  updatePosition(position?: DialogPosition): this {\r\n    let strategy = this._getPositionStrategy();\r\n\r\n    if (position && (position.left || position.right)) {\r\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n    } else {\r\n      strategy.centerHorizontally();\r\n    }\r\n\r\n    if (position && (position.top || position.bottom)) {\r\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n    } else {\r\n      strategy.centerVertically();\r\n    }\r\n\r\n    this._overlayRef.updatePosition();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when keydown events are targeted on the overlay.\r\n   */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._overlayRef.keydownEvents();\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's width and height, defined, min and max.\r\n   * @param size New size for the overlay.\r\n   */\r\n  updateSize(size: OverlaySizeConfig): this {\r\n    if (size.width) {\r\n      this._getPositionStrategy().width(size.width.toString());\r\n    }\r\n    if (size.height) {\r\n      this._getPositionStrategy().height(size.height.toString());\r\n    }\r\n    this._overlayRef.updateSize(size);\r\n    this._overlayRef.updatePosition();\r\n    return this;\r\n  }\r\n\r\n  /** Fetches the position strategy object from the overlay ref. */\r\n  private _getPositionStrategy(): GlobalPositionStrategy {\r\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog begins opening. */\r\n  beforeOpened(): Observable<void> {\r\n    return this._containerInstance._beforeEnter.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog is finished opening. */\r\n  afterOpened(): Observable<void> {\r\n    return this._containerInstance._afterEnter.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog begins closing. */\r\n  beforeClosed(): Observable<R | undefined> {\r\n    return this._containerInstance._beforeExit.pipe(map(() => this._result));\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog is finished closing. */\r\n  afterClosed(): Observable<R | undefined> {\r\n    return this._containerInstance._afterExit.pipe(map(() => this._result));\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {\r\n  BasePortalOutlet,\r\n  ComponentPortal,\r\n  PortalHostDirective,\r\n  TemplatePortal\r\n} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  HostBinding,\r\n  Inject,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {DialogConfig} from './dialog-config';\r\n\r\n\r\nexport function throwDialogContentAlreadyAttachedError() {\r\n  throw Error('Attempting to attach dialog content after content is already attached');\r\n}\r\n\r\n\r\n/**\r\n * Internal component that wraps user-provided dialog content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-dialog-container',\r\n  templateUrl: './dialog-container.html',\r\n  styleUrls: ['dialog-container.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  animations: [\r\n    trigger('dialog', [\r\n      state('enter', style({ opacity: 1 })),\r\n      state('exit, void', style({ opacity: 0 })),\r\n      transition('* => *', animate(225)),\r\n    ])\r\n  ],\r\n  host: {\r\n    '[@dialog]': '_state',\r\n    '(@dialog.start)': '_onAnimationStart($event)',\r\n    '(@dialog.done)': '_onAnimationDone($event)',\r\n  },\r\n})\r\nexport class CdkDialogContainer extends BasePortalOutlet implements OnDestroy {\r\n  /** State of the dialog animation. */\r\n  _state: 'void' | 'enter' | 'exit' = 'enter';\r\n\r\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\r\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\r\n\r\n   /** The class that traps and manages focus within the dialog. */\r\n  private _focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, false);\r\n\r\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\r\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\r\n  // that can be inherited.\r\n  // tslint:disable:no-host-decorator-in-concrete\r\n  @HostBinding('attr.aria-label') get _ariaLabel() { return this._config.ariaLabel || null; }\r\n\r\n  @HostBinding('attr.aria-describedby')\r\n  get _ariaDescribedBy() { return this._config.ariaDescribedBy; }\r\n\r\n  @HostBinding('attr.role') get _role() { return this._config.role; }\r\n\r\n  @HostBinding('attr.tabindex') get _tabindex() { return -1; }\r\n  // tslint:disable:no-host-decorator-in-concrete\r\n\r\n  /** The portal host inside of this container into which the dialog content will be loaded. */\r\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\r\n\r\n  /** A subject emitting before the dialog enters the view. */\r\n  _beforeEnter: Subject<void> = new Subject();\r\n\r\n  /** A subject emitting after the dialog enters the view. */\r\n  _afterEnter: Subject<void> = new Subject();\r\n\r\n  /** A subject emitting before the dialog exits the view. */\r\n  _beforeExit: Subject<void> = new Subject();\r\n\r\n  /** A subject emitting after the dialog exits the view. */\r\n  _afterExit: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _focusTrapFactory: FocusTrapFactory,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(DOCUMENT) private _document: any,\r\n    /** The dialog configuration. */\r\n    public _config: DialogConfig) {\r\n    super();\r\n  }\r\n\r\n  /** Destroy focus trap to place focus back to the element focused before the dialog opened. */\r\n  ngOnDestroy() {\r\n    this._focusTrap.destroy();\r\n  }\r\n\r\n  /**\r\n   * Attach a ComponentPortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachComponentPortal(portal);\r\n  }\r\n\r\n  /**\r\n   * Attach a TemplatePortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Emit lifecycle events based on animation `start` callback. */\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._beforeEnter.next();\r\n    }\r\n    if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\r\n      this._beforeExit.next();\r\n    }\r\n  }\r\n\r\n  /** Emit lifecycle events based on animation `done` callback. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._autoFocusFirstTabbableElement();\r\n      this._afterEnter.next();\r\n    }\r\n\r\n    if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\r\n      this._returnFocusAfterDialog();\r\n      this._afterExit.next();\r\n    }\r\n  }\r\n\r\n  /** Starts the dialog exit animation. */\r\n  _startExiting(): void {\r\n    this._state = 'exit';\r\n\r\n    // Mark the container for check so it can react if the\r\n    // view container is using OnPush change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Saves a reference to the element that was focused before the dialog was opened. */\r\n  private _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\r\n\r\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\r\n      // opening multiple dialogs at the same time. Needs to be async, because the element\r\n      // may not be focusable immediately.\r\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Autofocus the first tabbable element inside of the dialog, if there is not a tabbable element,\r\n   * focus the dialog instead.\r\n   */\r\n  private _autoFocusFirstTabbableElement() {\r\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    if (this._config.autoFocus) {\r\n      this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\r\n        // If we didn't find any focusable elements inside the dialog, focus the\r\n        // container so the user can't tab into other elements behind it.\r\n        if (!hasMovedFocus) {\r\n          this._elementRef.nativeElement.focus();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Returns the focus to the element focused before the dialog was open. */\r\n  private _returnFocusAfterDialog() {\r\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {ViewContainerRef} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {ComponentType} from '@angular/cdk/overlay';\r\nimport {CdkDialogContainer} from './dialog-container';\r\n\r\n/** Valid ARIA roles for a dialog element. */\r\nexport type DialogRole = 'dialog' | 'alertdialog';\r\n\r\n/** Possible overrides for a dialog's position. */\r\nexport interface DialogPosition {\r\n  top?: string;\r\n  bottom?: string;\r\n  left?: string;\r\n  right?: string;\r\n}\r\n\r\nexport class DialogConfig<D = any> {\r\n  /** Component to use as the container for the dialog. */\r\n  containerComponent?: ComponentType<CdkDialogContainer>;\r\n\r\n  /**\r\n   * Where the attached component should live in Angular's *logical* component tree.\r\n   * This affects what is available for injection and the change detection order for the\r\n   * component instantiated inside of the dialog. This does not affect where the dialog\r\n   * content will be rendered.\r\n   */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** The id of the dialog. */\r\n  id?: string;\r\n\r\n  /** The ARIA role of the dialog. */\r\n  role?: DialogRole = 'dialog';\r\n\r\n  /** Custom class(es) for the overlay panel. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the dialog has a background. */\r\n  hasBackdrop?: boolean = true;\r\n\r\n  /** Custom class(es) for the backdrop. */\r\n  backdropClass?: string | undefined = '';\r\n\r\n  /** Whether the dialog can be closed by user interaction. */\r\n  disableClose?: boolean = false;\r\n\r\n  /** The width of the dialog. */\r\n  width?: string = '';\r\n\r\n  /** The height of the dialog. */\r\n  height?: string = '';\r\n\r\n  /** The minimum width of the dialog. */\r\n  minWidth?: string | number = '';\r\n\r\n  /** The minimum height of the dialog. */\r\n  minHeight?: string | number = '';\r\n\r\n  /** The maximum width of the dialog. */\r\n  maxWidth?: string | number = '80vw';\r\n\r\n  /** The maximum height of the dialog. */\r\n  maxHeight?: string | number = '';\r\n\r\n  /** The position of the dialog. */\r\n  position?: DialogPosition;\r\n\r\n  /** Data to be injected into the dialog content. */\r\n  data?: D | null = null;\r\n\r\n  /** The layout direction for the dialog content. */\r\n  direction?: Direction;\r\n\r\n  /** ID of the element that describes the dialog. */\r\n  ariaDescribedBy?: string | null = null;\r\n\r\n  /** Aria label to assign to the dialog element */\r\n  ariaLabel?: string | null = null;\r\n\r\n  /** Whether the dialog should focus the first focusable element on open. */\r\n  autoFocus?: boolean = true;\r\n}\r\n"],"names":["observableOf"],"mappings":"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"}