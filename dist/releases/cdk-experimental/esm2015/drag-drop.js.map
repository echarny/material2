{"version":3,"file":"drag-drop.js","sources":["../../../src/cdk-experimental/drag-drop/drag-drop-module.ts","../../../src/cdk-experimental/drag-drop/drag-utils.ts","../../../src/cdk-experimental/drag-drop/drop.ts","../../../src/cdk-experimental/drag-drop/drag.ts","../../../src/cdk-experimental/drag-drop/drag-drop-registry.ts","../../../src/cdk-experimental/drag-drop/drag-placeholder.ts","../../../src/cdk-experimental/drag-drop/drag-preview.ts","../../../src/cdk-experimental/drag-drop/drop-container.ts","../../../src/cdk-experimental/drag-drop/drag-handle.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkDrop} from './drop';\r\nimport {CdkDrag} from './drag';\r\nimport {CdkDragHandle} from './drag-handle';\r\nimport {CdkDragPreview} from './drag-preview';\r\nimport {CdkDragPlaceholder} from './drag-placeholder';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CdkDrop,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n  exports: [\r\n    CdkDrop,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n})\r\nexport class DragDropModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Moves an item one index in an array to another.\r\n * @param array Array in which to move the item.\r\n * @param fromIndex Starting index of the item.\r\n * @param toIndex Index to which the item should be moved.\r\n */\r\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\r\n  const from = clamp(fromIndex, array.length - 1);\r\n  const to = clamp(toIndex, array.length - 1);\r\n\r\n  if (from === to) {\r\n    return;\r\n  }\r\n\r\n  const target = array[from];\r\n  const delta = to < from ? -1 : 1;\r\n\r\n  for (let i = from; i !== to; i += delta) {\r\n    array[i] = array[i + delta];\r\n  }\r\n\r\n  array[to] = target;\r\n}\r\n\r\n\r\n/**\r\n * Moves an item from one array to another.\r\n * @param currentArray Array from which to transfer the item.\r\n * @param targetArray Array into which to put the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n */\r\nexport function transferArrayItem<T = any>(currentArray: T[],\r\n                                           targetArray: T[],\r\n                                           currentIndex: number,\r\n                                           targetIndex: number): void {\r\n\r\n  const from = clamp(currentIndex, currentArray.length - 1);\r\n  const to = clamp(targetIndex, targetArray.length);\r\n\r\n  if (currentArray.length) {\r\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\r\n  }\r\n}\r\n\r\n/** Clamps a number between zero and a maximum. */\r\nfunction clamp(value: number, max: number): number {\r\n  return Math.max(0, Math.min(max, value));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CdkDrag} from './drag';\r\nimport {CdkDragExit, CdkDragEnter, CdkDragDrop} from './drag-events';\r\nimport {CDK_DROP_CONTAINER} from './drop-container';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\n\r\n/** Counter used to generate unique ids for drop zones. */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Container that wraps a set of draggable items. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-drop',\r\n  exportAs: 'cdkDrop',\r\n  template: '<ng-content></ng-content>',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['drop.css'],\r\n  providers: [\r\n    {provide: CDK_DROP_CONTAINER, useExisting: CdkDrop},\r\n  ],\r\n  host: {\r\n    'class': 'cdk-drop',\r\n    '[id]': 'id',\r\n    '[class.cdk-drop-dragging]': '_dragging'\r\n  }\r\n})\r\nexport class CdkDrop<T = any> implements OnInit, OnDestroy {\r\n  /** Draggable items in the container. */\r\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\r\n\r\n  /**\r\n   * Other draggable containers that this container is connected to and into which the\r\n   * container's items can be transferred. Can either be references to other drop containers,\r\n   * or their unique IDs.\r\n   */\r\n  @Input() connectedTo: (CdkDrop | string)[] = [];\r\n\r\n  /** Arbitrary data to attach to this container. */\r\n  @Input() data: T;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  /**\r\n   * Unique ID for the drop zone. Can be used as a reference\r\n   * in the `connectedTo` of another `CdkDrop`.\r\n   */\r\n  @Input() id: string = `cdk-drop-${_uniqueIdCounter++}`;\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  @Input() lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Function that is used to determine whether an item\r\n   * is allowed to be moved into a drop container.\r\n   */\r\n  @Input() enterPredicate: (drag?: CdkDrag, drop?: CdkDrop) => boolean = () => true;\r\n\r\n  /** Emits when the user drops an item inside the container. */\r\n  @Output() dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\r\n\r\n  /**\r\n   * Emits when the user has moved a new drag item into this container.\r\n   */\r\n  @Output() entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\r\n\r\n  /**\r\n   * Emits when the user removes an item from the container\r\n   * by dragging it into another container.\r\n   */\r\n  @Output() exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\r\n\r\n  constructor(\r\n    public element: ElementRef<HTMLElement>,\r\n    private _dragDropRegistry: DragDropRegistry<CdkDrag, CdkDrop<T>>) {}\r\n\r\n  ngOnInit() {\r\n    this._dragDropRegistry.registerDropContainer(this);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dragDropRegistry.removeDropContainer(this);\r\n  }\r\n\r\n  /** Whether an item in the container is being dragged. */\r\n  _dragging = false;\r\n\r\n  /** Cache of the dimensions of all the items and the sibling containers. */\r\n  private _positionCache = {\r\n    items: [] as {drag: CdkDrag, clientRect: ClientRect, offset: number}[],\r\n    siblings: [] as {drop: CdkDrop, clientRect: ClientRect}[]\r\n  };\r\n\r\n  /**\r\n   * Draggable items that are currently active inside the container. Includes the items\r\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\r\n   * been dropped yet.\r\n   */\r\n  private _activeDraggables: CdkDrag[];\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void {\r\n    this._dragging = true;\r\n    this._activeDraggables = this._draggables.toArray();\r\n    this._cachePositions();\r\n  }\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   */\r\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDrop): void {\r\n    this._reset();\r\n    this.dropped.emit({\r\n      item,\r\n      currentIndex,\r\n      previousIndex: previousContainer.getItemIndex(item),\r\n      container: this,\r\n      // TODO(crisbeto): reconsider whether to make this null if the containers are the same.\r\n      previousContainer\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param xOffset Position of the item along the X axis.\r\n   * @param yOffset Position of the item along the Y axis.\r\n   */\r\n  enter(item: CdkDrag, xOffset: number, yOffset: number): void {\r\n    this.entered.emit({item, container: this});\r\n    this.start();\r\n\r\n    // We use the coordinates of where the item entered the drop\r\n    // zone to figure out at which index it should be inserted.\r\n    const newIndex = this._getItemIndexFromPointerPosition(item, xOffset, yOffset);\r\n    const currentIndex = this._activeDraggables.indexOf(item);\r\n    const newPositionReference = this._activeDraggables[newIndex];\r\n    const placeholder = item.getPlaceholderElement();\r\n\r\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\r\n    // into another container and back again), we have to ensure that it isn't duplicated.\r\n    if (currentIndex > -1) {\r\n      this._activeDraggables.splice(currentIndex, 1);\r\n    }\r\n\r\n    // Don't use items that are being dragged as a reference, because\r\n    // their element has been moved down to the bottom of the body.\r\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\r\n      const element = newPositionReference.element.nativeElement;\r\n      element.parentElement!.insertBefore(placeholder, element);\r\n      this._activeDraggables.splice(newIndex, 0, item);\r\n    } else {\r\n      this.element.nativeElement.appendChild(placeholder);\r\n      this._activeDraggables.push(item);\r\n    }\r\n\r\n    // The transform needs to be cleared so it doesn't throw off the measurements.\r\n    placeholder.style.transform = '';\r\n\r\n    // Note that the positions were already cached when we called `start` above,\r\n    // but we need to refresh them since the amount of items has changed.\r\n    this._cachePositions();\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: CdkDrag): void {\r\n    this._reset();\r\n    this.exited.emit({item, container: this});\r\n  }\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: CdkDrag): number {\r\n    return this._dragging ?\r\n        this._positionCache.items.findIndex(currentItem => currentItem.drag === item) :\r\n        this._draggables.toArray().indexOf(item);\r\n  }\r\n\r\n  /**\r\n   * Sorts an item inside the container based on its position.\r\n   * @param item Item to be sorted.\r\n   * @param xOffset Position of the item along the X axis.\r\n   * @param yOffset Position of the item along the Y axis.\r\n   */\r\n  _sortItem(item: CdkDrag, xOffset: number, yOffset: number): void {\r\n    const siblings = this._positionCache.items;\r\n    const isHorizontal = this.orientation === 'horizontal';\r\n    const newIndex = this._getItemIndexFromPointerPosition(item, xOffset, yOffset);\r\n    const placeholder = item.getPlaceholderElement();\r\n\r\n    if (newIndex === -1 && siblings.length > 0) {\r\n      return;\r\n    }\r\n\r\n    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\r\n    const currentPosition = siblings[currentIndex];\r\n    const newPosition = siblings[newIndex];\r\n\r\n    // Figure out the offset necessary for the items to be swapped.\r\n    const offset = isHorizontal ?\r\n        currentPosition.clientRect.left - newPosition.clientRect.left :\r\n        currentPosition.clientRect.top - newPosition.clientRect.top;\r\n    const topAdjustment = isHorizontal ? 0 : offset;\r\n    const leftAdjustment = isHorizontal ? offset : 0;\r\n\r\n    // Since we've moved the items with a `transform`, we need to adjust their cached\r\n    // client rects to reflect their new position, as well as swap their positions in the cache.\r\n    // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\r\n    // elements may be mid-animation which will give us a wrong result.\r\n    this._adjustClientRect(currentPosition.clientRect, -topAdjustment, -leftAdjustment);\r\n    currentPosition.offset -= offset;\r\n    siblings[currentIndex] = newPosition;\r\n\r\n    this._adjustClientRect(newPosition.clientRect, topAdjustment, leftAdjustment);\r\n    newPosition.offset += offset;\r\n    siblings[newIndex] = currentPosition;\r\n\r\n    // Swap the placeholder's position with the one of the target draggable.\r\n    placeholder.style.transform = isHorizontal ?\r\n        `translate3d(${currentPosition.offset}px, 0, 0)` :\r\n        `translate3d(0, ${currentPosition.offset}px, 0)`;\r\n\r\n    newPosition.drag.element.nativeElement.style.transform = isHorizontal ?\r\n        `translate3d(${newPosition.offset}px, 0, 0)` :\r\n        `translate3d(0, ${newPosition.offset}px, 0)`;\r\n  }\r\n\r\n  /**\r\n   * Figures out whether an item should be moved into a sibling\r\n   * drop container, based on its current position.\r\n   * @param item Drag item that is being moved.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDrop | null {\r\n    const result = this._positionCache.siblings.find(({clientRect}) => {\r\n      const {top, bottom, left, right} = clientRect;\r\n      return y >= top && y <= bottom && x >= left && x <= right;\r\n    });\r\n\r\n    return result && result.drop.enterPredicate(item, this) ? result.drop : null;\r\n  }\r\n\r\n  /** Refreshes the position cache of the items and sibling containers. */\r\n  private _cachePositions() {\r\n    this._positionCache.items = this._activeDraggables\r\n      .map(drag => {\r\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\r\n            // If the element is being dragged, we have to measure the\r\n            // placeholder, because the element is hidden.\r\n            drag.getPlaceholderElement() :\r\n            drag.element.nativeElement;\r\n        const clientRect = elementToMeasure.getBoundingClientRect();\r\n\r\n        return {\r\n          drag,\r\n          offset: 0,\r\n          // We need to clone the `clientRect` here, because all the values on it are readonly\r\n          // and we need to be able to update them. Also we can't use a spread here, because\r\n          // the values on a `ClientRect` aren't own properties. See:\r\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\r\n          clientRect: {\r\n            top: clientRect.top,\r\n            right: clientRect.right,\r\n            bottom: clientRect.bottom,\r\n            left: clientRect.left,\r\n            width: clientRect.width,\r\n            height: clientRect.height\r\n          }\r\n        };\r\n      })\r\n      .sort((a, b) => a.clientRect.top - b.clientRect.top);\r\n\r\n    this._positionCache.siblings = this.connectedTo\r\n      .map(drop => typeof drop === 'string' ? this._dragDropRegistry.getDropContainer(drop)! : drop)\r\n      .filter(drop => drop && drop !== this)\r\n      .map(drop => ({drop, clientRect: drop.element.nativeElement.getBoundingClientRect()}));\r\n  }\r\n\r\n  /** Resets the container to its initial state. */\r\n  private _reset() {\r\n    this._dragging = false;\r\n\r\n    // TODO(crisbeto): may have to wait for the animations to finish.\r\n    this._activeDraggables.forEach(item => item.element.nativeElement.style.transform = '');\r\n    this._activeDraggables = [];\r\n    this._positionCache.items = [];\r\n    this._positionCache.siblings = [];\r\n  }\r\n\r\n  /**\r\n   * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\r\n   * @param clientRect `ClientRect` that should be updated.\r\n   * @param top New value for the `top` position.\r\n   * @param left New value for the `left` position.\r\n   */\r\n  private _adjustClientRect(clientRect: ClientRect, top: number, left: number) {\r\n    clientRect.top += top;\r\n    clientRect.bottom = clientRect.top + clientRect.height;\r\n\r\n    clientRect.left += left;\r\n    clientRect.right = clientRect.left + clientRect.width;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\r\n   * @param item Item that is being sorted.\r\n   * @param xOffset Position of the user's pointer along the X axis.\r\n   * @param yOffset Position of the user's pointer along the Y axis.\r\n   */\r\n  private _getItemIndexFromPointerPosition(item: CdkDrag, xOffset: number, yOffset: number) {\r\n    return this._positionCache.items.findIndex(({drag, clientRect}, _, array) => {\r\n      if (drag === item) {\r\n        // If there's only one item left in the container, it must be\r\n        // the dragged item itself so we use it as a reference.\r\n        return array.length < 2;\r\n      }\r\n\r\n      return this.orientation === 'horizontal' ?\r\n          // Round these down since most browsers report client rects with\r\n          // sub-pixel precision, whereas the mouse coordinates are rounded to pixels.\r\n          xOffset >= Math.floor(clientRect.left) && xOffset <= Math.floor(clientRect.right) :\r\n          yOffset >= Math.floor(clientRect.top) && yOffset <= Math.floor(clientRect.bottom);\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {CdkDragHandle} from './drag-handle';\r\nimport {CdkDropContainer, CDK_DROP_CONTAINER} from './drop-container';\r\nimport {\r\n  CdkDragStart,\r\n  CdkDragEnd,\r\n  CdkDragExit,\r\n  CdkDragEnter,\r\n  CdkDragDrop,\r\n  CdkDragMove,\r\n} from './drag-events';\r\nimport {CdkDragPreview} from './drag-preview';\r\nimport {CdkDragPlaceholder} from './drag-placeholder';\r\nimport {ViewportRuler} from '@angular/cdk/overlay';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\nimport {Subject, merge, Observable} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\n// TODO(crisbeto): add auto-scrolling functionality.\r\n// TODO(crisbeto): add an API for moving a draggable up/down the\r\n// list programmatically. Useful for keyboard controls.\r\n\r\n/** Element that can be moved inside a CdkDrop container. */\r\n@Directive({\r\n  selector: '[cdkDrag]',\r\n  exportAs: 'cdkDrag',\r\n  host: {\r\n    'class': 'cdk-drag',\r\n    '(mousedown)': '_startDragging($event)',\r\n    '(touchstart)': '_startDragging($event)',\r\n  }\r\n})\r\nexport class CdkDrag<T = any> implements OnDestroy {\r\n  private _document: Document;\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Element displayed next to the user's pointer while the element is dragged. */\r\n  private _preview: HTMLElement;\r\n\r\n  /** Reference to the view of the preview element. */\r\n  private _previewRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Reference to the view of the placeholder element. */\r\n  private _placeholderRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\r\n  private _placeholder: HTMLElement;\r\n\r\n  /** Coordinates within the element at which the user picked up the element. */\r\n  private _pickupPositionInElement: Point;\r\n\r\n  /** Coordinates on the page at which the user picked up the element. */\r\n  private _pickupPositionOnPage: Point;\r\n\r\n  /**\r\n   * Reference to the element that comes after the draggable in the DOM, at the time\r\n   * it was picked up. Used for restoring its initial position when it's dropped.\r\n   */\r\n  private _nextSibling: Node | null;\r\n\r\n  /**\r\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n   * passive transform in order for the dragged element to retain its new position\r\n   * after the user has stopped dragging and because we need to know the relative\r\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n   */\r\n  private _passiveTransform: Point = {x: 0, y: 0};\r\n\r\n  /** CSS `transform` that is applied to the element while it's being dragged. */\r\n  private _activeTransform: Point = {x: 0, y: 0};\r\n\r\n  /** Whether the element has moved since the user started dragging it. */\r\n  private _hasMoved = false;\r\n\r\n  /** Drop container in which the CdkDrag resided when dragging began. */\r\n  private _initialContainer: CdkDropContainer;\r\n\r\n  /** Cached scroll position on the page when the element was picked up. */\r\n  private _scrollPosition: {top: number, left: number};\r\n\r\n  /** Emits when the item is being moved. */\r\n  private _moveEvents = new Subject<CdkDragMove<T>>();\r\n\r\n  /**\r\n   * Amount of subscriptions to the move event. Used to avoid\r\n   * hitting the zone if the consumer didn't subscribe to it.\r\n   */\r\n  private _moveEventSubscriptions = 0;\r\n\r\n  /** Elements that can be used to drag the draggable item. */\r\n  @ContentChildren(CdkDragHandle) _handles: QueryList<CdkDragHandle>;\r\n\r\n  /** Element that will be used as a template to create the draggable item's preview. */\r\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\r\n\r\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\r\n\r\n  /** Arbitrary data to attach to this drag instance. */\r\n  @Input('cdkDragData') data: T;\r\n\r\n  /** Locks the position of the dragged element along the specified axis. */\r\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\r\n\r\n  /** Emits when the user starts dragging the item. */\r\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\r\n\r\n  /** Emits when the user stops dragging an item in the container. */\r\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\r\n\r\n  /** Emits when the user has moved the item into a new container. */\r\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\r\n      new EventEmitter<CdkDragEnter<any>>();\r\n\r\n  /** Emits when the user removes the item its container by dragging it into another container. */\r\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\r\n      new EventEmitter<CdkDragExit<any>>();\r\n\r\n  /** Emits when the user drops the item inside a container. */\r\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\r\n      new EventEmitter<CdkDragDrop<any>>();\r\n\r\n  /**\r\n   * Emits as the user is dragging the item. Use with caution,\r\n   * because this event will fire for every pixel that the user has dragged.\r\n   */\r\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> = Observable.create(observer => {\r\n    const subscription = this._moveEvents.subscribe(observer);\r\n    this._moveEventSubscriptions++;\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      this._moveEventSubscriptions--;\r\n    };\r\n  });\r\n\r\n  constructor(\r\n    /** Element that the draggable is attached to. */\r\n    public element: ElementRef<HTMLElement>,\r\n    /** Droppable container that the draggable is a part of. */\r\n    @Inject(CDK_DROP_CONTAINER) @Optional() @SkipSelf() public dropContainer: CdkDropContainer,\r\n    @Inject(DOCUMENT) document: any,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropContainer>,\r\n    @Optional() private _dir: Directionality) {\r\n      this._document = document;\r\n      _dragDropRegistry.registerDragItem(this);\r\n    }\r\n\r\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\r\n  getPlaceholderElement(): HTMLElement {\r\n    return this._placeholder;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n\r\n    // Do this check before removing from the registry since it'll\r\n    // stop being considered as dragged once it is removed.\r\n    if (this._dragDropRegistry.isDragging(this)) {\r\n      // Since we move out the element to the end of the body while it's being\r\n      // dragged, we have to make sure that it's removed if it gets destroyed.\r\n      this._removeElement(this.element.nativeElement);\r\n    }\r\n\r\n    this._nextSibling = null;\r\n    this._dragDropRegistry.removeDragItem(this);\r\n    this._moveEvents.complete();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Starts the dragging sequence. */\r\n  _startDragging(event: MouseEvent | TouchEvent) {\r\n    // Delegate the event based on whether it started from a handle or the element itself.\r\n    if (this._handles.length) {\r\n      const targetHandle = this._handles.find(handle => {\r\n        const element = handle.element.nativeElement;\r\n        const target = event.target;\r\n        return !!target && (target === element || element.contains(target as HTMLElement));\r\n      });\r\n\r\n      if (targetHandle) {\r\n        this._pointerDown(targetHandle.element, event);\r\n      }\r\n    } else {\r\n      this._pointerDown(this.element, event);\r\n    }\r\n  }\r\n\r\n  /** Handler for when the pointer is pressed down on the element or the handle. */\r\n  private _pointerDown = (referenceElement: ElementRef<HTMLElement>,\r\n                          event: MouseEvent | TouchEvent) => {\r\n    if (this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    const endedOrDestroyed = merge(this.ended, this._destroyed);\r\n\r\n    this._dragDropRegistry.pointerMove\r\n        .pipe(takeUntil(endedOrDestroyed))\r\n        .subscribe(this._pointerMove);\r\n\r\n        this._dragDropRegistry.pointerUp\r\n        .pipe(takeUntil(endedOrDestroyed))\r\n        .subscribe(this._pointerUp);\r\n\r\n    this._dragDropRegistry.startDragging(this, event);\r\n    this._initialContainer = this.dropContainer;\r\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\r\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\r\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\r\n        this._getPointerPositionInElement(referenceElement, event);\r\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\r\n\r\n    // Emit the event on the item before the one on the container.\r\n    this.started.emit({source: this});\r\n\r\n    if (this.dropContainer) {\r\n      const element = this.element.nativeElement;\r\n      const preview = this._preview = this._createPreviewElement();\r\n      const placeholder = this._placeholder = this._createPlaceholderElement();\r\n\r\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\r\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\r\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\r\n      element.style.display = 'none';\r\n      this._nextSibling = element.nextSibling;\r\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\r\n      this._document.body.appendChild(preview);\r\n      this.dropContainer.start();\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\r\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\r\n    // TODO(crisbeto): this should start dragging after a certain threshold,\r\n    // otherwise we risk interfering with clicks on the element.\r\n    if (!this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    this._hasMoved = true;\r\n    event.preventDefault();\r\n\r\n    const pointerPosition = this._getConstrainedPointerPosition(event);\r\n\r\n    if (this.dropContainer) {\r\n      this._updateActiveDropContainer(pointerPosition);\r\n    } else {\r\n      const activeTransform = this._activeTransform;\r\n      activeTransform.x =\r\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\r\n      activeTransform.y =\r\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\r\n      this._setTransform(this.element.nativeElement, activeTransform.x, activeTransform.y);\r\n    }\r\n\r\n    // Since this event gets fired for every pixel while dragging, we only\r\n    // want to fire it if the consumer opted into it. Also we have to\r\n    // re-enter the zone becaus we run all of the events on the outside.\r\n    if (this._moveEventSubscriptions > 0) {\r\n      this._ngZone.run(() => {\r\n        this._moveEvents.next({\r\n          source: this,\r\n          pointerPosition,\r\n          event\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\r\n  private _pointerUp = () => {\r\n    if (!this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    this._dragDropRegistry.stopDragging(this);\r\n\r\n    if (!this.dropContainer) {\r\n      // Convert the active transform into a passive one. This means that next time\r\n      // the user starts dragging the item, its position will be calculated relatively\r\n      // to the new passive transform.\r\n      this._passiveTransform.x = this._activeTransform.x;\r\n      this._passiveTransform.y = this._activeTransform.y;\r\n      this._ngZone.run(() => this.ended.emit({source: this}));\r\n      return;\r\n    }\r\n\r\n    this._animatePreviewToPlaceholder().then(() => this._cleanupDragArtifacts());\r\n  }\r\n\r\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\r\n  private _cleanupDragArtifacts() {\r\n    // Restore the element's visibility and insert it at its old position in the DOM.\r\n    // It's important that we maintain the position, because moving the element around in the DOM\r\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\r\n    // while moving the existing elements in all other cases.\r\n    this.element.nativeElement.style.display = '';\r\n\r\n    if (this._nextSibling) {\r\n      this._nextSibling.parentNode!.insertBefore(this.element.nativeElement, this._nextSibling);\r\n    } else {\r\n      this._placeholder.parentNode!.appendChild(this.element.nativeElement);\r\n    }\r\n\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n\r\n    // Re-enter the NgZone since we bound `document` events on the outside.\r\n    this._ngZone.run(() => {\r\n      const currentIndex = this.dropContainer.getItemIndex(this);\r\n\r\n      this.ended.emit({source: this});\r\n      this.dropped.emit({\r\n        item: this,\r\n        currentIndex,\r\n        previousIndex: this._initialContainer.getItemIndex(this),\r\n        container: this.dropContainer,\r\n        previousContainer: this._initialContainer\r\n      });\r\n      this.dropContainer.drop(this, currentIndex, this._initialContainer);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the item's position in its drop container, or moves it\r\n   * into a new one, depending on its current drag position.\r\n   */\r\n  private _updateActiveDropContainer({x, y}) {\r\n    // Drop container that draggable has been moved into.\r\n    const newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\r\n\r\n    if (newContainer) {\r\n      this._ngZone.run(() => {\r\n        // Notify the old container that the item has left.\r\n        this.exited.emit({item: this, container: this.dropContainer});\r\n        this.dropContainer.exit(this);\r\n        // Notify the new container that the item has entered.\r\n        this.entered.emit({item: this, container: newContainer});\r\n        this.dropContainer = newContainer;\r\n        this.dropContainer.enter(this, x, y);\r\n      });\r\n    }\r\n\r\n    this.dropContainer._sortItem(this, x, y);\r\n    this._setTransform(this._preview,\r\n                       x - this._pickupPositionInElement.x,\r\n                       y - this._pickupPositionInElement.y);\r\n  }\r\n\r\n  /**\r\n   * Creates the element that will be rendered next to the user's pointer\r\n   * and will be used as a preview of the element that is being dragged.\r\n   */\r\n  private _createPreviewElement(): HTMLElement {\r\n    let preview: HTMLElement;\r\n\r\n    if (this._previewTemplate) {\r\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\r\n                                                                this._previewTemplate.data);\r\n\r\n      preview = viewRef.rootNodes[0];\r\n      this._previewRef = viewRef;\r\n      this._setTransform(preview, this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\r\n    } else {\r\n      const element = this.element.nativeElement;\r\n      const elementRect = element.getBoundingClientRect();\r\n\r\n      preview = element.cloneNode(true) as HTMLElement;\r\n      preview.style.width = `${elementRect.width}px`;\r\n      preview.style.height = `${elementRect.height}px`;\r\n      this._setTransform(preview, elementRect.left, elementRect.top);\r\n    }\r\n\r\n    preview.classList.add('cdk-drag-preview');\r\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\r\n\r\n    return preview;\r\n  }\r\n\r\n  /** Creates an element that will be shown instead of the current element while dragging. */\r\n  private _createPlaceholderElement(): HTMLElement {\r\n    let placeholder: HTMLElement;\r\n\r\n    if (this._placeholderTemplate) {\r\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\r\n        this._placeholderTemplate.templateRef,\r\n        this._placeholderTemplate.data\r\n      );\r\n      placeholder = this._placeholderRef.rootNodes[0];\r\n    } else {\r\n      placeholder = this.element.nativeElement.cloneNode(true) as HTMLElement;\r\n    }\r\n\r\n    placeholder.classList.add('cdk-drag-placeholder');\r\n    return placeholder;\r\n  }\r\n\r\n  /**\r\n   * Figures out the coordinates at which an element was picked up.\r\n   * @param referenceElement Element that initiated the dragging.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  private _getPointerPositionInElement(referenceElement: ElementRef<HTMLElement>,\r\n                                       event: MouseEvent | TouchEvent): Point {\r\n    const elementRect = this.element.nativeElement.getBoundingClientRect();\r\n    const handleElement = referenceElement === this.element ? null : referenceElement.nativeElement;\r\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\r\n    const x = this._isTouchEvent(event) ?\r\n        event.targetTouches[0].pageX - referenceRect.left - this._scrollPosition.left :\r\n        event.offsetX;\r\n    const y = this._isTouchEvent(event) ?\r\n        event.targetTouches[0].pageY - referenceRect.top - this._scrollPosition.top :\r\n        event.offsetY;\r\n\r\n    return {\r\n      x: referenceRect.left - elementRect.left + x,\r\n      y: referenceRect.top - elementRect.top + y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Animates the preview element from its current position to the location of the drop placeholder.\r\n   * @returns Promise that resolves when the animation completes.\r\n   */\r\n  private _animatePreviewToPlaceholder(): Promise<void> {\r\n    // If the user hasn't moved yet, the transitionend event won't fire.\r\n    if (!this._hasMoved) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const placeholderRect = this._placeholder.getBoundingClientRect();\r\n\r\n    // Apply the class that adds a transition to the preview.\r\n    this._preview.classList.add('cdk-drag-animating');\r\n\r\n    // Move the preview to the placeholder position.\r\n    this._setTransform(this._preview, placeholderRect.left, placeholderRect.top);\r\n\r\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\r\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\r\n    // apply its style, we take advantage of the available info to figure out whether we need to\r\n    // bind the event in the first place.\r\n    const duration = getTransitionDurationInMs(this._preview);\r\n\r\n    if (duration === 0) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this._ngZone.runOutsideAngular(() => {\r\n      return new Promise(resolve => {\r\n        const handler = (event: TransitionEvent) => {\r\n          if (!event || event.target === this._preview) {\r\n            this._preview.removeEventListener('transitionend', handler);\r\n            resolve();\r\n            clearTimeout(timeout);\r\n          }\r\n        };\r\n\r\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\r\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\r\n        // fire if the transition hasn't completed when it was supposed to.\r\n        const timeout = setTimeout(handler, duration * 1.5);\r\n        this._preview.addEventListener('transitionend', handler);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the `transform` style on an element.\r\n   * @param element Element on which to set the transform.\r\n   * @param x Desired position of the element along the X axis.\r\n   * @param y Desired position of the element along the Y axis.\r\n   */\r\n  private _setTransform(element: HTMLElement, x: number, y: number) {\r\n    element.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n  }\r\n\r\n  /**\r\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\r\n   * @param element Element to be removed.\r\n   */\r\n  private _removeElement(element: HTMLElement | null) {\r\n    if (element && element.parentNode) {\r\n      element.parentNode.removeChild(element);\r\n    }\r\n  }\r\n\r\n  /** Determines the point of the page that was touched by the user. */\r\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\r\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\r\n\r\n    return {\r\n      x: point.pageX - this._scrollPosition.left,\r\n      y: point.pageY - this._scrollPosition.top\r\n    };\r\n  }\r\n\r\n  /** Gets the pointer position on the page, accounting for any position constraints. */\r\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\r\n    const point = this._getPointerPositionOnPage(event);\r\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\r\n\r\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\r\n      point.y = this._pickupPositionOnPage.y;\r\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\r\n      point.x = this._pickupPositionOnPage.x;\r\n    }\r\n\r\n    return point;\r\n  }\r\n\r\n  /** Determines whether an event is a touch event. */\r\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n    return event.type.startsWith('touch');\r\n  }\r\n\r\n  /** Destroys the preview element and its ViewRef. */\r\n  private _destroyPreview() {\r\n    if (this._preview) {\r\n      this._removeElement(this._preview);\r\n    }\r\n\r\n    if (this._previewRef) {\r\n      this._previewRef.destroy();\r\n    }\r\n\r\n    this._preview = this._previewRef = null!;\r\n  }\r\n\r\n  /** Destroys the placeholder element and its ViewRef. */\r\n  private _destroyPlaceholder() {\r\n    if (this._placeholder) {\r\n      this._removeElement(this._placeholder);\r\n    }\r\n\r\n    if (this._placeholderRef) {\r\n      this._placeholderRef.destroy();\r\n    }\r\n\r\n    this._placeholder = this._placeholderRef = null!;\r\n  }\r\n}\r\n\r\n/** Parses a CSS time value to milliseconds. */\r\nfunction parseCssTimeUnitsToMs(value: string): number {\r\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\r\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\r\n  return parseFloat(value) * multiplier;\r\n}\r\n\r\n/** Gets the transition duration, including the delay, of an element in milliseconds. */\r\nfunction getTransitionDurationInMs(element: HTMLElement): number {\r\n  const computedStyle = getComputedStyle(element);\r\n  const rawDuration = computedStyle.getPropertyValue('transition-duration');\r\n  const rawDelay = computedStyle.getPropertyValue('transition-delay');\r\n\r\n  return parseCssTimeUnitsToMs(rawDuration) + parseCssTimeUnitsToMs(rawDelay);\r\n}\r\n\r\n\r\n/** Point on the page or within an element. */\r\ninterface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {supportsPassiveEventListeners} from '@angular/cdk/platform';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Event options that can be used to bind an active event. */\r\nconst activeEventOptions = supportsPassiveEventListeners() ? {passive: false} : false;\r\n\r\n/** Handler for a pointer event callback. */\r\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\r\n\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\n// Note: this class is generic, rather than referencing CdkDrag and CdkDrop directly, in order to\r\n// avoid circular imports. If we were to reference them here, importing the registry into the\r\n// classes that are registering themselves will introduce a circular import.\r\n@Injectable({providedIn: 'root'})\r\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  /** Registered drop container instances. */\r\n  private _dropInstances = new Set<C>();\r\n\r\n  /** Registered drag item instances. */\r\n  private _dragInstances = new Set<I>();\r\n\r\n  /** Drag item instances that are currently being dragged. */\r\n  private _activeDragInstances = new Set<I>();\r\n\r\n  /** Keeps track of the event listeners that we've bound to the `document`. */\r\n  private _globalListeners = new Map<string, {handler: PointerEventHandler, options?: any}>();\r\n\r\n  /**\r\n   * Emits the `touchmove` or `mousemove` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  /**\r\n   * Emits the `touchend` or `mouseup` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) _document: any) {\r\n    this._document = _document;\r\n  }\r\n\r\n  /** Adds a drop container to the registry. */\r\n  registerDropContainer(drop: C) {\r\n    if (!this._dropInstances.has(drop)) {\r\n      if (this.getDropContainer(drop.id)) {\r\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\r\n      }\r\n\r\n      this._dropInstances.add(drop);\r\n    }\r\n  }\r\n\r\n  /** Adds a drag item instance to the registry. */\r\n  registerDragItem(drag: I) {\r\n    this._dragInstances.add(drag);\r\n\r\n    if (this._dragInstances.size === 1) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        // The event handler has to be explicitly active, because\r\n        // newer browsers make it passive by default.\r\n        this._document.addEventListener('touchmove', this._preventScrollListener,\r\n            activeEventOptions);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Removes a drop container from the registry. */\r\n  removeDropContainer(drop: C) {\r\n    this._dropInstances.delete(drop);\r\n  }\r\n\r\n  /** Removes a drag item instance from the registry. */\r\n  removeDragItem(drag: I) {\r\n    this._dragInstances.delete(drag);\r\n    this.stopDragging(drag);\r\n\r\n    if (this._dragInstances.size === 0) {\r\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\r\n          activeEventOptions as any);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the dragging sequence for a drag instance.\r\n   * @param drag Drag instance which is being dragged.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\r\n    this._activeDragInstances.add(drag);\r\n\r\n    if (this._activeDragInstances.size === 1) {\r\n      const isTouchEvent = event.type.startsWith('touch');\r\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\r\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\r\n\r\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\r\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\r\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\r\n      this._globalListeners\r\n        .set(moveEvent, {handler: e => this.pointerMove.next(e), options: activeEventOptions})\r\n        .set(upEvent, {handler: e => this.pointerUp.next(e)})\r\n        .forEach((config, name) => {\r\n          this._ngZone.runOutsideAngular(() => {\r\n            this._document.addEventListener(name, config.handler, config.options);\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Stops dragging a drag item instance. */\r\n  stopDragging(drag: I) {\r\n    this._activeDragInstances.delete(drag);\r\n\r\n    if (this._activeDragInstances.size === 0) {\r\n      this._clearGlobalListeners();\r\n    }\r\n  }\r\n\r\n  /** Gets whether a drag item instance is currently being dragged. */\r\n  isDragging(drag: I) {\r\n    return this._activeDragInstances.has(drag);\r\n  }\r\n\r\n  /** Gets a drop container by its id. */\r\n  getDropContainer(id: string): C | undefined {\r\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\r\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\r\n    this._clearGlobalListeners();\r\n    this.pointerMove.complete();\r\n    this.pointerUp.complete();\r\n  }\r\n\r\n  /**\r\n   * Listener used to prevent `touchmove` events while the element is being dragged.\r\n   * This gets bound once, ahead of time, because WebKit won't preventDefault on a\r\n   * dynamically-added `touchmove` listener. See https://bugs.webkit.org/show_bug.cgi?id=184250.\r\n   */\r\n  private _preventScrollListener = (event: TouchEvent) => {\r\n    if (this._activeDragInstances.size) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /** Clears out the global event listeners from the `document`. */\r\n  private _clearGlobalListeners() {\r\n    this._globalListeners.forEach((config, name) => {\r\n      this._document.removeEventListener(name, config.handler, config.options);\r\n    });\r\n\r\n    this._globalListeners.clear();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, Input} from '@angular/core';\r\n\r\n/**\r\n * Element that will be used as a template for the placeholder of a CdkDrag when\r\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPlaceholder]'\r\n})\r\nexport class CdkDragPlaceholder<T = any> {\r\n  /** Context data to be added to the placeholder template instance. */\r\n  @Input() data: T;\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, Input} from '@angular/core';\r\n\r\n/**\r\n * Element that will be used as a template for the preview\r\n * of a CdkDrag when it is being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPreview]'\r\n})\r\nexport class CdkDragPreview<T = any> {\r\n  /** Context data to be added to the preview template instance. */\r\n  @Input() data: T;\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken, QueryList} from '@angular/core';\r\nimport {CdkDrag} from './drag';\r\n\r\nexport interface CdkDropContainer<T = any> {\r\n  /** Arbitrary data to attach to all events emitted by this container. */\r\n  data: T;\r\n\r\n  /** Unique ID for the drop zone. */\r\n  id: string;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  orientation: 'horizontal' | 'vertical';\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void;\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   */\r\n  drop(item: CdkDrag, currentIndex: number, previousContainer?: CdkDropContainer): void;\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param xOffset Position of the item along the X axis.\r\n   * @param yOffset Position of the item along the Y axis.\r\n   */\r\n  enter(item: CdkDrag, xOffset: number, yOffset: number): void;\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: CdkDrag): void;\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: CdkDrag): number;\r\n  _sortItem(item: CdkDrag, xOffset: number, yOffset: number): void;\r\n  _draggables: QueryList<CdkDrag>;\r\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropContainer | null;\r\n}\r\n\r\n/**\r\n * Injection token that is used to provide a CdkDrop instance to CdkDrag.\r\n * Used for avoiding circular imports.\r\n */\r\nexport const CDK_DROP_CONTAINER = new InjectionToken<CdkDropContainer>('CDK_DROP_CONTAINER');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef} from '@angular/core';\r\n\r\n/** Handle that can be used to drag and CdkDrag instance. */\r\n@Directive({\r\n  selector: '[cdkDragHandle]',\r\n  host: {\r\n    'class': 'cdk-drag-handle'\r\n  }\r\n})\r\nexport class CdkDragHandle {\r\n  constructor(public element: ElementRef<HTMLElement>) {}\r\n}\r\n"],"names":[],"mappings":"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"}