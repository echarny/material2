{"version":3,"file":"cdk-experimental-dialog.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk-experimental/dialog/dialog-container.ts","../../src/cdk-experimental/dialog/dialog-injectors.ts","../../src/cdk-experimental/dialog/dialog-config.ts","../../src/cdk-experimental/dialog/dialog-ref.ts","../../src/cdk-experimental/dialog/dialog.ts","../../src/cdk-experimental/dialog/dialog-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {\r\n  BasePortalOutlet,\r\n  ComponentPortal,\r\n  PortalHostDirective,\r\n  TemplatePortal\r\n} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  HostBinding,\r\n  Inject,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {DialogConfig} from './dialog-config';\r\n\r\n\r\nexport function throwDialogContentAlreadyAttachedError() {\r\n  throw Error('Attempting to attach dialog content after content is already attached');\r\n}\r\n\r\n\r\n/**\r\n * Internal component that wraps user-provided dialog content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-dialog-container',\r\n  templateUrl: './dialog-container.html',\r\n  styleUrls: ['dialog-container.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  animations: [\r\n    trigger('dialog', [\r\n      state('enter', style({ opacity: 1 })),\r\n      state('exit, void', style({ opacity: 0 })),\r\n      transition('* => *', animate(225)),\r\n    ])\r\n  ],\r\n  host: {\r\n    '[@dialog]': '_state',\r\n    '(@dialog.start)': '_onAnimationStart($event)',\r\n    '(@dialog.done)': '_onAnimationDone($event)',\r\n  },\r\n})\r\nexport class CdkDialogContainer extends BasePortalOutlet implements OnDestroy {\r\n  /** State of the dialog animation. */\r\n  _state: 'void' | 'enter' | 'exit' = 'enter';\r\n\r\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\r\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\r\n\r\n   /** The class that traps and manages focus within the dialog. */\r\n  private _focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, false);\r\n\r\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\r\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\r\n  // that can be inherited.\r\n  // tslint:disable:no-host-decorator-in-concrete\r\n  @HostBinding('attr.aria-label') get _ariaLabel() { return this._config.ariaLabel || null; }\r\n\r\n  @HostBinding('attr.aria-describedby')\r\n  get _ariaDescribedBy() { return this._config.ariaDescribedBy; }\r\n\r\n  @HostBinding('attr.role') get _role() { return this._config.role; }\r\n\r\n  @HostBinding('attr.tabindex') get _tabindex() { return -1; }\r\n  // tslint:disable:no-host-decorator-in-concrete\r\n\r\n  /** The portal host inside of this container into which the dialog content will be loaded. */\r\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\r\n\r\n  /** A subject emitting before the dialog enters the view. */\r\n  _beforeEnter: Subject<void> = new Subject();\r\n\r\n  /** A subject emitting after the dialog enters the view. */\r\n  _afterEnter: Subject<void> = new Subject();\r\n\r\n  /** A subject emitting before the dialog exits the view. */\r\n  _beforeExit: Subject<void> = new Subject();\r\n\r\n  /** A subject emitting after the dialog exits the view. */\r\n  _afterExit: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _focusTrapFactory: FocusTrapFactory,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(DOCUMENT) private _document: any,\r\n    /** The dialog configuration. */\r\n    public _config: DialogConfig) {\r\n    super();\r\n  }\r\n\r\n  /** Destroy focus trap to place focus back to the element focused before the dialog opened. */\r\n  ngOnDestroy() {\r\n    this._focusTrap.destroy();\r\n  }\r\n\r\n  /**\r\n   * Attach a ComponentPortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachComponentPortal(portal);\r\n  }\r\n\r\n  /**\r\n   * Attach a TemplatePortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Emit lifecycle events based on animation `start` callback. */\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._beforeEnter.next();\r\n    }\r\n    if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\r\n      this._beforeExit.next();\r\n    }\r\n  }\r\n\r\n  /** Emit lifecycle events based on animation `done` callback. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._autoFocusFirstTabbableElement();\r\n      this._afterEnter.next();\r\n    }\r\n\r\n    if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\r\n      this._returnFocusAfterDialog();\r\n      this._afterExit.next();\r\n    }\r\n  }\r\n\r\n  /** Starts the dialog exit animation. */\r\n  _startExiting(): void {\r\n    this._state = 'exit';\r\n\r\n    // Mark the container for check so it can react if the\r\n    // view container is using OnPush change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Saves a reference to the element that was focused before the dialog was opened. */\r\n  private _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\r\n\r\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\r\n      // opening multiple dialogs at the same time. Needs to be async, because the element\r\n      // may not be focusable immediately.\r\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Autofocus the first tabbable element inside of the dialog, if there is not a tabbable element,\r\n   * focus the dialog instead.\r\n   */\r\n  private _autoFocusFirstTabbableElement() {\r\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    if (this._config.autoFocus) {\r\n      this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\r\n        // If we didn't find any focusable elements inside the dialog, focus the\r\n        // container so the user can't tab into other elements behind it.\r\n        if (!hasMovedFocus) {\r\n          this._elementRef.nativeElement.focus();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Returns the focus to the element focused before the dialog was open. */\r\n  private _returnFocusAfterDialog() {\r\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\nimport {ComponentType, Overlay, ScrollStrategy, BlockScrollStrategy} from '@angular/cdk/overlay';\r\nimport {DialogRef} from './dialog-ref';\r\nimport {CdkDialogContainer} from './dialog-container';\r\nimport {DialogConfig} from './dialog-config';\r\n\r\n/** Injection token for the Dialog's ScrollStrategy. */\r\nexport const DIALOG_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('DialogScrollStrategy');\r\n\r\n/** Injection token for the Dialog's Data. */\r\nexport const DIALOG_DATA = new InjectionToken<any>('DialogData');\r\n\r\n/** Injection token for the DialogRef constructor. */\r\nexport const DIALOG_REF = new InjectionToken<DialogRef<any>>('DialogRef');\r\n\r\n/** Injection token for the DialogConfig. */\r\nexport const DIALOG_CONFIG = new InjectionToken<DialogConfig>('DialogConfig');\r\n\r\n/** Injection token for the Dialog's DialogContainer component. */\r\nexport const DIALOG_CONTAINER =\r\n    new InjectionToken<ComponentType<CdkDialogContainer>>('DialogContainer');\r\n\r\n/** @docs-private */\r\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => BlockScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: DIALOG_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {ViewContainerRef} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {ComponentType} from '@angular/cdk/overlay';\r\nimport {CdkDialogContainer} from './dialog-container';\r\n\r\n/** Valid ARIA roles for a dialog element. */\r\nexport type DialogRole = 'dialog' | 'alertdialog';\r\n\r\n/** Possible overrides for a dialog's position. */\r\nexport interface DialogPosition {\r\n  top?: string;\r\n  bottom?: string;\r\n  left?: string;\r\n  right?: string;\r\n}\r\n\r\nexport class DialogConfig<D = any> {\r\n  /** Component to use as the container for the dialog. */\r\n  containerComponent?: ComponentType<CdkDialogContainer>;\r\n\r\n  /**\r\n   * Where the attached component should live in Angular's *logical* component tree.\r\n   * This affects what is available for injection and the change detection order for the\r\n   * component instantiated inside of the dialog. This does not affect where the dialog\r\n   * content will be rendered.\r\n   */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** The id of the dialog. */\r\n  id?: string;\r\n\r\n  /** The ARIA role of the dialog. */\r\n  role?: DialogRole = 'dialog';\r\n\r\n  /** Custom class(es) for the overlay panel. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the dialog has a background. */\r\n  hasBackdrop?: boolean = true;\r\n\r\n  /** Custom class(es) for the backdrop. */\r\n  backdropClass?: string | undefined = '';\r\n\r\n  /** Whether the dialog can be closed by user interaction. */\r\n  disableClose?: boolean = false;\r\n\r\n  /** The width of the dialog. */\r\n  width?: string = '';\r\n\r\n  /** The height of the dialog. */\r\n  height?: string = '';\r\n\r\n  /** The minimum width of the dialog. */\r\n  minWidth?: string | number = '';\r\n\r\n  /** The minimum height of the dialog. */\r\n  minHeight?: string | number = '';\r\n\r\n  /** The maximum width of the dialog. */\r\n  maxWidth?: string | number = '80vw';\r\n\r\n  /** The maximum height of the dialog. */\r\n  maxHeight?: string | number = '';\r\n\r\n  /** The position of the dialog. */\r\n  position?: DialogPosition;\r\n\r\n  /** Data to be injected into the dialog content. */\r\n  data?: D | null = null;\r\n\r\n  /** The layout direction for the dialog content. */\r\n  direction?: Direction;\r\n\r\n  /** ID of the element that describes the dialog. */\r\n  ariaDescribedBy?: string | null = null;\r\n\r\n  /** Aria label to assign to the dialog element */\r\n  ariaLabel?: string | null = null;\r\n\r\n  /** Whether the dialog should focus the first focusable element on open. */\r\n  autoFocus?: boolean = true;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\r\nimport {OverlayRef, GlobalPositionStrategy, OverlaySizeConfig} from '@angular/cdk/overlay';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {Observable} from 'rxjs';\r\nimport {map, filter} from 'rxjs/operators';\r\nimport {DialogPosition} from './dialog-config';\r\nimport {CdkDialogContainer} from './dialog-container';\r\n\r\n/** Unique id for the created dialog. */\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Reference to a dialog opened via the Dialog service.\r\n */\r\nexport class DialogRef<T, R = any> {\r\n  /** The instance of the component in the dialog. */\r\n  componentInstance: T;\r\n\r\n  /** Whether the user is allowed to close the dialog. */\r\n  disableClose: boolean | undefined;\r\n\r\n  /** Result to be passed to afterClosed. */\r\n  private _result: R | undefined;\r\n\r\n  constructor(\r\n    public _overlayRef: OverlayRef,\r\n    protected _containerInstance: CdkDialogContainer,\r\n    readonly id: string = `dialog-${uniqueId++}`) {\r\n\r\n    // If the dialog has a backdrop, handle clicks from the backdrop.\r\n    if (_containerInstance._config.hasBackdrop) {\r\n      _overlayRef.backdropClick().subscribe(() => {\r\n        if (!this.disableClose) {\r\n          this.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    this.beforeClosed().subscribe(() => {\r\n      this._overlayRef.detachBackdrop();\r\n    });\r\n\r\n    this.afterClosed().subscribe(() => {\r\n      this._overlayRef.detach();\r\n      this._overlayRef.dispose();\r\n      this.componentInstance = null!;\r\n    });\r\n\r\n    // Close when escape keydown event occurs\r\n    _overlayRef.keydownEvents()\r\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\r\n      .subscribe(() => this.close());\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay's backdrop has been clicked. */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._overlayRef.backdropClick();\r\n  }\r\n\r\n  /**\r\n   * Close the dialog.\r\n   * @param dialogResult Optional result to return to the dialog opener.\r\n   */\r\n  close(dialogResult?: R): void {\r\n    this._result = dialogResult;\r\n    this._containerInstance._startExiting();\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's position.\r\n   * @param position New dialog position.\r\n   */\r\n  updatePosition(position?: DialogPosition): this {\r\n    let strategy = this._getPositionStrategy();\r\n\r\n    if (position && (position.left || position.right)) {\r\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n    } else {\r\n      strategy.centerHorizontally();\r\n    }\r\n\r\n    if (position && (position.top || position.bottom)) {\r\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n    } else {\r\n      strategy.centerVertically();\r\n    }\r\n\r\n    this._overlayRef.updatePosition();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when keydown events are targeted on the overlay.\r\n   */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._overlayRef.keydownEvents();\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's width and height, defined, min and max.\r\n   * @param size New size for the overlay.\r\n   */\r\n  updateSize(size: OverlaySizeConfig): this {\r\n    if (size.width) {\r\n      this._getPositionStrategy().width(size.width.toString());\r\n    }\r\n    if (size.height) {\r\n      this._getPositionStrategy().height(size.height.toString());\r\n    }\r\n    this._overlayRef.updateSize(size);\r\n    this._overlayRef.updatePosition();\r\n    return this;\r\n  }\r\n\r\n  /** Fetches the position strategy object from the overlay ref. */\r\n  private _getPositionStrategy(): GlobalPositionStrategy {\r\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog begins opening. */\r\n  beforeOpened(): Observable<void> {\r\n    return this._containerInstance._beforeEnter.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog is finished opening. */\r\n  afterOpened(): Observable<void> {\r\n    return this._containerInstance._afterEnter.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog begins closing. */\r\n  beforeClosed(): Observable<R | undefined> {\r\n    return this._containerInstance._beforeExit.pipe(map(() => this._result));\r\n  }\r\n\r\n  /** Gets an observable that emits when dialog is finished closing. */\r\n  afterClosed(): Observable<R | undefined> {\r\n    return this._containerInstance._afterExit.pipe(map(() => this._result));\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  TemplateRef,\r\n  SkipSelf,\r\n  Optional,\r\n  Injectable,\r\n  Injector,\r\n  Inject,\r\n  ComponentRef\r\n} from '@angular/core';\r\nimport {ComponentPortal, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {of as observableOf, Observable, Subject, defer} from 'rxjs';\r\nimport {DialogRef} from './dialog-ref';\r\nimport {Location} from '@angular/common';\r\nimport {DialogConfig} from './dialog-config';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {CdkDialogContainer} from './dialog-container';\r\nimport {\r\n  ComponentType,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n} from '@angular/cdk/overlay';\r\nimport {startWith} from 'rxjs/operators';\r\n\r\nimport {\r\n  DIALOG_SCROLL_STRATEGY,\r\n  DIALOG_DATA,\r\n  DIALOG_REF,\r\n  DIALOG_CONTAINER,\r\n  DIALOG_CONFIG,\r\n} from './dialog-injectors';\r\n\r\n\r\n/**\r\n * Service to open modal dialogs.\r\n */\r\n@Injectable()\r\nexport class Dialog {\r\n  /** Stream that emits when all dialogs are closed. */\r\n  get _afterAllClosed(): Observable<void> {\r\n    return this._parentDialog ? this._parentDialog.afterAllClosed : this._afterAllClosedBase;\r\n  }\r\n  _afterAllClosedBase = new Subject<void>();\r\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\r\n      this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));\r\n\r\n  /** Stream that emits when a dialog is opened. */\r\n  get afterOpened(): Subject<DialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpened;\r\n  }\r\n  _afterOpened: Subject<DialogRef<any>> = new Subject();\r\n\r\n  /** Stream that emits when a dialog is opened. */\r\n  get openDialogs(): DialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogs;\r\n  }\r\n  _openDialogs: DialogRef<any>[] = [];\r\n\r\n  constructor(\r\n      private overlay: Overlay,\r\n      private injector: Injector,\r\n      @Inject(DIALOG_REF) private dialogRefConstructor,\r\n      @Inject(DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\r\n      @Optional() @SkipSelf() private _parentDialog: Dialog,\r\n      @Optional() location: Location) {\r\n\r\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\r\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\r\n    // the user is using the `HashLocationStrategy`).\r\n    if (!_parentDialog && location) {\r\n      location.subscribe(() => this.closeAll());\r\n    }\r\n  }\r\n\r\n  /** Gets an open dialog by id. */\r\n  getById(id: string): DialogRef<any> | undefined {\r\n    return this._openDialogs.find(ref  => ref.id === id);\r\n  }\r\n\r\n  /** Closes all open dialogs. */\r\n  closeAll(): void {\r\n    this.openDialogs.forEach(ref => ref.close());\r\n  }\r\n\r\n  /** Opens a dialog from a component. */\r\n  openFromComponent<T>(component: ComponentType<T>, config?: DialogConfig): DialogRef<any> {\r\n    config = this._applyConfigDefaults(config);\r\n\r\n    if (config.id && this.getById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef = this._attachDialogContentForComponent(component, dialogContainer,\r\n      overlayRef, config);\r\n\r\n    this.registerDialogRef(dialogRef);\r\n    return dialogRef;\r\n  }\r\n\r\n  /** Opens a dialog from a template. */\r\n  openFromTemplate<T>(template: TemplateRef<T>, config?: DialogConfig): DialogRef<any> {\r\n    config = this._applyConfigDefaults(config);\r\n\r\n    if (config.id && this.getById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef = this._attachDialogContentForTemplate(template, dialogContainer,\r\n      overlayRef, config);\r\n\r\n    this.registerDialogRef(dialogRef);\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Forwards emitting events for when dialogs are opened and all dialogs are closed.\r\n   */\r\n  private registerDialogRef(dialogRef: DialogRef<any>): void {\r\n    this.openDialogs.push(dialogRef);\r\n\r\n    const dialogOpenSub = dialogRef.afterOpened().subscribe(() => {\r\n      this.afterOpened.next(dialogRef);\r\n      dialogOpenSub.unsubscribe();\r\n    });\r\n\r\n    const dialogCloseSub = dialogRef.afterClosed().subscribe(() => {\r\n      let dialogIndex = this._openDialogs.indexOf(dialogRef);\r\n\r\n      if (dialogIndex > -1) {\r\n        this._openDialogs.splice(dialogIndex, 1);\r\n      }\r\n\r\n      if (!this._openDialogs.length) {\r\n        this._afterAllClosedBase.next();\r\n        dialogCloseSub.unsubscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates an overlay config from a dialog config.\r\n   * @param config The dialog configuration.\r\n   * @returns The overlay configuration.\r\n   */\r\n  protected _createOverlay(config: DialogConfig): OverlayRef {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this.overlay.position().global(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: config.panelClass,\r\n      hasBackdrop: config.hasBackdrop,\r\n      direction: config.direction,\r\n      minWidth: config.minWidth,\r\n      minHeight: config.minHeight,\r\n      maxWidth: config.maxWidth,\r\n      maxHeight: config.maxHeight\r\n    });\r\n\r\n    if (config.backdropClass) {\r\n      overlayConfig.backdropClass = config.backdropClass;\r\n    }\r\n    return this.overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n   * @param overlay Reference to the dialog's underlying overlay.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to a ComponentRef for the attached container.\r\n   */\r\n  protected _attachDialogContainer(overlay: OverlayRef, config: DialogConfig): CdkDialogContainer {\r\n    const container = config.containerComponent || this.injector.get(DIALOG_CONTAINER);\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this.injector, new WeakMap([\r\n      [DialogConfig, config]\r\n    ]));\r\n    const containerPortal = new ComponentPortal(container, config.viewContainerRef, injector);\r\n    const containerRef: ComponentRef<CdkDialogContainer> = overlay.attach(containerPortal);\r\n    containerRef.instance._config = config;\r\n\r\n    return containerRef.instance;\r\n  }\r\n\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  protected _attachDialogContentForComponent<T>(\r\n      componentOrTemplateRef: ComponentType<T>,\r\n      dialogContainer: CdkDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: DialogConfig): DialogRef<any> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\r\n\r\n    const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n    const contentRef = dialogContainer.attachComponentPortal(\r\n        new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n    dialogRef.componentInstance = contentRef.instance;\r\n\r\n    dialogRef.updateSize({width: config.width, height: config.height})\r\n             .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  protected _attachDialogContentForTemplate<T>(\r\n      componentOrTemplateRef: TemplateRef<T>,\r\n      dialogContainer: CdkDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: DialogConfig): DialogRef<any> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\r\n\r\n    dialogContainer.attachTemplatePortal(\r\n      new TemplatePortal<T>(componentOrTemplateRef, null!,\r\n        <any>{$implicit: config.data, dialogRef}));\r\n    dialogRef.updateSize({width: config.width, height: config.height})\r\n             .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n   * of a dialog to close itself and, optionally, to return a value.\r\n   * @param config Config object that is used to construct the dialog.\r\n   * @param dialogRef Reference to the dialog.\r\n   * @param container Dialog container element that wraps all of the contents.\r\n   * @returns The custom injector that can be used inside the dialog.\r\n   */\r\n  private _createInjector<T>(\r\n      config: DialogConfig,\r\n      dialogRef: DialogRef<T>,\r\n      dialogContainer: CdkDialogContainer): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injectionTokens = new WeakMap<any, any>([\r\n      [this.injector.get(DIALOG_REF), dialogRef],\r\n      [this.injector.get(DIALOG_CONTAINER), dialogContainer],\r\n      [DIALOG_DATA, config.data]\r\n    ]);\r\n\r\n    if (config.direction &&\r\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\r\n      injectionTokens.set(Directionality, {\r\n        value: config.direction,\r\n        change: observableOf()\r\n      });\r\n    }\r\n\r\n    return new PortalInjector(userInjector || this.injector, injectionTokens);\r\n  }\r\n\r\n  /**\r\n   * Expands the provided configuration object to include the default values for properties which\r\n   * are undefined.\r\n   */\r\n  private _applyConfigDefaults(config?: DialogConfig): DialogConfig {\r\n    const dialogConfig = this.injector.get(DIALOG_CONFIG) as typeof DialogConfig;\r\n    return {...new dialogConfig(), ...config};\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {Dialog} from './dialog';\r\nimport {CdkDialogContainer} from './dialog-container';\r\nimport {DialogConfig} from './dialog-config';\r\nimport {DialogRef} from './dialog-ref';\r\nimport {\r\n  DIALOG_CONFIG,\r\n  DIALOG_CONTAINER,\r\n  DIALOG_REF,\r\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\r\n} from './dialog-injectors';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    CdkDialogContainer,\r\n  ],\r\n  declarations: [\r\n    CdkDialogContainer,\r\n  ],\r\n  providers: [\r\n    Dialog,\r\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n    {provide: DIALOG_REF, useValue: DialogRef},\r\n    {provide: DIALOG_CONTAINER, useValue: CdkDialogContainer},\r\n    {provide: DIALOG_CONFIG, useValue: DialogConfig},\r\n  ],\r\n  entryComponents: [CdkDialogContainer],\r\n})\r\nexport class DialogModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","throwDialogContentAlreadyAttachedError","Error","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","apply","DialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","minWidth","minHeight","maxWidth","maxHeight","data","ariaDescribedBy","ariaLabel","autoFocus","CdkDialogContainer","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_this","_super","_state","_elementFocusedBeforeDialogWasOpened","_focusTrap","nativeElement","_beforeEnter","Subject","_afterEnter","_beforeExit","_afterExit","tslib_1.__extends","defineProperty","ngOnDestroy","destroy","attachComponentPortal","portal","_portalHost","hasAttached","_savePreviouslyFocusedElement","attachTemplatePortal","_onAnimationStart","event","toState","next","fromState","_onAnimationDone","_autoFocusFirstTabbableElement","_returnFocusAfterDialog","_startExiting","markForCheck","Promise","resolve","then","focus","focusInitialElementWhenReady","hasMovedFocus","toFocus","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","trigger","state","style","opacity","transition","animate","host","[@dialog]","(@dialog.start)","(@dialog.done)","ChangeDetectorRef","undefined","decorators","Optional","Inject","DOCUMENT","propDecorators","_role","HostBinding","_tabindex","ViewChild","PortalHostDirective","uniqueId","DialogRef","_overlayRef","_containerInstance","id","backdropClick","subscribe","close","beforeClosed","detachBackdrop","afterClosed","detach","dispose","componentInstance","keydownEvents","pipe","filter","keyCode","ESCAPE","dialogResult","_result","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","size","toString","getConfig","beforeOpened","asObservable","afterOpened","map","DIALOG_SCROLL_STRATEGY","InjectionToken","DIALOG_DATA","DIALOG_REF","DIALOG_CONFIG","DIALOG_CONTAINER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","Dialog","injector","dialogRefConstructor","_scrollStrategy","_parentDialog","location","_afterAllClosedBase","afterAllClosed","defer","openDialogs","_afterAllClosed","startWith","_afterOpened","_openDialogs","closeAll","getById","find","ref","forEach","openFromComponent","component","config","_applyConfigDefaults","overlayRef","_createOverlay","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContentForComponent","registerDialogRef","openFromTemplate","_attachDialogContentForTemplate","push","dialogOpenSub","unsubscribe","dialogCloseSub","dialogIndex","indexOf","splice","overlayConfig","OverlayConfig","positionStrategy","global","scrollStrategy","direction","container","containerComponent","get","userInjector","viewContainerRef","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","attach","instance","componentOrTemplateRef","_createInjector","contentRef","TemplatePortal","$implicit","injectionTokens","Directionality","set","value","change","observableOf","dialogConfig","tslib_1.__assign","Injectable","Injector","SkipSelf","Location","ɵ0","ɵ1","ɵ2","NgModule","imports","CommonModule","OverlayModule","PortalModule","A11yModule","exports","declarations","providers","useValue","entryComponents","DialogModule"],"mappings":"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"}